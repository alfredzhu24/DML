!Changelog
!Change 001 - Made vendor invoice number required

TITLE POP_T_013,"Invoice/GRN Entry & Maintenance"

PROCEDURE_FORM POP_T_INV_GRN_MAINTENANCE(#P1)

        BEGIN_BLOCK COPYRIGHT_NOTICE
                !++
                !       ========================================================
                !
                !       (c) Copyright 1988-2009 CDC Software
                !       All Rights Reserved
                !
                !       This program is the proprietary and confidential
                !       information of CDC Software and may be used and
                !       disclosed only as authorized in a license agreement
                !       authorizing and controlling such use and disclosure
                !
                !       ========================================================
                !--
        END_BLOCK

        BEGIN_BLOCK PROGRAM_DESC
                !++
                !
                ! Program Name......... POP_T_INV_GRN_MAINTENANCE
                !
                ! Program Logic........ This program enables creation of POP invoices
                !                       from GRNs.
                ! FACILITY............. POP_T_013
                !           POP_T_013A
                !           POP_T_013B
                !           POP_T_013C
                !
                ! Input Parameters..... NONE
                !
                ! Output Parameters.... NONE
                !
                ! Pre-Conditions....... NONE
                !
                ! Post-Conditions...... NONE
                !
                ! Tables Accessed...... PURCHASE_INVOICES               WRITE
                !                       PURCHASE_INVOICE_LINES          WRITE
                !                       PURCHASE_INVOICE_GL_POSTINGS    WRITE
                !                       PURCHASE_INVOICE_TAX_DETAILS    WRITE
                !                       PURCHASE_REGISTER_LINES         WRITE
                !                       POP_INVOICE_TEN99_DETAILS       WRITE
                !                       AP_TRANSACTION_TYPES            WRITE
                !                       LINK_INV_PO                     WRITE
                !                       LINK_INV_GRN                    WRITE
                !                       GL_POSTINGS                     WRITE
                !                       POP_LINES                       WRITE
                !                       POP_LINE_DETAILS                WRITE
                !                       GOODS_RECEIVED_LINES            WRITE
                !                       GOODS_RECEIVED_LINE_DETAILS     WRITE
                !                       VENDORS                         WRITE
                !                       PURCHASE_REGISTER               WRITE
                !                       PRODUCT_MASTER_BY_VENDOR        WRITE
                !                       GOODS_RECEIVED_HEADERS          WRITE
                !
                ! Functions Used......  LB_ADDRESSES
                !                       LB_SECURITY_PERIODD_CHECK
                !                       LIB_L_DUE_DATE
                !                       LB_S_L_CURRENCY_RATES
        !           LB_L_TAX_CONTROLS
                !                       LB_UOM_CONVERSIONS
                !                       LB_TEN99_ANALYSIS
                !                       LB_EC_REPORTING
                !                       POP_L_ORDER_DISCOUNTS
                !                       LB_PAYMENT_DETAILS
                !                       POP_L_CRE_GLPS_VT
                !                       LB_TAX_FORMAT
                !                       GL_L_POSTINGS
                !                       LB_CHK_TAXABLE
                !                       LB_SECURITY_CODE_ACCESS
                !                       POP_L_TOLERANCE_CHECKING
                !                       POP_I_GOODS_RECEIVED
                !                       LB_CHK_TAX_FLAG
                !                       POP_R_INVOICE_AUDIT
                !
                !--
        END_BLOCK

        BEGIN_BLOCK MAIN
                !There are four valid values: GRN, N/A, DATE, MANUAL
                #SELECT_MODE = #P1
                BEGIN_CASE(#SELECT_MODE)
            CASE("GRN")
                #MAIN_TITLE=MESSAGE("P_33406")                      
            CASE("DATE")
                #MAIN_TITLE=MESSAGE("P_33407")                      
            CASE("MANUAL")
                #MAIN_TITLE=MESSAGE("P_33408")
            CASE ELSE
                #MAIN_TITLE=MESSAGE("P_33405")
            END_CASE
                PERFORM MAIN
                EXIT(%STATUS)
        END_BLOCK
END_FORM

FORM MAIN /ROW=3 /COL=2 /HEIGHT=21 /WIDTH=78 &
        /TITLE=(#MAIN_TITLE)

        BEGIN_BLOCK COMPANY_SETUP
                START_TRANSACTION READ_ONLY

                !
                ! Start a transaction to gain manual control over GEMbase
                !
                #COMPANY_CODE                   = PARAMETER("USER_COMPANY_CODE")
                #SECURITY_ACTIVE                = PARAMETER("COMPANY_SECURITY_ACTIVE")
                #SECURITY_LEVEL                 = PARAMETER("SECURITY_LEVEL")
                #NO                             = PARAMETER("LANGUAGE_NO")
                #YES                            = PARAMETER("LANGUAGE_YES")
                #LINE_TYPE_NONSTOCK             = PARAMETER("LINE_TYPE_NONSTOCK")
                #LINE_TYPE_STOCK                = PARAMETER("LINE_TYPE_STOCK")
                #STATUS_DELETE                  = PARAMETER("STATUS_DELETE")
                #STATUS_ACTIVE				  	= PARAMETER("STATUS_ACTIVE")    
                #PAYMENT_CODE_DATE              = PARAMETER("PAYMENT_CODE_DATE")
                #PAYMENT_CODE_PERIOD            = PARAMETER("PAYMENT_CODE_PERIOD")
                #CURRENCY_LEN                   = PARAMETER("SYS_CURRENCY_LENGTH")
                #DUE_CODE                       = PARAMETER("SYS_DUE_DATE")
                ! set default = A (show currency rate input at invoice = always)
                #CURRENCY_RATE_OVERRIDE         = PARAMETER("CURRENCY_OVERRIDE_ALWAYS")
                #ID                             = PARAMETER("FACILITY_ID")
                #COST_DECIMALS                  = PARAMETER("SYS_COST_ROUND")
                #PO                             = PARAMETER("MODULE_PO")
                #STATUS_MISMATCHED              = PARAMETER("BT_STATUS_CANCELLED")
                #STATUS_BACK                    = PARAMETER("STATUS_BACK")
                #STATUS_ABORT                   = PARAMETER("STATUS_EXIT")
                #STATUS_APPROVED                = PARAMETER("STATUS_APPROVED_1") 
                #STATUS_OPEN                    = PARAMETER("STATUS_OPEN_2") 
                #RE_STATUS                      = ""
                #VT_LOADED                      = ""
        
                ! PURCHASE_INVOICE_GL_POSTINGS
                #TABLE_NAME     = PARAMETER("POP_INVOICE")

                #TTYPE_IN                       = PARAMETER("TTYPE_IN")
                #DESC_LANG                      = GET_SCV("GEM_DB_LANGUAGE_CODE_1")
                #PRICING_METHOD_DEFAULT         = PARAMETER("PRICING_METHOD_DEFAULT")
                #PRICING_METHOD_EXCLUSIVE       = PARAMETER("PRICING_METHOD_EXCLUSIVE")
                #PRICING_METHOD_INCLUSIVE       = PARAMETER("PRICING_METHOD_INCLUSIVE")
                #PRICING_METHOD_OPTIONAL        = PARAMETER("PRICING_METHOD_OPTIONAL")

                #PRICING_METHOD                 = #PRICING_METHOD_DEFAULT

				#FUNCTION_ID                    = MESSAGE('PC_MAT_T_058')
				#PROC_CTRL_ACT_DELETE  			= 'DELETE'
				#PROC_CTRL_ACT_CHK_ADD  	    = 'CHECKANDADD'

				
                FIND IN COMPANY_CONTROLS &
                        /WITH=COMPANY_CODE = #COMPANY_CODE &
                        /LOCK=NONE

                IF (%STATUS=%FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_00139
                        EXIT(%FAILURE)
                END_IF

                #PRICING_METHOD_STATE   = COMPANY_CONTROLS(PRICING_METHOD_STATE)

                #NBR_PERIODS            = COMPANY_CONTROLS(TOTAL_NUMBER_PERIODS)
                #FUND_IN_USE            = COMPANY_CONTROLS(FUND_IN_USE)
                #BUDGETS_IN_BASE        = COMPANY_CONTROLS(SYS_BUDGETS_IN_BASE)                
                #USE_TAX_IN_USE         = COMPANY_CONTROLS(SYS_USE_TAX_IN_USE)
                #INC_POSTING_DATE       = COMPANY_CONTROLS(SYS_POSTING_DATE_REQD)
                #VALIDATE_POSTING_DATE  = COMPANY_CONTROLS(SYS_VALID_POSTING_DATE)
                #CO_TAX_ON_CASH         = COMPANY_CONTROLS(SYS_TAX_ON_CASH)
                #COMPANY_EC_REPORT_TYPE = ""
                #SYS_TAX_RETAINERS_FLAG_AP = COMPANY_CONTROLS(SYS_TAX_RETAINERS_FLAG_AP)
                #STORE_BASE_2           = COMPANY_CONTROLS(SYS_SECOND_BASE_IN_USE)

                IF (COMPANY_CONTROLS(SYS_EC_STATS_REQUIRED) = #YES)
                        IF (COMPANY_CONTROLS(SYS_SSD_PURCHASES_REQD) = #YES)
                                #COMPANY_EC_REPORT_TYPE = "B"
                        END_IF
                END_IF

                        ! Security. Get a string of all accessible Warehouses.
                        !
                PERFORM "GEMLB:LB_SECURITY_CODE_ACCESS" &
                        ((PARAMETER("MODULE_PO")), &
                         PARAMETER("ACCESS_TYPE_WAREHOUSE"), &
                         #ACCESSIBLE_WAREHOUSES)

                IF (%STATUS=%FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_10638
                        EXIT (%FAILURE)
                END_IF

                IF (#ACCESSIBLE_WAREHOUSES = "##NONE##")
                        MESSAGE/IDENTIFIER/BELL/WAIT P_10639,PARAMETER("MODULE_PO")
                        EXIT (%FAILURE)
                END_IF

                IF (#SECURITY_ACTIVE = #YES)
                        FIND IN SECURITY_TRAN_TYPES_VT &
                                /WITH=SOURCE_MODULE=(PARAMETER("MODULE_PO")) &
                                /WITH=SECURITY_TRANSACTION_TYPE=(PARAMETER("TTYPE_IN"))

                        IF (%STATUS = %FAILURE  OR SECURITY_TRAN_TYPES_VT(CREATE_TRANSACTIONS) <> #YES)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_00897,PARAMETER("TTYPE_IN")
                                EXIT
                        ELSE
                                #TRANSACTION_MAX = SECURITY_TRAN_TYPES_VT(MAXIMUM_VALUE)
                                #CURRENCY_RATE_OVERRIDE = SECURITY_TRAN_TYPES_VT(SYS_CURRENCY_OVERRIDE)
                        END_IF
                END_IF

                #AP_IN_USE = #NO
                PERFORM CHECK_MODULE_IN_USE ((PARAMETER('MODULE_AP')), #AP_IN_USE)

                FIND IN SYS_COUNTRIES &
                        /LOCK = NONE &
                        /WITH = SYS_COUNTRY = COMPANY_CONTROLS(SYS_COUNTRY)

                #DEF_DATE_MASK  = SYS_COUNTRIES(SYS_DATE_MASK)
        END_BLOCK
        
        BEGIN_BLOCK PA_SETUP
            ! return the pa in use flag
            PERFORM "GEMPA:PA_V_COMMON" PA_IN_USE(#COMPANY_CODE,#R_STATUS)
            IF ( #R_STATUS = %SUCCESS ) 
                #PA_IN_USE = #YES
            ELSE
                #PA_IN_USE = #NO
            END_IF
            COMMIT
        END_BLOCK
        
        MENU_BLOCK MAIN_MENU /ROW=7 /COL=26 &
                        /TITLE=("") &
                        /SOURCE=(MESSAGE("P_00255")) /NOREPEAT &
                        /ITEM=(MESSAGE("P_00255")),(MESSAGE("P_01453")),(#MAIN_OPT = "ENTRY") &
                        /ITEM=(MESSAGE("P_00405")),(MESSAGE("P_00424")),(#MAIN_OPT = "MODIFY") &
                        /ITEM=(MESSAGE("P_34026")),(MESSAGE("P_34122")),(#MAIN_OPT = "CANCEL") &
                        /ITEM=(MESSAGE("P_00257")),(MESSAGE("P_00263")),(EXIT)

        BEGIN_BLOCK CHOICE_ENTRY
                #ORIG_MAIN_OPT = #MAIN_OPT

                IF (#MAIN_OPT = "ENTRY")
                        PERFORM ENTRY
                        IF ( %STATUS = %FAILURE )
                            ! Invoice link records have not been created yet
                            #LINKS_REQUIRED = #NO
                            #TOLERANCE_IN_USE = #SAVE_TOLERANCE_IN_USE
                            PERFORM CANCEL_INVOICE

                            IF (%STATUS <> %NORMAL) EXIT(%STATUS)
                            END_IF

                        GOTO MAIN_MENU
                END_IF

                IF (#MAIN_OPT = "MODIFY")
                        BEGIN_CASE(#SELECT_MODE)
                            CASE("GRN")
                                #TITLE_1=MESSAGE("P_33400")                     
                            CASE("DATE")
                                #TITLE_1=MESSAGE("P_33401")                     
                            CASE("MANUAL")
                                #TITLE_1=MESSAGE("P_33402")
                            CASE ELSE
                                #TITLE_1=MESSAGE("P_33403")
                        END_CASE
                        PERFORM MODIFY
                        IF ( %STATUS = %FAILURE)
                        ! Invoice link records have not been created yet
                            #LINKS_REQUIRED = #YES
                            #TOLERANCE_IN_USE = #SAVE_TOLERANCE_IN_USE
                            PERFORM CANCEL_INVOICE
                            IF (%STATUS <> %NORMAL) EXIT(%STATUS)
                                                
                        END_IF 

                        GOTO MAIN_MENU
                END_IF

                IF (#MAIN_OPT = "CANCEL")
                        PERFORM CANCEL
                        GOTO MAIN_MENU
                END_IF
        END_BLOCK

END_FORM

PROCEDURE_FORM ENTRY
        ! 443612
        ! This "dummy" form is used to clear the screens that are created with
        ! the /REMAIN qualifier in the HEADER_ENTRY form.  Since the
        ! HEADER_ENTRY form is the initial input screen, these
        ! /REMAIN screens continue to accumulate.  If a user enters several
        ! invoices without leaving the program, the SHADOW Screen limit is
        ! reached.  This causes a problem with screens, which are
        ! created with the /REMAIN later in the program, to not be removed.

        BEGIN_BLOCK ENTRY_INPUT
            #RE_STATUS = ""
            #VT_LOADED = ""
            BEGIN_CASE(#SELECT_MODE)
                CASE("GRN")
                    #TITLE_1=MESSAGE("P_33394")                     
                CASE("DATE")
                    #TITLE_1=MESSAGE("P_33395")                     
                CASE("MANUAL")
                    #TITLE_1=MESSAGE("P_33396")
                CASE ELSE
                    #TITLE_1=MESSAGE("P_33404")
            END_CASE
            !Create purchase invoice from GRNs...
            !If the selection mode is "GRN" we can create single PO Invoice from multiple GRN'S 
            !selected by GRN Range...
            !If the selection mode is "DATE" we can create single PO Invoice from multiple GRN'S 
            !selected by Date Range...
            !If the selection mode is "MANUAL" we can create single PO Invoice from multiple GRN'S 
            !selected by manually selecting open GRN's...
            !If the selection mode is N/A we can create single PO Invoice from Single GRN                               
            IF ( (#SELECT_MODE = "GRN") OR (#SELECT_MODE = "DATE") OR (#SELECT_MODE = "MANUAL") )
                    PERFORM GRNS_ENTRY
                    IF (%STATUS = %NORMAL)
                IF ( #RE_STATUS    = %BACK) GOTO ENTRY_INPUT
                IF ( #CONFIRM_GRNS = #YES ) 
                    PERFORM HEADER_ENTRY
                ELSE
                    GOTO ENTRY_INPUT
                END_IF
                END_IF
            ELSE           
                PERFORM HEADER_ENTRY    
            END_IF      
        END_BLOCK

        BEGIN_BLOCK DO_AGAIN
                IF(     (%STATUS = %EXIT) OR &
                        (%STATUS = %BACK) OR &
                        (%STATUS = %FAILURE))

                        EXIT (%STATUS)
                ELSE
                        GOTO ENTRY_INPUT
                END_IF
        END_BLOCK
END_FORM

FORM GRNS_ENTRY /ROW=3 /COL=2 /HEIGHT=21 /WIDTH=78 &
        /TITLE=(#TITLE_1) 
        
    BEGIN_BLOCK INITIALIZE
        #VT_LOADED = #NO
        PERFORM SETUP_VALIDATIONS
    END_BLOCK
    
    BEGIN_BLOCK DIVISION
             
            INPUT_BLOCK /ROW=2 /COL=17 &
                    /PROMPT=(FIELD_PROMPT(DIVISION)) &
                    /TARGET=#DIVISION &
            /USING=PURCHASE_INVOICES(DIVISION) &
                    /LOV=SECURITY_PERIOD_ACCESS_VT(SYS_ACCESS_CODE,CODE_DESCRIPTION) &
                    /LOV_WITH=SYS_ACCESS_TYPE=(PARAMETER("ACCESS_TYPE_DIVISION")) &
                /LOV_WITH=SOURCE_MODULE=(PARAMETER("MODULE_PO")) &
                    /LOV_WITH=SYS_ALLOW_ACCESS=#YES &
            /USE_IF=(#MAIN_OPT<>"MODIFY")
             
        OUTPUT_BLOCK DIVISION_DIS /ROW=2 /COL=17 &
                /PROMPT=(FIELD_PROMPT(DIVISION)) &
                        /SOURCE=(#DIVISION) &
                /USE_IF=(#MAIN_OPT="MODIFY")
        END_BLOCK
            
    BEGIN_BLOCK EXTRACT_DIVISION
            FIND IN AP_CONTROLS &
                    /WITH=COMPANY_CODE=#COMPANY_CODE &
                    /WITH=AP_DIVISION=#DIVISION &
                    /LOCK=NONE

            IF (%STATUS = %FAILURE)
                    MESSAGE/IDENTIFIER/BELL/WAIT P_00354
                    GOTO DIVISION
            END_IF

            FIND IN SECURITY_PERIOD_ACCESS_VT &
                    /WITH=SYS_ACCESS_TYPE=(PARAMETER("ACCESS_TYPE_DIVISION")) &
                    /WITH=SYS_ACCESS_CODE= #DIVISION &
                    /WITH=SOURCE_MODULE=(PARAMETER("MODULE_PO")) &

            IF (%STATUS = %FAILURE)
                    MESSAGE/IDENTIFIER/BELL/WAIT P_00447
                    GOTO DIVISION
            END_IF

            IF (SECURITY_PERIOD_ACCESS_VT(SYS_ALLOW_ACCESS) <> #YES)
                    MESSAGE/IDENTIFIER/BELL/WAIT P_00756
                    GOTO DIVISION
            END_IF
            
        #BASE_CURRENCY_CODE             = AP_CONTROLS(SYS_CURRENCY_CODE)
            #CURRENCY_METHOD                = AP_CONTROLS(SYS_CURRENCY_METHOD)                      
        #CURRENT_YEAR                   = AP_CONTROLS(POP_CURRENT_YEAR)
            #CURRENT_PERIOD                 = AP_CONTROLS(POP_CURRENT_PERIOD)
        #FREIGHT_TAXABLE                = AP_CONTROLS(FREIGHT_TAXABLE)
            #MISC_TAXABLE                   = AP_CONTROLS(MISCELLANEOUS_TAXABLE)
            
    END_BLOCK
        
    OUTPUT_BLOCK DIVISION_DESC /ROW=2 /COL=20 &
                    /SOURCE=(SECURITY_PERIOD_ACCESS_VT(CODE_DESCRIPTION))
                    
    BEGIN_BLOCK GET_BASE_CURRENCY
                FIND IN SYS_CURRENCY_CODES &
                        /LOCK=NONE &
                    /WITH=SYS_CURRENCY_CODE=#BASE_CURRENCY_CODE

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_82400
                        EXIT (%FAILURE)
                END_IF
            
            #BASE_CURRENCY_DESC = SYS_CURRENCY_CODES(SYS_CODE_DESCRIPTION)
    END_BLOCK

    OUTPUT_BLOCK BASE_CURRENCY /ROW=3 /COL=17 &
            /PROMPT=(FIELD_PROMPT(PURCHASE_INVOICES,SYS_BASE_CURRENCY_CODE)) &
        /SOURCE=(#BASE_CURRENCY_CODE) &
        /USING=SYS_CURRENCY_CODES(SYS_CURRENCY_CODE)

    OUTPUT_BLOCK BASE_CURRENCY_DESC /ROW=3 /COL=24 &
        /SOURCE=(#BASE_CURRENCY_DESC) &
        /USING=SYS_CURRENCY_CODES(SYS_CODE_DESCRIPTION)

    BEGIN_BLOCK VENDOR_NUMBER 
            
        INPUT_BLOCK /ROW=4 /COL=17 &
            /PROMPT=(FIELD_PROMPT(VENDOR_NUMBER)) &
            /TARGET=#VENDOR_NUMBER &
            /USING=VENDORS(VENDOR_NUMBER) &
            /LOV=VENDORS(VENDOR_NUMBER,VENDOR_NAME) &
            /LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
            /LOV_WITH=AP_DIVISION=#DIVISION &
            /LOV_WITH=ACTIVATION_STATUS=#STATUS_ACTIVE &
            /USE_IF=(#MAIN_OPT<>"MODIFY")
        
        OUTPUT_BLOCK VENDOR_NUMBER_DIS /ROW=4 /COL=17 &
            /PROMPT=(FIELD_PROMPT(VENDOR_NUMBER)) &
            /SOURCE=#VENDOR_NUMBER &
            /USE_IF=(#MAIN_OPT="MODIFY")
        
    END_BLOCK
                
    BEGIN_BLOCK SETUP
        FIND IN VENDORS &
            /WITH=COMPANY_CODE=#COMPANY_CODE &
            /WITH=AP_DIVISION=#DIVISION &
            /WITH=VENDOR_NUMBER=#VENDOR_NUMBER &
            /LOCK=NONE
    
        IF (%STATUS = %FAILURE)
            MESSAGE/IDENTIFIER/BELL/WAIT P_00360
            GOTO VENDOR_NUMBER
        END_IF
        
		IF ( VENDORS(ACTIVATION_STATUS)	= #STATUS_DELETE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_00658
				GOTO VENDOR_NUMBER
		END_IF

        IF ( VENDORS(ACTIVATION_STATUS)	<> #STATUS_ACTIVE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_09157, #VENDOR_NUMBER
				GOTO VENDOR_NUMBER
		END_IF

        
        #SUPP_CURRENCY_CODE      = VENDORS(SYS_CURRENCY_CODE)
        #VENDOR_NAME             = VENDORS(VENDOR_NAME)
        #SUPP_CREDIT_TERMS_CODE  = VENDORS(CREDIT_TERMS_CODE)
        #VENDOR_ORDER_DISC_GRP   = VENDORS(ORDER_DISCOUNT_GROUP)
        #VENDOR_TAXABLE_CODE     = VENDORS(SYS_TAXABLE_CODE)
        
        FIND IN SYS_COUNTRIES &
            /LOCK=NONE &
            /WITH=SYS_COUNTRY=VENDORS(SYS_COUNTRY)
        
        #PHONE_MASK = SYS_COUNTRIES(SYS_PHONE_MASK) 
    
    END_BLOCK

    
    OUTPUT_BLOCK VENDOR_NAME /ROW=4 /COL=30 &
            /SOURCE=(VENDORS(VENDOR_NAME)) &
            /USING=VENDORS(VENDOR_NAME)
            
    BEGIN_BLOCK GET_SUPP_CURRENCY
            FIND IN SYS_CURRENCY_CODES &
                        /LOCK=NONE &
                        /WITH=SYS_CURRENCY_CODE=#SUPP_CURRENCY_CODE

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_82400
                        EXIT (%FAILURE)
                END_IF
            
            #SUPP_CURRENCY_DESC = SYS_CURRENCY_CODES(SYS_CODE_DESCRIPTION)
    END_BLOCK


        OUTPUT_BLOCK SUPP_CURRENCY /ROW=5 /COL=17 &
            /PROMPT=(FIELD_PROMPT(SYS_CURRENCY_CODE)) &
        /SOURCE=(#SUPP_CURRENCY_CODE) &
        /USING=SYS_CURRENCY_CODES(SYS_CURRENCY_CODE)

    OUTPUT_BLOCK SUPP_CURRENCY_DESC /ROW=5 /COL=24 &
        /SOURCE=(#SUPP_CURRENCY_DESC) &
        /USING=SYS_CURRENCY_CODES(SYS_CODE_DESCRIPTION)

        
    BEGIN_BLOCK DISPLAY_ADDRESS
        PERFORM "GEMLB:LB_ADDRESSES" (&
            "D", &
            (SYS_COUNTRIES(SYS_COUNTRY)), &
            "VENDORS", &
            "9", &
            "24", &
            "", &
            "", &
            "", &
            "", &
            "", &
            #R1, &
            #R2, &
            #R3, &
            #R4, &
            #R5)
    END_BLOCK

    OUTPUT_BLOCK PHONE /ROW=10 /COL=23 /LEN=21 &
        /PROMPT=(FIELD_PROMPT(PHONE)) &
        /SOURCE=(VENDORS(PHONE)) &
        /OUTPUT_MASK=(#PHONE_MASK)

    OUTPUT_BLOCK VENDOR_CONTACT /ROW=11 /COL=23 &
        /PROMPT=(FIELD_PROMPT(VENDOR_CONTACT)) &
        /SOURCE=(VENDORS(VENDOR_CONTACT))

    OUTPUT_BLOCK EXT /ROW=12 /COL=23 &
        /PROMPT=(FIELD_PROMPT(TELEPHONE_EXT)) &
        /SOURCE=(VENDORS(TELEPHONE_EXT))
            
    !Choose the currency use to create the po invoice
    BEGIN_BLOCK USE_CURRENCY_CODE 
     
        INPUT_BLOCK /ROW=14 /COL=17 &
            /PROMPT=(FIELD_PROMPT(SYS_CURRENCY_CODE)) &
            /TARGET=#USE_CURRENCY_CODE &
            /USING=SYS_CURRENCY_CODES(SYS_CURRENCY_CODE), REQUIRED &
            /LOV=SYS_CURRENCY_CODES(SYS_CURRENCY_CODE,SYS_CODE_DESCRIPTION) &
            /LOV_WITH=ACTIVATION_STATUS=(PARAMETER("STATUS_ACTIVE")) &
            /USE_IF=(#MAIN_OPT<>"MODIFY")
        
        OUTPUT_BLOCK /ROW=14 /COL=17 &
            /PROMPT=(FIELD_PROMPT(SYS_CURRENCY_CODE)) &
            /SOURCE=#USE_CURRENCY_CODE &
            /USE_IF=(#MAIN_OPT="MODIFY")
    
    END_BLOCK
        
    BEGIN_BLOCK GET_CURRENCY
                FIND IN SYS_CURRENCY_CODES &
                    /LOCK=NONE &
                    /WITH=SYS_CURRENCY_CODE=#USE_CURRENCY_CODE

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_82400
                        GOTO USE_CURRENCY_CODE
                END_IF
        #USE_CURRENCY_DESC  = SYS_CURRENCY_CODES(SYS_CODE_DESCRIPTION)
    END_BLOCK
        
        OUTPUT_BLOCK USE_CURRENCY_DESC /ROW=14 /COL=24 &
        /SOURCE=(#USE_CURRENCY_DESC) &
        /USING=SYS_CURRENCY_CODES(SYS_CODE_DESCRIPTION)
            
    BEGIN_BLOCK GRNS
        #GRN_NUMBERS = ""
    END_BLOCK
    
    INPUT_BLOCK GRN_NUMERS /ROW=15 /COL=17 &
            /PROMPT=(FIELD_PROMPT(GRN_NUMBER)) &
            /TARGET=#GRN_NUMBERS &
            /TITLE=(FIELD_PROMPT(GRN_NUMBER)) &
            /USING=GOODS_RECEIVED_HEADERS(GRN_NUMBER),MULTIPLE &
            /LOV=GRN_WITH_LINES_TO_INVOICE(GRN_NUMBER,PO_NUMBER,VENDOR_REFERENCE,PART_CODE,RECEIVED_DATE) &
            /LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
            /LOV_WITH=DIVISION=#DIVISION  &
        /LOV_WITH=VENDOR_NUMBER=#VENDOR_NUMBER &
        /LOV_WITH=SYS_CURRENCY_CODE=#USE_CURRENCY_CODE &
        /LOV_SORTED_BY=GRN_NUMBER,PART_CODE &           
        /USE_IF=(#SELECT_MODE="GRN")
    
    INPUT_BLOCK RECEIVED_DATE /ROW=16 /COL=17 &
        /TITLE=(FIELD_PROMPT(RECEIVED_DATE)) &
        /PROMPT=(FIELD_PROMPT(RECEIVED_DATE)) &
        /TARGET=#RECEIVED_DATES &
        /USING=GOODS_RECEIVED_HEADERS(RECEIVED_DATE),MULTIPLE &
        /USE_IF=(#SELECT_MODE="DATE")
        
    BEGIN_BLOCK VT_LOADED
        #VT_LOADED  = #NO
    END_BLOCK
            
    BEGIN_BLOCK PAUSE
        PAUSE_BLOCK /ROW=17 /COL=60 &
            /USE_IF= (#MAIN_OPT <> "MODIFY")
    END_BLOCK
    
    BEGIN_BLOCK LOAD_GRNS
        PERFORM LOAD_GRNS (#VT_LOADED)
        IF(#RE_STATUS = #STATUS_BACK ) 
            #RE_STATUS = ""
            #GRN_NUMBER= ""
            IF (#MAIN_OPT = "MODIFY") GOTO THE_END
            IF (#MAIN_OPT = "ENTRY")  GOTO DIVISION
        END_IF
    END_BLOCK                   
    
    BEGIN_BLOCK CONFIRM_SELECTION
        PERFORM GRNS_INVOICE
        IF(%STATUS = %BACK) #RE_STATUS = #STATUS_BACK
        BEGIN_CASE (#RE_STATUS)
            CASE (#STATUS_ABORT)
                #RE_STATUS  = ""
                #GRN_NUMBER = ""
                IF ( #MAIN_OPT = "MODIFY" ) GOTO THE_END
                GOTO DIVISION
            CASE (#STATUS_BACK)
                #RE_STATUS = ""
                #VT_LOADED = #YES
                GOTO LOAD_GRNS
            CASE (%BACK)
                #RE_STATUS = ""
                #VT_LOADED = #YES
                GOTO LOAD_GRNS
        END_CASE
    END_BLOCK
    
    BEGIN_BLOCK THE_END
    END_BLOCK
    
END_FORM

PROCEDURE_FORM LOAD_GRNS (#P1)
    
    BEGIN_BLOCK SETUP
            #VT_LOADED = #P1
            ! Set this variable for to set the selected status... 
            #TEMP_USE = #NO
            BEGIN_CASE(#SELECT_MODE)
                CASE("GRN")
                    #SELECTS = "A AND B AND C AND D AND E"
                CASE("DATE")
                        #SELECTS = "A AND B AND C AND D AND E AND F"
                    CASE("MANUAL")          
                    #SELECTS = "A AND B AND C AND E"    
            END_CASE
    END_BLOCK
    
    BEGIN_BLOCK LOAD_VT 
            IF(#VT_LOADED = #NO)        
                ! Empty the grn_header_vt before wirte records for it
                    DELETE ALL FROM GRN_HEADER_VT
                COMMIT
                PERFORM LOAD_GRN_RECORDS
            END_IF
    END_BLOCK
    
    BEGIN_BLOCK GRN_SELECT
            BEGIN_CASE(#SELECT_MODE)
                CASE("GRN" OR "MANUAL")
                    #SORT1 = "STATUS_FLAG"
                        #SORT2 = "GRN_NUMBER"
                    #SORT3 = "RECEIVED_DATE"
                CASE("DATE")
                    #SORT1 = "STATUS_FLAG"
                    #SORT2 = "RECEIVED_DATE"
                        #SORT3 = "GRN_NUMBER"   
            END_CASE
            #SELECTS1 = "A AND B AND C AND D"
            #TITLE1=MESSAGE("P_60085",#VENDOR_NAME)
            !Initial mismatch heading
        IF (#SELECT_MODE <> "MANUAL") 
            #MISMATCH_HEADING = MESSAGE("P_33463")
        ELSE
            #MISMATCH_HEADING = ""
        END_IF
        
            PERFORM GRNS_TABLE_LIST
            IF ( %STATUS = %BACK ) #RE_STATUS= #STATUS_BACK
    END_BLOCK
    
END_FORM

FORM GRNS_INVOICE /ROW=15 /COL=57 /WIDTH=15 /HEIGHT=3 &
    /ATTRIBUTES=NOBORDER
    
    BEGIN_BLOCK GET_GRNS
        #I=0
        #GRN_NUMBER=""
        #CONFIRM_GRNS = #NO
        
            PERFORM LOAD_GRN_NUMBERS
        
        IF ( #MAIN_OPT<>"MODIFY" )   
            #GET_PERCENT = #YES
            #RECORDS=0
            START_STREAM PERCENT &
                /TABLE=POP_HEADERS &
                /LOCK=NONE &
                /WITH=COMPANY_CODE=#COMPANY_CODE &
                /WITH=DIVISION=#DIVISION &
                /WITH=PO_NUMBER AMONG #PO_NUMBERS &
                /GROUPED_BY=(COMPANY_CODE,DIVISION,ORDER_DISCOUNT_PERCENT) &
                /SORTED_BY=(COMPANY_CODE,DIVISION,ORDER_DISCOUNT_PERCENT)
                                            
            WHILE (1) 
            FETCH PERCENT /FAILURE=(CONTINUE OUT) 
                #RECORDS=#RECORDS+1
            END_WHILE
            IF ( #RECORDS>1 ) #GET_PERCENT=#NO 
        END_IF 
    END_BLOCK 
    
    MENU_BLOCK CREATE_MENU /ROW=1 /COL=3 &
            /NOREPEAT &
            /BACK=(EXIT) &
            /EXIT=(EXIT) &
            /ITEM_IF=(#MAIN_OPT<>"MODIFY" AND #GRN_NUMBER<>""),(MESSAGE("P_00116")),(""),(GOTO CONFIRM_GRNS) &
        /ITEM_IF=(#MAIN_OPT="MODIFY" AND #GRN_NUMBER<>""),(MESSAGE("P_00109")),(""),(GOTO CONFIRM_GRNS) &
        /ITEM=(MESSAGE("P_14019")),(""),(#RE_STATUS= #STATUS_BACK) &
        /ITEM=(MESSAGE("P_01770")),(""),(#RE_STATUS= #STATUS_ABORT)
                
    BEGIN_BLOCK CONFIRM_GRNS
        #CONFIRM_GRNS = #YES
    END_BLOCK
    
    BEGIN_BLOCK THE_END     
    END_BLOCK 
                
END_FORM

PROCEDURE_FORM LOAD_GRN_RECORDS &
        /TABLE=GOODS_RECEIVED_HEADERS &
        /WITH=COMPANY_CODE=#COMPANY_CODE &
        /WITH=DIVISION=#DIVISION &
    /WITH=VENDOR_NUMBER=#VENDOR_NUMBER &
        /WITH=GRN_NUMBER AMONG #GRN_NUMBERS &
    /WITH=SYS_CURRENCY_CODE = #USE_CURRENCY_CODE &
    /WITH=RECEIVED_DATE AMONG #RECEIVED_DATES &
    /SELECTION=(#SELECTS)
                
    BEGIN_BLOCK GRN_NUMBER
        
                #LOAD_GRN_NUMBER             = GOODS_RECEIVED_HEADERS(GRN_NUMBER)
        #LOAD_DEFAULT_PO_NUMBER      = GOODS_RECEIVED_HEADERS(DEFAULT_PO_NUMBER)
        #LOAD_ADDRESS_CODE           = GOODS_RECEIVED_HEADERS(DEF_DELIVERY_ADDRESS_CODE)
        #LOAD_RECEIVED_DATE          = GOODS_RECEIVED_HEADERS(RECEIVED_DATE)
                
        #LOAD_SYS_CURRENCY_CODE      = GOODS_RECEIVED_HEADERS(SYS_CURRENCY_CODE)
        #LOAD_SYS_BASE_CURRENCY_CODE = GOODS_RECEIVED_HEADERS(SYS_BASE_CURRENCY_CODE)
                
        #LOAD_VENDOR_REFERENCE       = GOODS_RECEIVED_HEADERS(VENDOR_REFERENCE)
        #LOAD_VENDOR_NUMBER          = GOODS_RECEIVED_HEADERS(VENDOR_NUMBER)
        #LOAD_VENDOR_ADDRESS_CODE    = GOODS_RECEIVED_HEADERS(VENDOR_ADDRESS_CODE)
                
        #LOAD_POP_COPY               = GOODS_RECEIVED_HEADERS(POP_COPY)
        #LOAD_INVOICE_COPY           = GOODS_RECEIVED_HEADERS(INVOICE_COPY)
        #LOAD_FREIGHT_TAX_CODE       = ""
                #LOAD_MISC_TAX_CODE          = ""
        #LOAD_INTERCOMPANY_POSTINGS  = #NO
        
        !Mismatched GRN will be set flag 'X' when select mode are "GRN" or "DATE"..
        IF ( #SELECT_MODE="MANUAL" ) 
            #LOAD_STATUS_FLAG        = #NO
        ELSE
            #LOAD_STATUS_FLAG        = #STATUS_MISMATCHED   
        END_IF
                
        #LOAD_SYS_FREIGHT_TAXABLE_CODE = #VENDOR_TAXABLE_CODE
        #LOAD_SYS_MISC_TAXABLE_CODE    = #VENDOR_TAXABLE_CODE
                
        #LOAD_ORDER_DISC_GRP           = #VENDOR_ORDER_DISC_GRP

                ! try to find a line on the GRN which has some quantity
                ! processed (put away)
                FIND IN GOODS_RECEIVED_LINE_QTYS &
                        /LOCK=NONE &
            /SECONDARY &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=GRN_NUMBER=#LOAD_GRN_NUMBER &
                        /WITH=GRN_QTY_IN_INVENTORY > 0.0

                IF (%STATUS = %FAILURE)
                         GOTO NEXT
                END_IF

                FIND IN GOODS_RECEIVED_DETAIL_QTYS &
                        /LOCK=NONE &
            /SECONDARY &
                        /WITH=COMPANY_CODE = #COMPANY_CODE &
                        /WITH=DIVISION = #DIVISION &
                        /WITH=GRN_NUMBER = #LOAD_GRN_NUMBER  &
                        /WITH=GRN_QTY_TO_INVOICE > 0.0

                IF (%STATUS = %FAILURE)
                        GOTO NEXT
                END_IF

                !++
                ! If Use Tax is in use, then retrieve the accrual account
                ! information from the relevant CORPORATE_ADDRESS record
                ! based on the GRN header delivery address code.
                !--

                IF ((#USE_TAX_IN_USE = PARAMETER("LANGUAGE_YES")) AND &
                    (#LOAD_ADDRESS_CODE <> ""))

                        FIND IN CORPORATE_ADDRESSES &
                                /LOCK = NONE &
                /SECONDARY &
                /STREAM_NAME=CA &
                                /WITH = COMPANY_CODE = #COMPANY_CODE &
                                /WITH = DIVISION = #DIVISION &
                                /WITH = ADDRESS_CODE = #LOAD_ADDRESS_CODE

                        IF (%STATUS <> %NORMAL)
                                MESSAGE/IDENTIFIER/WAIT/BELL P_02789
                                GOTO NEXT
                        ELSE
                                IF (CA:CORPORATE_ADDRESSES(TAXABLE) = PARAMETER("LANGUAGE_YES"))
                                        IF (CA:CORPORATE_ADDRESSES(SYS_TAX_ACCRUAL_CODE) = "" AND &
                                            CA:CORPORATE_ADDRESSES(SYS_TAX_ACCRUAL_FULL_ACCOUNT) = "")
                                                MESSAGE/IDENTIFIER/WAIT/BELL P_82975
                                                GOTO NEXT
                                        END_IF
                                END_IF
                        END_IF
                END_IF

        END_BLOCK
        
        BEGIN_BLOCK FIND_PO_HEADER
                FIND IN POP_HEADERS &
                        /LOCK = NONE &
            /SECONDARY &
            /STREAM_NAME=PH1 &
                        /WITH = COMPANY_CODE = #COMPANY_CODE &
                        /WITH = DIVISION = #DIVISION &
                        /WITH = PO_NUMBER = #LOAD_DEFAULT_PO_NUMBER

                IF (%STATUS = %FAILURE)
                        MESSAGE/BELL/IDENTIFIER/WAIT P_52168, #LOAD_DEFAULT_PO_NUMBER
                        GOTO NEXT
        ELSE
            #LOAD_PRICING_METHOD   =  PH1:POP_HEADERS(PRICING_METHOD)
            #DEF_INVOICE_ADDRESS_CODE = PH1:POP_HEADERS(DEF_INVOICE_ADDRESS_CODE)
                    
            #LOAD_POP_COMMITMENT_PERIOD = PH1:POP_HEADERS(POP_COMMITMENT_PERIOD)
            #LOAD_POP_COMMITMENT_YEAR   = PH1:POP_HEADERS(POP_COMMITMENT_YEAR)
            #LOAD_ORDER_DISC_GRP        = PH1:POP_HEADERS(ORDER_DISCOUNT_GROUP)
                    
            IF ( #LOAD_POP_COPY = #YES ) 
                #LOAD_CREDIT_TERMS_CODE = PH1:POP_HEADERS(CREDIT_TERMS_CODE)
                #LOAD_FREIGHT_TAX_CODE  = PH1:POP_HEADERS(FREIGHT_TAX_CODE)
                            #LOAD_MISC_TAX_CODE     = PH1:POP_HEADERS(MISC_TAX_CODE)
                        
                #LOAD_SYS_FREIGHT_TAXABLE_CODE = PH1:POP_HEADERS(SYS_FREIGHT_TAXABLE_CODE)
                #LOAD_SYS_MISC_TAXABLE_CODE    = PH1:POP_HEADERS(SYS_MISC_TAXABLE_CODE)
                        
                IF ( PH1:POP_HEADERS(INTERCOMPANY_POSTINGS)= #YES ) #LOAD_INTERCOMPANY_POSTINGS = PH1:POP_HEADERS(INTERCOMPANY_POSTINGS)

            END_IF        
                END_IF

        END_BLOCK
        
    BEGIN_BLOCK LOAD_CHECK
        IF ( #LOAD_CREDIT_TERMS_CODE="" )  #LOAD_CREDIT_TERMS_CODE = #SUPP_CREDIT_TERMS_CODE
        IF ( #LOAD_PRICING_METHOD = #PRICING_METHOD_DEFAULT )  #LOAD_PRICING_METHOD = #PRICING_METHOD_EXCLUSIVE
        IF ( #LOAD_SYS_FREIGHT_TAXABLE_CODE="" )  #LOAD_SYS_FREIGHT_TAXABLE_CODE = #NO
        IF ( #LOAD_SYS_MISC_TAXABLE_CODE="" )  #LOAD_SYS_MISC_TAXABLE_CODE = #NO        
    END_BLOCK 

        BEGIN_BLOCK  WRITE_RECORDS
                       
                CLEAR_BUFFER GRN_HEADER_VT
            
        GRN_HEADER_VT(COMPANY_CODE)             = #COMPANY_CODE
        GRN_HEADER_VT(DIVISION)                 = #DIVISION
        GRN_HEADER_VT(GRN_NUMBER)               = #LOAD_GRN_NUMBER
        GRN_HEADER_VT(DEFAULT_PO_NUMBER)        = #LOAD_DEFAULT_PO_NUMBER
                            
        GRN_HEADER_VT(SYS_CURRENCY_CODE)        = #LOAD_SYS_CURRENCY_CODE
        GRN_HEADER_VT(SYS_BASE_CURRENCY_CODE)   = #LOAD_SYS_BASE_CURRENCY_CODE
        GRN_HEADER_VT(DEF_INVOICE_ADDRESS_CODE) = #DEF_INVOICE_ADDRESS_CODE                 
        GRN_HEADER_VT(RECEIVED_DATE)            = #LOAD_RECEIVED_DATE
        GRN_HEADER_VT(STATUS_FLAG)              = #LOAD_STATUS_FLAG
                            
        GRN_HEADER_VT(VENDOR_REFERENCE)         = #LOAD_VENDOR_REFERENCE
        GRN_HEADER_VT(VENDOR_NUMBER)            = #LOAD_VENDOR_NUMBER                   
        GRN_HEADER_VT(VENDOR_ADDRESS_CODE)      = #LOAD_VENDOR_ADDRESS_CODE
        
        GRN_HEADER_VT(POP_COPY)                 = #LOAD_POP_COPY
        GRN_HEADER_VT(INVOICE_COPY)             = #LOAD_INVOICE_COPY
        
        GRN_HEADER_VT(CREDIT_TERMS_CODE)        = #LOAD_CREDIT_TERMS_CODE
        GRN_HEADER_VT(PRICING_METHOD)           = #LOAD_PRICING_METHOD
        GRN_HEADER_VT(INTERCOMPANY_POSTINGS)    = #LOAD_INTERCOMPANY_POSTINGS
        
        GRN_HEADER_VT(ORDER_DISCOUNT_GROUP)     = #LOAD_ORDER_DISC_GRP
        GRN_HEADER_VT(FREIGHT_TAX_CODE)         = #LOAD_FREIGHT_TAX_CODE
        GRN_HEADER_VT(MISC_TAX_CODE)            = #LOAD_MISC_TAX_CODE                   
        GRN_HEADER_VT(SYS_FREIGHT_TAXABLE_CODE) = #LOAD_SYS_FREIGHT_TAXABLE_CODE
        GRN_HEADER_VT(SYS_MISC_TAXABLE_CODE)    = #LOAD_SYS_MISC_TAXABLE_CODE
        
        GRN_HEADER_VT(POP_COMMITMENT_PERIOD)    = #LOAD_POP_COMMITMENT_PERIOD
        GRN_HEADER_VT(POP_COMMITMENT_YEAR)      = #LOAD_POP_COMMITMENT_YEAR
    END_BLOCK
    
    BEGIN_BLOCK ENTRY_OPT                               
        !If #SELECT_MODE is "GRN" or "DATE" range the first entered valid GRN will be marked selected status as "Y"
        !The others GRNs compare to the GRN with status is "Y" if valid with below conditions then set the selected
        !status as "Y" too...
            IF ( #SELECT_MODE<>"MANUAL" AND #MAIN_OPT<>"MODIFY" )                       
            IF ( #TEMP_USE <> #YES )                                        
                FIND IN GRN_HEADER_VT &
                    /LOCK= NONE &
                /SECONDARY &
                /STREAM_NAME=CHECK &
                /WITH=COMPANY_CODE=#COMPANY_CODE &
                    /WITH=DIVISION=#DIVISION &
                    /WITH=VENDOR_NUMBER=#VENDOR_NUMBER &
                /WITH=SYS_CURRENCY_CODE=#USE_CURRENCY_CODE &
                /WITH=GRN_NUMBER AMONG #GRN_NUMBERS &
                /WITH=STATUS_FLAG=#YES
                    
                IF ( %STATUS<>%SUCCESS ) 
                    GRN_HEADER_VT(STATUS_FLAG) = #YES
                    #TEMP_USE = #YES
                    PERFORM SAVE_MATCHED_VALUES("GRN_HEADER_VT")
                END_IF
            ELSE
                #TEMP_FLAG = #STATUS_MISMATCHED
                PERFORM CHECK_GRN_FLAG("GRN_HEADER_VT",#NO, #TEMP_FLAG, #RS_MSG)
                GRN_HEADER_VT(STATUS_FLAG) = #TEMP_FLAG 
                IF(#SELECT_MODE<>"MANUAL") 
                    GRN_HEADER_VT(CARRIER_REFERENCE) = #MISMATCH_CODES(#VALIDATION_COUNT)
                END_IF        
            END_IF
        END_IF
    END_BLOCK
    
        !add GRNs for modify purchase invoice...
    BEGIN_BLOCK MODIFY_OPT
        IF ( #MAIN_OPT="MODIFY" AND #SELECT_MODE<>"MANUAL")
            #TEMP_FLAG = #STATUS_MISMATCHED
            PERFORM CHECK_GRN_FLAG("GRN_HEADER_VT",#NO, #TEMP_FLAG, #RS_MSG)
            GRN_HEADER_VT(STATUS_FLAG) = #TEMP_FLAG
            IF(#SELECT_MODE<>"MANUAL") 
                GRN_HEADER_VT(CARRIER_REFERENCE) = #MISMATCH_CODES(#VALIDATION_COUNT)
            END_IF              
        END_IF 
        
    END_BLOCK 
    
    BEGIN_BLOCK ADD_GRN              
                ADD TO GRN_HEADER_VT                
        END_BLOCK
        
    BEGIN_BLOCK NEXT        
    END_BLOCK
         
END_FORM

TABLE_FORM GRNS_TABLE_LIST /ROW=3 /COL=2 /HEIGHT=21 /WIDTH=78 &
    /TITLE=(#TITLE1) &
    /OPTIONS=NOINSERT,NODELETE &
    /TABLE=GRN_HEADER_VT &
    /WITH=COMPANY_CODE=#COMPANY_CODE &
    /WITH=DIVISION=#DIVISION &
    /WITH=VENDOR_NUMBER=#VENDOR_NUMBER &
    /WITH=SYS_CURRENCY_CODE=#USE_CURRENCY_CODE &
    /WITH=STATUS_FLAG=#YES &
        /SELECTION=(#SELECTS1)  &
    /SORTED_BY=(#SORT1 DESC) &
    /SORTED_BY=(#SORT2) &
    /SORTED_BY=(#SORT3)


    OUTPUT_BLOCK STATUS_FLAG /ROW=1 /COL=2 &
            /SOURCE=(GRN_HEADER_VT(STATUS_FLAG)) &
            /HEADING=FIELD_HEADING(SYS_STATUS_FLAG)
            
        OUTPUT_BLOCK GRN_NUMBER /ROW=1 /COL=6 &
            /SOURCE=(GRN_HEADER_VT(GRN_NUMBER)) &
            /HEADING=FIELD_HEADING(GRN_NUMBER)

    OUTPUT_BLOCK RECEIVED_DATE /ROW=1 /COL=18 &
            /SOURCE=(GRN_HEADER_VT(RECEIVED_DATE)) &
            /RHEADING=FIELD_HEADING(RECEIVED_DATE)

    OUTPUT_BLOCK VENDOR_REFERENCE /ROW=1 /COL=30 /LEN=14 &
            /SOURCE=(GRN_HEADER_VT(VENDOR_REFERENCE)) &
            /HEADING=FIELD_HEADING(VENDOR_REFERENCE)

    OUTPUT_BLOCK DEFAULT_PO_NUMBER /ROW=1 /COL=46 &
            /SOURCE=(GRN_HEADER_VT(DEFAULT_PO_NUMBER)) &
            /HEADING=FIELD_HEADING(GOODS_RECEIVED_HEADERS,DEFAULT_PO_NUMBER)

    OUTPUT_BLOCK CURRENCY_CODE /ROW=1 /COL=57 &
            /SOURCE=(GRN_HEADER_VT(SYS_CURRENCY_CODE)) &
            /HEADING=FIELD_HEADING(SYS_CURRENCY_CODE)

    OUTPUT_BLOCK MISMATCH_REASON /ROW=1 /COL=63 /LEN=15 &
        /SOURCE = (GRN_HEADER_VT(CARRIER_REFERENCE)) &
        /HEADING = #MISMATCH_HEADING &
        
        IF(#SELECT_MODE <> "MANUAL") PERFORM GRN_SET_FLAG
        
        MENU_BLOCK SUB_MENU /ROW=1 /COL=66 &
            /NOREPEAT &
            /BACK=(EXIT(%BACK)) &
            /EXIT=(EXIT(%EXIT)) &
        /ITEM_IF=(#SELECT_MODE="MANUAL" AND (GRN_HEADER_VT(STATUS_FLAG)=#NO)), &
                 (MESSAGE("P_00582")),(""),(PERFORM GRN_SET_FLAG) &
        /ITEM_IF=(#SELECT_MODE="MANUAL" AND GRN_HEADER_VT(STATUS_FLAG)=#YES), &
                 (MESSAGE("P_91836")),(""),(PERFORM GRN_SET_FLAG) &
            /ITEM=(MESSAGE("P_01864")),(""), &
                 (PERFORM "GEMPOP:POP_I_GOODS_RECEIVED" LINK_ENTRY (#COMPANY_CODE,#DIVISION,(GRN_HEADER_VT(GRN_NUMBER)))) &
            /ITEM=(MESSAGE("P_36146")),(""),(EXIT)  

END_FORM

!Select or De-select the current GRN...
PROCEDURE_FORM GRN_SET_FLAG
    
    BEGIN_BLOCK MANUAL_OPT
        IF (#SELECT_MODE <> "MANUAL") GOTO GRN_SET_FLAG
    END_BLOCK
    
    BEGIN_BLOCK VALID_COPIED
            IF (GRN_HEADER_VT(INVOICE_COPY) = #YES AND GRN_HEADER_VT(STATUS_FLAG)=#NO )
                    #ERROR_1 = MESSAGE("P_62134")
                    #ERROR_2 = MESSAGE("P_62089")
                    PERFORM ERROR (#ERROR_1,#ERROR_2,#ERROR_3)
                IF (%STATUS = %FAILURE or %STATUS = %BACK or %STATUS = %EXIT) GOTO THE_END
            END_IF
    END_BLOCK
    
    BEGIN_BLOCK GRN_SET_FLAG
        BEGIN_CASE (#MAIN_OPT)
            CASE ("ENTRY")
                IF (GRN_HEADER_VT(STATUS_FLAG)=#STATUS_MISMATCHED OR GRN_HEADER_VT(STATUS_FLAG)=#NO)                                
                        FIND IN GRN_HEADER_VT &
                        /LOCK= NONE &
                        /SECONDARY &
                        /STREAM_NAME=CHECK &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=VENDOR_NUMBER=#VENDOR_NUMBER &
                        /WITH=SYS_CURRENCY_CODE=#USE_CURRENCY_CODE &
                        /WITH=GRN_NUMBER AMONG #GRN_NUMBERS &
                        /WITH=STATUS_FLAG=#YES
                    
                IF ( %STATUS<>%SUCCESS ) 
                    GRN_HEADER_VT(STATUS_FLAG) = #YES
                    PERFORM SAVE_MATCHED_VALUES("GRN_HEADER_VT")
                ELSE
                    #TEMP_FLAG = #NO
                    PERFORM CHECK_GRN_FLAG("GRN_HEADER_VT",#NO, #TEMP_FLAG, #RS_MSG)
                    IF(#TEMP_FLAG <>#YES)       ERROR/TEXT_ONLY #RS_MSG
                    IF(#SELECT_MODE = "MANUAL")     GRN_HEADER_VT(STATUS_FLAG) = #TEMP_FLAG 
                END_IF 
                    ELSE
                    IF(#SELECT_MODE = "MANUAL") GRN_HEADER_VT(STATUS_FLAG)=#NO
                END_IF
            CASE ("MODIFY")
                IF ( GRN_HEADER_VT(STATUS_FLAG)=#NO OR GRN_HEADER_VT(STATUS_FLAG)=#STATUS_MISMATCHED) 
                    #TEMP_FLAG = #NO
                    PERFORM CHECK_GRN_FLAG("GRN_HEADER_VT",#NO, #TEMP_FLAG, #RS_MSG)
                    IF(#TEMP_FLAG <> #YES)      ERROR/TEXT_ONLY #RS_MSG
                    IF(#SELECT_MODE = "MANUAL")     GRN_HEADER_VT(STATUS_FLAG) = #TEMP_FLAG 
                ELSE
                    IF(#SELECT_MODE = "MANUAL") GRN_HEADER_VT(STATUS_FLAG)=#NO      
                END_IF
            END_CASE
    END_BLOCK
    
    BEGIN_BLOCK THE_END 
    END_BLOCK 

END_FORM

PROCEDURE_FORM CHECK_GRN_FLAG (#P1, #P2, #R1, #R2)
    
    BEGIN_BLOCK SETUP
        #SOURCE_TABLE = #P1
        #SHOW_MESSAGE = #P2
        #STATUS_FLAG  = #YES
    END_BLOCK

    BEGIN_BLOCK CHECK_GRN_FLAG
        #VALIDATION_COUNT = 0
        WHILE(#VALIDATION_COUNT < #VALID_DIMENSION)
            IF ( #FIRST_MATCHED(#VALIDATION_COUNT) = TABLE_DATA(#SOURCE_TABLE, #VALIDATIONS(#VALIDATION_COUNT)))
                #VALIDATION_COUNT = #VALIDATION_COUNT + 1
            ELSE
                IF ( #SELECT_MODE="MANUAL" ) 
                    #STATUS_FLAG = #NO
                ELSE
                    #STATUS_FLAG = #STATUS_MISMATCHED   
                END_IF 
                
                CONTINUE OUT
            END_IF
        END_WHILE
        
        IF (#STATUS_FLAG = #YES)
            GOTO RETURN
        ELSE
            IF (#SHOW_MESSAGE = #YES)
                MESSAGE/BELL/IDENTIFIER/WAIT #MESSAGE_IDS(#VALIDATION_COUNT),TABLE_DATA("GRN_HEADER_VT","GRN_NUMBER")
            ELSE
                #RE_MSG = MESSAGE(#MESSAGE_IDS(#VALIDATION_COUNT),TABLE_DATA("GRN_HEADER_VT","GRN_NUMBER"))
                #RE_MSG = "%" & #MESSAGE_IDS(#VALIDATION_COUNT) & ", " & #RE_MSG
            END_IF
        END_IF
    END_BLOCK
    
    BEGIN_BLOCK RETURN
        #R1 = #STATUS_FLAG
        #R2 = #RE_MSG
    END_BLOCK
END_FORM

PROCEDURE_FORM SETUP_VALIDATIONS
    BEGIN_BLOCK SETUP_VALIDATION
        CLEAR_ARRAY #VALIDATIONS()
        #VALIDATIONS(0)  = "DEF_INVOICE_ADDRESS_CODE"
        #VALIDATIONS(1)  = "INTERCOMPANY_POSTINGS"
        #VALIDATIONS(2)  = "POP_COMMITMENT_PERIOD"
        #VALIDATIONS(3)  = "POP_COMMITMENT_YEAR"
        #VALIDATIONS(4)  = "CREDIT_TERMS_CODE"
        #VALIDATIONS(5)  = "PRICING_METHOD"
        #VALIDATIONS(6)  = "ORDER_DISCOUNT_GROUP"
        #VALIDATIONS(7)  = "MISC_TAX_CODE"
        #VALIDATIONS(8)  = "FREIGHT_TAX_CODE"
        #VALIDATIONS(9)  = "SYS_FREIGHT_TAXABLE_CODE"
        #VALIDATIONS(10) = "SYS_MISC_TAXABLE_CODE"
        #VALID_DIMENSION = 11
    END_BLOCK
    
    BEGIN_BLOCK SETUP_MESSAGEIDS
        CLEAR_ARRAY #MESSAGE_IDS()
        #MESSAGE_IDS(0)   = "P_33409"
        #MESSAGE_IDS(1)   = "P_33410"
        #MESSAGE_IDS(2)   = "P_33411"       
        #MESSAGE_IDS(3)   = "P_33462"
        #MESSAGE_IDS(4)   = "P_33464"
        #MESSAGE_IDS(5)   = "P_33465"
        #MESSAGE_IDS(6)   = "P_33466"
        #MESSAGE_IDS(7)   = "P_33467"
        #MESSAGE_IDS(8)   = "P_33468"                                               
        #MESSAGE_IDS(9)   = "P_33469"
        #MESSAGE_IDS(10)  = "P_33470"       
    END_BLOCK
    
    BEGIN_BLOCK SETUP_MISMATCH_CODE
        CLEAR_ARRAY #MISMATCH_CODES()
        #MISMATCH_CODES(0) = MESSAGE("P_00016")
        #MISMATCH_CODES(1) = MESSAGE("P_33471")
        #MISMATCH_CODES(2) = MESSAGE("P_33472")
        #MISMATCH_CODES(3) = MESSAGE("P_33473")
        #MISMATCH_CODES(4) = MESSAGE("P_33474") 
        #MISMATCH_CODES(5) = MESSAGE("P_33475")      
        #MISMATCH_CODES(6) = MESSAGE("P_33476")
        #MISMATCH_CODES(7) = MESSAGE("P_33477")      
        #MISMATCH_CODES(8) = MESSAGE("P_33478")                                                 
        #MISMATCH_CODES(9) = MESSAGE("P_33479")
        #MISMATCH_CODES(10)= MESSAGE("P_33480") 
    END_BLOCK
END_FORM

PROCEDURE_FORM SAVE_MATCHED_VALUES (#P1)
    BEGIN_BLOCK SAVE_MATCHED_VALUES
        #SOURCE_TABLE = #P1
        CLEAR_ARRAY #FIRST_MATCHED()
        #VALIDATION_COUNT = 0
        WHILE(#VALIDATION_COUNT < #VALID_DIMENSION)
            #FIRST_MATCHED(#VALIDATION_COUNT) = TABLE_DATA(#SOURCE_TABLE ,#VALIDATIONS(#VALIDATION_COUNT))
            #VALIDATION_COUNT         = #VALIDATION_COUNT + 1
        END_WHILE   
    END_BLOCK
END_FORM

PROCEDURE_FORM LOAD_GRN_NUMBERS &
    /TABLE=GRN_HEADER_VT &
    /WITH=STATUS_FLAG=#YES
    
    BEGIN_BLOCK GRN_NUMBERS
        IF ( #I>0 )
        #PO_NUMBERS=#PO_NUMBERS & "," & GRN_HEADER_VT(DEFAULT_PO_NUMBER) 
            #GRN_NUMBER=#GRN_NUMBER & "," & GRN_HEADER_VT(GRN_NUMBER)
        ELSE
        #I     = 1
        #GRN_NUMBER= GRN_HEADER_VT(GRN_NUMBER)
        #PO_NUMBERS= GRN_HEADER_VT(DEFAULT_PO_NUMBER)   
        END_IF
    END_BLOCK

END_FORM 


FORM HEADER_ENTRY /ROW=3 /COL=2 /HEIGHT=21 /WIDTH=78 &
        /TITLE=(#TITLE_1) 


        BEGIN_BLOCK SETUP
                START_TRANSACTION

                #MAIN_OPT                   = "ENTRY"
                #COPY_REGISTER_TAX          = #NO
                #COPY_REGISTER_RETAINERS    = #NO
                #LINKS_REQUIRED             = #NO
                #VENDOR_INVOICE_NUMBER      = ""
                #PROJECT                    = ""
                #WBS_NUMBER                 = ""
                #WBS_NUMBER_MASKED          = ""
                #PA_COUNT                   = 0

                CLEAR_BUFFER PURCHASE_INVOICES

                PURCHASE_INVOICES(COMPANY_CODE) = #COMPANY_CODE
        END_BLOCK

        INPUT_BLOCK DIVISION /ROW=2 /COL=16 &
                        /PROMPT=(FIELD_PROMPT(DIVISION)) &
                        /TARGET=PURCHASE_INVOICES(DIVISION) &
                        /LOV=SECURITY_PERIOD_ACCESS_VT(SYS_ACCESS_CODE,CODE_DESCRIPTION) &
                        /LOV_WITH=SYS_ACCESS_TYPE=(PARAMETER("ACCESS_TYPE_DIVISION")) &
                        /LOV_WITH=SOURCE_MODULE=(PARAMETER("MODULE_PO")) &
                        /LOV_WITH=SYS_ALLOW_ACCESS=#YES &
                        /USE_IF=(#SELECT_MODE="")
                
        IF ( #SELECT_MODE<>"" )
            PURCHASE_INVOICES(DIVISION)=#DIVISION
            
            OUTPUT_BLOCK DIVISION_1 /ROW=2 /COL=16 &
                        /PROMPT=(FIELD_PROMPT(DIVISION)) &
                        /SOURCE=(#DIVISION) &
                        /USE_IF=(#SELECT_MODE<>"")      
        END_IF
         
        BEGIN_BLOCK EXTRACT_DIVISION
                FIND IN AP_CONTROLS &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=AP_DIVISION=PURCHASE_INVOICES(DIVISION) &
                        /LOCK=NONE

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_00354
                        IF ( #SELECT_MODE<>"" ) 
                            EXIT(%FAILURE)
                        ELSE
                            GOTO DIVISION
                        END_IF 
                        
                END_IF

                #DIVISION = PURCHASE_INVOICES(DIVISION)

                FIND IN SECURITY_PERIOD_ACCESS_VT &
                        /WITH=SYS_ACCESS_TYPE=(PARAMETER("ACCESS_TYPE_DIVISION")) &
                        /WITH=SYS_ACCESS_CODE= #DIVISION &
                        /WITH=SOURCE_MODULE=(PARAMETER("MODULE_PO")) &

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_00447
                        IF ( #SELECT_MODE<>"" ) 
                            EXIT(%FAILURE)
                        ELSE
                            GOTO DIVISION
                        END_IF
                END_IF

                IF (SECURITY_PERIOD_ACCESS_VT(SYS_ALLOW_ACCESS) <> #YES)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_00756
                        IF ( #SELECT_MODE<>"" ) 
                            EXIT(%FAILURE)
                        ELSE
                            GOTO DIVISION
                        END_IF
                END_IF

                #NO_PAST_PERIODS   = SECURITY_PERIOD_ACCESS_VT(NUMBER_OF_PAST_PERIODS)
                #NO_FUTURE_PERIODS = SECURITY_PERIOD_ACCESS_VT(NUMBER_OF_FUTURE_PERIODS)

                #BASE_CURRENCY_CODE             = AP_CONTROLS(SYS_CURRENCY_CODE)
                #CURRENCY_METHOD                = AP_CONTROLS(SYS_CURRENCY_METHOD)
                ! #DATE_OVERRIDE                  = AP_CONTROLS(SYS_CURRENCY_DATE_OVERRIDE)
                #DATE_CODE                      = AP_CONTROLS(SYS_DATE_CODE)
                #TAX_BASED_ON                   = AP_CONTROLS(TAX_BASED_ON)
                #DEF_PART_TAX_CODE              = AP_CONTROLS(DEF_PRODUCT_TAX_CODE)
                #DEF_VENDOR_TAX_CODE            = AP_CONTROLS(DEF_VENDOR_TAX_CODE)
                #DEF_DELIVERY_ADDR_CODE         = AP_CONTROLS(DEF_DELIVERY_ADDRESS_CODE)
                #DEF_FREIGHT_TAX_CODE           = AP_CONTROLS(DEF_FREIGHT_TAX_CODE)
                #DEF_MISC_TAX_CODE              = AP_CONTROLS(DEF_MISC_TAX_CODE)
                #FREIGHT_TAXABLE                = AP_CONTROLS(FREIGHT_TAXABLE)
                #MISC_TAXABLE                   = AP_CONTROLS(MISCELLANEOUS_TAXABLE)
                #DIVISION_ACCRUE_TAX            = AP_CONTROLS(SYS_ACCRUE_TAX)
                #CORPORATE_ADDRESS_CODE         = AP_CONTROLS(DEF_DELIVERY_ADDRESS_CODE)
                #ACCRUE_TAX_CODE                = AP_CONTROLS(SYS_TAX_ACCRUAL_CODE)
                #ACCRUE_TAX_FULL                = AP_CONTROLS(SYS_TAX_ACCRUAL_FULL_ACCOUNT)
                #AP_DEFAULT_TAX                 = AP_CONTROLS(AP_DEFAULT_TAX)
                #DIV_TAX_ON_CASH                = AP_CONTROLS(SYS_TAX_ON_CASH)
                #DIV_TAX_RETAINERS_FLAG         = AP_CONTROLS(SYS_TAX_RETAINERS_FLAG)

                #ADDRESS_CODE                   = #CORPORATE_ADDRESS_CODE

                #PURCHASE_REGISTRATION_REQD     = AP_CONTROLS(PURCHASE_REGISTRATION_REQD)
                #INVOICE_APPROVAL_CODE          = AP_CONTROLS(INVOICE_APPROVAL_CODE)

                #LD_IN_USE                      = AP_CONTROLS(LINE_DISCOUNT_IN_USE)
                #LD_OVERRIDE                    = AP_CONTROLS(LINE_DISCOUNT_OVERRIDE)

                #PRICE_OVERRIDE                 = AP_CONTROLS(PURCHASE_PRICE_OVERRIDE)

                #CURRENT_YEAR                   = AP_CONTROLS(POP_CURRENT_YEAR)
                #CURRENT_PERIOD                 = AP_CONTROLS(POP_CURRENT_PERIOD)

                #DEF_AP_SHORT_CODE              = AP_CONTROLS(AP_SHORT_CODE)
                #DEF_AP_FULL_ACCOUNT    = AP_CONTROLS(AP_FULL_ACCOUNT)

                #INVOICE_TOLERANCE_CONTROL = AP_CONTROLS(POP_INVOICE_TOLERANCE_CONTROL)

                #CURRENCY_CODE = ""
                #CURRENCY_RATE = ""
                #CURRENCY_DATE = ""
                ! Grn accounts for nonstock must be taken from divisional
                ! record as well as year and period.

        OUTPUT_BLOCK DIVISION_DESC /ROW=2 /COL=19 &
                        /SOURCE=(SECURITY_PERIOD_ACCESS_VT(CODE_DESCRIPTION))

        BEGIN_BLOCK GET_BASE_CURRENCY
                FIND IN SYS_CURRENCY_CODES &
                        /LOCK=NONE &
                        /WITH=SYS_CURRENCY_CODE=#BASE_CURRENCY_CODE

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_82400
                        EXIT (%FAILURE)
                END_IF

                #BASE_CURRENCY_DECIMAL  = SYS_CURRENCY_CODES(SYS_CURRENCY_DECIMALS)
                #BASE_CURRENCY_DESC = SYS_CURRENCY_CODES(SYS_CODE_DESCRIPTION)
                #CURRENCY_MASK          = SYS_CURRENCY_CODES(SYS_CURRENCY_MASK)
        END_BLOCK

        OUTPUT_BLOCK BASE_CURRENCY /ROW=3 /COL=17 &
                        /PROMPT=(FIELD_PROMPT(PURCHASE_INVOICES,SYS_BASE_CURRENCY_CODE)) &
            /SOURCE=(#BASE_CURRENCY_CODE) &
            /USING=SYS_CURRENCY_CODES(SYS_CURRENCY_CODE)

        OUTPUT_BLOCK BASE_CURRENCY_DESC /ROW=3 /COL=24 &
            /SOURCE=(#BASE_CURRENCY_DESC) &
            /USING=SYS_CURRENCY_CODES(SYS_CODE_DESCRIPTION)
                 
        BEGIN_BLOCK GRN_NUMBER
                IF ( #SELECT_MODE="" ) 
                    #GRN_NUMBER = ""
                END_IF

                ! LOV defined as a VIEW in data definitions:
                                ! GRN_WITH_PO_NUMBERS_TO_INVOICE

                INPUT_BLOCK  /ROW=4 /COL=16 &
                        /PROMPT=(FIELD_PROMPT(GRN_NUMBER)) &
                        /TARGET=#GRN_NUMBER &
                        /USING=GOODS_RECEIVED_LINES(GRN_NUMBER) &
                        /LOV=GRN_WITH_PO_NUMBERS_TO_INVOICE(GRN_NUMBER,PART_CODE,GRN_QTY_TO_INVOICE,UNIT_REC,PO_NUMBER) &
                        /LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
                        /LOV_WITH=DIVISION=#DIVISION &
                        /LOV_SORTED_BY=GRN_NUMBER,PART_CODE &
                        /USE_IF=(#SELECT_MODE="") &

                FIND IN GOODS_RECEIVED_HEADERS &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=GRN_NUMBER AMONG #GRN_NUMBER &
                        /LOCK=NONE

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_01862
                        GOTO GRN_NUMBER
                        IF ( #SELECT_MODE<>"" ) 
                            EXIT(%FAILURE)
                        ELSE
                            GOTO DIVISION
                        END_IF
                END_IF

                ! try to find a line on the GRN which has some quantity
                ! processed (put away)
                IF ( #SELECT_MODE="" )
                        FIND IN GOODS_RECEIVED_LINE_QTYS &
                                /LOCK=NONE &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=DIVISION=#DIVISION &
                                /WITH=GRN_NUMBER=#GRN_NUMBER &
                                /WITH=GRN_QTY_IN_INVENTORY > 0.0

                        IF (%STATUS = %FAILURE)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_01455
                                GOTO GRN_NUMBER
                        END_IF

                        FIND IN GOODS_RECEIVED_DETAIL_QTYS &
                                /LOCK=NONE &
                                /WITH=COMPANY_CODE = #COMPANY_CODE &
                                /WITH=DIVISION = #DIVISION &
                                /WITH=GRN_NUMBER = #GRN_NUMBER  &
                                /WITH=GRN_QTY_TO_INVOICE > 0.0

                        IF (%STATUS = %FAILURE)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_02484
                                GOTO GRN_NUMBER
                        END_IF

                        IF (GOODS_RECEIVED_HEADERS(INVOICE_COPY) = #YES)
                                #ERROR_1 = MESSAGE("P_62134")
                                #ERROR_2 = MESSAGE("P_62089")

                                PERFORM ERROR (#ERROR_1,#ERROR_2,#ERROR_3)
                                IF (%STATUS = %FAILURE or %STATUS = %BACK or %STATUS = %EXIT)
                                    GOTO GRN_NUMBER
                                END_IF
                        END_IF
                END_IF

                !++
                ! If Use Tax is in use, then retrieve the accrual account
                ! information from the relevant CORPORATE_ADDRESS record
                ! based on the GRN header delivery address code.
                !--

                IF ((#USE_TAX_IN_USE = PARAMETER("LANGUAGE_YES")) AND &
                    (GOODS_RECEIVED_HEADERS(DEF_DELIVERY_ADDRESS_CODE) <> ""))

                        FIND IN CORPORATE_ADDRESSES &
                                /LOCK = NONE &
                                /WITH = COMPANY_CODE = AP_CONTROLS(COMPANY_CODE) &
                                /WITH = DIVISION = AP_CONTROLS(AP_DIVISION) &
                                /WITH = ADDRESS_CODE = GOODS_RECEIVED_HEADERS(DEF_DELIVERY_ADDRESS_CODE)

                        IF (%STATUS <> %NORMAL)
                                MESSAGE/IDENTIFIER/WAIT/BELL P_02789
                                IF ( #SELECT_MODE<>"" ) 
                                    EXIT(%FAILURE)
                                ELSE
                                    GOTO GRN_NUMBER
                                END_IF
                        ELSE
                                IF (CORPORATE_ADDRESSES(TAXABLE) = PARAMETER("LANGUAGE_YES"))
                                        IF (CORPORATE_ADDRESSES(SYS_TAX_ACCRUAL_CODE) = "" AND &
                                            CORPORATE_ADDRESSES(SYS_TAX_ACCRUAL_FULL_ACCOUNT) = "")
                                                MESSAGE/IDENTIFIER/WAIT/BELL P_82975
                                                GOTO GRN_NUMBER
                                                IF ( #SELECT_MODE<>"" ) 
                                                    EXIT
                                                ELSE
                                                    GOTO GRN_NUMBER
                                                END_IF
                                        ELSE
                                                #ACCRUE_TAX_CODE = CORPORATE_ADDRESSES(SYS_TAX_ACCRUAL_CODE)
                                                #ACCRUE_TAX_FULL = CORPORATE_ADDRESSES(SYS_TAX_ACCRUAL_FULL_ACCOUNT)
                                        END_IF
                                END_IF
                        END_IF
                END_IF

            END_BLOCK
            !
            ! code for E08224 copied from Invoice from PO program
            ! If Registration number is entered, copy tax details from the
            ! REGISTER table and link data to the PURCHASE_INVOICES header.
            !

            BEGIN_BLOCK FIND_PO_HEADER
                    FIND IN POP_HEADERS &
                            /LOCK = NONE &
                            /WITH = COMPANY_CODE = GOODS_RECEIVED_HEADERS(COMPANY_CODE) &
                            /WITH = DIVISION = GOODS_RECEIVED_HEADERS(DIVISION) &
                            /WITH = PO_NUMBER = GOODS_RECEIVED_HEADERS(DEFAULT_PO_NUMBER)

                    IF (%STATUS = %FAILURE)
                            MESSAGE/BELL/IDENTIFIER/WAIT P_52168, GOODS_RECEIVED_HEADERS(DEFAULT_PO_NUMBER)
                            IF ( #SELECT_MODE<>"" ) 
                                EXIT(%FAILURE)
                            ELSE
                                GOTO GRN_NUMBER
                            END_IF
                    END_IF

            END_BLOCK
            
        BEGIN_BLOCK REGISTRATION_NUMBER 
    
            INPUT_BLOCK     /ROW=1 /COL=68 &
                    /PROMPT=(FIELD_PROMPT(REGISTRATION_NUMBER))     &
                    /TARGET=#REGISTRATION_NUMBER &
                    /USING=PURCHASE_REGISTER(REGISTRATION_NUMBER) &
                    /LOV=PURCHASE_REGISTER(REGISTRATION_NUMBER,VENDOR_NUMBER,VENDOR_REFERENCE,SYS_TRAN_TOTAL_CURRENCY) &
                    /LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
                    /LOV_WITH=DIVISION = #DIVISION &
                    /LOV_WITH=TRANSACTION_TYPE=(PARAMETER("TTYPE_IN")) &
                    /LOV_WITH=STATUS_FLAG = (PARAMETER("STATUS_APPROVE")) &
                    /LOV_WITH=VENDOR_NUMBER = POP_HEADERS(VENDOR_NUMBER) &
                    /USE_IF=(#SELECT_MODE="")
                            
            INPUT_BLOCK     /ROW=1 /COL=68 &
                    /PROMPT=(FIELD_PROMPT(REGISTRATION_NUMBER))     &
                    /TARGET=#REGISTRATION_NUMBER &
                    /USING=PURCHASE_REGISTER(REGISTRATION_NUMBER) &
                    /LOV=PURCHASE_REGISTER(REGISTRATION_NUMBER,VENDOR_NUMBER,VENDOR_REFERENCE,SYS_TRAN_TOTAL_CURRENCY) &
                    /LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
                    /LOV_WITH=DIVISION = #DIVISION &
                    /LOV_WITH=TRANSACTION_TYPE=(PARAMETER("TTYPE_IN")) &
                    /LOV_WITH=STATUS_FLAG = (PARAMETER("STATUS_APPROVE")) &
                    /LOV_WITH=VENDOR_NUMBER = #VENDOR_NUMBER &
                    /USE_IF=(#SELECT_MODE<>"")
        END_BLOCK

        BEGIN_BLOCK     VERIFY_REG_NUMBER
                IF (#PURCHASE_REGISTRATION_REQD = #YES  AND     #REGISTRATION_NUMBER = "")
                        MESSAGE/IDENTIFIER/BELL/WAIT P_32311
                        GOTO REGISTRATION_NUMBER
                END_IF
                !
                ! If registration number is     left blank,     continue as     usual ....
                !
                IF (#REGISTRATION_NUMBER <> "")
                        ! Register number entered, check if     valid number

                        FIND IN PURCHASE_REGISTER &
                                /LOCK=NONE &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=DIVISION=#DIVISION &
                                /WITH=REGISTRATION_NUMBER=#REGISTRATION_NUMBER &
                                /WITH=TRANSACTION_TYPE=(PARAMETER("TTYPE_IN"))

                        IF (%STATUS = %FAILURE)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_32204
                                #REGISTRATION_NUMBER = ""
                                GOTO REGISTRATION_NUMBER
                        END_IF
                        
                        !++ If create invoice from GRNs and given GRN_NUMBER in the register
                        !++ not none should be check the GRN_NUMBER... 
                        IF ( PURCHASE_REGISTER(GRN_NUMBER)<>"" AND #SELECT_MODE<>"")
                          
                            FIND IN GRN_HEADER_VT &
                                /LOCK= NONE &
                                /SECONDARY &
                                /WITH= GRN_NUMBER<>PURCHASE_REGISTER(GRN_NUMBER) &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=DIVISION=#DIVISION &
                                /WITH=STATUS_FLAG=#YES
                            IF ( %STATUS=%SUCCESS )
                                MESSAGE/IDENTIFIER/BELL/WAIT P_32204
                                #REGISTRATION_NUMBER = ""
                                GOTO REGISTRATION_NUMBER                            
                            END_IF
                            
                            FIND IN GRN_HEADER_VT &
                                /LOCK= NONE &
                                /SECONDARY &
                                /WITH= GRN_NUMBER=PURCHASE_REGISTER(GRN_NUMBER) &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=DIVISION=#DIVISION &
                                /WITH=STATUS_FLAG=#YES
                            IF ( %STATUS<>%SUCCESS )
                                MESSAGE/IDENTIFIER/BELL/WAIT P_32204
                                #REGISTRATION_NUMBER = ""
                                GOTO REGISTRATION_NUMBER                            
                            END_IF                      
                        END_IF
                        !++

                        IF (PURCHASE_REGISTER(STATUS_FLAG) = PARAMETER("STATUS_BATCH") OR &
                                PURCHASE_REGISTER(STATUS_FLAG) = PARAMETER("STATUS_UPDATE"))
                                MESSAGE/IDENTIFIER/BELL/WAIT P_32393
                                #REGISTRATION_NUMBER = ""
                                GOTO REGISTRATION_NUMBER
                        END_IF

                        IF      (PURCHASE_REGISTER(STATUS_FLAG) <> PARAMETER("STATUS_APPROVE"))
                                MESSAGE/IDENTIFIER/BELL/WAIT P_32395
                                #REGISTRATION_NUMBER = ""
                                GOTO REGISTRATION_NUMBER
                        END_IF

                        IF      (PURCHASE_REGISTER(VENDOR_NUMBER) <> POP_HEADERS(VENDOR_NUMBER))
                                MESSAGE/IDENTIFIER/BELL/WAIT P_00936
                                #REGISTRATION_NUMBER = ""
                                GOTO REGISTRATION_NUMBER
                        END_IF

                        ! If GRN_NUMBER is given, test that invoice should be on
                        ! for given GRN_NUMBER in the register
                        !
                        IF      (PURCHASE_REGISTER(GRN_NUMBER) <> "")
                                IF (PURCHASE_REGISTER(GRN_NUMBER) <> GOODS_RECEIVED_HEADERS(GRN_NUMBER))                                       
                                        IF ( #SELECT_MODE<>"" )
                                            MESSAGE/IDENTIFIER/BELL/WAIT P_32204
                                            #REGISTRATION_NUMBER = "" 
                                            GOTO REGISTRATION_NUMBER
                                        ELSE
                                            MESSAGE/IDENTIFIER/BELL/WAIT P_01862
                                            GOTO GRN_NUMBER
                                        END_IF
                                END_IF
                        END_IF

                        IF      (PARAMETER("VENDOR_REFERENCE_UNIQUE") = #YES AND &
                                        PURCHASE_REGISTER(VENDOR_REFERENCE)     <> "")

                                FIND IN TR:AP_TRANSACTIONS &
                                        /LOCK=NONE &
                                        /SECONDARY &
                                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                                        /WITH=AP_DIVISION =     #DIVISION &
                                        /WITH=VENDOR_NUMBER     = PURCHASE_REGISTER(VENDOR_NUMBER) &
                                        /WITH=VENDOR_REFERENCE = PURCHASE_REGISTER(VENDOR_REFERENCE) &
                                        /WITH=TRANSACTION_TYPE = PARAMETER("TTYPE_IN")

                                IF              (%STATUS = %SUCCESS)
                                        MESSAGE/IDENTIFIER/BELL/WAIT P_82984,TR:AP_TRANSACTIONS(TRANSACTION_TYPE), &
                                                TR:AP_TRANSACTIONS(AP_TRANSACTION_NUMBER)
                                        #REGISTRATION_NUMBER = ""
                                        GOTO REGISTRATION_NUMBER
                                END_IF

                                FIND IN PI:PURCHASE_INVOICES &
                                        /LOCK=NONE &
                                        /SECONDARY &
                                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                                        /WITH=DIVISION = #DIVISION &
                                        /WITH=VENDOR_NUMBER     = PURCHASE_REGISTER(VENDOR_NUMBER) &
                                        /WITH=VENDOR_INVOICE_NUMBER     = PURCHASE_REGISTER(VENDOR_REFERENCE)

                                IF      (%STATUS = %SUCCESS)
                                        #MESS = MESSAGE ("P_12241")
                                        MESSAGE/IDENTIFIER/BELL/WAIT P_82984,#MESS,PI:PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)
                                        #REGISTRATION_NUMBER = ""
                                        GOTO REGISTRATION_NUMBER
                                END_IF

                                FIND IN BTL:AP_BATCH_TRAN_LINES &
                                        /LOCK=NONE &
                                        /SECONDARY &
                                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                                        /WITH=AP_DIVISION =     #DIVISION &
                                        /WITH=VENDOR_NUMBER     = PURCHASE_REGISTER(VENDOR_NUMBER) &
                                        /WITH=VENDOR_REFERENCE = PURCHASE_REGISTER(VENDOR_REFERENCE) &
                                        /WITH=TRANSACTION_TYPE = PARAMETER("TTYPE_IN")

                                IF              (%STATUS = %SUCCESS)
                                        #MESS = MESSAGE("P_00960")&" "&BTL:AP_BATCH_TRAN_LINES(TRANSACTION_TYPE)
                                        MESSAGE/IDENTIFIER/BELL/WAIT P_82984,#MESS,BTL:AP_BATCH_TRAN_LINES(BATCH_NUMBER)
                                        #REGISTRATION_NUMBER = ""
                                        GOTO REGISTRATION_NUMBER
                                END_IF

                        END_IF

                        FIND IN V:VENDORS &
                                /LOCK=NONE &
                                /SECONDARY &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=AP_DIVISION=#DIVISION     &
                                /WITH=VENDOR_NUMBER=PURCHASE_REGISTER(VENDOR_NUMBER)

                        IF (%STATUS     <> %SUCCESS)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_62284
                                #REGISTRATION_NUMBER = ""
                                GOTO REGISTRATION_NUMBER
                        END_IF

                        FIND IN P:PAYEES &
                                /LOCK=NONE &
                                /SECONDARY &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=AP_DIVISION=#DIVISION     &
                                /WITH=PAYEE_NUMBER=V:VENDORS(PAYEE_NUMBER)

                        IF (%STATUS <> %SUCCESS)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_32197
                                #REGISTRATION_NUMBER = ""
                                GOTO REGISTRATION_NUMBER
                        END_IF

                        ! Prompt to     ask: Copy Purchase register     Tax     Details ?

                        #ERROR_2 = MESSAGE("P_01263")
                        PERFORM ERROR_REG (#ERROR_2)
                        IF (%STATUS     = %BACK) GOTO REGISTRATION_NUMBER
                        IF (%STATUS     = %SUCCESS)     #COPY_REGISTER_TAX = #YES
                        IF (%STATUS     = %FAILURE)     #COPY_REGISTER_TAX = #NO

                        IF (#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
                                        #DIV_TAX_RETAINERS_FLAG = #YES AND &
                                        (V:VENDORS(SYS_TAX_RETAINERS_FLAG)=#YES OR P:PAYEES(SYS_TAX_RETAINERS_FLAG)=#YES))

                                #ERROR_2 = MESSAGE("P_91796")
                                PERFORM ERROR_REG (#ERROR_2)
                                IF (%STATUS     = %BACK) GOTO REGISTRATION_NUMBER
                                IF (%STATUS     = %SUCCESS)     #COPY_REGISTER_RETAINERS = #YES
                                IF (%STATUS     = %FAILURE)     #COPY_REGISTER_RETAINERS = #NO
                        END_IF

                        #REG_VALUE      = PURCHASE_REGISTER(SYS_TRAN_TOTAL_CURRENCY)
                        #REG_TAX        = PURCHASE_REGISTER(TAX_VAL)
                        #REG_RETAINERS  = PURCHASE_REGISTER(SYS_TAX_RETAINERS_CURRENCY)
                        #INVOICE_DATE   = PURCHASE_REGISTER(TRANSACTION_DATE)
                ELSE

                        IF (PURCHASE_INVOICES(REGISTRATION_NUMBER) <>"")
                                PURCHASE_INVOICES(AP_PAYMENT_ANALYSIS_1) = ""
                                PURCHASE_INVOICES(AP_PAYMENT_ANALYSIS_2) = ""
                                PURCHASE_INVOICES(AP_PAYMENT_ANALYSIS_3) = ""
                                PURCHASE_INVOICES(AP_PAYMENT_ANALYSIS_4) = ""
                                PURCHASE_INVOICES(AP_PAYMENT_ANALYSIS_5) = ""
                                PURCHASE_INVOICES(REGISTRATION_NUMBER) = ""
                        END_IF
        END_BLOCK

!!!!!!  End of Register Code

        BEGIN_BLOCK GET_DEF_POSTING_DATE
                #PERIOD = #CURRENT_PERIOD
                #YEAR   = #CURRENT_YEAR

                IF (#INC_POSTING_DATE = #YES)

                        FIND IN COMPANY_PERIOD_CONTROLS &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=CURRENT_YEAR=#CURRENT_YEAR

                        IF (%STATUS=%SUCCESS)

                                #START_DATE =TABLE_DATA("COMPANY_PERIOD_CONTROLS","START_DATE_"&MASK("!-0@",#CURRENT_PERIOD))
                                #END_DATE =TABLE_DATA("COMPANY_PERIOD_CONTROLS","END_DATE_"&MASK("!-0@",#CURRENT_PERIOD))

                        END_IF

                        #POSTING_DATE = %TODAY

                        IF (DAYS(#POSTING_DATE) < DAYS(#START_DATE))
                                #POSTING_DATE = #START_DATE
                        ELSE
                                IF (DAYS(#POSTING_DATE) > DAYS(#END_DATE))
                                        #POSTING_DATE = #END_DATE
                                END_IF
                        END_IF
                ELSE
                        #POSTING_DATE = %TODAY
                END_IF

                IF ( #VALIDATE_POSTING_DATE = #YES )
                        #INVOICE_DATE   = #POSTING_DATE
                ELSE
                        #INVOICE_DATE   = %TODAY
                END_IF
        END_BLOCK

        BEGIN_BLOCK GET_HOLD_FLAG
			#ON_HOLD_FLAG = ""
            IF ( #AP_IN_USE=#YES )
                INPUT_BLOCK HOLD_FLAG /ROW=3 /COL=68 &
                            /PROMPT=(FIELD_PROMPT(HOLD_FLAG)) &
                            /TARGET=PURCHASE_INVOICES(HOLD_FLAG) &
                            /LOV=AP_HOLD_FLAGS(HOLD_FLAG,CODE_DESCRIPTION) &
                            /LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
                            /USE_IF=(#AP_IN_USE=#YES)
                            
                IF ( PURCHASE_INVOICES(HOLD_FLAG)<>"")
                    FIND IN  AP_HOLD_FLAGS &
                        /LOCK= NONE&
                        /SECONDARY &
                        /WITH= COMPANY_CODE=#COMPANY_CODE &
                        /WITH= HOLD_FLAG=PURCHASE_INVOICES(HOLD_FLAG)
                    IF ( %STATUS<>%SUCCESS ) 
                        MESSAGE/IDENTIFIER/BELL/WAIT P_02104
                        GOTO GET_HOLD_FLAG  
                    END_IF    

					#ON_HOLD_FLAG = PURCHASE_INVOICES(HOLD_FLAG)
                END_IF
            END_IF
        
        END_BLOCK

        BEGIN_BLOCK VENDOR_REF
                INPUT_BLOCK  /ROW=4 /COL=54 &
                        /PROMPT=(FIELD_PROMPT(VENDOR_INVOICE_NUMBER)) &
                        /TARGET=#VENDOR_INVOICE_NUMBER &
			!Change 001 - vendor invoice number is required
                        !/USING=PURCHASE_INVOICES(VENDOR_INVOICE_NUMBER)
                        /USING=PURCHASE_INVOICES(VENDOR_INVOICE_NUMBER),REQUIRED
                        !Change 001 End

                #VENDOR_NUMBER = GOODS_RECEIVED_HEADERS(VENDOR_NUMBER) 
                IF (PARAMETER("VENDOR_REFERENCE_UNIQUE") = #YES AND &
                                #VENDOR_INVOICE_NUMBER  <> "")

                        FIND IN PI:PURCHASE_INVOICES &
                                /LOCK=NONE &
                                /SECONDARY &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=DIVISION = #DIVISION &
                                /WITH=VENDOR_NUMBER = #VENDOR_NUMBER &
                                /WITH=VENDOR_INVOICE_NUMBER = #VENDOR_INVOICE_NUMBER

                        IF (%STATUS = %SUCCESS)
                                #MESS = MESSAGE ("P_12241")
                                MESSAGE/IDENTIFIER/BELL/WAIT P_82984,#MESS,PI:PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)
                                GOTO VENDOR_REF
                        END_IF

                        FIND IN TR:AP_TRANSACTIONS &
                                /LOCK=NONE &
                                /SECONDARY &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=AP_DIVISION = #DIVISION &
                                /WITH=VENDOR_NUMBER = #VENDOR_NUMBER &
                                /WITH=VENDOR_REFERENCE = #VENDOR_INVOICE_NUMBER &
                                /WITH=TRANSACTION_TYPE = PARAMETER("TTYPE_IN")

                        IF (%STATUS = %SUCCESS)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_82984,TR:AP_TRANSACTIONS(TRANSACTION_TYPE), &
                                        TR:AP_TRANSACTIONS(AP_TRANSACTION_NUMBER)
                                GOTO VENDOR_REF
                        END_IF

                        FIND IN BT:AP_BATCH_TRAN_LINES &
                                /LOCK=NONE &
                                /SECONDARY &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=AP_DIVISION = #DIVISION &
                                /WITH=VENDOR_NUMBER = #VENDOR_NUMBER &
                                /WITH=VENDOR_REFERENCE = #VENDOR_INVOICE_NUMBER &
                                /WITH=TRANSACTION_TYPE = PARAMETER("TTYPE_IN")

                        IF (%STATUS = %SUCCESS)
                                #MESS = MESSAGE("P_00960")&" "&BT:AP_BATCH_TRAN_LINES(TRANSACTION_TYPE)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_82984,#MESS,BT:AP_BATCH_TRAN_LINES(BATCH_NUMBER)
                                GOTO VENDOR_REF
                        END_IF

                END_IF

                DISPLAY DEFAULTS
        END_BLOCK

        BEGIN_BLOCK SETUP_DEFAULT_INFO
                CLEAR_BUFFER PURCHASE_INVOICES

                PURCHASE_INVOICES(COMPANY_CODE)                 = #COMPANY_CODE
                PURCHASE_INVOICES(PERIOD)                       = #CURRENT_PERIOD
                PURCHASE_INVOICES(YEAR)                         = #CURRENT_YEAR
                PURCHASE_INVOICES(INVOICE_DATE)                 = #INVOICE_DATE
                PURCHASE_INVOICES(VENDOR_NUMBER)                = GOODS_RECEIVED_HEADERS(VENDOR_NUMBER)
                PURCHASE_INVOICES(PO_NUMBER)                    = GOODS_RECEIVED_HEADERS(DEFAULT_PO_NUMBER)
                PURCHASE_INVOICES(VENDOR_INVOICE_NUMBER)        = #VENDOR_INVOICE_NUMBER
                PURCHASE_INVOICES(DIVISION)                     = GOODS_RECEIVED_HEADERS(DIVISION)
                PURCHASE_INVOICES(COST_CENTER)                  = GOODS_RECEIVED_HEADERS(COST_CENTER)
!                 PURCHASE_INVOICES(GRN_NUMBER)                   = GOODS_RECEIVED_HEADERS(GRN_NUMBER)
                PURCHASE_INVOICES(POSTING_DATE)                 = #POSTING_DATE
                PURCHASE_INVOICES(DEF_INVOICE_ADDRESS_CODE)     = AP_CONTROLS(DEF_INVOICE_ADDRESS_CODE)
                PURCHASE_INVOICES(SYS_COPY_REGISTER_TAX)        = #NO
                PURCHASE_INVOICES(SYS_COPY_REGISTER_TAX_RETAINERS)= #NO
                PURCHASE_INVOICES(SYS_CURRENCY_CODE)            = GOODS_RECEIVED_HEADERS(SYS_CURRENCY_CODE)
                PURCHASE_INVOICES(SYS_RATE_TYPE)                = GOODS_RECEIVED_HEADERS(SYS_RATE_TYPE)
                PURCHASE_INVOICES(SYS_RATE_AUTHORITY)           = GOODS_RECEIVED_HEADERS(SYS_RATE_AUTHORITY)
                PURCHASE_INVOICES(SYS_CURRENCY_RATIO_INDIC)     = GOODS_RECEIVED_HEADERS(SYS_CURRENCY_RATIO_INDIC)
                PURCHASE_INVOICES(SYS_CURRENCY_RATE)            = GOODS_RECEIVED_HEADERS(SYS_CURRENCY_RATE)
                PURCHASE_INVOICES(SYS_CURRENCY_FIXED_FLAG)      = GOODS_RECEIVED_HEADERS(SYS_CURRENCY_FIXED_FLAG)
                PURCHASE_INVOICES(SYS_BASE_CURRENCY_CODE)       = GOODS_RECEIVED_HEADERS(SYS_BASE_CURRENCY_CODE)
                PURCHASE_INVOICES(SYS_BASE_CURRENCY)            = GOODS_RECEIVED_HEADERS(SYS_BASE_CURRENCY)
				PURCHASE_INVOICES(HOLD_FLAG) = #ON_HOLD_FLAG

                #PRICING_METHOD                 = POP_HEADERS(PRICING_METHOD)

                IF ( #PRICING_METHOD = #PRICING_METHOD_DEFAULT )
                    #PRICING_METHOD = #PRICING_METHOD_EXCLUSIVE
                END_IF

                PURCHASE_INVOICES(PRICING_METHOD)= #PRICING_METHOD

        !       #GRN_CURRENCY_RATE = GOODS_RECEIVED_HEADERS(SYS_CURRENCY_RATE)
        !       #GRN_RATIO_INDIC = GOODS_RECEIVED_HEADERS(SYS_CURRENCY_RATIO_INDIC)

                IF (GOODS_RECEIVED_HEADERS(DEF_DELIVERY_ADDRESS_CODE) <> "")
                        #CORPORATE_ADDRESS_CODE = GOODS_RECEIVED_HEADERS(DEF_DELIVERY_ADDRESS_CODE)
                        #ADDRESS_CODE           = #CORPORATE_ADDRESS_CODE
                END_IF

                IF (#DATE_CODE = #DUE_CODE AND PURCHASE_INVOICES(DUE_DATE) <> "")
                        #EFFECTIVE_DATE = PURCHASE_INVOICES(DUE_DATE)
                ELSE
                        #EFFECTIVE_DATE = PURCHASE_INVOICES(INVOICE_DATE)
                END_IF

                ! Call here LB_S_L_CURRENCY_RATES routine
                ! Get Rates
                !
                DELETE ALL FROM SYS_CURRENCY_CONTROL_VT
                CLEAR_BUFFER SYS_CURRENCY_CONTROL_VT

                SYS_CURRENCY_CONTROL_VT(COMPANY_CODE)   = #COMPANY_CODE
                SYS_CURRENCY_CONTROL_VT(DIVISION)       = PURCHASE_INVOICES(DIVISION)
                SYS_CURRENCY_CONTROL_VT(SOURCE_MODULE)  = #PO
                SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE) = PURCHASE_INVOICES(SYS_CURRENCY_CODE)
                SYS_CURRENCY_CONTROL_VT(RATE_TYPE) = PURCHASE_INVOICES(SYS_RATE_TYPE)
                SYS_CURRENCY_CONTROL_VT(FIXED_RATE_INDIC) = GOODS_RECEIVED_HEADERS(SYS_CURRENCY_FIXED_FLAG)
                SYS_CURRENCY_CONTROL_VT(FIRST_CURRENCY_RATE) = GOODS_RECEIVED_HEADERS(SYS_CURRENCY_RATE)
                SYS_CURRENCY_CONTROL_VT(SECOND_CURRENCY_RATE) = GOODS_RECEIVED_HEADERS(SYS_CURRENCY_2_RATE)
                SYS_CURRENCY_CONTROL_VT(CURRENCY_DATE) = #EFFECTIVE_DATE
                SYS_CURRENCY_CONTROL_VT(RATE_AUTHORITY) = PURCHASE_INVOICES(SYS_RATE_AUTHORITY)
                SYS_CURRENCY_CONTROL_VT(RATE_OVERRIDE)  = GOODS_RECEIVED_HEADERS(SYS_CURRENCY_FIXED_FLAG)
                ADD TO SYS_CURRENCY_CONTROL_VT

                PERFORM "GEMLB:LB_S_L_CURRENCY_RATES" (#R_STATUS,#R_MESSAGE)
                IF (#R_STATUS = #NO)
                    #GOT_CURRENCY_RATE = #NO
                ELSE
                    #GOT_CURRENCY_RATE = #YES
                END_IF

                FIND IN SYS_CURRENCY_CONTROL_VT

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/WAIT/BELL P_91710
                        EXIT(%FAILURE)
                END_IF

                IF (%STATUS = %EXIT OR %STATUS = %BACK)
                    IF ( #SELECT_MODE<>"" )
                        EXIT
                    ELSE
                        GOTO GRN_NUMBER                 
                    END_IF
                END_IF 

                ! Find currency values from VT
                #CURRENCY_RATE = SYS_CURRENCY_CONTROL_VT(FIRST_CURRENCY_RATE)
                #CURRENCY_RATIO_INDIC= SYS_CURRENCY_CONTROL_VT(CURR_RATIO_INDIC)
                #CURRENCY_FIXED = SYS_CURRENCY_CONTROL_VT(FIXED_RATE_INDIC)
                #CURRENCY_MASK = SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_MASK)
                #CURRENCY_DECIMAL = SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_DECIMALS)
                #CURRENCY_DATE= SYS_CURRENCY_CONTROL_VT(CURRENCY_DATE)
                #CURRENCY_2_RATE = SYS_CURRENCY_CONTROL_VT(SECOND_CURRENCY_RATE)
                #CURRENCY_2_RATIO = SYS_CURRENCY_CONTROL_VT(SYS_CURRENCY_2_RATIO_INDIC)
                !
                ! Use currency rate from rate conversion
                PURCHASE_INVOICES(SYS_CURRENCY_RATIO_INDIC) = #CURRENCY_RATIO_INDIC
                PURCHASE_INVOICES(SYS_CURRENCY_RATE) = #CURRENCY_RATE
                PURCHASE_INVOICES(SYS_CURRENCY_2_RATE) = #CURRENCY_2_RATE
                PURCHASE_INVOICES(SYS_CURRENCY_2_RATIO_INDIC) = #CURRENCY_2_RATIO
                PURCHASE_INVOICES(SYS_CURRENCY_FIXED_FLAG) = #CURRENCY_FIXED
                PURCHASE_INVOICES(SYS_CURRENCY_DATE) = #CURRENCY_DATE

        END_IF
                IF (#REGISTRATION_NUMBER <> "")
                        ! Register is used,don't use data from PO,
                        ! get data from PURCHASE_REGISTER instead
                        PERFORM COPY_INVOICE_HEADER

                        IF (%STATUS = %FAILURE OR %STATUS = %BACK OR %STATUS = %EXIT)
                                GOTO REGISTRATION_NUMBER
                        END_IF
                END_IF

                #VENDOR_NUMBER  = PURCHASE_INVOICES(VENDOR_NUMBER)
                #CURRENCY_CODE  = PURCHASE_INVOICES(SYS_CURRENCY_CODE)
                #COST_CENTER    = PURCHASE_INVOICES(COST_CENTER)

                FIND IN VENDORS &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=AP_DIVISION=#DIVISION &
                        /WITH=VENDOR_NUMBER=#VENDOR_NUMBER &
                        /LOCK=NONE

                IF (%STATUS <> %SUCCESS)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_62284
                        IF ( #SELECT_MODE<>"" )
                            EXIT
                        ELSE
                            GOTO GRN_NUMBER                 
                        END_IF
                END_IF

                IF ( VENDORS(ACTIVATION_STATUS) = #STATUS_DELETE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_00658
                        IF ( #SELECT_MODE<>"" )
                            EXIT
                        ELSE
                            GOTO GRN_NUMBER                 
                        END_IF
                END_IF
                
                IF ( VENDORS(ACTIVATION_STATUS) <> #STATUS_ACTIVE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_09157, #VENDOR_NUMBER
                        IF ( #SELECT_MODE<>"" )
                            EXIT
                        ELSE
                            GOTO GRN_NUMBER                 
                        END_IF
                END_IF

                #VENDOR_NAME            = VENDORS(VENDOR_NAME)
                #VENDOR_ORDER_DISC_GRP  = VENDORS(ORDER_DISCOUNT_GROUP)
                #MISC_VENDOR            = VENDORS(MISCELLANEOUS_VENDOR)
                #VENDOR_TAXABLE_CODE    = VENDORS(SYS_TAXABLE_CODE)
                #VENDOR_TAX_CODE        = VENDORS(TAX_CODE)
                #ACCRUE_IGIC    = VENDORS(ACCRUE_IGIC)
                #VENDOR_TAX_RETAINERS_FLAG      = VENDORS(SYS_TAX_RETAINERS_FLAG)
                #PAYEE_TAX_RETAINERS_FLAG       = ""

                IF (VENDORS(SYS_TAX_ON_CASH)=#YES AND #CO_TAX_ON_CASH=#YES AND &
                    #DIV_TAX_ON_CASH = #YES)
                        #TAX_ON_CASH = #YES
                ELSE
                        #TAX_ON_CASH = #NO
                END_IF

                !++
                ! Default invoice header taxable code to that of the vendor.
                ! If there is an associated PO, then the taxable code from
                ! the PO header can override it.
                !--

                PURCHASE_INVOICES(SYS_TAXABLE_CODE)             = #VENDOR_TAXABLE_CODE

                IF (GOODS_RECEIVED_HEADERS(DEFAULT_PO_NUMBER) <> "" AND &
                        GOODS_RECEIVED_HEADERS(POP_COPY) = PARAMETER("LANGUAGE_YES"))

                        FIND IN POP_HEADERS &
                                /LOCK = NONE &
                                /WITH = COMPANY_CODE = GOODS_RECEIVED_HEADERS(COMPANY_CODE) &
                                /WITH = DIVISION = GOODS_RECEIVED_HEADERS(DIVISION) &
                                /WITH = PO_NUMBER = GOODS_RECEIVED_HEADERS(DEFAULT_PO_NUMBER)

                        IF (%STATUS = %NORMAL)
                                PURCHASE_INVOICES(SYS_TAXABLE_CODE)     = POP_HEADERS(SYS_TAXABLE_CODE)
                                PURCHASE_INVOICES(INTERCOMPANY_POSTINGS) = POP_HEADERS(INTERCOMPANY_POSTINGS)
                        ELSE
                                MESSAGE/BELL/IDENTIFIER/WAIT P_52168, GOODS_RECEIVED_HEADERS(DEFAULT_PO_NUMBER)
                                ROLLBACK
                                IF ( #SELECT_MODE<>"" )
                                    EXIT
                                ELSE
                                    GOTO GRN_NUMBER                 
                                END_IF
                        END_IF
                END_IF

                !++
                ! Check if the combo of use tax flag/division accrual/vendor
                ! taxable code/default header taxable code is a valid one.
                !--

                PERFORM "GEMLB:LB_CHK_TAX_FLAG" ( &
                        (PURCHASE_INVOICES(SYS_TAXABLE_CODE)), &
                        (#DIVISION_ACCRUE_TAX), &
                        (#USE_TAX_IN_USE), &
                        (#VENDOR_TAXABLE_CODE), &
            (#PRICING_METHOD), &
            #ERROR)

                IF (%STATUS <> %NORMAL)
                        ERROR/TEXT_ONLY/NOWAIT/NOBELL #ERROR
                        IF ( #SELECT_MODE<>"" )
                            EXIT(%FAILURE)
                        ELSE
                            GOTO GRN_NUMBER                 
                        END_IF
                END_IF

                !++
                ! Determine default header tax code to be used for the
                ! "vendor"/"customer" part of the tax calculation.
                !--

                #SYS_TAXABLE_CODE       = PURCHASE_INVOICES(SYS_TAXABLE_CODE)
                #ADDRESS_CODE           = #CORPORATE_ADDRESS_CODE

                PERFORM CHECK_TAXABLE

                IF (%STATUS <> %NORMAL)
                        IF ( #SELECT_MODE<>"" )
                            EXIT(%FAILURE)
                        ELSE
                            GOTO GRN_NUMBER                 
                        END_IF
                END_IF

                PURCHASE_INVOICES(DEF_VENDOR_TAX_CODE) = #VENDOR_TAX_CODE
        END_BLOCK

        BEGIN_BLOCK SETUP_PA_INFO
            IF(#PA_IN_USE= #YES)
                PERFORM STAT_PA_WBS(#PA_COUNT,#PROJECT,#WBS_NUMBER)
                IF(#PA_COUNT = 1 AND #PROJECT <> "")
                		PERFORM "GEMPA:PA_V_COMMON" PA_WBS_UPDATE_VALIDATION ( &
								#COMPANY_CODE, & 
								(#PROJECT), &
								(#WBS_NUMBER), &
								#POSTING_DATE, #CURRENT_PERIOD , #CURRENT_YEAR ,#YES, &
								"O","","","","", &
								#R_STATUS)
						!IF #R_STATUS is FAILURE, error message will be displayed	
							
                        PERFORM GET_PA_WBS(#COMPANY_CODE,#PA_IN_USE, &
                                (#PROJECT), &
                                (#WBS_NUMBER), &
                                "","", &
                                #WBS_NUMBER_MASKED, &
                                #ACTIVITY_DESCRIP )                  
                END_IF
				PURCHASE_INVOICES(PA_PROJECT_CODE) = #PROJECT
				PURCHASE_INVOICES(PA_WBS_NUMBER)   = #WBS_NUMBER
            END_IF
        END_BLOCK

        BEGIN_BLOCK GET_GL_ELEMENTS_IN_USE
                !++
                ! Determine how many elements are being used in a FQA.
                ! Used later by translate short code routine.
                !--

                START_STREAM ENTITY /LOCK=NONE &
                        /TABLE = GL_STRUCTURE &
                        /WITH = COMPANY_CODE = PARAMETER("USER_COMPANY_CODE") &
                        /WITH = SUBCLASS_IN_USE = PARAMETER("LANGUAGE_YES")

                #IN_USE = 0
                WHILE (1)
                        FETCH ENTITY /FAILURE=(CONTINUE OUT)
                        #IN_USE = #IN_USE + 1
                END_WHILE
        END_BLOCK

        BEGIN_BLOCK ACCOUNTS

                IF ((VENDORS(AP_SHORT_CODE) <> "") OR (VENDORS(AP_FULL_ACCOUNT) <> ""))
                        #AP_SHORT_CODE          = VENDORS(AP_SHORT_CODE)
                        #AP_FULL_ACCOUNT        = VENDORS(AP_FULL_ACCOUNT)
                ELSE
                        #AP_SHORT_CODE          = #DEF_AP_SHORT_CODE
                        #AP_FULL_ACCOUNT        = #DEF_AP_FULL_ACCOUNT
                END_IF

                IF ((#AP_SHORT_CODE <>"") AND (#AP_FULL_ACCOUNT = ""))

                        PERFORM "GEMLB:LB_SHORT_CODE_TO_FQA" (&
                                        (#COMPANY_CODE),                                &
                                        (#DIVISION),                                    &
                                        (#AP_SHORT_CODE),                               &
                                        (#AP_FULL_ACCOUNT),                             &
                                        (#COST_CENTER),                                 &
                                        (PARAMETER("MODULE_POP")),                      &
                                        (#IN_USE),                                      &
                                        #FQA)

                                #AP_FULL_ACCOUNT = #FQA
                END_IF

                PURCHASE_INVOICES(AP_SHORT_CODE)        = #AP_SHORT_CODE
                PURCHASE_INVOICES(AP_FULL_ACCOUNT)      = #AP_FULL_ACCOUNT

                FIND IN GL_ACCOUNTS &
                        /WITH=ACCOUNT_NUMBER=#AP_FULL_ACCOUNT &
                        /WITH=ACTIVATION_STATUS=PARAMETER("STATUS_ACTIVE") &
                        /LOCK=NONE

                        IF  (%STATUS = %FAILURE)
                                MESSAGE/IDENTIFIER/BELL/CONFIRM P_02963,#AP_FULL_ACCOUNT
                                EXIT (%FAILURE)
                        END_IF

                #SAVE_TOLERANCE_IN_USE = VENDORS(POP_I_TOLERANCE_IN_USE)

                IF (#SAVE_TOLERANCE_IN_USE = PARAMETER("LANGUAGE_YES"))
                        #SAVE_MAX_TOLERANCE     = VENDORS(POP_MAX_INVOICE_TOLERANCE)
                        #SAVE_TOTAL_TOLERANCE   = VENDORS(POP_TOTAL_INVOICE_TOLERANCE)
                        #INVOICE_INDIC          = VENDORS(POP_I_TOLERANCE_INDIC)
                        #SAVE_AMOUNT_TOLERANCE  = VENDORS(POP_INVOICE_AMOUNT_TOLERANCE)
                        #SAVE_PRICE_TOLERANCE   = ROUND(VENDORS(POP_INVOICE_PRICE_TOLERANCE)/100.,2) * 1.0
                END_IF

                IF (VENDORS(MISCELLANEOUS_VENDOR) <> #YES)
                        IF (#REGISTRATION_NUMBER <> "")
                                #PAYEE = PURCHASE_INVOICES(PAYEE_NUMBER)
                        ELSE
                                #PAYEE   = VENDORS(PAYEE_NUMBER)
                        END_IF

                        FIND IN PAYEES &
                                /LOCK=NONE &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=AP_DIVISION=#DIVISION &
                                /WITH=PAYEE_NUMBER=#PAYEE

                        IF (%STATUS <> %SUCCESS)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_32197
                                IF ( #SELECT_MODE<>"" )
                                    EXIT(%FAILURE)
                                ELSE
                                    GOTO GRN_NUMBER                 
                                END_IF
                        END_IF

                        #TEN99_IN_USE = PAYEES(SYS_TEN99_IN_USE)
                        #DEF_TEN99_FORM =PAYEES(SYS_TEN99_RETURN_TYPE)
                        #DEF_TEN99_AMT_TYPE =PAYEES(SYS_TEN99_AMOUNT_TYPE)

                        IF (#VENDOR_TAX_RETAINERS_FLAG <> #YES)
                                #PAYEE_TAX_RETAINERS_FLAG = PAYEES(SYS_TAX_RETAINERS_FLAG)
                        END_IF

                        PURCHASE_INVOICES(PAYEE_NUMBER)   = #PAYEE

                        PURCHASE_INVOICES(PAYMENT_TYPE) = PAYEES(PAYMENT_TYPE)
                END_IF
        END_BLOCK
        


        BEGIN_BLOCK INVOICE_DATE_1
                INPUT_BLOCK INVOICE_DATE_IN /ROW=13 /COL=62 &
                        /PROMPT=(FIELD_PROMPT(INVOICE_DATE)) &
                        /TARGET=PURCHASE_INVOICES(INVOICE_DATE) &
                        /USING=REQUIRED

                #INVOICE_DATE   = PURCHASE_INVOICES(INVOICE_DATE)

                IF ( #VALIDATE_POSTING_DATE = #YES AND &
                        DAYS( #INVOICE_DATE ) > DAYS( #POSTING_DATE ) )

                        MESSAGE/IDENTIFIER/BELL/WAIT P_13584, MASK( #DEF_DATE_MASK, #POSTING_DATE )
                        GOTO INVOICE_DATE_1
                END_IF

                IF ( #CURRENCY_METHOD <> "0" )

                        PERFORM GET_NEW_INVOICE_RATE
                END_IF
        END_BLOCK

        BEGIN_BLOCK CREDIT_TERMS_CODE_SETUP
                IF (GOODS_RECEIVED_HEADERS(DEFAULT_PO_NUMBER) <> "" AND &
                        GOODS_RECEIVED_HEADERS(POP_COPY) = #YES)

                        FIND IN POP_HEADERS &
                                /LOCK=NONE &
                                /WITH=COMPANY_CODE = GOODS_RECEIVED_HEADERS(COMPANY_CODE) &
                                /WITH=DIVISION = GOODS_RECEIVED_HEADERS(DIVISION) &
                                /WITH=PO_NUMBER = GOODS_RECEIVED_HEADERS(DEFAULT_PO_NUMBER)

                        IF (%STATUS <> %SUCCESS) EXIT(%FAILURE)
                        PURCHASE_INVOICES(CREDIT_TERMS_CODE)    = POP_HEADERS(CREDIT_TERMS_CODE)
                ELSE
                        PURCHASE_INVOICES(CREDIT_TERMS_CODE)    = VENDORS(CREDIT_TERMS_CODE)
                END_IF

                FIND IN CREDIT_TERMS &
                        /LOCK=NONE &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=CREDIT_TERMS_CODE=PURCHASE_INVOICES(CREDIT_TERMS_CODE)

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_00348
                        GOTO CREDIT_TERMS_CODE
                END_IF

                #PAYMENT_CODE           = CREDIT_TERMS(PAYMENT_CODE)
                #CREDIT_TERMS_CODE      = CREDIT_TERMS(CREDIT_TERMS_CODE)
                #PAYMENT_TYPE           = CREDIT_TERMS(DATE_PAYMENT_TYPE)
                #POSTING_YEAR           = #CURRENT_YEAR
                #POSTING_PERIOD         = #CURRENT_PERIOD

                #INVOICE_DATE           = PURCHASE_INVOICES(INVOICE_DATE)
                #POSTING_DATE           = PURCHASE_INVOICES(POSTING_DATE)

                PERFORM "GEMLB:LIB_L_DUE_DATE" &
                                (#COMPANY_CODE, &
                                 #CREDIT_TERMS_CODE, &
                                 #PAYMENT_CODE, &
                                 #PAYMENT_TYPE,&
                                 #INVOICE_DATE, &
                                 #POSTING_PERIOD, &
                                 #POSTING_YEAR,&
                                 #NBR_PERIODS, &
                                 #DUE_DATE, &
                                 #PERIOD_DUE, &
                                 #YEAR_DUE)

                IF (CREDIT_TERMS(PAYMENT_CODE) = PARAMETER("PAYMENT_CODE_PERIOD"))
                        PURCHASE_INVOICES(DUE_PERIOD) = #PERIOD_DUE
                        PURCHASE_INVOICES(DUE_YEAR)   = #YEAR_DUE
                ELSE
                        PURCHASE_INVOICES(DUE_PERIOD) = ""
                        PURCHASE_INVOICES(DUE_YEAR)   = ""
                END_IF

                PURCHASE_INVOICES(DUE_DATE) = #DUE_DATE
        END_BLOCK

        BEGIN_BLOCK CASH_DISCOUNTS_1
                FIND IN CREDIT_TERMS_DISCOUNTS &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=CREDIT_TERMS_CODE=PURCHASE_INVOICES(CREDIT_TERMS_CODE)

                IF (%STATUS = %SUCCESS)
                        PURCHASE_INVOICES(DISCOUNT_RECEIVED) = CREDIT_TERMS_DISCOUNTS(DISCOUNT_RECEIVED)

                        PURCHASE_INVOICES(DISCOUNT_DATE) = &
                                DATE(DAYS(PURCHASE_INVOICES(INVOICE_DATE)) + &
                                CREDIT_TERMS_DISCOUNTS(DAYS_ALLOWED))
                ELSE
                        PURCHASE_INVOICES(DISCOUNT_DATE)        = ""
                        PURCHASE_INVOICES(DISCOUNT_RECEIVED)    = 0
                END_IF

                IF (CREDIT_TERMS(PAYMENT_CODE) = #PAYMENT_CODE_DATE)
                        PERFORM DUE_DATE_DISPLAY
                END_IF

                IF (CREDIT_TERMS(PAYMENT_CODE) = #PAYMENT_CODE_PERIOD)
                        PERFORM DUE_PERIOD_DISPLAY
                END_IF
        END_BLOCK

        BEGIN_BLOCK DEFAULTS
                FIND IN SYS_COUNTRIES &
                        /LOCK=NONE &
                        /WITH=SYS_COUNTRY=VENDORS(SYS_COUNTRY)

                PERFORM "GEMLB:LB_ADDRESSES" (&
                        "D", &
                        (SYS_COUNTRIES(SYS_COUNTRY)), &
                        "VENDORS", &
                        "9", &
                        "13", &
                        "", &
                        "", &
                        "", &
                        "", &
                        "", &
                        #R1, &
                        #R2, &
                        #R3, &
                        #R4, &
                        #R5)


                IF ( #MISC_VENDOR = #NO )

                    FIND IN SYS_COUNTRIES &
                        /LOCK=NONE &
                        /WITH=SYS_COUNTRY=PAYEES(SYS_COUNTRY)

                    PERFORM "GEMLB:LB_ADDRESSES" (&
                        "D", &
                        (SYS_COUNTRIES(SYS_COUNTRY)), &
                        "PAYEES", &
                        "9", &
                        "47", &
                        "", &
                        "", &
                        "", &
                        "", &
                        "", &
                        #R1, &
                        #R2, &
                        #R3, &
                        #R4, &
                        #R5)

                END_IF

                #PURCHASE_INVOICE_NUMBER = ""

                FIND IN SYS_CURRENCY_CODES &
                        /LOCK=NONE &
                        /WITH=SYS_CURRENCY_CODE=PURCHASE_INVOICES(SYS_CURRENCY_CODE)

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_82400
                        EXIT (%FAILURE)
                END_IF

                DISPLAY DEFAULTS

        IF ( #MISC_VENDOR = #YES )
            GOTO VENDOR_NUMBER
        END_IF

        IF (#GOT_CURRENCY_RATE = #NO)
            GOTO CHANGE_RATES
        ELSE
                    GOTO HEADER_MENU
        END_IF
        END_BLOCK
        
        BEGIN_BLOCK GET_HOLD_FLAG_1
            IF ( #AP_IN_USE=#YES )
                INPUT_BLOCK HOLD_FLAG_1 /ROW=3 /COL=68 &
                            /PROMPT=(FIELD_PROMPT(HOLD_FLAG)) &
                            /TARGET=PURCHASE_INVOICES(HOLD_FLAG) &
                            /LOV=AP_HOLD_FLAGS(HOLD_FLAG,CODE_DESCRIPTION) &
                            /LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
                            /USE_IF=(#AP_IN_USE=#YES)
                            
                IF ( PURCHASE_INVOICES(HOLD_FLAG)<>"")
                    FIND IN  AP_HOLD_FLAGS &
                        /LOCK= NONE&
                        /SECONDARY &
                        /WITH= COMPANY_CODE=#COMPANY_CODE &
                        /WITH= HOLD_FLAG=PURCHASE_INVOICES(HOLD_FLAG)
                    IF ( %STATUS<>%SUCCESS ) 
                        MESSAGE/IDENTIFIER/BELL/WAIT P_02104
                        GOTO GET_HOLD_FLAG_1  
                    END_IF              
                END_IF
            END_IF
        
        END_BLOCK

        BEGIN_BLOCK VENDOR_REF_1
                INPUT_BLOCK  /ROW=4 /COL=54 &
                        /PROMPT=(FIELD_PROMPT(VENDOR_INVOICE_NUMBER)) &
                        /TARGET=#VENDOR_INVOICE_NUMBER &
                        !Change 001 - Vendor invoice number is required
                        !/USING=PURCHASE_INVOICES(VENDOR_INVOICE_NUMBER)
                        /USING=PURCHASE_INVOICES(VENDOR_INVOICE_NUMBER),REQUIRED
                        !Change 001 End
			
                IF (PARAMETER("VENDOR_REFERENCE_UNIQUE") = #YES AND &
                                #VENDOR_INVOICE_NUMBER  <> "")

                        FIND IN PI:PURCHASE_INVOICES &
                                /LOCK=NONE &
                                /SECONDARY &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=DIVISION = #DIVISION &
                                /WITH=VENDOR_NUMBER = #VENDOR_NUMBER  &
                                /WITH=VENDOR_INVOICE_NUMBER = #VENDOR_INVOICE_NUMBER

                        IF (%STATUS = %SUCCESS)
                                #MESS = MESSAGE ("P_12241")
                                MESSAGE/IDENTIFIER/BELL/WAIT P_82984,#MESS,PI:PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)
                                GOTO VENDOR_REF_1
                        END_IF

                        FIND IN TR:AP_TRANSACTIONS &
                                /LOCK=NONE &
                                /SECONDARY &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=AP_DIVISION = #DIVISION &
                                /WITH=VENDOR_NUMBER = #VENDOR_NUMBER  &
                                /WITH=VENDOR_REFERENCE = #VENDOR_INVOICE_NUMBER &
                                /WITH=TRANSACTION_TYPE = PARAMETER("TTYPE_IN")

                        IF (%STATUS = %SUCCESS)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_82984,TR:AP_TRANSACTIONS(TRANSACTION_TYPE), &
                                        TR:AP_TRANSACTIONS(AP_TRANSACTION_NUMBER)
                                GOTO VENDOR_REF_1
                        END_IF

                        FIND IN BT:AP_BATCH_TRAN_LINES &
                                /LOCK=NONE &
                                /SECONDARY &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=AP_DIVISION = #DIVISION &
                                /WITH=VENDOR_NUMBER = #VENDOR_NUMBER  &
                                /WITH=VENDOR_REFERENCE = #VENDOR_INVOICE_NUMBER &
                                /WITH=TRANSACTION_TYPE = PARAMETER("TTYPE_IN")

                        IF (%STATUS = %SUCCESS)
                                #MESS = MESSAGE("P_00960")&" "&BT:AP_BATCH_TRAN_LINES(TRANSACTION_TYPE)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_82984,#MESS,BT:AP_BATCH_TRAN_LINES(BATCH_NUMBER)
                                GOTO VENDOR_REF_1
                        END_IF
                END_IF
        END_BLOCK

        OUTPUT_BLOCK VENDOR_NUMBER /ROW=5 /COL=12 &
                        /PROMPT=(FIELD_PROMPT(VENDOR_NUMBER)) &
                        /SOURCE=(PURCHASE_INVOICES(VENDOR_NUMBER))

        OUTPUT_BLOCK VENDOR_NAME /ROW=6 /COL=12 &
                        /SOURCE=(VENDORS(VENDOR_NAME))

        BEGIN_BLOCK NO_MISC_VENDOR
                IF (VENDORS(MISCELLANEOUS_VENDOR) <> #YES)

                OUTPUT_BLOCK  /ROW=5 /COL=46 &
                        /SOURCE=(PURCHASE_INVOICES(PAYEE_NUMBER))

                ELSE
        END_BLOCK

        BEGIN_BLOCK MISC_PAYEE
                INPUT_BLOCK  /ROW=5 /COL=46 &
                        /PROMPT=(MESSAGE("P_00496")) &
                        /SOURCE=(VENDORS(PAYEE_NUMBER)) &
                        /TARGET=PURCHASE_INVOICES(PAYEE_NUMBER) &
                        /LOV=PAYEES(PAYEE_NUMBER,PAYEE_NAME) &
                        /LOV_WITH=AP_DIVISION=PURCHASE_INVOICES(DIVISION) &
                        /LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
                        /LOV_WITH=ACTIVATION_STATUS = (PARAMETER("STATUS_ACTIVE"))

                        FIND IN PAYEES &
                                /LOCK=NONE &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=AP_DIVISION=PURCHASE_INVOICES(DIVISION) &
                                /WITH=PAYEE_NUMBER=PURCHASE_INVOICES(PAYEE_NUMBER)

                        IF (%STATUS <> %SUCCESS)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_32197
                                GOTO NO_MISC_VENDOR
                        END_IF

                        #TEN99_IN_USE = PAYEES(SYS_TEN99_IN_USE)
                        #DEF_TEN99_FORM =PAYEES(SYS_TEN99_RETURN_TYPE)
                        #DEF_TEN99_AMT_TYPE =PAYEES(SYS_TEN99_AMOUNT_TYPE)

                        IF (#VENDOR_TAX_RETAINERS_FLAG <> #YES)
                                #PAYEE_TAX_RETAINERS_FLAG = PAYEES(SYS_TAX_RETAINERS_FLAG)
                        END_IF

                        IF (PAYEES(ACTIVATION_STATUS) <> PARAMETER("STATUS_ACTIVE"))
                                MESSAGE/IDENTIFIER/BELL/WAIT P_02196
                                GOTO NO_MISC_VENDOR
                        END_IF

                        PURCHASE_INVOICES(PAYMENT_TYPE) = PAYEES(PAYMENT_TYPE)
                END_IF
        END_BLOCK

        OUTPUT_BLOCK VENDOR_NAME_1 /ROW=6 /COL=46 &
                        /SOURCE=(PAYEES(PAYEE_NAME))

        BEGIN_BLOCK DISPLAY_ADDRESS_1
                IF (VENDORS(MISCELLANEOUS_VENDOR) = #YES)

                FIND IN SYS_COUNTRIES &
                        /LOCK=NONE &
                        /WITH=SYS_COUNTRY=PAYEES(SYS_COUNTRY)

                PERFORM "GEMLB:LB_ADDRESSES" (&
                        "D", &
                        (SYS_COUNTRIES(SYS_COUNTRY)), &
                        "PAYEES", &
                        "9", &
                        "47", &
                        "", &
                        "", &
                        "", &
                        "", &
                        "", &
                        #R1, &
                        #R2, &
                        #R3, &
                        #R4, &
                        #R5)
                END_IF
        END_BLOCK

        BEGIN_BLOCK PERIOD
                IF (#NO_PAST_PERIODS = 0 AND #NO_FUTURE_PERIODS = 0)
                        PURCHASE_INVOICES(PERIOD) = #CURRENT_PERIOD
                        PURCHASE_INVOICES(YEAR)   = #CURRENT_YEAR
                ELSE

                INPUT_BLOCK  /ROW=12 /COL=22 &
                        /PROMPT=(FIELD_PROMPT(PERIOD)) &
                        /TARGET=PURCHASE_INVOICES(PERIOD)

                        IF (PURCHASE_INVOICES(PERIOD) > #NBR_PERIODS &
                        OR PURCHASE_INVOICES(PERIOD) =0)

                                MESSAGE/IDENTIFIER/BELL/WAIT P_12103,#NBR_PERIODS
                                GOTO PERIOD
                        END_IF
        END_BLOCK

        BEGIN_BLOCK YEAR
                INPUT_BLOCK  /ROW=13 /COL=22 &
                        /PROMPT=(MESSAGE("P_00908")) &
                        /TARGET=PURCHASE_INVOICES(YEAR)

                END_IF

                #YEAR = PURCHASE_INVOICES(YEAR)
                #PERIOD = PURCHASE_INVOICES(PERIOD)
        END_BLOCK

        OUTPUT_BLOCK CUR_PER /ROW=12 /COL=22 &
                        /SOURCE=(PURCHASE_INVOICES(PERIOD))

        BEGIN_BLOCK CUR_YEAR
                OUTPUT_BLOCK  /ROW=13 /COL=22 &
                        /SOURCE=(PURCHASE_INVOICES(YEAR))

                PERFORM "GEMLB:LB_SECURITY_PERIOD_CHECK" &
                                        (PARAMETER("MODULE_PO"), &
                                         #DIVISION, &
                                         (PURCHASE_INVOICES(PERIOD)), &
                                         (PURCHASE_INVOICES(YEAR)), &
                                         #CURRENT_PERIOD, &
                                         #CURRENT_YEAR)

                IF (%STATUS = %FAILURE)
                        IF (#NO_PAST_PERIODS = 0 AND #NO_FUTURE_PERIODS = 0)
                                GOTO VENDOR_REF_1
                        ELSE
                                GOTO PERIOD
                        END_IF
                END_IF
        END_BLOCK

        BEGIN_BLOCK GET_POSTING_DATE

                IF (#INC_POSTING_DATE = #YES)

                        FIND IN COMPANY_PERIOD_CONTROLS &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=CURRENT_YEAR=#YEAR

                        IF (%STATUS=%SUCCESS)

                                #START_DATE = TABLE_DATA("COMPANY_PERIOD_CONTROLS","START_DATE_"&MASK("!-0@",#PERIOD))
                                #END_DATE = TABLE_DATA("COMPANY_PERIOD_CONTROLS","END_DATE_"&MASK("!-0@",#PERIOD))

                        END_IF

                        #POSTING_DATE = %TODAY

                        IF (DAYS(#POSTING_DATE) < DAYS(#START_DATE))
                                #POSTING_DATE = #START_DATE
                        ELSE
                                IF (DAYS(#POSTING_DATE) > DAYS(#END_DATE))
                                        #POSTING_DATE = #END_DATE
                                END_IF
                        END_IF

                        INPUT_BLOCK POSTING_DATE /ROW=12 /COL=62 &
                                /PROMPT=(FIELD_PROMPT(POSTING_DATE)) &
                                /TARGET=#POSTING_DATE &
                                /USING=PURCHASE_INVOICES(POSTING_DATE) &
                                /USE_IF=(#INC_POSTING_DATE = #YES)

                                IF (#VALIDATE_POSTING_DATE = #YES)
                                        IF ((DAYS(#POSTING_DATE) < DAYS(#START_DATE)) OR (DAYS(#POSTING_DATE) > DAYS(#END_DATE)))
                                                MESSAGE/IDENTIFIER/BELL/WAIT P_83022,MASK("!DD-!3LM-!LY",#POSTING_DATE), &
                                                                MASK("!DD-!3LM-!LY",#START_DATE),MASK("!DD-!3LM-!LY",#END_DATE)
                                                GOTO POSTING_DATE
                                        ELSE
                                                PURCHASE_INVOICES(POSTING_DATE) = #POSTING_DATE
                                        END_IF
                                ELSE
                                        PURCHASE_INVOICES(POSTING_DATE) = #POSTING_DATE
                                END_IF
                ELSE
                        PURCHASE_INVOICES(POSTING_DATE) = PURCHASE_INVOICES(INVOICE_DATE)
                END_IF

        END_BLOCK

        BEGIN_BLOCK INVOICE_DATE_2

                #OLD_DATE = PURCHASE_INVOICES(INVOICE_DATE)

                INPUT_BLOCK INVOICE_DATE /ROW=13 /COL=62 &
                        /PROMPT=(FIELD_PROMPT(INVOICE_DATE)) &
                        /TARGET=PURCHASE_INVOICES(INVOICE_DATE) &
                        /USING=REQUIRED

                #INVOICE_DATE   = PURCHASE_INVOICES(INVOICE_DATE)

                IF ( #VALIDATE_POSTING_DATE = #YES AND &
                        DAYS( #INVOICE_DATE ) > DAYS( #POSTING_DATE ) )

                        MESSAGE/IDENTIFIER/BELL/WAIT P_13584, MASK( #DEF_DATE_MASK, #POSTING_DATE )
                        GOTO INVOICE_DATE_2
                END_IF

                IF ( #INVOICE_DATE <> #OLD_DATE AND &
                        #CURRENCY_METHOD <> "0")

                        PERFORM GET_NEW_INVOICE_RATE
                END_IF

        END_BLOCK

        BEGIN_BLOCK INTERCOMPANY
                IF (PURCHASE_INVOICES(INTERCOMPANY_POSTINGS) = "")
                        PURCHASE_INVOICES(INTERCOMPANY_POSTINGS) = #NO
                END_IF

                IF (#SECURITY_LEVEL = PARAMETER("SECURITY_LEVEL_HIGH"))
                    INPUT_BLOCK  /ROW=14 /COL=22 /LEN=1 &
                        /PROMPT=(FIELD_SHORT_PROMPT(INTERCOMPANY_POSTINGS)) &
                        /TARGET=PURCHASE_INVOICES(INTERCOMPANY_POSTINGS) &
                        /USING=REQUIRED &
                        /BACK=(GOTO INVOICE_DATE) &
                        /EXIT=(GOTO INVOICE_DATE)
                    IF ( PURCHASE_INVOICES(INTERCOMPANY_POSTINGS)=#YES)
						IF ( PURCHASE_INVOICES(PA_PROJECT_CODE)<>"") 
                            MESSAGE/IDENTIFIER/BELL/CONFIRM P_33137
                            PURCHASE_INVOICES(INTERCOMPANY_POSTINGS) = #NO
                            GOTO INTERCOMPANY
						END_IF
						
						FIND IN POP_LINES &
							/LOCK=NONE &
							/SECONDARY &
							/WITH=COMPANY_CODE=#COMPANY_CODE &
							/WITH=DIVISION=#DIVISION &
							/WITH=PO_NUMBER=PURCHASE_INVOICES(PO_NUMBER) &
							/WITH=PA_PROJECT_CODE<> ""				
						IF (%STATUS = %SUCCESS)
							MESSAGE/IDENTIFIER/BELL/CONFIRM P_33137
							PURCHASE_INVOICES(INTERCOMPANY_POSTINGS) = #NO
							GOTO INTERCOMPANY			
						END_IF

						FIND IN PA_POP_GL_POSTINGS &
							/LOCK=NONE &
							/SECONDARY &
							/WITH=COMPANY_CODE=#COMPANY_CODE &
							/WITH=DIVISION=#DIVISION &
							/WITH=PO_NUMBER=PURCHASE_INVOICES(PO_NUMBER)
						IF (%STATUS = %SUCCESS)
							MESSAGE/IDENTIFIER/BELL/CONFIRM P_33137
							PURCHASE_INVOICES(INTERCOMPANY_POSTINGS) = #NO
							GOTO INTERCOMPANY			
						END_IF							
                    END_IF                                                 
                ELSE
                        PURCHASE_INVOICES(INTERCOMPANY_POSTINGS) = #NO
                END_IF

        END_BLOCK

        BEGIN_BLOCK CREDIT_TERMS_CODE

                IF (PURCHASE_INVOICES(CREDIT_TERMS_CODE) = "")  PURCHASE_INVOICES(CREDIT_TERMS_CODE) = VENDORS(CREDIT_TERMS_CODE)

                INPUT_BLOCK  /ROW=15 /COL=22 &
                        /PROMPT=(FIELD_SHORT_PROMPT(CREDIT_TERMS_CODE)) &
                        /TARGET=PURCHASE_INVOICES(CREDIT_TERMS_CODE) &
                        /USING=REQUIRED &
                        /LOV=CREDIT_TERMS(CREDIT_TERMS_CODE,CODE_DESCRIPTION) &
                        /LOV_WITH=COMPANY_CODE=#COMPANY_CODE

                FIND IN CREDIT_TERMS &
                        /LOCK=NONE &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=CREDIT_TERMS_CODE=PURCHASE_INVOICES(CREDIT_TERMS_CODE)

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_00348
                        GOTO CREDIT_TERMS_CODE
                END_IF

                PERFORM CALCULATE_DUE_DATE
        END_BLOCK

        BEGIN_BLOCK CASH_DISCOUNTS_2
                FIND IN CREDIT_TERMS_DISCOUNTS &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=CREDIT_TERMS_CODE=PURCHASE_INVOICES(CREDIT_TERMS_CODE)

                IF (%STATUS = %SUCCESS)
                        PURCHASE_INVOICES(DISCOUNT_RECEIVED) = CREDIT_TERMS_DISCOUNTS(DISCOUNT_RECEIVED)

                        PURCHASE_INVOICES(DISCOUNT_DATE) = &
                                DATE(DAYS(PURCHASE_INVOICES(INVOICE_DATE)) + &
                                CREDIT_TERMS_DISCOUNTS(DAYS_ALLOWED))
                ELSE
                        PURCHASE_INVOICES(DISCOUNT_DATE)        = ""
                        PURCHASE_INVOICES(DISCOUNT_RECEIVED)    = 0
                END_IF
        END_BLOCK

        OUTPUT_BLOCK CODE_DESC /ROW=15 /COL=29 &
                        /SOURCE=(CREDIT_TERMS(CODE_DESCRIPTION))

        BEGIN_BLOCK DUE_DATE
                PERFORM DUE_DATE_CHECK
                IF (%STATUS = %BACK OR %STATUS = %EXIT)
                        GOTO CREDIT_TERMS_CODE
                END_IF
        END_BLOCK

    OUTPUT_BLOCK PRICING_METHOD /ROW=17 /COL=27 &
        /PROMPT = FIELD_PROMPT(PRICING_METHOD) &
        /SOURCE = PURCHASE_INVOICES(PRICING_METHOD) &
        /USE_IF = ( #PRICING_METHOD_STATE = #PRICING_METHOD_OPTIONAL )


    BEGIN_BLOCK /DISPLAY_ONLY PRICING_METHOD_DESC_LOOKUP
        IF ( #PRICING_METHOD_STATE = #PRICING_METHOD_OPTIONAL )
            FIND IN SYS_CONTROL_FLAG_DESCRIPTIONS &
                /LOCK = NONE &
                /WITH = SYS_CONTROL_FLAG_FIELD = "PRICING_METHOD" &
                /WITH = SYS_CONTROL_FLAG_LANG = #DESC_LANG &
                /WITH = SYS_CONTROL_FLAG_VALUE = #PRICING_METHOD
        END_IF
    END_BLOCK

    OUTPUT_BLOCK PRICING_METHOD_DESC /ROW=17 /COL=29 &
        /SOURCE = SYS_CONTROL_FLAG_DESCRIPTIONS(SYS_CONTROL_FLAG_DESC) &
        /USE_IF = ( #PRICING_METHOD_STATE = #PRICING_METHOD_OPTIONAL )

    BEGIN_BLOCK PROJECT_INPUT
            IF ( #PA_IN_USE = #YES AND (PURCHASE_INVOICES(INTERCOMPANY_POSTINGS)) = #NO) 
            	#ORIGINAL_WBS_MASKED = #WBS_NUMBER_MASKED
				#ORIGINAL_WBS_NUMBER = #WBS_NUMBER
				#ORIGINAL_PROJECT	 = #PROJECT
				
                INPUT_BLOCK PROJECT_IN /ROW=18 /COL=22 /LEN=30 &
                    /TARGET=#PROJECT &
                    /PROMPT=FIELD_PROMPT(PA_WBS_NUMBER) &
                    /USING=NOLOWER &
                    /LOV=PA_PROJECTS(PA_PROJECT_CODE,PA_PROJECT_NAME,PA_OPEN_DATE) &
                    /LOV_WITH=COMPANY_CODE = #COMPANY_CODE &
                    /LOV_WITH=PA_PROJECT_STATUS = #STATUS_APPROVED &
                    /LOV_WITH=PA_PROJECT_STATUS = #STATUS_OPEN &
                    /LOV_WITH=PA_UPDATES_ALLOWED = #YES &
                    /LOV_SELECTION= ("A AND C AND D") &
                    /USE_IF=(#PA_IN_USE = #YES AND #PROJECT = "" )
 
                IF ( #PROJECT <> "" ) 
                    PERFORM "GEMLB:PA_L_WBS" ( &
                            (#COMPANY_CODE), &
                            #PROJECT, &
                            #WBS_NUMBER, &
                            (#NO), &
                            #POSTING_DATE, #PERIOD , #YEAR ,&
                            (#YES), &
                            ("O"), &
                            (#YES), &
                            1, "", "", &
                            #ERROR_OCCURRED, &
                            #ERROR_MESSAGE, &
                            #WBS_NUMBER_MASKED, & 
                            #WBS_LEVEL_1, &
                            #WBS_LEVEL_2, &
                            #WBS_LEVEL_3, &
                            #WBS_LEVEL_4, &
                            #WBS_LEVEL_5, &
                            #ACTIVITY_DESCRIP )
                    IF (#ERROR_OCCURRED = 1)
                            ERROR/WAIT/TEXT_ONLY #ERROR_MESSAGE
                            GOTO PROJECT_IN
                    END_IF                            
                    IF ( #WBS_NUMBER_MASKED = "" ) 
                        #PROJECT    = ""
                        #WBS_NUMBER = ""
                    END_IF 
                END_IF
                
                PERFORM CHECK_FOR_PA_CHANGES(#PROJECT, #WBS_NUMBER)
				IF ( %STATUS = %BACK ) 
					#WBS_NUMBER_MASKED = #ORIGINAL_WBS_MASKED
					#PROJECT		   = #ORIGINAL_PROJECT
					#WBS_NUMBER 	   = #ORIGINAL_WBS_NUMBER
				END_IF 
				
				IF ( %STATUS <> %FAILURE ) 
					PURCHASE_INVOICES(PA_PROJECT_CODE) 	= #PROJECT
					PURCHASE_INVOICES(PA_WBS_NUMBER) 	= #WBS_NUMBER					
				END_IF                           
                OUTPUT_BLOCK PROJECT /ROW=18 /COL=22 /LEN=30 &
                    /SOURCE=#WBS_NUMBER_MASKED &
                    /PROMPT=FIELD_PROMPT(PA_WBS_NUMBER) &
                    /USE_IF=(#PA_IN_USE = #YES)
                
            END_IF  
    END_BLOCK

        BEGIN_BLOCK WHICH_TAX
                INPUT_BLOCK SYS_TAXABLE_CODE /ROW=19 /COL=27 &
                        /PROMPT=(FIELD_PROMPT(SYS_TAXABLE_CODE)) &
                        /TARGET=#SYS_TAXABLE_CODE &
                        /USING=PURCHASE_INVOICES(SYS_TAXABLE_CODE)

                PERFORM "GEMLB:LB_CHK_TAX_FLAG" ( &
                                (#SYS_TAXABLE_CODE), &
                                (#DIVISION_ACCRUE_TAX), &
                                (#USE_TAX_IN_USE), &
                                (#VENDOR_TAXABLE_CODE), &
                (#PRICING_METHOD), &
                #ERROR)

                IF (%STATUS <> %NORMAL)
                        ERROR/TEXT_ONLY/NOWAIT/NOBELL #ERROR
                        GOTO WHICH_TAX
                END_IF

                PERFORM CHECK_TAXABLE
                IF (%STATUS <> %NORMAL)
                        GOTO WHICH_TAX
                END_IF

                PURCHASE_INVOICES(SYS_TAXABLE_CODE) = #SYS_TAXABLE_CODE
        END_BLOCK

        INPUT_BLOCK COST_CENTER /ROW=19 /COL=42 &
                        /PROMPT=(FIELD_PROMPT(COST_CENTER)) &
                        /TARGET=PURCHASE_INVOICES(COST_CENTER) &
                        /BACK=(GOTO CREDIT_TERMS_CODE) &
                        /LOV=COST_CENTERS(COST_CENTER,DESCRIPTION) &
                        /LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
                        /LOV_WITH=SOURCE_MODULE=(PARAMETER("LOCAL_SOURCE_MODULE"))

        BEGIN_BLOCK COST_CENTER_DESC
                IF (PURCHASE_INVOICES(COST_CENTER) <> "")
                        FIND IN COST_CENTERS &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=SOURCE_MODULE=(PARAMETER("LOCAL_SOURCE_MODULE")) &
                                /WITH=COST_CENTER=PURCHASE_INVOICES(COST_CENTER)

                        IF (%STATUS = %FAILURE)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_00347
                                GOTO COST_CENTER
                        END_IF

                OUTPUT_BLOCK  /ROW=19 /COL=46 &
                        /SOURCE=(COST_CENTERS(DESCRIPTION))

                END_IF
        END_BLOCK

        BEGIN_BLOCK CHANGE_RATES
                IF (#CURRENCY_RATE_OVERRIDE = #NO)
                        ! do not show currency rate input block
                        GOTO GET_CURRENCY_2
                END_IF

                IF (#DATE_CODE = #DUE_CODE AND PURCHASE_INVOICES(DUE_DATE) <> "")
                        #EFFECTIVE_DATE = PURCHASE_INVOICES(DUE_DATE)
                ELSE
                        #EFFECTIVE_DATE = PURCHASE_INVOICES(INVOICE_DATE)
                END_IF

                DELETE ALL FROM SYS_CURRENCY_CONTROL_VT
                CLEAR_BUFFER SYS_CURRENCY_CONTROL_VT

                SYS_CURRENCY_CONTROL_VT(COMPANY_CODE)   = #COMPANY_CODE
                SYS_CURRENCY_CONTROL_VT(DIVISION)       = PURCHASE_INVOICES(DIVISION)
                SYS_CURRENCY_CONTROL_VT(SOURCE_MODULE)  = #PO
                SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE) = PURCHASE_INVOICES(SYS_CURRENCY_CODE)
                SYS_CURRENCY_CONTROL_VT(RATE_TYPE) = PURCHASE_INVOICES(SYS_RATE_TYPE)
                SYS_CURRENCY_CONTROL_VT(FIXED_RATE_INDIC) = GOODS_RECEIVED_HEADERS(SYS_CURRENCY_FIXED_FLAG)
                SYS_CURRENCY_CONTROL_VT(FIRST_CURRENCY_RATE) = GOODS_RECEIVED_HEADERS(SYS_CURRENCY_RATE)
                SYS_CURRENCY_CONTROL_VT(SECOND_CURRENCY_RATE) = GOODS_RECEIVED_HEADERS(SYS_CURRENCY_2_RATE)
                SYS_CURRENCY_CONTROL_VT(CURRENCY_DATE) = #EFFECTIVE_DATE
                SYS_CURRENCY_CONTROL_VT(RATE_AUTHORITY) = PURCHASE_INVOICES(SYS_RATE_AUTHORITY)
                SYS_CURRENCY_CONTROL_VT(RATE_OVERRIDE)  = GOODS_RECEIVED_HEADERS(SYS_CURRENCY_FIXED_FLAG)
                SYS_CURRENCY_CONTROL_VT(CODE_RATE_INPUT_FLAG)   = "N"
                ! Allow to modify only a rate and not a currency code
                ADD TO SYS_CURRENCY_CONTROL_VT

            PERFORM "GEMLB:LB_C_CURRENCY_RATES" &
            (#CURRENCY_RATE_OVERRIDE,#R_STATUS,#R_MESSAGE)
                        IF (#R_STATUS = #NO)

                                ERROR/TEXT_ONLY/WAIT #R_MESSAGE
                                EXIT(%FAILURE)
                        END_IF

                FIND IN SYS_CURRENCY_CONTROL_VT
                        IF (%STATUS = %FAILURE)
                                MESSAGE/IDENTIFIER/WAIT/BELL P_91710
                                EXIT(%FAILURE)
                        END_IF

                IF (SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE) <> PURCHASE_INVOICES(SYS_CURRENCY_CODE))
                        ERROR/TEXT_ONLY/WAIT MESSAGE("P_00349")
                        GOTO CHANGE_RATES
                END_IF

                #CURRENCY_RATE = SYS_CURRENCY_CONTROL_VT(FIRST_CURRENCY_RATE)
                #CURRENCY_RATIO_INDIC= SYS_CURRENCY_CONTROL_VT(CURR_RATIO_INDIC)
                #CURRENCY_FIXED = SYS_CURRENCY_CONTROL_VT(FIXED_RATE_INDIC)
                #CURRENCY_MASK = SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_MASK)
                #CURRENCY_DECIMAL = SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_DECIMALS)
                #CURRENCY_DATE= SYS_CURRENCY_CONTROL_VT(CURRENCY_DATE)
                #CURRENCY_2_RATE = SYS_CURRENCY_CONTROL_VT(SECOND_CURRENCY_RATE)
                #CURRENCY_2_RATIO = SYS_CURRENCY_CONTROL_VT(SYS_CURRENCY_2_RATIO_INDIC)
                #RATE_TYPE = SYS_CURRENCY_CONTROL_VT(RATE_TYPE)
                #RATE_AUTHORITY = SYS_CURRENCY_CONTROL_VT(RATE_AUTHORITY)

                PURCHASE_INVOICES(SYS_CURRENCY_RATIO_INDIC) = #CURRENCY_RATIO_INDIC
                PURCHASE_INVOICES(SYS_CURRENCY_RATE) = #CURRENCY_RATE
                PURCHASE_INVOICES(SYS_CURRENCY_2_RATE) = #CURRENCY_2_RATE
                PURCHASE_INVOICES(SYS_CURRENCY_2_RATIO_INDIC) = #CURRENCY_2_RATIO
                PURCHASE_INVOICES(SYS_CURRENCY_FIXED_FLAG) = #CURRENCY_FIXED
                PURCHASE_INVOICES(SYS_CURRENCY_DATE) = #CURRENCY_DATE
                PURCHASE_INVOICES(SYS_RATE_TYPE) = #RATE_TYPE
                PURCHASE_INVOICES(SYS_RATE_AUTHORITY) = #RATE_AUTHORITY
        END_BLOCK

        OUTPUT_BLOCK GET_CURRENCY_2 /ROW=20 /COL=27 &
                        /PROMPT=(FIELD_PROMPT(SYS_CURRENCY_CODE)) &
                        /SOURCE=(PURCHASE_INVOICES(SYS_CURRENCY_CODE))

        OUTPUT_BLOCK GET_CURRENCY_3 /ROW=20 /COL=34 &
                        /SOURCE=(SYS_CURRENCY_CODES(SYS_CURRENCY_SHORT_DESC))

        OUTPUT_BLOCK CURRENCY_RATE /ROW=21 /COL=27 &
                        /PROMPT=(FIELD_PROMPT(SYS_CURRENCY_RATE)) &
                        /SOURCE=(PURCHASE_INVOICES(SYS_CURRENCY_RATE)) &
                        /USING=PURCHASE_INVOICES(SYS_CURRENCY_RATE) &
                        /ATTRIBUTES=BOLD &
                        /USE_IF=(#CURRENCY_METHOD <> '0')

        MENU_BLOCK HEADER_MENU /ROW=18 /COL=48 &
                        /TITLE=("") &
                        /SOURCE=(MESSAGE("P_00110")) &
                        /BACK=(EXIT(%EXIT)) &
                        /EXIT=(EXIT(%EXIT)) &
                        /ITEM=(MESSAGE("P_00110")),(MESSAGE("P_24108")),(GOTO GET_TRANSACTION_TYPE) &
                        /ITEM=(MESSAGE("P_00323")),(MESSAGE("P_00057")),(GOTO GET_HOLD_FLAG_1) &
                        /ITEM=(MESSAGE("P_66142")),(MESSAGE("P_50022")),(GOTO ANALYSIS_CODES) &
                        /ITEM=(MESSAGE("P_00257")),(MESSAGE("P_34088")),(EXIT)

        BEGIN_BLOCK ANALYSIS_CODES
                #OLD_PAYEE = PURCHASE_INVOICES(PAYEE_NUMBER)
                PERFORM MAINTAIN_PAYMENT_ANALYSIS
                IF (#OLD_PAYEE <> PURCHASE_INVOICES(PAYEE_NUMBER))

                OUTPUT_BLOCK  /ROW=5 /COL=46 &
                        /SOURCE=(PURCHASE_INVOICES(PAYEE_NUMBER))

                FIND IN PAYEES &
                        /LOCK=NONE &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=AP_DIVISION=PURCHASE_INVOICES(DIVISION) &
                        /WITH=PAYEE_NUMBER=PURCHASE_INVOICES(PAYEE_NUMBER)

                #TEN99_IN_USE = PAYEES(SYS_TEN99_IN_USE)
                #DEF_TEN99_FORM =PAYEES(SYS_TEN99_RETURN_TYPE)
                #DEF_TEN99_AMT_TYPE =PAYEES(SYS_TEN99_AMOUNT_TYPE)

                IF (#VENDOR_TAX_RETAINERS_FLAG <> #YES)
                        #PAYEE_TAX_RETAINERS_FLAG = PAYEES(SYS_TAX_RETAINERS_FLAG)
                END_IF

                FIND IN SYS_COUNTRIES &
                        /LOCK=NONE &
                        /WITH=SYS_COUNTRY=PAYEES(SYS_COUNTRY)
        END_BLOCK

        OUTPUT_BLOCK REDISPLAY_PAYEE_NAME /ROW=6 /COL=46 &
                        /SOURCE=(PAYEES(PAYEE_NAME))

        BEGIN_BLOCK REDISPLAY_PAYEE_ADDRESS
                        PERFORM "GEMLB:LB_ADDRESSES" (&
                                "D", &
                                (SYS_COUNTRIES(SYS_COUNTRY)), &
                                "PAYEES", &
                                "9", &
                                "47", &
                                "", &
                                "", &
                                "", &
                                "", &
                                "", &
                                #R1, &
                                #R2, &
                                #R3, &
                                #R4, &
                                #R5)
                END_IF
        END_BLOCK

        BEGIN_BLOCK FINISH_PAYMENT_INFO
                DISPLAY DEFAULTS
                GOTO HEADER_MENU
        END_BLOCK

        BEGIN_BLOCK GET_TRANSACTION_TYPE
                IF ((PURCHASE_INVOICES(PA_PROJECT_CODE) <> "") OR (PURCHASE_INVOICES(PA_WBS_NUMBER) <> ""))
                    PERFORM "GEMPA:PA_V_COMMON" PA_WBS_UPDATE_VALIDATION ( &
                         #COMPANY_CODE, & 
                        (PURCHASE_INVOICES(PA_PROJECT_CODE)), &
                        (PURCHASE_INVOICES(PA_WBS_NUMBER)), &
                        (PURCHASE_INVOICES(POSTING_DATE)),   &
                        (PURCHASE_INVOICES(PERIOD)) ,        &
                        (PURCHASE_INVOICES(YEAR)) ,#YES, &
                        "O",(PARAMETER("CALL_MODE_W")),"","","", &
                        #R_STATUS)
                        
                        IF ( #R_STATUS = 1 ) 
                                MESSAGE/IDENTIFIER/BELL/WAIT P_33073, #CHKPA_PROJECT
                                GOTO HEADER_MENU
                        END_IF      

                END_IF

                IF (#AP_IN_USE = #YES)

                BEGIN_BLOCK GET_TRANSACTION_TYPE_AP
                FIND IN AP_TRANSACTION_TYPES &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=TRANSACTION_TYPE=(PARAMETER("TTYPE_IN")) &
                        /LOCK=NONE

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_00878
                        EXIT(%FAILURE)
                END_IF

                #MANUAL         = AP_TRANSACTION_TYPES(MANUAL_NUMBER)
                #ALLOW_NEGATIVES   = AP_TRANSACTION_TYPES(SYS_ALLOW_NEGATIVE_POSTINGS)
                #MODIFY_GL_CONTROL = AP_TRANSACTION_TYPES(SYS_MODIFY_GL_CONTROL)
                #DORC              = AP_TRANSACTION_TYPES(DORC_INDICATOR)
                END_BLOCK

                ELSE
                BEGIN_BLOCK GET_TRANSACTION_TYPE_POP
                FIND IN POP_TRANSACTION_TYPES &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=TRANSACTION_TYPE=(PARAMETER("TTYPE_IN")) &
                        /LOCK=NONE

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_00878
                        EXIT(%FAILURE)
                END_IF

                #MANUAL            = POP_TRANSACTION_TYPES(MANUAL_NUMBER)
                #ALLOW_NEGATIVES   = POP_TRANSACTION_TYPES(SYS_ALLOW_NEGATIVE_POSTINGS)
                #MODIFY_GL_CONTROL = #NO
                END_BLOCK
                END_IF

        END_BLOCK

        BEGIN_BLOCK PURCHASE_INVOICE_NUMBER
        IF (#MANUAL <> #YES)
                !
                ! Automatic IN number assigned
                !
                        IF (#AP_IN_USE = #YES)

                                FIND IN AP_TRANSACTION_TYPES &
                                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                                /WITH=DIVISION=#DIVISION &
                                                /WITH=TRANSACTION_TYPE=(PARAMETER("TTYPE_IN")) &
                                                /LOCK=WRITE


                        ELSE
                                FIND IN POP_TRANSACTION_TYPES &
                                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                                /WITH=DIVISION=#DIVISION &
                                                /WITH=TRANSACTION_TYPE=(PARAMETER("TTYPE_IN")) &
                                                /LOCK=WRITE

                        END_IF
                        IF (%STATUS = %FAILURE)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_00878
                                EXIT(%FAILURE)
                        END_IF

        END_BLOCK

        BEGIN_BLOCK CHECK_NUMBER

                        IF (#AP_IN_USE = #YES)
                    #PURCHASE_INVOICE_NUMBER = AP_TRANSACTION_TYPES(AP_TRANSACTION_NUMBER)
                AP_TRANSACTION_TYPES(AP_TRANSACTION_NUMBER)=#PURCHASE_INVOICE_NUMBER + 1
                        ELSE
                    #PURCHASE_INVOICE_NUMBER = POP_TRANSACTION_TYPES(AP_TRANSACTION_NUMBER)
                POP_TRANSACTION_TYPES(AP_TRANSACTION_NUMBER)=#PURCHASE_INVOICE_NUMBER + 1
                        END_IF

                        FIND IN AP_TRANSACTIONS &
                                        /LOCK=NONE &
                                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                                        /WITH=AP_DIVISION=#DIVISION &
                                        /WITH=TRANSACTION_TYPE=(PARAMETER("TTYPE_IN")) &
                                        /WITH=AP_TRANSACTION_NUMBER=#PURCHASE_INVOICE_NUMBER

                        IF (%STATUS = %SUCCESS)
                                        MESSAGE/IDENTIFIER/BELL/WAIT P_00875
                                        GOTO CHECK_NUMBER
                        END_IF

                        FIND IN AP_BATCH_TRAN_LINES &
                                        /LOCK=NONE &
                                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                                        /WITH=AP_DIVISION=#DIVISION &
                                        /WITH=TRANSACTION_TYPE=(PARAMETER("TTYPE_IN")) &
                                        /WITH=AP_TRANSACTION_NUMBER=#PURCHASE_INVOICE_NUMBER

                        IF (%STATUS = %SUCCESS)
                                        MESSAGE/IDENTIFIER/BELL/WAIT P_22338,#PURCHASE_INVOICE_NUMBER
                                        GOTO CHECK_NUMBER
                                                END_IF

                                                FIND IN AA:PURCHASE_INVOICES    &
                                                        /LOCK=NONE &
                                                        /SECONDARY &
                                                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                                                        /WITH=DIVISION=#DIVISION        &
                                                        /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER

                                                IF (%STATUS     = %SUCCESS)
                                                        MESSAGE/IDENTIFIER/BELL/WAIT P_52263
                                                        GOTO CHECK_NUMBER
                                                END_IF

                                                OUTPUT_BLOCK  /ROW=2 /COL=68 &
                                                        /PROMPT=(FIELD_PROMPT(PURCHASE_INVOICE_NUMBER)) &
                                                        /SOURCE=(#PURCHASE_INVOICE_NUMBER) &
                                                        /USING=PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)
        END_BLOCK

                BEGIN_BLOCK MANUAL_PURCHASE_INVOICE

                ELSE
                        IF (#REGISTRATION_NUMBER <> "") #PURCHASE_INVOICE_NUMBER = #REGISTRATION_NUMBER

                        !
                        ! Else - Manual PO number to be entered
                        !

                        INPUT_BLOCK  /ROW=2 /COL=68 /NEW /PROTECT &
                                /DOMAIN=PURCHASE_INVOICES &
                                /PROMPT=(FIELD_PROMPT(PURCHASE_INVOICE_NUMBER)) &
                                /TARGET=#PURCHASE_INVOICE_NUMBER &
                                /USING=PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER),REQUIRED &
                                /LOV=PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER,VENDOR_NUMBER,INVOICE_DATE) &
                                /LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
                                /LOV_WITH=DIVISION=#DIVISION &
                                /LOV_SECONDARY


                                FIND IN AP_TRANSACTIONS &
                                        /LOCK=NONE &
                                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                                        /WITH=AP_DIVISION=#DIVISION &
                                        /WITH=TRANSACTION_TYPE=(PARAMETER("TTYPE_IN")) &
                                        /WITH=AP_TRANSACTION_NUMBER=#PURCHASE_INVOICE_NUMBER

                                IF (%STATUS = %SUCCESS)
                                        MESSAGE/IDENTIFIER/BELL/WAIT P_00875
                                        GOTO PURCHASE_INVOICE_NUMBER
                                END_IF

                                FIND IN AP_BATCH_TRAN_LINES &
                                        /LOCK=NONE &
                                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                                        /WITH=AP_DIVISION=#DIVISION &
                                        /WITH=TRANSACTION_TYPE=(PARAMETER("TTYPE_IN")) &
                                        /WITH=AP_TRANSACTION_NUMBER=#PURCHASE_INVOICE_NUMBER

                                IF (%STATUS = %SUCCESS)
                                        MESSAGE/IDENTIFIER/BELL/WAIT P_22338,#PURCHASE_INVOICE_NUMBER
                                        GOTO PURCHASE_INVOICE_NUMBER
                                END_IF
                END_IF
        END_BLOCK

        BEGIN_BLOCK FIND_TAX_INFO

!??? Shouldn't EC reporting be using the invoice header delivery address (#CORPORATE_ADDRESS_CODE)?

                FIND IN CORPORATE_ADDRESSES &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=ADDRESS_CODE=#CORPORATE_ADDRESS_CODE &
                        /LOCK=NONE

                IF (%STATUS = %SUCCESS)
                        IF (#COMPANY_EC_REPORT_TYPE <> "")
                                PERFORM DECIDE_EC_REPORTING
                        END_IF
                END_IF

        END_BLOCK
! update GRNs...
        BEGIN_BLOCK UPDATE_GRN
                #DEFAULT_PO_NUMBER=""
                #COUNT=0
                START_STREAM UPGRNS &
                    /TABLE=GOODS_RECEIVED_HEADERS &
                    /LOCK = WRITE &
                    /SECONDARY &
                    /WITH = COMPANY_CODE = #COMPANY_CODE &
                    /WITH = DIVISION = #DIVISION &
                    /WITH = GRN_NUMBER AMONG #GRN_NUMBER
                WHILE (1)
                    FETCH UPGRNS /FAILURE=(CONTINUE OUT)
                    UPGRNS:GOODS_RECEIVED_HEADERS(ALLOCATION_DATE) = %NOW
                    UPGRNS:GOODS_RECEIVED_HEADERS(INVOICE_COPY) = #YES

                    !Get PO numbers...
                    IF ( UPGRNS:GOODS_RECEIVED_HEADERS(DEFAULT_PO_NUMBER) <> "" AND &
                         UPGRNS:GOODS_RECEIVED_HEADERS(POP_COPY) = PARAMETER("LANGUAGE_YES") ) 
                        IF ( #COUNT>0 ) 
                            #DEFAULT_PO_NUMBER=#DEFAULT_PO_NUMBER & "," & UPGRNS:GOODS_RECEIVED_HEADERS(DEFAULT_PO_NUMBER)
                        ELSE
                            #DEFAULT_PO_NUMBER= UPGRNS:GOODS_RECEIVED_HEADERS(DEFAULT_PO_NUMBER)
                            #POP_COPY=UPGRNS:GOODS_RECEIVED_HEADERS(POP_COPY)
                         END_IF
                    END_IF
                    
                    #COUNT=#COUNT+1                 
                END_WHILE
                
                IF ( #COUNT=0 ) 
                    MESSAGE/IDENTIFIER/BELL/WAIT P_62303
                    IF ( #SELECT_MODE<>"" ) 
                        EXIT
                    ELSE
                        GOTO GRN_NUMBER
                    END_IF
                END_IF
                         
        END_BLOCK

        BEGIN_BLOCK ENTER_INVOICE_LINES
        
                #TFREIGHT=0.0
                #TMIS    =0.0
                #TOD     =0.0
                #TSEFT   =0.0
                #TSNFT   =0.0
                #TSEMT   =0.0
                #TSNMT   =0.0
                IF (#DEFAULT_PO_NUMBER <> "" AND #POP_COPY = PARAMETER("LANGUAGE_YES"))

                        START_STREAM PHVALS &
                            /TABLE=POP_HEADERS&
                            /LOCK=NONE &
                            /SECONDARY &
                            /WITH=COMPANY_CODE=#COMPANY_CODE &
                            /WITH=DIVISION=#DIVISION &
                            /WITH=PO_NUMBER AMONG #DEFAULT_PO_NUMBER &
                            /STATISTIC=#TFREIGHT=TOTAL(PHVALS:POP_HEADERS(FREIGHT)) &
                            /STATISTIC=#TMIS=TOTAL(PHVALS:POP_HEADERS(MISCELLANEOUS)) &
                            /STATISTIC=#TOD=TOTAL(PHVALS:POP_HEADERS(ORDER_DISCOUNT)) &
                            /STATISTIC=#TSEFT=TOTAL(PHVALS:POP_HEADERS(SYS_E_FREIGHT_TAX_VAL)) &
                            /STATISTIC=#TSNFT=TOTAL(PHVALS:POP_HEADERS(SYS_N_FREIGHT_TAX_VAL)) &
                            /STATISTIC=#TSEMT=TOTAL(PHVALS:POP_HEADERS(SYS_E_MISC_TAX_VAL)) &
                            /STATISTIC=#TSNMT=TOTAL(PHVALS:POP_HEADERS(SYS_N_MISC_TAX_VAL))
                         FETCH PHVALS
                         IF ( %STATUS = %NORMAL ) 
                             PURCHASE_INVOICES(FREIGHT_TAX_CODE)             = POP_HEADERS(FREIGHT_TAX_CODE)
                             PURCHASE_INVOICES(FREIGHT)                      = #TFREIGHT
                             PURCHASE_INVOICES(MISCELLANEOUS)                = #TMIS
                             PURCHASE_INVOICES(MISC_TAX_CODE)                = POP_HEADERS(MISC_TAX_CODE)
                             IF ( #SELECT_MODE<>"" AND #COUNT>1 AND #GET_PERCENT=#NO)
                                 PURCHASE_INVOICES(ORDER_DISCOUNT_PERCENT)   = 0.0
                             ELSE
                                 PURCHASE_INVOICES(ORDER_DISCOUNT_PERCENT)   = POP_HEADERS(ORDER_DISCOUNT_PERCENT)                          
                             END_IF 
                             PURCHASE_INVOICES(ORDER_DISCOUNT)               = #TOD
                             PURCHASE_INVOICES(SYS_FREIGHT_TAXABLE_CODE)     = POP_HEADERS(SYS_FREIGHT_TAXABLE_CODE)
                             PURCHASE_INVOICES(SYS_MISC_TAXABLE_CODE)        = POP_HEADERS(SYS_MISC_TAXABLE_CODE)
                             PURCHASE_INVOICES(ORDER_DISCOUNT_GROUP)         = POP_HEADERS(ORDER_DISCOUNT_GROUP)
                             PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)      = #PURCHASE_INVOICE_NUMBER
                             PURCHASE_INVOICES(SYS_E_FREIGHT_TAX_VAL)        = #TSEFT
                             PURCHASE_INVOICES(SYS_N_FREIGHT_TAX_VAL)        = #TSNFT
                             PURCHASE_INVOICES(SYS_E_MISC_TAX_VAL)           = #TSEMT
                             PURCHASE_INVOICES(SYS_N_MISC_TAX_VAL)           = #TSNMT
                         ELSE
                             MESSAGE/BELL/IDENTIFIER/WAIT P_52168, #DEFAULT_PO_NUMBER
                             ROLLBACK
                             EXIT(%FAILURE)
                         END_IF     
                            
                ELSE
                        PURCHASE_INVOICES(SYS_FREIGHT_TAXABLE_CODE)     = PURCHASE_INVOICES(SYS_TAXABLE_CODE)
                        PURCHASE_INVOICES(SYS_MISC_TAXABLE_CODE)        = PURCHASE_INVOICES(SYS_TAXABLE_CODE)
                        PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)      = #PURCHASE_INVOICE_NUMBER
                        PURCHASE_INVOICES(ORDER_DISCOUNT_GROUP)         = #VENDOR_ORDER_DISC_GRP
                        PURCHASE_INVOICES(ORDER_DISCOUNT_PERCENT)       = 0.0
                        PURCHASE_INVOICES(LINE_VALUE_DISCOUNTED)        = 0.0
                        PURCHASE_INVOICES(SYS_E_TAX_DISC_VAL)           = 0.0
                        PURCHASE_INVOICES(SYS_N_TAX_DISC_VAL)           = 0.0
                        PURCHASE_INVOICES(SYS_TAX_RETAINERS_CURRENCY)   = 0.0
                        PURCHASE_INVOICES(FREIGHT)                      = 0.0
                        PURCHASE_INVOICES(MISCELLANEOUS)                = 0.0
                        PURCHASE_INVOICES(FREIGHT_TAX_CODE)             = ""
                        PURCHASE_INVOICES(MISC_TAX_CODE)                = ""
                END_IF
                !++
                ! Check if freight and/or miscellaneous should be taxable or not.  This should
                ! be indenpendent of the default taxable code on the invoice header since
                ! the freight and misc taxable code can be changed on the totals screen.
                !--

                IF (#FREIGHT_TAXABLE = PARAMETER("LANGUAGE_YES"))

                        !++
                        ! Freight is to be taxed, so store tax code for freight.
                        !--
                        PURCHASE_INVOICES(FREIGHT_TAX_CODE) = #DEF_FREIGHT_TAX_CODE
                END_IF

                IF (#MISC_TAXABLE = PARAMETER("LANGUAGE_YES"))

                        !++
                        ! Miscellaneous is to be taxed, so store tax code for miscellaneous.
                        !--
                        PURCHASE_INVOICES(MISC_TAX_CODE) = #DEF_MISC_TAX_CODE
                END_IF
                PURCHASE_INVOICES(VENDOR_INVOICE_NUMBER)        = #VENDOR_INVOICE_NUMBER
                PURCHASE_INVOICES(SYSTEM_DATE)                  = %NOW
                PURCHASE_INVOICES(USERNAME)                     = %USERNAME
                PURCHASE_INVOICES(UPDATE_FLAG)                  = PARAMETER("UPDATE_FLAG_E")
                PURCHASE_INVOICES(INVOICE_RUN_NUMBER)           = ""
                PURCHASE_INVOICES(INVOICE_APPROVAL_CODE)        = #INVOICE_APPROVAL_CODE
                PURCHASE_INVOICES(POP_INVOICE_CYCLE)            = PARAMETER("GRN_INVOICE")
                PURCHASE_INVOICES(INVOICE_METHOD)               = PARAMETER("MODULE_PO")
                PURCHASE_INVOICES(POP_COMMITMENT_PERIOD)        = POP_HEADERS(POP_COMMITMENT_PERIOD)
                PURCHASE_INVOICES(POP_COMMITMENT_YEAR)          = POP_HEADERS(POP_COMMITMENT_YEAR) 
                PURCHASE_INVOICES(SYS_COPY_REGISTER_TAX)        = #COPY_REGISTER_TAX
                PURCHASE_INVOICES(SYS_COPY_REGISTER_TAX_RETAINERS) = #COPY_REGISTER_RETAINERS


                ADD TO PURCHASE_INVOICES

                IF (%STATUS <> %NORMAL)
                        MESSAGE/BELL/IDENTIFIER/WAIT P_02609, "PURCHASE_INVOICES"
                        ROLLBACK
                        EXIT(%FAILURE)
                END_IF

                !
                !  New code here for E08224 to create PURCHASE_REGISTER_LINES
                !
                IF      (#REGISTRATION_NUMBER <> "")
                        FIND IN PURCHASE_REGISTER &
                                /LOCK=WRITE     &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=DIVISION=#DIVISION &
                                /WITH=REGISTRATION_NUMBER=#REGISTRATION_NUMBER

                        IF      (%STATUS = %FAILURE)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_00861
                                ROLLBACK
                                EXIT(%FAILURE)
                        END_IF

                        CLEAR_BUFFER PURCHASE_REGISTER_LINES

                        PURCHASE_REGISTER_LINES(COMPANY_CODE)           = #COMPANY_CODE
                        PURCHASE_REGISTER_LINES(DIVISION)               = #DIVISION
                        PURCHASE_REGISTER_LINES(REGISTRATION_NUMBER)    = #REGISTRATION_NUMBER
                        PURCHASE_REGISTER_LINES(SEQUENCE)               = "998"

                        PURCHASE_REGISTER_LINES(PURCHASE_ACTION_CODE)   = MESSAGE("P_36361")
                        PURCHASE_REGISTER_LINES(DESCRIPTION)            = &
                                MESSAGE("P_30364",PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER))
                        PURCHASE_REGISTER_LINES(TRANSACTION_DATE)       = %TODAY

                        ADD     TO PURCHASE_REGISTER_LINES
                        IF (%STATUS     <> %SUCCESS)

                                ROLLBACK
                                EXIT(%FAILURE)
                        END_IF

                        PURCHASE_REGISTER(STATUS_FLAG)                   = PARAMETER("STATUS_BATCH")
                        PURCHASE_REGISTER(AP_TRANSACTION_NUMBER) = PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)
                        PURCHASE_INVOICES(INVOICE_APPROVAL_CODE) = #INVOICE_APPROVAL_CODE
                END_IF
                ! End of new code

                COMMIT

                START_TRANSACTION
                MESSAGE/IDENTIFIER/BELL/WAIT P_62052

                #BATCH_TOTAL_TAX_RETAINERS      = 0

                FIND IN PURCHASE_INVOICES &
                        /LOCK=WRITE &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_62338
                        EXIT(%FAILURE)
                END_IF

                !++
                ! Retrieve AP_CONTROLS record in order to use some of the information.
                !--
                FIND IN AP_CONTROLS &
                        /LOCK = NONE &
                        /WITH = COMPANY_CODE = PURCHASE_INVOICES(COMPANY_CODE) &
                        /WITH = AP_DIVISION = PURCHASE_INVOICES(DIVISION)

                IF (%STATUS <> %NORMAL)
                        MESSAGE/BELL/IDENTIFIER/WAIT P_00818
                        EXIT(%STATUS)
                END_IF

                #PURCHASE_INVOICE_LINE = 0

                IF (#REGISTRATION_NUMBER = "" OR &
                                #REGISTRATION_NUMBER <> "" AND #COPY_REGISTER_TAX = PARAMETER("LANGUAGE_NO"))
                        #TAX_LINE_TYPE = PARAMETER("TAX_TYPE_LINE")

                         DELETE ALL FROM TAX_DETAILS_VT
                END_IF

                IF (#REGISTRATION_NUMBER = "" OR &
                                #REGISTRATION_NUMBER <> "" AND #COPY_REGISTER_RETAINERS = PARAMETER("LANGUAGE_NO"))

                        PERFORM "GEMLB:LB_CRE_TAX_RETAINERS_DETAILS_VT"

                        IF (%STATUS <> %NORMAL)
                                ROLLBACK
                                EXIT (%FAILURE)
                        END_IF
                END_IF

                !++
                ! Set parameter ADDRESS_CODE to = header default.  Used by tax details calc.
                !--
                #ADDRESS_CODE = #CORPORATE_ADDRESS_CODE
                #BATCH_TOTAL_TAX_RETAINERS = 0

                !++
                ! Copy all the lines from the GRN
                !--
                PERFORM COPY_LINES_FROM_GRN
                IF  (%STATUS=%FAILURE)
                        ROLLBACK
                        EXIT(%FAILURE)
                END_IF

                #TOTAL_LINE_DISCOUNT    = PURCHASE_INVOICES(LINE_DISCOUNT)
                #TOTAL_LINE_TAX         = PURCHASE_INVOICES(SYS_E_TAX_VAL ) + PURCHASE_INVOICES(SYS_N_TAX_VAL)

                #GRAND_TOTAL            = PURCHASE_INVOICES(POP_INVOICE_TOTAL_CURRENCY)&
                                        + #TOTAL_LINE_TAX &
                                        - #TOTAL_LINE_DISCOUNT

                IF (#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
                        #DIV_TAX_RETAINERS_FLAG = #YES AND &
                        (#VENDOR_TAX_RETAINERS_FLAG=#YES OR #PAYEE_TAX_RETAINERS_FLAG=#YES))

                        #GRAND_TOTAL    = #GRAND_TOTAL &
                                - PURCHASE_INVOICES(SYS_TAX_RETAINERS_CURRENCY)
                END_IF

                COMMIT
        END_BLOCK

        BEGIN_BLOCK PROCESS_INVOICE
                !KR this commented out to test copy form only
                PERFORM ADDRESS_CLEAR
                PERFORM DUE_DATE_CLEAR
                PERFORM HEADER_REPRINT
        IF (%STATUS = %FAILURE)
            MESSAGE/IDENTIFIER/BELL/WAIT P_01166,PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)         
            ROLLBACK
            EXIT(%FAILURE)
        END_IF

                DELETE ALL FROM TAX_DETAILS_VT
                IF (#OPT = "CANCEL")
                        DISPLAY CLEAN
                        EXIT (%STATUS)
                END_IF

								#INDEX = 0
                PERFORM UPDATE_LINKS

        IF (%STATUS = %FAILURE)
            MESSAGE/IDENTIFIER/BELL/WAIT P_01166,PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)         
            ROLLBACK
            EXIT(%FAILURE)
        END_IF

								PERFORM	CLOSE_PO
                DISPLAY CLEAN

        END_BLOCK

END_FORM

! New form for Invoice Register in GRN
!
PROCEDURE_FORM COPY_INVOICE_HEADER


        BEGIN_BLOCK COPY_REGISTER
                #INVOICE_DATE   = PURCHASE_REGISTER(TRANSACTION_DATE)

                PURCHASE_INVOICES(SYS_COPY_REGISTER_TAX)                = #COPY_REGISTER_TAX
                PURCHASE_INVOICES(SYS_COPY_REGISTER_TAX_RETAINERS)                =     #COPY_REGISTER_RETAINERS
                PURCHASE_INVOICES(SYS_TAXABLE_CODE)                             = PURCHASE_REGISTER(SYS_TAXABLE_CODE)
                PURCHASE_INVOICES(VENDOR_NUMBER)                                = PURCHASE_REGISTER(VENDOR_NUMBER)
                PURCHASE_INVOICES(PAYEE_NUMBER)                                 = PURCHASE_REGISTER(PAYEE_NUMBER)
                PURCHASE_INVOICES(PAYMENT_TYPE)                                 = PURCHASE_REGISTER(PAYMENT_TYPE)
                PURCHASE_INVOICES(VENDOR_INVOICE_NUMBER)                = PURCHASE_REGISTER(VENDOR_REFERENCE)
                PURCHASE_INVOICES(INVOICE_DATE)                                 = #INVOICE_DATE

                PURCHASE_INVOICES(REGISTRATION_NUMBER)                  = #REGISTRATION_NUMBER
                PURCHASE_INVOICES(SYS_CURRENCY_CODE)                                    = PURCHASE_REGISTER(SYS_CURRENCY_CODE)
                PURCHASE_INVOICES(SYS_CURRENCY_RATE)                                    = PURCHASE_REGISTER(SYS_CURRENCY_RATE)
                PURCHASE_INVOICES(SYS_CURRENCY_DATE)                                    = PURCHASE_REGISTER(SYS_CURRENCY_DATE)
                PURCHASE_INVOICES(SYS_RATE_TYPE)                                = PURCHASE_REGISTER(SYS_RATE_TYPE)
                PURCHASE_INVOICES(SYS_RATE_AUTHORITY)                   = PURCHASE_REGISTER(SYS_RATE_AUTHORITY)
                PURCHASE_INVOICES(SYS_CURRENCY_FIXED_FLAG)              = PURCHASE_REGISTER(SYS_CURRENCY_FIXED_FLAG)
                PURCHASE_INVOICES(SYS_CURRENCY_RATIO_INDIC)             = PURCHASE_REGISTER(SYS_CURRENCY_RATIO_INDIC)
                PURCHASE_INVOICES(AP_PAYMENT_ANALYSIS_1)                = PURCHASE_REGISTER(AP_PAYMENT_ANALYSIS_1)
                PURCHASE_INVOICES(AP_PAYMENT_ANALYSIS_2)                = PURCHASE_REGISTER(AP_PAYMENT_ANALYSIS_2)
                PURCHASE_INVOICES(AP_PAYMENT_ANALYSIS_3)                = PURCHASE_REGISTER(AP_PAYMENT_ANALYSIS_3)
                PURCHASE_INVOICES(AP_PAYMENT_ANALYSIS_4)                = PURCHASE_REGISTER(AP_PAYMENT_ANALYSIS_4)
                PURCHASE_INVOICES(AP_PAYMENT_ANALYSIS_5)                = PURCHASE_REGISTER(AP_PAYMENT_ANALYSIS_5)
                PURCHASE_INVOICES(PERIOD)                                               = PURCHASE_REGISTER(PERIOD)
                PURCHASE_INVOICES(YEAR)                                                 = PURCHASE_REGISTER(YEAR)
                PURCHASE_INVOICES(POP_COMMITMENT_PERIOD)                = POP_HEADERS(POP_COMMITMENT_PERIOD)
                PURCHASE_INVOICES(POP_COMMITMENT_YEAR)                  = POP_HEADERS(POP_COMMITMENT_YEAR)
                PURCHASE_INVOICES(INTERCOMPANY_POSTINGS)                = POP_HEADERS(INTERCOMPANY_POSTINGS)
                PURCHASE_INVOICES(FREIGHT_TAX_CODE)                             = POP_HEADERS(FREIGHT_TAX_CODE)
                PURCHASE_INVOICES(MISC_TAX_CODE)                                = POP_HEADERS(MISC_TAX_CODE)
                PURCHASE_INVOICES(FREIGHT)                                              = POP_HEADERS(FREIGHT)
                PURCHASE_INVOICES(SYS_TAXABLE_CODE)                             = POP_HEADERS(SYS_TAXABLE_CODE)
                PURCHASE_INVOICES(MISCELLANEOUS)                                = POP_HEADERS(MISCELLANEOUS)
                PURCHASE_INVOICES(ORDER_DISCOUNT_PERCENT)               = POP_HEADERS(ORDER_DISCOUNT_PERCENT)
                PURCHASE_INVOICES(ORDER_DISCOUNT)                               = POP_HEADERS(ORDER_DISCOUNT)
                PURCHASE_INVOICES(SYS_FREIGHT_TAXABLE_CODE)             = POP_HEADERS(SYS_FREIGHT_TAXABLE_CODE)
                PURCHASE_INVOICES(SYS_MISC_TAXABLE_CODE)                = POP_HEADERS(SYS_MISC_TAXABLE_CODE)
                PURCHASE_INVOICES(SYS_E_FREIGHT_TAX_VAL)                = POP_HEADERS(SYS_E_FREIGHT_TAX_VAL)
                PURCHASE_INVOICES(SYS_N_FREIGHT_TAX_VAL)                = POP_HEADERS(SYS_N_FREIGHT_TAX_VAL)
                PURCHASE_INVOICES(SYS_E_MISC_TAX_VAL)                   = POP_HEADERS(SYS_E_MISC_TAX_VAL)
                PURCHASE_INVOICES(SYS_N_MISC_TAX_VAL)                   = POP_HEADERS(SYS_N_MISC_TAX_VAL)
                PURCHASE_INVOICES(COMPANY_CODE)                         = #COMPANY_CODE
                PURCHASE_INVOICES(PO_NUMBER)                            = POP_HEADERS(PO_NUMBER)
                PURCHASE_INVOICES(DIVISION)                             = POP_HEADERS(DIVISION)
                PURCHASE_INVOICES(COST_CENTER)                          = POP_HEADERS(COST_CENTER)
                PURCHASE_INVOICES(SYS_BASE_CURRENCY_CODE)               = POP_HEADERS(SYS_BASE_CURRENCY_CODE)
                PURCHASE_INVOICES(SYS_BASE_CURRENCY)                    = POP_HEADERS(SYS_BASE_CURRENCY)
                PURCHASE_INVOICES(DEF_INVOICE_ADDRESS_CODE)             = POP_HEADERS(DEF_INVOICE_ADDRESS_CODE)
!                 PURCHASE_INVOICES(GRN_NUMBER)                   = GOODS_RECEIVED_HEADERS(GRN_NUMBER)

                !
                ! Get Rates
                !
                DELETE ALL FROM SYS_CURRENCY_CONTROL_VT
                CLEAR_BUFFER SYS_CURRENCY_CONTROL_VT

                SYS_CURRENCY_CONTROL_VT(COMPANY_CODE)   = #COMPANY_CODE
                SYS_CURRENCY_CONTROL_VT(DIVISION)       = PURCHASE_INVOICES(DIVISION)
                SYS_CURRENCY_CONTROL_VT(SOURCE_MODULE)  = #PO
                SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE) = PURCHASE_INVOICES(SYS_CURRENCY_CODE)
                SYS_CURRENCY_CONTROL_VT(RATE_TYPE) = PURCHASE_INVOICES(SYS_RATE_TYPE)
                SYS_CURRENCY_CONTROL_VT(CURRENCY_DATE) = PURCHASE_REGISTER(SYS_CURRENCY_DATE)
                SYS_CURRENCY_CONTROL_VT(RATE_AUTHORITY) = PURCHASE_INVOICES(SYS_RATE_AUTHORITY)
                SYS_CURRENCY_CONTROL_VT(RATE_OVERRIDE)  = #NO
                ADD     TO SYS_CURRENCY_CONTROL_VT

                PERFORM "GEMLB:LB_S_L_CURRENCY_RATES" (#R_STATUS,#R_MESSAGE)

                IF (#R_STATUS = #NO)
                        ERROR/TEXT_ONLY/WAIT #R_MESSAGE
                        EXIT(%FAILURE)
                END_IF

                ! Find currency values from     VT
                #CURRENCY_RATE = SYS_CURRENCY_CONTROL_VT(FIRST_CURRENCY_RATE)
                #CURRENCY_2_RATE = SYS_CURRENCY_CONTROL_VT(SECOND_CURRENCY_RATE)
                #CURRENCY_RATIO_INDIC= SYS_CURRENCY_CONTROL_VT(CURR_RATIO_INDIC)
                #CURRENCY_2_RATIO_INDIC=SYS_CURRENCY_CONTROL_VT(SYS_CURRENCY_2_RATIO_INDIC)
                #CURRENCY_FIXED = SYS_CURRENCY_CONTROL_VT(FIXED_RATE_INDIC)
                #CURRENCY_MASK = SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_MASK)
                #CURRENCY_DECIMAL =     SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_DECIMALS)
                #CURRENCY_DATE= SYS_CURRENCY_CONTROL_VT(CURRENCY_DATE)
                !
                PURCHASE_INVOICES(SYS_CURRENCY_RATE)                    = #CURRENCY_RATE
                PURCHASE_INVOICES(SYS_CURRENCY_2_RATE)                  = #CURRENCY_2_RATE
                PURCHASE_INVOICES(SYS_CURRENCY_DATE)                    = #CURRENCY_DATE
                PURCHASE_INVOICES(SYS_CURRENCY_FIXED_FLAG)      = #CURRENCY_FIXED
                PURCHASE_INVOICES(SYS_CURRENCY_RATIO_INDIC)     = #CURRENCY_RATIO_INDIC
                PURCHASE_INVOICES(SYS_CURRENCY_2_RATIO_INDIC)   = #CURRENCY_2_RATIO_INDIC

                #VENDOR_INVOICE_NUMBER          = PURCHASE_REGISTER(VENDOR_REFERENCE)
                #CURRENCY_CODE                  = PURCHASE_REGISTER(SYS_CURRENCY_CODE)
                #RATE_AUTHORITY                 = PURCHASE_REGISTER(SYS_RATE_AUTHORITY)
                #RATE_TYPE                              = PURCHASE_REGISTER(SYS_RATE_TYPE)
                #EFFECTIVE_DATE                 = PURCHASE_REGISTER(SYS_CURRENCY_DATE)
                #SYS_TAXABLE_CODE               = PURCHASE_REGISTER(SYS_TAXABLE_CODE)
        END_BLOCK

        BEGIN_BLOCK GET_POSTING_DATE
                #REG_PERIOD     = PURCHASE_REGISTER(PERIOD)
                #REG_YEAR       = PURCHASE_REGISTER(YEAR)
                #REG_DATE       = PURCHASE_REGISTER(TRANSACTION_DATE)

                IF ( #INC_POSTING_DATE <> #YES )
                        #REG_POST_DATE  = #INVOICE_DATE
                        #POSTING_DATE   = #INVOICE_DATE
                ELSE
                        #REG_POST_DATE  = %TODAY

                        FIND IN COMPANY_PERIOD_CONTROLS &
                                /LOCK = NONE &
                                /WITH = COMPANY_CODE = #COMPANY_CODE &
                                /WITH = CURRENT_YEAR = #REG_YEAR

                        #START_FIELD    = MASK( "START_DATE_!-00", #REG_PERIOD )
                        #END_FIELD      = MASK( "END_DATE_!-00", #REG_PERIOD )

                        #START_DATE     = TABLE_DATA( "COMPANY_PERIOD_CONTROLS", #START_FIELD )
                        #END_DATE       = TABLE_DATA( "COMPANY_PERIOD_CONTROLS", #END_FIELD )

                        IF ( DAYS( #REG_POST_DATE ) < DAYS( #START_DATE ) )
                                #REG_POST_DATE  = #START_DATE
                        ELSE_IF ( DAYS( #REG_POST_DATE ) > DAYS( #END_DATE ) )
                                #REG_POST_DATE  = #END_DATE
                        END_IF

                        #POSTING_DATE   = %TODAY

                        FIND IN COMPANY_PERIOD_CONTROLS &
                                /LOCK = NONE &
                                /WITH = COMPANY_CODE = #COMPANY_CODE &
                                /WITH = CURRENT_YEAR = #CURRENT_YEAR

                        #START_FIELD    = MASK( "START_DATE_!-00", #CURRENT_PERIOD )
                        #END_FIELD      = MASK( "END_DATE_!-00", #CURRENT_PERIOD )

                        #START_DATE     = TABLE_DATA( "COMPANY_PERIOD_CONTROLS", #START_FIELD )
                        #END_DATE       = TABLE_DATA( "COMPANY_PERIOD_CONTROLS", #END_FIELD )

                        IF ( DAYS( #POSTING_DATE ) < DAYS( #START_DATE ) )
                                #POSTING_DATE   = #START_DATE
                        ELSE_IF ( DAYS( #POSTING_DATE ) > DAYS( #END_DATE ) )
                                #POSTING_DATE   = #END_DATE
                        END_IF
                END_IF

                #VALID_REG_PERIOD       = #NO
                #VALID_POST_PERIOD      = #NO

                IF ( #VALIDATE_POSTING_DATE <> # YES )

                        IF ( #CURRENT_PERIOD <> #REG_PERIOD OR &
                                #CURRENT_YEAR <> #REG_YEAR )

                                #VALID_REG_PERIOD       = #YES
                        END_IF

                        #VALID_POST_PERIOD      = #YES
                ELSE
                        IF ( DAYS( #REG_DATE ) <= DAYS( #REG_POST_DATE ) AND &
                                ( #CURRENT_PERIOD <> #REG_PERIOD OR &
                                #CURRENT_YEAR <> #REG_YEAR ) )

                                #VALID_REG_PERIOD       = #YES
                        END_IF

                        IF ( DAYS( #REG_DATE ) <= DAYS( #POSTING_DATE ) )
                                #VALID_POST_PERIOD      = #YES
                        END_IF
                END_IF

                IF ( #VALID_REG_PERIOD = #YES AND &
                        #VALID_POST_PERIOD = #YES )

                        #ERROR_1        = MESSAGE("P_18004")
                        #ERROR_2        = MESSAGE("P_18008")
                        PERFORM ERROR_2 ( #ERROR_1, #ERROR_2 )

                        IF ( %STATUS = %SUCCESS )
                                #PERIOD         = #REG_PERIOD
                                #YEAR           = #REG_YEAR
                                #POSTING_DATE   = #REG_POST_DATE
                        ELSE
                                #PERIOD = #CURRENT_PERIOD
                                #YEAR   = #CURRENT_YEAR
                        END_IF
                END_IF

                IF ( #VALID_REG_PERIOD = #NO AND &
                        #VALID_POST_PERIOD = #YES )

                        #PERIOD = #CURRENT_PERIOD
                        #YEAR   = #CURRENT_YEAR
                END_IF

                IF ( #VALID_REG_PERIOD = #YES AND &
                        #VALID_POST_PERIOD = #NO )

                        MESSAGE/IDENTIFIER/BELL/WAIT P_13734
                        #PERIOD         = #REG_PERIOD
                        #YEAR           = #REG_YEAR
                        #POSTING_DATE   = #REG_POST_DATE
                END_IF

                IF ( #VALID_REG_PERIOD = #NO AND &
                        #VALID_POST_PERIOD = #NO )

                        MESSAGE/IDENTIFIER/BELL/WAIT P_13736, MASK( #DEF_DATE_MASK, #REG_DATE )
                        EXIT( %FAILURE )
                END_IF

                PURCHASE_INVOICES(PERIOD)       = #PERIOD
                PURCHASE_INVOICES(YEAR)         = #YEAR
                PURCHASE_INVOICES(POSTING_DATE) = #POSTING_DATE
        END_BLOCK
        
        BEGIN_BLOCK PA_SETUP
            
        END_BLOCK
END_FORM


PROCEDURE_FORM GET_NEW_INVOICE_RATE
        !  If currency is used, get a rate for an invoice date and update rate to
        !  PURCHASE_INVOICES table
        BEGIN_BLOCK NEW_RATE
                IF (GOODS_RECEIVED_HEADERS(SYS_CURRENCY_FIXED_FLAG) = #NO)
                        ! Get Rates
                        !
                        DELETE ALL FROM SYS_CURRENCY_CONTROL_VT
                        CLEAR_BUFFER SYS_CURRENCY_CONTROL_VT

                        SYS_CURRENCY_CONTROL_VT(COMPANY_CODE)   = #COMPANY_CODE
                        SYS_CURRENCY_CONTROL_VT(DIVISION)       = PURCHASE_INVOICES(DIVISION)
                        SYS_CURRENCY_CONTROL_VT(SOURCE_MODULE)  = #PO
                        SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE) = GOODS_RECEIVED_HEADERS(SYS_CURRENCY_CODE)
                        SYS_CURRENCY_CONTROL_VT(CURRENCY_DATE) = PURCHASE_INVOICES(INVOICE_DATE)
                        SYS_CURRENCY_CONTROL_VT(RATE_OVERRIDE)  = GOODS_RECEIVED_HEADERS(SYS_CURRENCY_FIXED_FLAG)
                        ADD TO SYS_CURRENCY_CONTROL_VT

                        PERFORM "GEMLB:LB_S_L_CURRENCY_RATES" &
                                        (#R_STATUS,#R_MESSAGE)
                        IF (#R_STATUS = #NO)
                                ERROR/TEXT_ONLY/WAIT #R_MESSAGE
                                EXIT(%FAILURE)
                        END_IF

                        FIND IN SYS_CURRENCY_CONTROL_VT

                        IF (%STATUS = %FAILURE)
                                MESSAGE/IDENTIFIER/WAIT/BELL P_91710
                                EXIT(%FAILURE)
                        END_IF

                        ! Find currency values from VT
                        #CURRENCY_RATE = SYS_CURRENCY_CONTROL_VT(FIRST_CURRENCY_RATE)
                        #CURRENCY_2_RATE = SYS_CURRENCY_CONTROL_VT(SECOND_CURRENCY_RATE)
                        #CURRENCY_RATIO_INDIC= SYS_CURRENCY_CONTROL_VT(CURR_RATIO_INDIC)
                        #CURRENCY_2_RATIO_INDIC=SYS_CURRENCY_CONTROL_VT(SYS_CURRENCY_2_RATIO_INDIC)
                        #CURRENCY_FIXED = SYS_CURRENCY_CONTROL_VT(FIXED_RATE_INDIC)
                        #CURRENCY_MASK = SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_MASK)
                        #CURRENCY_DECIMAL = SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_DECIMALS)
                        #CURRENCY_DATE= SYS_CURRENCY_CONTROL_VT(CURRENCY_DATE)
                        !
                        PURCHASE_INVOICES(SYS_CURRENCY_RATE)         = #CURRENCY_RATE
                        PURCHASE_INVOICES(SYS_CURRENCY_2_RATE)       = #CURRENCY_2_RATE
                        PURCHASE_INVOICES(SYS_CURRENCY_DATE)         = #CURRENCY_DATE
                        PURCHASE_INVOICES(SYS_CURRENCY_FIXED_FLAG) = #CURRENCY_FIXED
                        PURCHASE_INVOICES(SYS_CURRENCY_RATIO_INDIC)= #CURRENCY_RATIO_INDIC
                        PURCHASE_INVOICES(SYS_CURRENCY_2_RATIO_INDIC)= #CURRENCY_2_RATIO_INDIC

                        OUTPUT_BLOCK CURRENCY_RATE /ROW=20 /COL=27 &
                                /PROMPT=(FIELD_PROMPT(SYS_CURRENCY_RATE)) &
                                /SOURCE=(PURCHASE_INVOICES(SYS_CURRENCY_RATE)) &
                                /USING=PURCHASE_INVOICES(SYS_CURRENCY_RATE) &
                                /ATTRIBUTES=BOLD &
                                /USE_IF=(#CURRENCY_METHOD <> "0")
                END_IF
        END_BLOCK

END_FORM


FORM MODIFY /ROW=3 /COL=2 /HEIGHT=21 /WIDTH=78 &
        /TITLE=(#TITLE_1)
        
    BEGIN_BLOCK SETUP_1
                START_TRANSACTION

                #MAIN_OPT = "MODIFY"
                #COPY_REGISTER_TAX      = #NO
                #COPY_REGISTER_RETAINERS= #NO
                #LINKS_REQUIRED         = #NO
                #PROJECT                = ""
                #WBS_NUMBER             = ""
                #WBS_NUMBER_MASKED      = ""

                PURCHASE_INVOICES(COMPANY_CODE) = #COMPANY_CODE

                #CHANGE_REG = ""
                #ACCRUE_IGIC = ""
        END_BLOCK

        BEGIN_BLOCK     CREATE_VT
                PERFORM "GEMLB:LB_CRE_TAX_RETAINERS_DETAILS_VT"
                IF (%STATUS     <> %NORMAL)     EXIT (%FAILURE)
        END_BLOCK
    
        INPUT_BLOCK DIVISION_2 /ROW=2 /COL=16 &
                        /PROMPT=(FIELD_PROMPT(DIVISION)) &
                        /TARGET=PURCHASE_INVOICES(DIVISION) &
                        /LOV=SECURITY_PERIOD_ACCESS_VT(SYS_ACCESS_CODE,CODE_DESCRIPTION) &
                        /LOV_WITH=SYS_ACCESS_TYPE=(PARAMETER("ACCESS_TYPE_DIVISION")) &
                        /LOV_WITH=SOURCE_MODULE=(PARAMETER("MODULE_PO")) &
                        /LOV_WITH=SYS_ALLOW_ACCESS=#YES

        BEGIN_BLOCK EXTRACT_DIVISION_3
                FIND IN AP_CONTROLS &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=AP_DIVISION=PURCHASE_INVOICES(DIVISION) &
                        /LOCK=NONE

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_00354
                        GOTO DIVISION_2
                END_IF

                #DIVISION = PURCHASE_INVOICES(DIVISION)

                FIND IN SECURITY_PERIOD_ACCESS_VT &
                        /WITH=SYS_ACCESS_TYPE=(PARAMETER("ACCESS_TYPE_DIVISION")) &
                        /WITH=SYS_ACCESS_CODE= #DIVISION &
                        /WITH=SOURCE_MODULE=(PARAMETER("MODULE_PO"))

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_00447
                        GOTO DIVISION_2
                END_IF

                IF (SECURITY_PERIOD_ACCESS_VT(SYS_ALLOW_ACCESS) <> #YES)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_00756
                        GOTO DIVISION_2
                END_IF

                #NO_PAST_PERIODS   = SECURITY_PERIOD_ACCESS_VT(NUMBER_OF_PAST_PERIODS)
                #NO_FUTURE_PERIODS = SECURITY_PERIOD_ACCESS_VT(NUMBER_OF_FUTURE_PERIODS)

                #CURRENCY_METHOD                = AP_CONTROLS(SYS_CURRENCY_METHOD)
                #BASE_CURRENCY_CODE             = AP_CONTROLS(SYS_CURRENCY_CODE)
               ! #DATE_OVERRIDE                  = AP_CONTROLS(SYS_CURRENCY_DATE_OVERRIDE)
                #DATE_CODE                      = AP_CONTROLS(SYS_DATE_CODE)
                #TAX_BASED_ON                   = AP_CONTROLS(TAX_BASED_ON)
                #DEF_PART_TAX_CODE              = AP_CONTROLS(DEF_PRODUCT_TAX_CODE)
                #DEF_VENDOR_TAX_CODE            = AP_CONTROLS(DEF_VENDOR_TAX_CODE)
                #DEF_DELIVERY_ADDR_CODE         = AP_CONTROLS(DEF_DELIVERY_ADDRESS_CODE)
                #DEF_FREIGHT_TAX_CODE           = AP_CONTROLS(DEF_FREIGHT_TAX_CODE)
                #DEF_MISC_TAX_CODE              = AP_CONTROLS(DEF_MISC_TAX_CODE)
                #FREIGHT_TAXABLE                = AP_CONTROLS(FREIGHT_TAXABLE)
                #MISC_TAXABLE                   = AP_CONTROLS(MISCELLANEOUS_TAXABLE)
                #DIVISION_ACCRUE_TAX            = AP_CONTROLS(SYS_ACCRUE_TAX)
                #CORPORATE_ADDRESS_CODE         = AP_CONTROLS(DEF_DELIVERY_ADDRESS_CODE)
                #ACCRUE_TAX_CODE                = AP_CONTROLS(SYS_TAX_ACCRUAL_CODE)
                #ACCRUE_TAX_FULL                = AP_CONTROLS(SYS_TAX_ACCRUAL_FULL_ACCOUNT)
                #AP_DEFAULT_TAX                 = AP_CONTROLS(AP_DEFAULT_TAX)
                #DIV_TAX_RETAINERS_FLAG         = AP_CONTROLS(SYS_TAX_RETAINERS_FLAG)

                #ADDRESS_CODE                   = #CORPORATE_ADDRESS_CODE

                #LD_IN_USE     = AP_CONTROLS(LINE_DISCOUNT_IN_USE)
                #LD_OVERRIDE   = AP_CONTROLS(LINE_DISCOUNT_OVERRIDE)

                #PRICE_OVERRIDE = AP_CONTROLS(PURCHASE_PRICE_OVERRIDE)

                #CURRENT_YEAR  = AP_CONTROLS(POP_CURRENT_YEAR)
                #CURRENT_PERIOD= AP_CONTROLS(POP_CURRENT_PERIOD)

                #DEF_AP_SHORT_CODE              = AP_CONTROLS(AP_SHORT_CODE)
                #DEF_AP_FULL_ACCOUNT            = AP_CONTROLS(AP_FULL_ACCOUNT)


                #INVOICE_TOLERANCE_CONTROL = AP_CONTROLS(POP_INVOICE_TOLERANCE_CONTROL)

                ! Grn accounts for nonstock must be taken from divisional
                ! record as well as year and period.
        END_BLOCK

        OUTPUT_BLOCK DIVISION_DESC_4 /ROW=2 /COL=19 &
                        /SOURCE=(SECURITY_PERIOD_ACCESS_VT(CODE_DESCRIPTION))

        BEGIN_BLOCK GET_BASE_CURRENCY
                FIND IN SYS_CURRENCY_CODES &
                        /LOCK=NONE &
                        /WITH=SYS_CURRENCY_CODE=#BASE_CURRENCY_CODE

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_82400
                        EXIT (%FAILURE)
                END_IF

                #BASE_CURRENCY_DECIMAL= SYS_CURRENCY_CODES(SYS_CURRENCY_DECIMALS)
                #BASE_DESC            = SYS_CURRENCY_CODES(SYS_CODE_DESCRIPTION)
        END_BLOCK

        OUTPUT_BLOCK BASE_CURRENCY /ROW=3 /COL=17 &
                        /PROMPT=(FIELD_PROMPT(PURCHASE_INVOICES,SYS_BASE_CURRENCY_CODE)) &
                        /SOURCE=(#BASE_CURRENCY_CODE)

        OUTPUT_BLOCK BASE_CURRENCY_DESC /ROW=3 /COL=22 &
                        /SOURCE=(#BASE_DESC) &
                        /USING=SYS_CURRENCY_CODES(SYS_CODE_DESCRIPTION)

        BEGIN_BLOCK INVOICE_NUMBER_5
                PURCHASE_INVOICES(COMPANY_CODE) = #COMPANY_CODE
                PURCHASE_INVOICES(DIVISION)     = #DIVISION

                INPUT_BLOCK  /ROW=2 /COL=68 &
                        /OPTIONS=DOMAIN_LOCK_WRITE &
                        /DOMAIN=PURCHASE_INVOICES &
                        /PROMPT=(FIELD_PROMPT(PURCHASE_INVOICE_NUMBER)) &
                        /TARGET=PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER) &
                        /LOV=PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER,VENDOR_NUMBER,INVOICE_DATE) &
                        /LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
                        /LOV_WITH=DIVISION=#DIVISION &
                        /LOV_WITH=POP_INVOICE_CYCLE = (PARAMETER("GRN_INVOICE")) &
                        /LOV_WITH=UPDATE_FLAG <> (PARAMETER("UPDATE_FLAG_I")) &
                        /LOV_WITH=UPDATE_FLAG <> (PARAMETER("UPDATE_FLAG_C")) &
                        /LOV_SELECTION="ALL"
        END_BLOCK

        BEGIN_BLOCK DEFAULTS
                IF (PURCHASE_INVOICES(POP_INVOICE_CYCLE) <> PARAMETER("GRN_INVOICE") )
                        MESSAGE/IDENTIFIER/BELL/WAIT P_01459
                        GOTO INVOICE_NUMBER_5
                END_IF
                IF (PURCHASE_INVOICES(UPDATE_FLAG)= PARAMETER("UPDATE_FLAG_I")  OR &
                                PURCHASE_INVOICES(UPDATE_FLAG) = PARAMETER("UPDATE_FLAG_C"))

                        MESSAGE/IDENTIFIER/BELL/WAIT P_00122
                        GOTO INVOICE_NUMBER_5
                END_IF

                        ! Check that user has access to the period/year of
                        ! this invoice
                PERFORM "GEMLB:LB_SECURITY_PERIOD_CHECK" &
                        ((PARAMETER("MODULE_PO")), &
                         (#DIVISION), &
                         (PURCHASE_INVOICES(PERIOD)), &
                         (PURCHASE_INVOICES(YEAR)), &
                         (#CURRENT_PERIOD), &
                         (#CURRENT_YEAR))

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_07016
                        GOTO INVOICE_NUMBER_5
                END_IF

                #REGISTRATION_NUMBER = PURCHASE_INVOICES(REGISTRATION_NUMBER)

                FIND IN PURCHASE_REGISTER &
                        /LOCK=NONE &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=REGISTRATION_NUMBER=#REGISTRATION_NUMBER

                #REG_VALUE      = PURCHASE_REGISTER(SYS_TRAN_TOTAL_CURRENCY)
                #REG_TAX        = PURCHASE_REGISTER(SYS_E_TAX_VAL) + PURCHASE_REGISTER(SYS_N_TAX_VAL)
                #REG_RETAINERS  = PURCHASE_REGISTER(SYS_TAX_RETAINERS_CURRENCY)

                FIND IN COST_CENTERS &
                        /LOCK=NONE &
                        /WITH=COMPANY_CODE=PURCHASE_INVOICES(COMPANY_CODE) &
                        /WITH=SOURCE_MODULE=(PARAMETER("LOCAL_SOURCE_MODULE")) &
                        /WITH=COST_CENTER=PURCHASE_INVOICES(COST_CENTER)

                FIND IN VENDORS &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=AP_DIVISION=#DIVISION &
                        /WITH=VENDOR_NUMBER=PURCHASE_INVOICES(VENDOR_NUMBER) &
                        /LOCK=NONE

                #VENDOR_NUMBER          = PURCHASE_INVOICES(VENDOR_NUMBER)
                #VENDOR_ORDER_DISC_GRP  = VENDORS(ORDER_DISCOUNT_GROUP)
                #MISC_VENDOR            = VENDORS(MISCELLANEOUS_VENDOR)
                #VENDOR_TAXABLE_CODE    = VENDORS(SYS_TAXABLE_CODE)
                #ACCRUE_IGIC    = VENDORS(ACCRUE_IGIC)
                #VENDOR_TAX_RETAINERS_FLAG      = VENDORS(SYS_TAX_RETAINERS_FLAG)
                #PAYEE_TAX_RETAINERS_FLAG       = ""

                IF (VENDORS(SYS_TAX_ON_CASH)=#YES AND #CO_TAX_ON_CASH=#YES AND &
                    #DIV_TAX_ON_CASH = #YES)
                        #TAX_ON_CASH = #YES
                        ELSE
                        #TAX_ON_CASH = #NO
                END_IF

                #AP_SHORT_CODE          = PURCHASE_INVOICES(AP_SHORT_CODE)
                #AP_FULL_ACCOUNT        = PURCHASE_INVOICES(AP_FULL_ACCOUNT)

                #SAVE_TOLERANCE_IN_USE = VENDORS(POP_I_TOLERANCE_IN_USE)

                IF (#SAVE_TOLERANCE_IN_USE = PARAMETER("LANGUAGE_YES"))
                        #SAVE_MAX_TOLERANCE     = VENDORS(POP_MAX_INVOICE_TOLERANCE)
                        #SAVE_TOTAL_TOLERANCE   = VENDORS(POP_TOTAL_INVOICE_TOLERANCE)
                        #INVOICE_INDIC          = VENDORS(POP_I_TOLERANCE_INDIC)
                        #SAVE_AMOUNT_TOLERANCE  = VENDORS(POP_INVOICE_AMOUNT_TOLERANCE)
                        #SAVE_PRICE_TOLERANCE   = ROUND(VENDORS(POP_INVOICE_PRICE_TOLERANCE)/100.,2) * 1.0
                END_IF

                FIND IN SYS_COUNTRIES &
                        /LOCK=NONE &
                        /WITH=SYS_COUNTRY=VENDORS(SYS_COUNTRY)

                PERFORM "GEMLB:LB_ADDRESSES" (&
                        "D", &
                        (SYS_COUNTRIES(SYS_COUNTRY)), &
                        "VENDORS", &
                        "9", &
                        "13", &
                        "", &
                        "", &
                        "", &
                        "", &
                        "", &
                        #R1, &
                        #R2, &
                        #R3, &
                        #R4, &
                        #R5)

                FIND IN PAYEES &
                        /LOCK=NONE &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=AP_DIVISION=#DIVISION &
                        /WITH=PAYEE_NUMBER=PURCHASE_INVOICES(PAYEE_NUMBER)

                #TEN99_IN_USE = PAYEES(SYS_TEN99_IN_USE)
                #DEF_TEN99_FORM =PAYEES(SYS_TEN99_RETURN_TYPE)
                #DEF_TEN99_AMT_TYPE =PAYEES(SYS_TEN99_AMOUNT_TYPE)

                IF (#VENDOR_TAX_RETAINERS_FLAG <> #YES)
                        #PAYEE_TAX_RETAINERS_FLAG = PAYEES(SYS_TAX_RETAINERS_FLAG)
                END_IF

                FIND IN SYS_COUNTRIES &
                        /LOCK=NONE &
                        /WITH=SYS_COUNTRY=PAYEES(SYS_COUNTRY)

                PERFORM "GEMLB:LB_ADDRESSES" (&
                        "D", &
                        (SYS_COUNTRIES(SYS_COUNTRY)), &
                        "PAYEES", &
                        "9", &
                        "47", &
                        "", &
                        "", &
                        "", &
                        "", &
                        "", &
                        #R1, &
                        #R2, &
                        #R3, &
                        #R4, &
                        #R5)

                FIND IN SYS_CURRENCY_CODES &
                        /LOCK=NONE &
                        /WITH=SYS_CURRENCY_CODE=PURCHASE_INVOICES(SYS_CURRENCY_CODE)

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_82400
                        EXIT (%FAILURE)
                END_IF
                
        
        #GRN_COUNT=0
        START_STREAM PINV_LINES &
                /TABLE=PURCHASE_INVOICE_LINES &
                /SECONDARY &
                /LOCK=NONE &
                /WITH=COMPANY_CODE=#COMPANY_CODE &
                /WITH=DIVISION=#DIVISION &
                /WITH=PURCHASE_INVOICE_NUMBER=PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER) &
                /SORTED_BY=GRN_NUMBER &
                /GROUPED_BY=GRN_NUMBER 

        WHILE(1)
            FETCH PINV_LINES /FAILURE=(CONTINUE OUT)
            IF ( #GRN_COUNT>0 )
                #GRN_COUNT = #GRN_COUNT + 1 
                    #GRN_NUMBER=#GRN_NUMBER & "," & PINV_LINES:PURCHASE_INVOICE_LINES(GRN_NUMBER)
            ELSE
                #GRN_COUNT =1
                #GRN_NUMBER= PINV_LINES:PURCHASE_INVOICE_LINES(GRN_NUMBER)  
            END_IF
        END_WHILE
                
        IF ( #GRN_COUNT>1 AND #SELECT_MODE="" ) 
            MESSAGE/IDENTIFIER/WAIT/BELL P_33399, PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER) 
        END_IF                      
                
                FIND IN GOODS_RECEIVED_HEADERS &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=GRN_NUMBER AMONG #GRN_NUMBER &
                        /LOCK=NONE

                IF (#DATE_CODE = #DUE_CODE AND PURCHASE_INVOICES(DUE_DATE) <> "")
                        #EFFECTIVE_DATE = PURCHASE_INVOICES(DUE_DATE)
                ELSE
                        #EFFECTIVE_DATE = PURCHASE_INVOICES(INVOICE_DATE)
                END_IF

        #PRICING_METHOD     = PURCHASE_INVOICES(PRICING_METHOD)

                #CURRENCY_RATE          = PURCHASE_INVOICES(SYS_CURRENCY_RATE)
				#CURRENCY_RATIO_INDIC   = PURCHASE_INVOICES(SYS_CURRENCY_RATIO_INDIC)
                #CURRENCY_DATE          = PURCHASE_INVOICES(SYS_CURRENCY_DATE)
                #CURRENCY_CODE          = PURCHASE_INVOICES(SYS_CURRENCY_CODE)

!                 #GRN_NUMBER              = PURCHASE_INVOICES(GRN_NUMBER)
                #PURCHASE_INVOICE_NUMBER = PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)
                #POSTING_DATE            = PURCHASE_INVOICES(POSTING_DATE)
                ! Call Currency Rate Routine
                ! Call here LB_S_L_CURRENCY_RATES routine
                ! Get Rates
                !
                DELETE ALL FROM SYS_CURRENCY_CONTROL_VT
                CLEAR_BUFFER SYS_CURRENCY_CONTROL_VT

                SYS_CURRENCY_CONTROL_VT(COMPANY_CODE)   = #COMPANY_CODE
                SYS_CURRENCY_CONTROL_VT(DIVISION)       = #DIVISION
                SYS_CURRENCY_CONTROL_VT(SOURCE_MODULE)  = #PO
                SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE) = #CURRENCY_CODE
                SYS_CURRENCY_CONTROL_VT(RATE_TYPE) = PURCHASE_INVOICES(SYS_RATE_TYPE)
                SYS_CURRENCY_CONTROL_VT(CURRENCY_DATE) = #CURRENCY_DATE
                SYS_CURRENCY_CONTROL_VT(RATE_AUTHORITY) = PURCHASE_INVOICES(SYS_RATE_AUTHORITY)
                SYS_CURRENCY_CONTROL_VT(RATE_OVERRIDE)  = #NO
                ADD TO SYS_CURRENCY_CONTROL_VT

                PERFORM "GEMLB:LB_S_L_CURRENCY_RATES" &
                                (#R_STATUS,#R_MESSAGE)
                IF (#R_STATUS = #NO)
                        ERROR/TEXT_ONLY/WAIT #R_MESSAGE
                        EXIT(%FAILURE)
                END_IF

                FIND IN SYS_CURRENCY_CONTROL_VT

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/WAIT/BELL P_91710
                        EXIT(%FAILURE)
                END_IF

                ! Find currency values from VT
                SYS_CURRENCY_CONTROL_VT(FIRST_CURRENCY_RATE) = #CURRENCY_RATE
                SYS_CURRENCY_CONTROL_VT(CURR_RATIO_INDIC) = #CURRENCY_RATIO_INDIC
                #CURRENCY_MASK = SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_MASK)
                #CURRENCY_DECIMAL = SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_DECIMALS)
                #CURRENCY_DATE= SYS_CURRENCY_CONTROL_VT(CURRENCY_DATE)

                ! Initial PA WBS
                #PA_PROJECT_CODE        = PURCHASE_INVOICES(PA_PROJECT_CODE)
                #PA_WBS_NUMBER          = PURCHASE_INVOICES(PA_WBS_NUMBER)

                IF ( #PA_PROJECT_CODE <> "" ) 
                    PERFORM "GEMLB:LB_FORMAT_PA_WBS_NUMBER" ( &
                            (#COMPANY_CODE), &
                            #PA_PROJECT_CODE, &
                            #PA_WBS_NUMBER, &
                            #WBS_NUMBER_MASKED, &
                            #LEVEL_1, & 
                            #LEVEL_2, & 
                            #LEVEL_3, & 
                            #LEVEL_4, & 
                            #LEVEL_5, & 
                            "", "", "", &
                            #ERROR_OCCURRED, &
                            #ERROR_MESSAGE, &
                            #ACTIVITY_DESCRIP )
                ELSE
                    #WBS_NUMBER_MASKED = ""                
                END_IF 
                
                #PROJECT    = #PA_PROJECT_CODE
                #WBS_NUMBER = #PA_WBS_NUMBER

                !++
                ! If Use tax is in use and the GRN header default delivery address
                ! is <> "", then retrieve the accural account information from the
                ! corresponding corporate address record.
                !--

                IF (#USE_TAX_IN_USE = PARAMETER("LANGUAGE_YES") AND &
                    GOODS_RECEIVED_HEADERS(DEF_DELIVERY_ADDRESS_CODE) <> "")

                        FIND IN CORPORATE_ADDRESSES &
                                /LOCK = NONE &
                                /WITH = COMPANY_CODE = AP_CONTROLS(COMPANY_CODE) &
                                /WITH = DIVISION = AP_CONTROLS(AP_DIVISION) &
                                /WITH = ADDRESS_CODE = GOODS_RECEIVED_HEADERS(DEF_DELIVERY_ADDRESS_CODE)

                        IF (%STATUS <> %NORMAL)
                                MESSAGE/IDENTIFIER/WAIT/BELL P_02789
                                GOTO INVOICE_NUMBER_5
                        ELSE
                                IF (CORPORATE_ADDRESSES(TAXABLE) = PARAMETER("LANGUAGE_YES"))
                                        IF (CORPORATE_ADDRESSES(SYS_TAX_ACCRUAL_CODE) = "" AND &
                                            CORPORATE_ADDRESSES(SYS_TAX_ACCRUAL_FULL_ACCOUNT) = "")
                                                MESSAGE/IDENTIFIER/WAIT/BELL P_82975
                                                GOTO INVOICE_NUMBER_5
                                        ELSE
                                                #ACCRUE_TAX_CODE = CORPORATE_ADDRESSES(SYS_TAX_ACCRUAL_CODE)
                                                #ACCRUE_TAX_FULL = CORPORATE_ADDRESSES(SYS_TAX_ACCRUAL_FULL_ACCOUNT)
                                        END_IF
                                END_IF
                        END_IF
                END_IF

                IF (GOODS_RECEIVED_HEADERS(DEF_DELIVERY_ADDRESS_CODE) <> "")
                        #CORPORATE_ADDRESS_CODE = GOODS_RECEIVED_HEADERS(DEF_DELIVERY_ADDRESS_CODE)
                        #ADDRESS_CODE           = #CORPORATE_ADDRESS_CODE
                END_IF

                FIND IN CREDIT_TERMS &
                        /LOCK=NONE &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=CREDIT_TERMS_CODE=PURCHASE_INVOICES(CREDIT_TERMS_CODE)

                DISPLAY DEFAULTS

                IF (CREDIT_TERMS(PAYMENT_CODE) = #PAYMENT_CODE_DATE)
                        PERFORM DUE_DATE_DISPLAY
                END_IF

                IF (CREDIT_TERMS(PAYMENT_CODE) = #PAYMENT_CODE_PERIOD)
                        PERFORM DUE_PERIOD_DISPLAY
                END_IF


                GOTO HEADER_MENU_44
        END_BLOCK

        OUTPUT_BLOCK GRN_NUMBER_DIS /ROW=4 /COL=16 &
                         /PROMPT=(FIELD_PROMPT(GRN_NUMBER)) &
                         /SOURCE=PURCHASE_INVOICES(GRN_NUMBER)

        OUTPUT_BLOCK GRN_NUMBER /ROW=4 /COL=16 &
                         /PROMPT=(FIELD_PROMPT(GRN_NUMBER)) &
                         /SOURCE=(#GRN_NUMBER) &
                         /USE_IF=(#SELECT_MODE="" AND (#GRN_COUNT=1)) 

        INPUT_BLOCK REGISTRATION_NUMBER /ROW=1 /COL=68 &
                        /PROMPT=(FIELD_PROMPT(REGISTRATION_NUMBER)) &
                        /TARGET=#REGISTRATION_NUMBER &
                        /USING=PURCHASE_REGISTER(REGISTRATION_NUMBER) &
                        /LOV=PURCHASE_REGISTER(REGISTRATION_NUMBER,VENDOR_NUMBER,VENDOR_REFERENCE,SYS_TRAN_TOTAL_CURRENCY) &
                        /LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
                        /LOV_WITH=DIVISION = #DIVISION &
                        /LOV_WITH=TRANSACTION_TYPE=(PARAMETER("TTYPE_IN")) &
                        /LOV_WITH=STATUS_FLAG = (PARAMETER("STATUS_APPROVE"))

        BEGIN_BLOCK CHECK_REGISTRATION
                IF (#PURCHASE_REGISTRATION_REQD = #YES &
                        AND #REGISTRATION_NUMBER = "")
                        MESSAGE/IDENTIFIER/BELL/WAIT P_32311
                        GOTO REGISTRATION_NUMBER
                END_IF

                IF (#REGISTRATION_NUMBER <> "" AND PURCHASE_INVOICES(REGISTRATION_NUMBER) <> #REGISTRATION_NUMBER)
                        FIND IN PURCHASE_REGISTER &
                                /LOCK=NONE &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=DIVISION = #DIVISION &
                                /WITH=REGISTRATION_NUMBER=#REGISTRATION_NUMBER &
                                /WITH=TRANSACTION_TYPE = (PARAMETER("TTYPE_IN"))

                        IF (%STATUS = %FAILURE)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_32204
                                #REGISTRATION_NUMBER = PURCHASE_INVOICES(REGISTRATION_NUMBER)
                                GOTO REGISTRATION_NUMBER
                        END_IF

                        IF (PURCHASE_REGISTER(STATUS_FLAG) =PARAMETER("STATUS_BATCH") OR &
                                PURCHASE_REGISTER(STATUS_FLAG)=PARAMETER("STATUS_UPDATE"))
                                MESSAGE/IDENTIFIER/BELL/WAIT P_32393
                                #REGISTRATION_NUMBER = PURCHASE_INVOICES(REGISTRATION_NUMBER)
                                GOTO REGISTRATION_NUMBER
                        END_IF

                        IF (PURCHASE_REGISTER(STATUS_FLAG) <> PARAMETER("STATUS_APPROVE"))
                                MESSAGE/IDENTIFIER/BELL/WAIT P_32395
                                #REGISTRATION_NUMBER = PURCHASE_INVOICES(REGISTRATION_NUMBER)
                                GOTO REGISTRATION_NUMBER
                        END_IF

                        IF (PARAMETER("VENDOR_REFERENCE_UNIQUE") = #YES AND &
                                        PURCHASE_REGISTER(VENDOR_REFERENCE) <> "")

                                FIND IN TR:AP_TRANSACTIONS &
                                        /LOCK=NONE &
                                        /SECONDARY &
                                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                                        /WITH=AP_DIVISION = #DIVISION &
                                        /WITH=VENDOR_NUMBER = PURCHASE_REGISTER(VENDOR_NUMBER) &
                                        /WITH=VENDOR_REFERENCE = PURCHASE_REGISTER(VENDOR_REFERENCE) &
                                        /WITH=TRANSACTION_TYPE = PARAMETER("TTYPE_IN")

                                IF (%STATUS = %SUCCESS)
                                        MESSAGE/IDENTIFIER/BELL/WAIT P_82984,TR:AP_TRANSACTIONS(TRANSACTION_TYPE), &
                                                TR:AP_TRANSACTIONS(AP_TRANSACTION_NUMBER)
                                        #REGISTRATION_NUMBER = PURCHASE_INVOICES(REGISTRATION_NUMBER)
                                        GOTO REGISTRATION_NUMBER
                                END_IF

                                FIND IN PI:PURCHASE_INVOICES &
                                        /LOCK=NONE &
                                        /SECONDARY &
                                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                                        /WITH=DIVISION = #DIVISION &
                                        /WITH=VENDOR_NUMBER = PURCHASE_REGISTER(VENDOR_NUMBER) &
                                        /WITH=VENDOR_INVOICE_NUMBER = PURCHASE_REGISTER(VENDOR_REFERENCE) &
                                        /WITH=PURCHASE_INVOICE_NUMBER <> PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)


                                IF (%STATUS = %SUCCESS)
                                        #MESS = MESSAGE ("P_12241")
                                        MESSAGE/IDENTIFIER/BELL/WAIT P_82984,#MESS,PI:PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)
                                        #REGISTRATION_NUMBER = PURCHASE_INVOICES(REGISTRATION_NUMBER)
                                        GOTO REGISTRATION_NUMBER
                                END_IF

                                FIND IN BTL:AP_BATCH_TRAN_LINES &
                                        /LOCK=NONE &
                                        /SECONDARY &
                                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                                        /WITH=AP_DIVISION = #DIVISION &
                                        /WITH=VENDOR_NUMBER = PURCHASE_REGISTER(VENDOR_NUMBER) &
                                        /WITH=VENDOR_REFERENCE = PURCHASE_REGISTER(VENDOR_REFERENCE) &
                                        /WITH=TRANSACTION_TYPE = PARAMETER("TTYPE_IN")

                                IF (%STATUS = %SUCCESS)
                                        #MESS = MESSAGE("P_00960")&" "&BTL:AP_BATCH_TRAN_LINES(TRANSACTION_TYPE)
                                        MESSAGE/IDENTIFIER/BELL/WAIT P_82984,#MESS,BTL:AP_BATCH_TRAN_LINES(BATCH_NUMBER)
                                        #REGISTRATION_NUMBER = PURCHASE_INVOICES(REGISTRATION_NUMBER)
                                        GOTO REGISTRATION_NUMBER
                                END_IF
                        END_IF

                        IF (#REGISTRATION_NUMBER <> PURCHASE_INVOICES(REGISTRATION_NUMBER))

                                PERFORM CHANGE_REGISTRATION
                                IF (%STATUS = %FAILURE)
                                        EXIT(%FAILURE)
                                END_IF

                                IF (%STATUS = %BACK)
                                        #REGISTRATION_NUMBER = PURCHASE_INVOICES(REGISTRATION_NUMBER)
                                        GOTO REGISTRATION_NUMBER
                                END_IF
                        END_IF
                END_IF
        END_BLOCK
        
    BEGIN_BLOCK GET_HOLD_FLAG_1
    
        IF ( #AP_IN_USE=#YES )       
            INPUT_BLOCK HOLD_FLAG_1 /ROW=3 /COL=68 &
                        /PROMPT=(FIELD_PROMPT(HOLD_FLAG)) &
                        /TARGET=PURCHASE_INVOICES(HOLD_FLAG) &
                        /LOV=AP_HOLD_FLAGS(HOLD_FLAG,CODE_DESCRIPTION) &
                        /LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
                        /USE_IF=(#AP_IN_USE=#YES)
                        
            IF ( PURCHASE_INVOICES(HOLD_FLAG)<>"")
                FIND IN  AP_HOLD_FLAGS &
                    /LOCK= NONE &
                    /SECONDARY &
                    /WITH=COMPANY_CODE=#COMPANY_CODE &
                    /WITH=HOLD_FLAG=PURCHASE_INVOICES(HOLD_FLAG)
                IF ( %STATUS<>%SUCCESS ) 
                    MESSAGE/IDENTIFIER/BELL/WAIT P_02104
                    GOTO GET_HOLD_FLAG_1  
                END_IF              
            END_IF
        END_IF
    
    END_BLOCK

    BEGIN_BLOCK SAVE_VENDOR_REF
        #OLD_VENDOR_REF = PURCHASE_INVOICES(VENDOR_INVOICE_NUMBER)
    END_BLOCK

        BEGIN_BLOCK VENDOR_REF_7A
                INPUT_BLOCK  /ROW=4 /COL=57 &
                        /PROMPT=(FIELD_SHORT_PROMPT(VENDOR_INVOICE_NUMBER)) &
                        /TARGET=PURCHASE_INVOICES(VENDOR_INVOICE_NUMBER) &
                        !Change 001 - Vendor invoice number is required
                        /USING=REQUIRED
                        !Change 001 End
			
                IF (PARAMETER("VENDOR_REFERENCE_UNIQUE") = #YES AND &
                                PURCHASE_INVOICES(VENDOR_INVOICE_NUMBER)  <> "")

                        FIND IN PI:PURCHASE_INVOICES &
                                /LOCK=NONE &
                                /SECONDARY &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=DIVISION = #DIVISION &
                                /WITH=VENDOR_NUMBER = #VENDOR_NUMBER  &
                                /WITH=VENDOR_INVOICE_NUMBER = PURCHASE_INVOICES(VENDOR_INVOICE_NUMBER) &
                                /WITH=PURCHASE_INVOICE_NUMBER <> PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)

                        IF (%STATUS = %SUCCESS)
                                #MESS=MESSAGE("P_12241")
                                MESSAGE/IDENTIFIER/BELL/WAIT P_82984, #MESS, &
                                                PI:PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)
                                GOTO VENDOR_REF_7A
                        END_IF

                        FIND IN TR:AP_TRANSACTIONS &
                                /LOCK=NONE &
                                /SECONDARY &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=AP_DIVISION = #DIVISION &
                                /WITH=VENDOR_NUMBER = #VENDOR_NUMBER  &
                                /WITH=VENDOR_REFERENCE = PURCHASE_INVOICES(VENDOR_INVOICE_NUMBER) &
                                /WITH=TRANSACTION_TYPE = PARAMETER("TTYPE_IN")

                        IF (%STATUS = %SUCCESS)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_82984,TR:AP_TRANSACTIONS(TRANSACTION_TYPE), &
                                        TR:AP_TRANSACTIONS(AP_TRANSACTION_NUMBER)
                                GOTO VENDOR_REF_7A
                        END_IF

                        FIND IN BTL:AP_BATCH_TRAN_LINES &
                                /LOCK=NONE &
                                /SECONDARY &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=AP_DIVISION = #DIVISION &
                                /WITH=VENDOR_NUMBER = #VENDOR_NUMBER  &
                                /WITH=VENDOR_REFERENCE = PURCHASE_INVOICES(VENDOR_INVOICE_NUMBER) &
                                /WITH=TRANSACTION_TYPE = PARAMETER("TTYPE_IN")

                        IF (%STATUS = %SUCCESS)
                                #MESS = MESSAGE("P_00960")&" "&BTL:AP_BATCH_TRAN_LINES(TRANSACTION_TYPE)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_82984,#MESS,BTL:AP_BATCH_TRAN_LINES(BATCH_NUMBER)
                                GOTO VENDOR_REF_7A
                        END_IF
                END_IF
        END_BLOCK

        BEGIN_BLOCK VENDOR_NUMBER_8

                OUTPUT_BLOCK  /ROW=5 /COL=12 &
                        /PROMPT=(FIELD_PROMPT(VENDOR_NUMBER)) &
                        /SOURCE=(PURCHASE_INVOICES(VENDOR_NUMBER))
        END_BLOCK

        OUTPUT_BLOCK VENDOR_NAME_10 /ROW=6 /COL=12 &
                        /SOURCE=(VENDORS(VENDOR_NAME))

        BEGIN_BLOCK NO_MISC_VENDOR
                IF (VENDORS(MISCELLANEOUS_VENDOR) <> #YES)

                OUTPUT_BLOCK  /ROW=5 /COL=46 &
                        /PROMPT=(FIELD_SHORT_PROMPT(PAYEE_NUMBER)) &
                        /SOURCE=(PURCHASE_INVOICES(PAYEE_NUMBER))

                ELSE
        END_BLOCK

        BEGIN_BLOCK MISC_PAYEE
                INPUT_BLOCK  /ROW=5 /COL=46 &
                        /PROMPT=(MESSAGE("P_00496")) &
                        /TARGET=PURCHASE_INVOICES(PAYEE_NUMBER) &
                        /LOV=PAYEES(PAYEE_NUMBER,PAYEE_NAME) &
                        /LOV_WITH=AP_DIVISION=PURCHASE_INVOICES(DIVISION) &
                        /LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
                        /LOV_WITH=ACTIVATION_STATUS = (PARAMETER("STATUS_ACTIVE"))

                        FIND IN PAYEES &
                                /LOCK=NONE &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=AP_DIVISION=PURCHASE_INVOICES(DIVISION) &
                                /WITH=PAYEE_NUMBER=PURCHASE_INVOICES(PAYEE_NUMBER)

                        IF (%STATUS <> %SUCCESS)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_32197
                                GOTO NO_MISC_VENDOR
                        END_IF

                        #TEN99_IN_USE = PAYEES(SYS_TEN99_IN_USE)
                        #DEF_TEN99_FORM =PAYEES(SYS_TEN99_RETURN_TYPE)
                        #DEF_TEN99_AMT_TYPE =PAYEES(SYS_TEN99_AMOUNT_TYPE)

                        IF (#VENDOR_TAX_RETAINERS_FLAG <> #YES)
                                #PAYEE_TAX_RETAINERS_FLAG = PAYEES(SYS_TAX_RETAINERS_FLAG)
                        END_IF

                        IF (PAYEES(ACTIVATION_STATUS) <> PARAMETER("STATUS_ACTIVE"))
                                MESSAGE/IDENTIFIER/BELL/WAIT P_02196
                                GOTO NO_MISC_VENDOR
                        END_IF

                        PURCHASE_INVOICES(PAYMENT_TYPE) = PAYEES(PAYMENT_TYPE)
                END_IF
        END_BLOCK

        OUTPUT_BLOCK VENDOR_NAME_19 /ROW=6 /COL=46 &
                        /SOURCE=(PAYEES(PAYEE_NAME))

        BEGIN_BLOCK DISPLAY_ADDRESS_1
                IF (VENDORS(MISCELLANEOUS_VENDOR) = #YES)


                FIND IN SYS_COUNTRIES &
                        /LOCK=NONE &
                        /WITH=SYS_COUNTRY=PAYEES(SYS_COUNTRY)

                PERFORM "GEMLB:LB_ADDRESSES" (&
                        "D", &
                        (SYS_COUNTRIES(SYS_COUNTRY)), &
                        "PAYEES", &
                        "9", &
                        "47", &
                        "", &
                        "", &
                        "", &
                        "", &
                        "", &
                        #R1, &
                        #R2, &
                        #R3, &
                        #R4, &
                        #R5)
                END_IF
        END_BLOCK

        BEGIN_BLOCK PERIOD_26
                IF (#NO_PAST_PERIODS = 0 AND #NO_FUTURE_PERIODS = 0)
                        PURCHASE_INVOICES(PERIOD) = #CURRENT_PERIOD
                        PURCHASE_INVOICES(YEAR)   = #CURRENT_YEAR
                ELSE

                INPUT_BLOCK  /ROW=12 /COL=27 &
                        /PROMPT=(MESSAGE("P_00502")) &
                        /TARGET=PURCHASE_INVOICES(PERIOD)

                        IF (PURCHASE_INVOICES(PERIOD) > #NBR_PERIODS &
                        OR PURCHASE_INVOICES(PERIOD) =0)

                                MESSAGE/IDENTIFIER/BELL/WAIT P_12103,#NBR_PERIODS
                                GOTO PERIOD_26
                        END_IF
        END_BLOCK

        BEGIN_BLOCK YEAR_27
                INPUT_BLOCK  /ROW=13 /COL=27 &
                        /PROMPT=(MESSAGE("P_00908")) &
                        /TARGET=PURCHASE_INVOICES(YEAR)

                END_IF

                #PERIOD = PURCHASE_INVOICES(PERIOD)
                #YEAR = PURCHASE_INVOICES(YEAR)

        END_BLOCK

        OUTPUT_BLOCK CUR_PER_28 /ROW=12 /COL=27 &
                        /SOURCE=(PURCHASE_INVOICES(PERIOD))

        BEGIN_BLOCK CUR_YEAR_29
                OUTPUT_BLOCK  /ROW=13 /COL=27 &
                        /SOURCE=(PURCHASE_INVOICES(YEAR))

                PERFORM "GEMLB:LB_SECURITY_PERIOD_CHECK" &
                                        (PARAMETER("MODULE_PO"), &
                                         #DIVISION, &
                                         PURCHASE_INVOICES(PERIOD), &
                                         PURCHASE_INVOICES(YEAR), &
                                         #CURRENT_PERIOD, &
                                         #CURRENT_YEAR)

                IF (%STATUS = %FAILURE)
                        IF (#NO_PAST_PERIODS = 0 AND #NO_FUTURE_PERIODS = 0)
                                GOTO VENDOR_REF_7A
                        ELSE
                                GOTO PERIOD_26
                        END_IF
                END_IF
        END_BLOCK

        BEGIN_BLOCK GET_POSTING_DATE

                IF (#INC_POSTING_DATE = #YES)

                        FIND IN COMPANY_PERIOD_CONTROLS &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=CURRENT_YEAR=#YEAR

                        IF (%STATUS=%SUCCESS)

                                #START_DATE = TABLE_DATA("COMPANY_PERIOD_CONTROLS","START_DATE_"&MASK("!-0@",#PERIOD))
                                #END_DATE = TABLE_DATA("COMPANY_PERIOD_CONTROLS","END_DATE_"&MASK("!-0@",#PERIOD))

                        END_IF

                        #POSTING_DATE = %TODAY

                        IF (DAYS(#POSTING_DATE) < DAYS(#START_DATE))
                                #POSTING_DATE = #START_DATE
                        ELSE
                                IF (DAYS(#POSTING_DATE) > DAYS(#END_DATE))
                                        #POSTING_DATE = #END_DATE
                                END_IF
                        END_IF

                        INPUT_BLOCK POSTING_DATE /ROW=12 /COL=62 &
                                /PROMPT=(FIELD_PROMPT(POSTING_DATE)) &
                                /TARGET=#POSTING_DATE &
                                /USING=PURCHASE_INVOICES(POSTING_DATE) &
                                /USE_IF=(#INC_POSTING_DATE = #YES)

                                IF (#VALIDATE_POSTING_DATE = #YES)
                                        IF ((DAYS(#POSTING_DATE) < DAYS(#START_DATE)) OR (DAYS(#POSTING_DATE) > DAYS(#END_DATE)))
                                                MESSAGE/IDENTIFIER/BELL/WAIT P_83022,MASK("!DD-!3LM-!LY",#POSTING_DATE), &
                                                                MASK("!DD-!3LM-!LY",#START_DATE),MASK("!DD-!3LM-!LY",#END_DATE)
                                                GOTO POSTING_DATE
                                        ELSE
                                                PURCHASE_INVOICES(POSTING_DATE) = #POSTING_DATE
                                        END_IF
                                END_IF
                END_IF

        END_BLOCK

        BEGIN_BLOCK GET_INVOICE_DATE
                #OLD_DATE = PURCHASE_INVOICES(INVOICE_DATE)

                INPUT_BLOCK INVOICE_DATE_24 /ROW=13 /COL=62 &
                        /PROMPT=(FIELD_PROMPT(INVOICE_DATE)) &
                        /TARGET=PURCHASE_INVOICES(INVOICE_DATE) &
                        /USING=REQUIRED

                #INVOICE_DATE   = PURCHASE_INVOICES(INVOICE_DATE)

                IF ( #INC_POSTING_DATE <> #YES )
                        PURCHASE_INVOICES(POSTING_DATE) = #INVOICE_DATE
                END_IF

                IF ( #VALIDATE_POSTING_DATE = #YES AND &
                        DAYS( #INVOICE_DATE ) > DAYS( #POSTING_DATE ) )

                        MESSAGE/IDENTIFIER/BELL/WAIT P_13584, MASK( #DEF_DATE_MASK, #POSTING_DATE )
                        GOTO GET_INVOICE_DATE
                END_IF

                IF (#OLD_DATE <> PURCHASE_INVOICES(INVOICE_DATE) AND #CURRENCY_METHOD <> "0")
                        PERFORM GET_NEW_INVOICE_RATE
                END_IF

                IF ( #INC_POSTING_DATE <> #YES )
                        PURCHASE_INVOICES(POSTING_DATE) = PURCHASE_INVOICES(INVOICE_DATE)
                END_IF
        END_BLOCK

        BEGIN_BLOCK INTERCOMPANY
                IF (PURCHASE_INVOICES(INTERCOMPANY_POSTINGS) = "")
                        PURCHASE_INVOICES(INTERCOMPANY_POSTINGS) = #NO
                END_IF

                IF (#SECURITY_LEVEL = PARAMETER("SECURITY_LEVEL_HIGH"))

                INPUT_BLOCK  /ROW=14 /COL=27 /LEN=1 &
                        /PROMPT=(FIELD_SHORT_PROMPT(INTERCOMPANY_POSTINGS)) &
                        /TARGET=PURCHASE_INVOICES(INTERCOMPANY_POSTINGS) &
                        /USING=REQUIRED &
                        /BACK=(GOTO GET_INVOICE_DATE) &
                        /EXIT=(GOTO GET_INVOICE_DATE)
                        
                  IF ( PURCHASE_INVOICES(INTERCOMPANY_POSTINGS)=#YES )
                    IF((PURCHASE_INVOICES(PA_PROJECT_CODE))<>"") 
                        PURCHASE_INVOICES(INTERCOMPANY_POSTINGS) = #NO
                        MESSAGE/IDENTIFIER/BELL/CONFIRM P_33137
                        GOTO INTERCOMPANY
                    END_IF
                    
                    FIND IN PURCHASE_INVOICE_LINES &
                        /LOCK=NONE &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=PURCHASE_INVOICE_NUMBER=PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER) &
                        /WITH=PA_PROJECT_CODE<>""           

                    IF ( %STATUS = %SUCCESS ) 
                            PURCHASE_INVOICES(INTERCOMPANY_POSTINGS) = #NO
                            MESSAGE/IDENTIFIER/BELL/WAIT P_33137
                            GOTO INTERCOMPANY                   
                    END_IF 

                    FIND IN PA_PURCHASE_INVOICE_GL_POSTINGS &
                        /LOCK=NONE &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=PURCHASE_INVOICE_NUMBER=PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER) &

                    IF ( %STATUS = %SUCCESS ) 
                        PURCHASE_INVOICES(INTERCOMPANY_POSTINGS) = #NO
                        MESSAGE/IDENTIFIER/BELL/WAIT P_33136
                        GOTO INTERCOMPANY                   
                    END_IF                  
                  END_IF
                ELSE
                        PURCHASE_INVOICES(INTERCOMPANY_POSTINGS) = #NO
                END_IF

        END_BLOCK

        BEGIN_BLOCK CREDIT_TERMS_CODE_31
                #CREDIT_TERMS_CODE = PURCHASE_INVOICES(CREDIT_TERMS_CODE)

                INPUT_BLOCK  /ROW=15 /COL=27 &
                        /PROMPT=(FIELD_SHORT_PROMPT(CREDIT_TERMS_CODE)) &
                        /TARGET=PURCHASE_INVOICES(CREDIT_TERMS_CODE) &
                        /USING=REQUIRED &
                        /LOV=CREDIT_TERMS(CREDIT_TERMS_CODE,CODE_DESCRIPTION) &
                        /LOV_WITH=COMPANY_CODE=#COMPANY_CODE

                FIND IN CREDIT_TERMS &
                        /LOCK=NONE &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=CREDIT_TERMS_CODE=PURCHASE_INVOICES(CREDIT_TERMS_CODE)

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_00348
                        GOTO CREDIT_TERMS_CODE_31
                END_IF
        END_BLOCK

        OUTPUT_BLOCK CODE_DESC_32 /ROW=15 /COL=34 &
                        /SOURCE=(CREDIT_TERMS(CODE_DESCRIPTION))

        BEGIN_BLOCK CALC_DUE_DATE_33

                PERFORM CALCULATE_DUE_DATE
                PERFORM CALCULATE_CASH_DISCOUNT_DATE
        END_BLOCK

        BEGIN_BLOCK DUE_DATE_CHECK_34
                PERFORM DUE_DATE_CHECK
                IF (%STATUS = %BACK OR %STATUS = %EXIT)
                        GOTO CREDIT_TERMS_CODE_31
                END_IF
        END_BLOCK

        BEGIN_BLOCK SHOW_DUE_DATE_35

        END_BLOCK

        BEGIN_BLOCK SHOW_DUE_PERIOD_36
        END_BLOCK

        BEGIN_BLOCK SHOW_DUE_YEAR_37
        END_BLOCK

    OUTPUT_BLOCK PRICING_METHOD /ROW=17 /COL=27 &
        /PROMPT = FIELD_PROMPT(PRICING_METHOD) &
        /SOURCE = PURCHASE_INVOICES(PRICING_METHOD) &
        /USE_IF = ( #PRICING_METHOD_STATE = #PRICING_METHOD_OPTIONAL )


    BEGIN_BLOCK /DISPLAY_ONLY PRICING_METHOD_DESC_LOOKUP
        IF ( #PRICING_METHOD_STATE = #PRICING_METHOD_OPTIONAL )
            FIND IN SYS_CONTROL_FLAG_DESCRIPTIONS &
                /LOCK = NONE &
                /WITH = SYS_CONTROL_FLAG_FIELD = "PRICING_METHOD" &
                /WITH = SYS_CONTROL_FLAG_LANG = #DESC_LANG &
                /WITH = SYS_CONTROL_FLAG_VALUE = #PRICING_METHOD
        END_IF
    END_BLOCK

    OUTPUT_BLOCK PRICING_METHOD_DESC /ROW=17 /COL=29 &
        /SOURCE = SYS_CONTROL_FLAG_DESCRIPTIONS(SYS_CONTROL_FLAG_DESC) &
        /USE_IF = ( #PRICING_METHOD_STATE = #PRICING_METHOD_OPTIONAL )

    BEGIN_BLOCK PROJECT_INPUT
            
                IF ( #PA_IN_USE = #YES AND (PURCHASE_INVOICES(INTERCOMPANY_POSTINGS))=#NO )
                    #ORIGINAL_WBS_MASKED = #WBS_NUMBER_MASKED
					#ORIGINAL_PROJECT    = #PROJECT
					#ORIGINAL_WBS_NUMBER = #WBS_NUMBER
					
                    INPUT_BLOCK PROJECT_IN /ROW=18 /COL=22 /LEN=30 &
                        /TARGET=#PROJECT &
                        /PROMPT=FIELD_PROMPT(PA_WBS_NUMBER) &
                        /USING=NOLOWER &
                        /LOV=PA_PROJECTS(PA_PROJECT_CODE,PA_PROJECT_NAME,PA_OPEN_DATE) &
                        /LOV_WITH=COMPANY_CODE = #COMPANY_CODE &
                        /LOV_WITH=PA_PROJECT_STATUS = #STATUS_APPROVED &
                        /LOV_WITH=PA_PROJECT_STATUS = #STATUS_OPEN &
                        /LOV_WITH=PA_UPDATES_ALLOWED = #YES &
                        /LOV_SELECTION= ("A AND C AND D") &
                        /USE_IF=(#PA_IN_USE = #YES AND #PROJECT = "")    
     
                    IF ( #PROJECT <> "" ) 
                        PERFORM "GEMLB:PA_L_WBS" ( &
                                (#COMPANY_CODE), &
                                #PROJECT, &
                                #WBS_NUMBER, &
                                (#NO), &
                                #POSTING_DATE, #PERIOD , #YEAR ,&
                                (#YES), &
                                ("O"), &
                                (#YES), &
                                1, "", "", &
                                #ERROR_OCCURRED, &
                                #ERROR_MESSAGE, &
                                #WBS_NUMBER_MASKED, & 
                                #WBS_LEVEL_1, &
                                #WBS_LEVEL_2, &
                                #WBS_LEVEL_3, &
                                #WBS_LEVEL_4, &
                                #WBS_LEVEL_5, &
                                #ACTIVITY_DESCRIP )
                        IF (#ERROR_OCCURRED = 1)
                            ERROR/WAIT/TEXT_ONLY #ERROR_MESSAGE
                            GOTO PROJECT_IN
                        END_IF                                
                    ELSE
                        #WBS_NUMBER = "" 
                    END_IF

                    PERFORM CHECK_FOR_PA_CHANGES(#PROJECT, #WBS_NUMBER)
                    IF ( %STATUS = %BACK ) 
                        #WBS_NUMBER_MASKED = #ORIGINAL_WBS_MASKED
						#PROJECT    	   = #ORIGINAL_PROJECT
						#WBS_NUMBER		   = #ORIGINAL_WBS_NUMBER
                    END_IF 
                    
                    IF ( %STATUS = %SUCCESS ) 
                        PURCHASE_INVOICES(PA_PROJECT_CODE)  = #PROJECT
                        PURCHASE_INVOICES(PA_WBS_NUMBER)    = #WBS_NUMBER                   
                    END_IF                          
        
                    OUTPUT_BLOCK PROJECT /ROW=18 /COL=22 /LEN=30 &
                        /SOURCE=#WBS_NUMBER_MASKED &
                        /PROMPT=FIELD_PROMPT(PA_WBS_NUMBER) &
                        /USE_IF=(#PA_IN_USE = #YES)
                END_IF
                                            
        END_BLOCK


        BEGIN_BLOCK WHICH_TAX
                INPUT_BLOCK SYS_TAXABLE_CODE /ROW=19 /COL=27 &
                        /PROMPT=(FIELD_PROMPT(SYS_TAXABLE_CODE)) &
                        /SOURCE=(PURCHASE_INVOICES(SYS_TAXABLE_CODE)) &
                        /TARGET=#SYS_TAXABLE_CODE &
                        /USING=PURCHASE_INVOICES(SYS_TAXABLE_CODE)

                PERFORM "GEMLB:LB_CHK_TAX_FLAG" ( &
                                (#SYS_TAXABLE_CODE), &
                                (#DIVISION_ACCRUE_TAX), &
                                (#USE_TAX_IN_USE), &
                                (#VENDOR_TAXABLE_CODE), &
                (#PRICING_METHOD), &
                #ERROR)

                IF (%STATUS <> %NORMAL)
                        ERROR/TEXT_ONLY/NOWAIT/NOBELL #ERROR
                        GOTO WHICH_TAX
                END_IF

                PERFORM CHECK_TAXABLE
                IF (%STATUS <> %NORMAL)
                        GOTO WHICH_TAX
                END_IF

!!!             PURCHASE_INVOICES(DEF_VENDOR_TAX_CODE) = #DEF_VENDOR_TAX_CODE

                PURCHASE_INVOICES(DEF_VENDOR_TAX_CODE) = #TAX_CODE

                PURCHASE_INVOICES(SYS_TAXABLE_CODE) = #SYS_TAXABLE_CODE

        END_BLOCK

        INPUT_BLOCK COST_CENTER_39 /ROW=19 /COL=42 &
                        /PROMPT=(FIELD_PROMPT(COST_CENTER)) &
                        /TARGET=PURCHASE_INVOICES(COST_CENTER) &
                        /BACK=(GOTO CREDIT_TERMS_CODE_31) &
                        /LOV=COST_CENTERS(COST_CENTER,DESCRIPTION) &
                        /LOV_WITH=COMPANY_CODE=PURCHASE_INVOICES(COMPANY_CODE)&
                        /LOV_WITH=SOURCE_MODULE=(PARAMETER("LOCAL_SOURCE_MODULE"))

        BEGIN_BLOCK COST_CENTER_DESC_40
                IF (PURCHASE_INVOICES(COST_CENTER)<>"")
                        FIND IN COST_CENTERS &
                                /LOCK=NONE &
                                /WITH=COMPANY_CODE=PURCHASE_INVOICES(COMPANY_CODE) &
                                /WITH=SOURCE_MODULE=(PARAMETER("LOCAL_SOURCE_MODULE")) &
                                /WITH=COST_CENTER=PURCHASE_INVOICES(COST_CENTER)

                        IF (%STATUS = %FAILURE)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_00347
                                GOTO COST_CENTER_39
                        END_IF

                OUTPUT_BLOCK  /ROW=18 /COL=46 &
                        /SOURCE=(COST_CENTERS(DESCRIPTION))

                END_IF
        END_BLOCK

        BEGIN_BLOCK CURRENCY
                #CURRENCY_CODE          = PURCHASE_INVOICES(SYS_CURRENCY_CODE)
                #CURRENCY_RATE          = PURCHASE_INVOICES(SYS_CURRENCY_RATE)
                #CURRENCY_2_RATE        = PURCHASE_INVOICES(SYS_CURRENCY_2_RATE)
                #CURRENCY_DATE          = PURCHASE_INVOICES(SYS_CURRENCY_DATE)
                #RATE_AUTHORITY         = PURCHASE_INVOICES(SYS_RATE_AUTHORITY)
                #RATE_TYPE              = PURCHASE_INVOICES(SYS_RATE_TYPE)
                #CURRENCY_RATIO_INDIC   = PURCHASE_INVOICES(SYS_CURRENCY_RATIO_INDIC)
                #CURRENCY_FIXED         = PURCHASE_INVOICES(SYS_CURRENCY_FIXED_FLAG)
                #EFFECTIVE_DATE         = PURCHASE_INVOICES(SYS_CURRENCY_DATE)

                IF (#CURRENCY_RATE_OVERRIDE = #NO OR #CURRENCY_FIXED = #YES)

                        ! Get Rates
                        !

                        DELETE ALL FROM SYS_CURRENCY_CONTROL_VT
                        CLEAR_BUFFER SYS_CURRENCY_CONTROL_VT

                        SYS_CURRENCY_CONTROL_VT(COMPANY_CODE)   = #COMPANY_CODE
                        SYS_CURRENCY_CONTROL_VT(DIVISION)       = #DIVISION
                        SYS_CURRENCY_CONTROL_VT(SOURCE_MODULE)  = #PO
                        SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE) = #CURRENCY_CODE
                        SYS_CURRENCY_CONTROL_VT(RATE_TYPE) = #RATE_TYPE
                        SYS_CURRENCY_CONTROL_VT(CURRENCY_DATE) = #EFFECTIVE_DATE
                        SYS_CURRENCY_CONTROL_VT(RATE_AUTHORITY) = #RATE_AUTHORITY
                        SYS_CURRENCY_CONTROL_VT(FIRST_CURRENCY_RATE)= #CURRENCY_RATE
                        SYS_CURRENCY_CONTROL_VT(FIXED_RATE_INDIC)       = #CURRENCY_FIXED
                        SYS_CURRENCY_CONTROL_VT(SECOND_CURRENCY_RATE)   = #CURRENCY_2_RATE
                        SYS_CURRENCY_CONTROL_VT(RATE_OVERRIDE)   = #NO
                        ADD TO SYS_CURRENCY_CONTROL_VT


                        PERFORM "GEMLB:LB_S_L_CURRENCY_RATES" &
                                (#R_STATUS,#R_MESSAGE)
                        IF (#R_STATUS = #NO)
                                ERROR/TEXT_ONLY/WAIT #R_MESSAGE
                                EXIT(%FAILURE)
                        END_IF
                ELSE

                        ! show currency rate input block here!

                        DELETE ALL FROM SYS_CURRENCY_CONTROL_VT
                        CLEAR_BUFFER SYS_CURRENCY_CONTROL_VT

                        SYS_CURRENCY_CONTROL_VT(COMPANY_CODE)   = #COMPANY_CODE
                        SYS_CURRENCY_CONTROL_VT(DIVISION)       = #DIVISION
                        SYS_CURRENCY_CONTROL_VT(SOURCE_MODULE)  = #PO
                        SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE) = #CURRENCY_CODE
                        SYS_CURRENCY_CONTROL_VT(RATE_TYPE) = #RATE_TYPE
                        SYS_CURRENCY_CONTROL_VT(CURRENCY_DATE) = #EFFECTIVE_DATE
                        SYS_CURRENCY_CONTROL_VT(RATE_AUTHORITY) = #RATE_AUTHORITY
                        SYS_CURRENCY_CONTROL_VT(FIRST_CURRENCY_RATE)= #CURRENCY_RATE
                        SYS_CURRENCY_CONTROL_VT(FIXED_RATE_INDIC)       = #CURRENCY_FIXED
                        SYS_CURRENCY_CONTROL_VT(SECOND_CURRENCY_RATE)   = #CURRENCY_2_RATE
                        ! Allow to modify only a rate but not a currency code
                        SYS_CURRENCY_CONTROL_VT(RATE_OVERRIDE)  = #YES
                        SYS_CURRENCY_CONTROL_VT(CODE_RATE_INPUT_FLAG)  = "N"

                        ADD TO SYS_CURRENCY_CONTROL_VT

                        PERFORM "GEMLB:LB_C_CURRENCY_RATES" &
                                (#CURRENCY_RATE_OVERRIDE, &
                                #R_STATUS,&
                                #R_MESSAGE)

                        IF (#R_STATUS = #NO)

                                ERROR/TEXT_ONLY/WAIT #R_MESSAGE
                                EXIT(%FAILURE)
                        END_IF

                        FIND IN SYS_CURRENCY_CONTROL_VT
                        !
                        ! Update Invoice currency rates to the invoice

                        PURCHASE_INVOICES(SYS_CURRENCY_CODE)          = SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE)
                        PURCHASE_INVOICES(SYS_CURRENCY_RATE)          = SYS_CURRENCY_CONTROL_VT(FIRST_CURRENCY_RATE)
                        PURCHASE_INVOICES(SYS_CURRENCY_DATE)          = SYS_CURRENCY_CONTROL_VT(CURRENCY_DATE)
                        PURCHASE_INVOICES(SYS_CURRENCY_FIXED_FLAG)    = SYS_CURRENCY_CONTROL_VT(FIXED_RATE_INDIC)
                        PURCHASE_INVOICES(SYS_CURRENCY_RATIO_INDIC)   = SYS_CURRENCY_CONTROL_VT(CURR_RATIO_INDIC)
                        PURCHASE_INVOICES(SYS_RATE_AUTHORITY)         = SYS_CURRENCY_CONTROL_VT(RATE_AUTHORITY)
                        PURCHASE_INVOICES(SYS_RATE_TYPE)              = SYS_CURRENCY_CONTROL_VT(RATE_TYPE)
                        PURCHASE_INVOICES(SYS_BASE_CURRENCY_CODE)     = SYS_CURRENCY_CONTROL_VT(BASE_CURRENCY_CODE)
                        PURCHASE_INVOICES(SYS_BASE_CURRENCY)          = SYS_CURRENCY_CONTROL_VT(BASE_CURRENCY_CODE)
                        IF (#STORE_BASE_2 = #YES)
                                PURCHASE_INVOICES(SYS_CURRENCY_2_RATE) = SYS_CURRENCY_CONTROL_VT(SECOND_CURRENCY_RATE)
                        END_IF

                        IF (#CURRENCY_METHOD > "0")

                                ! Convert total invoice value in base currency
                                DELETE ALL FROM SYS_CURRENCY_VALUES_VT

                                SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE) = PURCHASE_INVOICES(POP_INVOICE_TOTAL_CURRENCY)
                                ADD TO SYS_CURRENCY_VALUES_VT

                                PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
                                IF (#R_STATUS <> #YES)
                                        ERROR/WAIT #R_MESSAGE
                                        EXIT (%FAILURE)
                                END_IF

                                FIND IN SYS_CURRENCY_VALUES_VT

                                PURCHASE_INVOICES(POP_INVOICE_TOTAL_2_BASE) = SYS_CURRENCY_VALUES_VT(BASE_2_VALUE)

                                IF (PURCHASE_INVOICES(SYS_TAX_RETAINERS_CURRENCY) > 0.0)
                                        ! Convert Tax retainers
                                        DELETE ALL FROM SYS_CURRENCY_VALUES_VT

                                        SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE) = PURCHASE_INVOICES(SYS_TAX_RETAINERS_CURRENCY)
                                        ADD TO SYS_CURRENCY_VALUES_VT

                                        PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
                                        IF (#R_STATUS <> #YES)
                                                ERROR/WAIT #R_MESSAGE
                                                EXIT (%FAILURE)
                                        END_IF

                                        FIND IN SYS_CURRENCY_VALUES_VT

                                        PURCHASE_INVOICES(SYS_TAX_RETAINERS_BASE)        = SYS_CURRENCY_VALUES_VT(BASE_VALUE)
                                        PURCHASE_INVOICES(SYS_TAX_RETAINERS_2_BASE) = SYS_CURRENCY_VALUES_VT(BASE_2_VALUE)
                                END_IF

                                ! Recalculate values in base currency on PURCHASE_INVOICE_LINES
                                PERFORM CHANGE_CURRENCY_ON_LINES
                                PERFORM CHANGE_CURRENCY_ON_INVOICE_POSTINGS
                                PERFORM RECALCULATE_TAX_RETAINERS_BASE

                        END_IF

                END_IF

                FIND IN SYS_CURRENCY_CONTROL_VT

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/WAIT/BELL P_91710
                        EXIT(%FAILURE)
                END_IF

                IF (%STATUS = %EXIT OR %STATUS = %BACK) GOTO COST_CENTER_39

                ! Find currency values from VT
                #CURRENCY_RATE = SYS_CURRENCY_CONTROL_VT(FIRST_CURRENCY_RATE)
                #CURRENCY_RATIO_INDIC= SYS_CURRENCY_CONTROL_VT(CURR_RATIO_INDIC)
                #CURRENCY_FIXED = SYS_CURRENCY_CONTROL_VT(FIXED_RATE_INDIC)
                #CURRENCY_MASK = SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_MASK)
                #CURRENCY_DECIMAL = SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_DECIMALS)
                #CURRENCY_DATE= SYS_CURRENCY_CONTROL_VT(CURRENCY_DATE)
                !

                OUTPUT_BLOCK  /ROW=20 /COL=27 &
                        /DOMAIN=SYS_CURRENCY_CODES &
                        /PROMPT=(FIELD_PROMPT(SYS_CURRENCY_CODE)) &
                        /SOURCE=(PURCHASE_INVOICES(SYS_CURRENCY_CODE))
        END_BLOCK

        OUTPUT_BLOCK CURRENCY_DESC /ROW=20 /COL=34 &
                        /SOURCE=(SYS_CURRENCY_CODES(SYS_CURRENCY_SHORT_DESC))

        OUTPUT_BLOCK CURRENCY_RATE /ROW=21 /COL=27 &
                        /PROMPT=(FIELD_PROMPT(SYS_CURRENCY_RATE)) &
                        /SOURCE=(PURCHASE_INVOICES(SYS_CURRENCY_RATE)) &
                        /ATTRIBUTES=BOLD &
                        /USE_IF=(#CURRENCY_METHOD <> '0')

    BEGIN_BLOCK UPDATE_POSTING_DESCRIPTION
        IF (#OLD_VENDOR_REF <> PURCHASE_INVOICES(VENDOR_INVOICE_NUMBER))
            PERFORM CHANGE_DESCRIPTION_ON_INVOICE_POSTINGS
        END_IF
    END_BLOCK

        MENU_BLOCK HEADER_MENU_44 /ROW=17 /COL=43 &
                /TITLE=("") &
                /SOURCE=(MESSAGE("P_00110")) &
                /BACK=(EXIT(%EXIT)) &
                /EXIT=(EXIT(%EXIT)) &
                /ITEM=(MESSAGE("P_00110")),(MESSAGE("P_00421")),(GOTO GET_TRANSACTION_TYPE) &
                /ITEM_IF=(#SELECT_MODE<>"" AND #MAIN_OPT="MODIFY"), &
                         (MESSAGE("P_64150")), &
                         (MESSAGE("P_33398")),(GOTO ADD_GRNS) &
                /ITEM=(MESSAGE("P_00323")),(MESSAGE("P_00057")),(GOTO REGISTRATION_NUMBER) &
                /ITEM=(MESSAGE("P_66142")),(MESSAGE("P_50022")),(GOTO ANALYSIS_CODES) &
                /ITEM=(MESSAGE("P_00430")),(MESSAGE("P_00442")),(GOTO DUMMY_47) &
                /ITEM=(MESSAGE("P_00257")),(MESSAGE("P_34048")),(EXIT)
                
        BEGIN_BLOCK ADD_GRNS
            IF ( #SELECT_MODE<>"" AND #MAIN_OPT="MODIFY")
                IF ( #REGISTRATION_NUMBER<>"" ) 
                    MESSAGE/IDENTIFIER/WAIT/BELL P_00900, #REGISTRATION_NUMBER   
                END_IF 
                PERFORM ADD_MORE_GRNS
                !COMMIT
                GOTO HEADER_MENU_44     
            END_IF      
        END_BLOCK 

        BEGIN_BLOCK ANALYSIS_CODES
                #OLD_PAYEE = PURCHASE_INVOICES(PAYEE_NUMBER)
                PERFORM MAINTAIN_PAYMENT_ANALYSIS
                IF (#OLD_PAYEE <> PURCHASE_INVOICES(PAYEE_NUMBER))

                OUTPUT_BLOCK  /ROW=5 /COL=46 &
                        /SOURCE=(PURCHASE_INVOICES(PAYEE_NUMBER))

                FIND IN PAYEES &
                        /LOCK=NONE &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=AP_DIVISION=PURCHASE_INVOICES(DIVISION) &
                        /WITH=PAYEE_NUMBER=PURCHASE_INVOICES(PAYEE_NUMBER)

                #TEN99_IN_USE = PAYEES(SYS_TEN99_IN_USE)
                #DEF_TEN99_FORM =PAYEES(SYS_TEN99_RETURN_TYPE)
                #DEF_TEN99_AMT_TYPE =PAYEES(SYS_TEN99_AMOUNT_TYPE)

                IF (#VENDOR_TAX_RETAINERS_FLAG <> #YES)
                        #PAYEE_TAX_RETAINERS_FLAG = PAYEES(SYS_TAX_RETAINERS_FLAG)
                END_IF

                FIND IN SYS_COUNTRIES &
                        /LOCK=NONE &
                        /WITH=SYS_COUNTRY=PAYEES(SYS_COUNTRY)
        END_BLOCK

        OUTPUT_BLOCK REDISPLAY_PAYEE_NAME /ROW=6 /COL=46 &
                        /SOURCE=(PAYEES(PAYEE_NAME))

        BEGIN_BLOCK REDISPLAY_PAYEE_ADDRESS
                        PERFORM "GEMLB:LB_ADDRESSES" (&
                                "D", &
                                (SYS_COUNTRIES(SYS_COUNTRY)), &
                                "PAYEES", &
                                "9", &
                                "47", &
                                "", &
                                "", &
                                "", &
                                "", &
                                "", &
                                #R1, &
                                #R2, &
                                #R3, &
                                #R4, &
                                #R5)
                END_IF
        END_BLOCK

        BEGIN_BLOCK FINISH_PAYMENT_INFO
                DISPLAY DEFAULTS
                GOTO HEADER_MENU_44
        END_BLOCK

        BEGIN_BLOCK GET_TRANSACTION_TYPE
                IF ((PURCHASE_INVOICES(PA_PROJECT_CODE) <> "") OR (PURCHASE_INVOICES(PA_WBS_NUMBER) <> ""))
                    PERFORM "GEMPA:PA_V_COMMON" PA_WBS_UPDATE_VALIDATION ( &
                         #COMPANY_CODE, & 
                        (PURCHASE_INVOICES(PA_PROJECT_CODE)), &
                        (PURCHASE_INVOICES(PA_WBS_NUMBER)), &
                        (PURCHASE_INVOICES(POSTING_DATE)),   &
                        (PURCHASE_INVOICES(PERIOD)) ,        &
                        (PURCHASE_INVOICES(YEAR)) ,#YES, &
                        "O",(PARAMETER("CALL_MODE_W")),"","","", &
                        #R_STATUS)
                        
                        IF ( #R_STATUS = 1 ) 
                                MESSAGE/IDENTIFIER/BELL/WAIT P_33073, #CHKPA_PROJECT
                                GOTO HEADER_MENU_44
                        END_IF      

                END_IF
                
                IF (#AP_IN_USE = #YES)

                        BEGIN_BLOCK GET_TRANSACTION_TYPE_AP
                                        FIND IN AP_TRANSACTION_TYPES &
                                                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                                                        /WITH=DIVISION=#DIVISION &
                                                        /WITH=TRANSACTION_TYPE=(PARAMETER("TTYPE_IN")) &
                                                        /LOCK=NONE

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_00878
                        EXIT(%FAILURE)
                END_IF

                #MANUAL         = AP_TRANSACTION_TYPES(MANUAL_NUMBER)
                #ALLOW_NEGATIVES   = AP_TRANSACTION_TYPES(SYS_ALLOW_NEGATIVE_POSTINGS)
                #MODIFY_GL_CONTROL = AP_TRANSACTION_TYPES(SYS_MODIFY_GL_CONTROL)
                #DORC              = AP_TRANSACTION_TYPES(DORC_INDICATOR)
                END_BLOCK

                ELSE
                        BEGIN_BLOCK GET_TRANSACTION_TYPE_PO
                                FIND IN POP_TRANSACTION_TYPES &
                                                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                                                        /WITH=DIVISION=#DIVISION &
                                                        /WITH=TRANSACTION_TYPE=(PARAMETER("TTYPE_IN")) &
                                                        /LOCK=NONE

                                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_00878
                        EXIT(%FAILURE)
                END_IF

                #MANUAL         = POP_TRANSACTION_TYPES(MANUAL_NUMBER)
                #ALLOW_NEGATIVES   = POP_TRANSACTION_TYPES(SYS_ALLOW_NEGATIVE_POSTINGS)
                #MODIFY_GL_CONTROL = #NO

                        END_BLOCK
                END_IF
        END_BLOCK


        BEGIN_BLOCK LOAD_DEFAULTS_45

                #SYS_TAXABLE_CODE       = PURCHASE_INVOICES(SYS_TAXABLE_CODE)
                #VENDOR_NUMBER          = PURCHASE_INVOICES(VENDOR_NUMBER)
                #COPY_REGISTER_TAX      = PURCHASE_INVOICES(SYS_COPY_REGISTER_TAX)
                #COPY_REGISTER_RETAINERS= PURCHASE_INVOICES(SYS_COPY_REGISTER_TAX_RETAINERS)
                #VENDOR_NAME            = VENDORS(VENDOR_NAME)

                #MISC_VENDOR            = VENDORS(MISCELLANEOUS_VENDOR)

                #AP_SHORT_CODE          = PURCHASE_INVOICES(AP_SHORT_CODE)
                #AP_FULL_ACCOUNT        = PURCHASE_INVOICES(AP_FULL_ACCOUNT)
                FIND IN CORPORATE_ADDRESSES &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=ADDRESS_CODE = #CORPORATE_ADDRESS_CODE &
                        /LOCK=NONE

                IF (%STATUS = %SUCCESS)
                        IF (#COMPANY_EC_REPORT_TYPE <> "")
                                PERFORM DECIDE_EC_REPORTING
                        END_IF
                END_IF

                #INVOICE_DATE = PURCHASE_INVOICES(INVOICE_DATE)

        END_BLOCK

        BEGIN_BLOCK CHANGE_REGISTRATION_DETAILS
                IF (#REGISTRATION_NUMBER <> "" AND #CHANGE_REG = #YES)
                        FIND IN PURCHASE_REGISTER &
                                /LOCK=WRITE &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=DIVISION = #DIVISION &
                                /WITH=REGISTRATION_NUMBER=#REGISTRATION_NUMBER

                        IF (%STATUS = %FAILURE)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_00861
                                ROLLBACK
                                EXIT(%FAILURE)
                        END_IF

                        CLEAR_BUFFER PURCHASE_REGISTER_LINES

                        PURCHASE_REGISTER_LINES(COMPANY_CODE)           = #COMPANY_CODE
                        PURCHASE_REGISTER_LINES(DIVISION)               = #DIVISION
                        PURCHASE_REGISTER_LINES(REGISTRATION_NUMBER)    = #REGISTRATION_NUMBER
                        PURCHASE_REGISTER_LINES(SEQUENCE)               = "998"

                        PURCHASE_REGISTER_LINES(PURCHASE_ACTION_CODE)   = MESSAGE("P_36124")
                        PURCHASE_REGISTER_LINES(DESCRIPTION)            = MESSAGE("P_30364",PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER))
                        PURCHASE_REGISTER_LINES(TRANSACTION_DATE)       = %TODAY

                        ADD TO PURCHASE_REGISTER_LINES

                        PURCHASE_REGISTER(STATUS_FLAG)           = PARAMETER("STATUS_BATCH")
                        PURCHASE_REGISTER(AP_TRANSACTION_NUMBER) = PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)

                        PURCHASE_INVOICES(REGISTRATION_NUMBER)   = #REGISTRATION_NUMBER
                        PURCHASE_INVOICES(INVOICE_APPROVAL_CODE) = #INVOICE_APPROVAL_CODE
                END_IF
        END_BLOCK
        
    BEGIN_BLOCK COPY_GRN_LINES
        IF ( #SELECT_MODE<>"" AND #GRN_NUMBER<>"") 

            !++
            ! Copy all the lines from the GRN
            !--
            START_STREAM  PIVLINE&
                 /TABLE= PURCHASE_INVOICE_LINES&
                 /LOCK= NONE &
                 /SECONDARY &
                 /WITH=COMPANY_CODE=#COMPANY_CODE &
                 /WITH=DIVISION=#DIVISION &
                 /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER &
                 /SORTED_BY=PURCHASE_INVOICE_LINE DESC
                                                                
            FETCH PIVLINE
                     
            IF ( %STATUS = %SUCCESS ) 
                #PURCHASE_INVOICE_LINE = PIVLINE:PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE)
        ELSE
            #PURCHASE_INVOICE_LINE = 0
        END_IF 

            IF ( #CONFIRM_GRNS = #YES)
                PERFORM COPY_LINES_FROM_GRN
                IF  (%STATUS=%FAILURE) EXIT(%FAILURE)
            #GRN_NUMBER="" 
            END_IF
        END_IF          
                
    END_BLOCK

	BEGIN_BLOCK LINES_46
		#TOTAL_LINE_DISCOUNT= PURCHASE_INVOICES(LINE_DISCOUNT)
		#TOTAL_LINE_TAX     = PURCHASE_INVOICES(SYS_E_TAX_VAL) + PURCHASE_INVOICES(SYS_N_TAX_VAL)
		#BATCH_TOTAL_TAX_RETAINERS = PURCHASE_INVOICES(SYS_TAX_RETAINERS_CURRENCY)
		#GRAND_TOTAL    = PURCHASE_INVOICES(POP_INVOICE_TOTAL_CURRENCY) &
						+ #TOTAL_LINE_TAX - #TOTAL_LINE_DISCOUNT
		IF (#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
			#DIV_TAX_RETAINERS_FLAG = #YES AND &
			(#VENDOR_TAX_RETAINERS_FLAG=#YES OR #PAYEE_TAX_RETAINERS_FLAG=#YES))

			#GRAND_TOTAL    = #GRAND_TOTAL - PURCHASE_INVOICES(SYS_TAX_RETAINERS_CURRENCY)
		END_IF

		COMMIT
		PERFORM PROCESS_CTRL((#PROC_CTRL_ACT_CHK_ADD), 2, (#PURCHASE_INVOICE_NUMBER))
		IF(%STATUS <> %SUCCESS) 
			DISPLAY CLEAN
			GOTO SETUP_1
		END_IF
				
		PERFORM HEADER_REPRINT
		#STATUS_RETURNED = %STATUS
		PERFORM PROCESS_CTRL((#PROC_CTRL_ACT_DELETE), 0, (#PURCHASE_INVOICE_NUMBER))
		IF (#STATUS_RETURNED = %FAILURE)
            MESSAGE/IDENTIFIER/BELL/WAIT P_01166,PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)         
            ROLLBACK
			EXIT(%FAILURE)
        END_IF

		PERFORM ADDRESS_CLEAR
		PERFORM DUE_DATE_CLEAR
		DELETE ALL FROM TAX_DETAILS_VT
		IF (#OPT = "CANCEL")
			DISPLAY CLEAN
			GOTO SETUP_1
		END_IF

		#INDEX = 0
		PERFORM UPDATE_LINKS
		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_01166,PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)
			ROLLBACK
			EXIT(%FAILURE)
		END_IF
		PERFORM	CLOSE_PO
		DISPLAY CLEAN
		GOTO SETUP_1
	END_BLOCK

	BEGIN_BLOCK DUMMY_47
		#PA_PROJECT_INVALID = 0
		#CHKPA_PROJECT      = ""
		#PA_POSTING_MISSING  = #NO
		
		PERFORM CHECK_FOR_MISSING_PA_POSTINGS
		IF ( #PA_POSTING_MISSING = #YES ) 
			#PA_POSTING_MISSING  = #NO
			MESSAGE/IDENTIFIER/BELL/WAIT P_33141
			GOTO HEADER_MENU_44
		END_IF 

		PERFORM CHECK_FOR_INVALID_PA_PROJECTS
		IF (#PA_PROJECT_INVALID)
			#PA_PROJECT_INVALID = 0
			GOTO HEADER_MENU_44
		END_IF
		
		COMMIT
		
		PERFORM ADDRESS_CLEAR
		PERFORM DUE_DATE_CLEAR
		
		DELETE ALL FROM TAX_DETAILS_VT
		
		DISPLAY CLEAN
		GOTO SETUP_1
	END_BLOCK
END_FORM

PROCEDURE_FORM ADD_MORE_GRNS

    BEGIN_BLOCK SETUP 
            #VT_LOADED = #NO
        PERFORM SETUP_VALIDATIONS           
            #USE_CURRENCY_CODE = PURCHASE_INVOICES(SYS_CURRENCY_CODE)       
        PERFORM SAVE_MATCHED_VALUES("PURCHASE_INVOICES")
    END_BLOCK 
            
    BEGIN_BLOCK MODIFY_ENTRY    
            PERFORM GRNS_ENTRY
    END_BLOCK

END_FORM

FORM CANCEL /ROW=3 /COL=2 /HEIGHT=21 /WIDTH=78 &
        /TITLE=(MESSAGE("P_34122"))


        BEGIN_BLOCK SETUP
                START_TRANSACTION

                #LINKS_REQUIRED = #NO

                PURCHASE_INVOICES(COMPANY_CODE) = #COMPANY_CODE
        END_BLOCK

        INPUT_BLOCK DIVISION /ROW=2 /COL=12 &
                        /PROMPT=(FIELD_PROMPT(DIVISION)) &
                        /TARGET=PURCHASE_INVOICES(DIVISION) &
                        /LOV=SECURITY_PERIOD_ACCESS_VT(SYS_ACCESS_CODE,CODE_DESCRIPTION) &
                        /LOV_WITH=SYS_ACCESS_TYPE=(PARAMETER("ACCESS_TYPE_DIVISION")) &
                        /LOV_WITH=SOURCE_MODULE=(PARAMETER("MODULE_PO")) &
                        /LOV_WITH=SYS_ALLOW_ACCESS=#YES

        BEGIN_BLOCK EXTRACT_DIVISION
                FIND IN AP_CONTROLS &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=AP_DIVISION=PURCHASE_INVOICES(DIVISION) &
                        /LOCK=NONE

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_00354
                        GOTO DIVISION
                END_IF

                #DIVISION = PURCHASE_INVOICES(DIVISION)

                FIND IN SECURITY_PERIOD_ACCESS_VT &
                        /WITH=SYS_ACCESS_TYPE=(PARAMETER("ACCESS_TYPE_DIVISION")) &
                        /WITH=SYS_ACCESS_CODE= #DIVISION &
                        /WITH=SOURCE_MODULE=(PARAMETER("MODULE_PO"))

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_00447
                        GOTO DIVISION
                END_IF

                IF (SECURITY_PERIOD_ACCESS_VT(SYS_ALLOW_ACCESS) <> #YES)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_00756
                        GOTO DIVISION
                END_IF

                #NO_PAST_PERIODS   = SECURITY_PERIOD_ACCESS_VT(NUMBER_OF_PAST_PERIODS)
                #NO_FUTURE_PERIODS = SECURITY_PERIOD_ACCESS_VT(NUMBER_OF_FUTURE_PERIODS)

                #CURRENCY_METHOD        = AP_CONTROLS(SYS_CURRENCY_METHOD)
                #BASE_CURRENCY_CODE     = AP_CONTROLS(SYS_CURRENCY_CODE)

                ! #DATE_OVERRIDE      = AP_CONTROLS(SYS_CURRENCY_DATE_OVERRIDE)
                #DATE_CODE          = AP_CONTROLS(SYS_DATE_CODE)

                #DEF_AP_SHORT_CODE              = AP_CONTROLS(AP_SHORT_CODE)
                #DEF_AP_FULL_ACCOUNT            = AP_CONTROLS(AP_FULL_ACCOUNT)
        END_BLOCK

        OUTPUT_BLOCK DIVISION_DESC /ROW=2 /COL=15 &
                        /SOURCE=(SECURITY_PERIOD_ACCESS_VT(CODE_DESCRIPTION))

        BEGIN_BLOCK GET_BASE_CURRENCY
                FIND IN SYS_CURRENCY_CODES &
                        /LOCK=NONE &
                        /WITH=SYS_CURRENCY_CODE=#BASE_CURRENCY_CODE

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_82400
                        EXIT (%FAILURE)
                END_IF

                #BASE_CURRENCY_DECIMAL = SYS_CURRENCY_CODES(SYS_CURRENCY_DECIMALS)
        END_BLOCK

        OUTPUT_BLOCK BASE_CURRENCY /ROW=3 /COL=18 &
                        /PROMPT=(FIELD_PROMPT(PURCHASE_INVOICES,SYS_BASE_CURRENCY_CODE)) &
                        /SOURCE=(SYS_CURRENCY_CODES(SYS_CURRENCY_CODE))

        OUTPUT_BLOCK BASE_CURRENCY_DESC /ROW=3 /COL=25 &
                        /SOURCE=(SYS_CURRENCY_CODES(SYS_CODE_DESCRIPTION))

        INPUT_BLOCK INVOICE_NUMBER /ROW=2 /COL=67 &
                        /DOMAIN=PURCHASE_INVOICES &
                        /PROMPT=(FIELD_PROMPT(PURCHASE_INVOICE_NUMBER)) &
                        /TARGET=PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER) &
                        /LOV=PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER,VENDOR_NUMBER,INVOICE_DATE) &
                        /LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
                        /LOV_WITH=DIVISION=#DIVISION &
                        /LOV_WITH=POP_INVOICE_CYCLE = (PARAMETER("GRN_INVOICE")) &
                        /LOV_WITH=UPDATE_FLAG <> (PARAMETER("UPDATE_FLAG_I")) &
                        /LOV_WITH=UPDATE_FLAG <> (PARAMETER("UPDATE_FLAG_C"))

        BEGIN_BLOCK DEFAULTS
                IF (PURCHASE_INVOICES(POP_INVOICE_CYCLE) <> PARAMETER("GRN_INVOICE") )
                MESSAGE/IDENTIFIER/BELL/WAIT P_01459
                        GOTO INVOICE_NUMBER
                END_IF

                IF (PURCHASE_INVOICES(UPDATE_FLAG) = PARAMETER("UPDATE_FLAG_I") OR &
                                PURCHASE_INVOICES(UPDATE_FLAG) = PARAMETER("UPDATE_FLAG_C"))
                        MESSAGE/IDENTIFIER/BELL/WAIT P_32228
                        GOTO INVOICE_NUMBER
                END_IF

                #PURCHASE_INVOICE_NUMBER= PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)        
                #CURRENCY_CODE          = PURCHASE_INVOICES(SYS_CURRENCY_CODE)
                #CURRENCY_RATE          = PURCHASE_INVOICES(SYS_CURRENCY_RATE)
                #CURRENCY_DATE          = PURCHASE_INVOICES(SYS_CURRENCY_DATE)
                #CURRENCY_RATIO_INDIC   = PURCHASE_INVOICES(SYS_CURRENCY_RATIO_INDIC)
                #VENDOR_NUMBER          = PURCHASE_INVOICES(VENDOR_NUMBER)
        END_BLOCK
        
        OUTPUT_BLOCK HOLD_FLAG /ROW=3 /COL=67 &
                        /PROMPT=(FIELD_PROMPT(HOLD_FLAG)) &
                        /SOURCE=(PURCHASE_INVOICES(HOLD_FLAG)) &
                        /USE_IF=(#AP_IN_USE=#YES)

        OUTPUT_BLOCK VENDOR_NUMBER /ROW=5 /COL=12 &
                        /PROMPT=(FIELD_PROMPT(VENDOR_NUMBER)) &
                        /SOURCE=(PURCHASE_INVOICES(VENDOR_NUMBER))

        BEGIN_BLOCK DISPLAY_ADDRESS
                FIND IN VENDORS &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=AP_DIVISION=#DIVISION &
                        /WITH=VENDOR_NUMBER=PURCHASE_INVOICES(VENDOR_NUMBER) &
                        /LOCK=NONE

                OUTPUT_BLOCK  /ROW=6 /COL=12 &
                        /SOURCE=(VENDORS(VENDOR_NAME))

                FIND IN SYS_COUNTRIES &
                        /LOCK=NONE &
                        /WITH=SYS_COUNTRY=VENDORS(SYS_COUNTRY)

                PERFORM "GEMLB:LB_ADDRESSES" (&
                        "D", &
                        (SYS_COUNTRIES(SYS_COUNTRY)), &
                        "VENDORS", &
                        "9", &
                        "13", &
                        "", &
                        "", &
                        "", &
                        "", &
                        "", &
                        #R1, &
                        #R2, &
                        #R3, &
                        #R4, &
                        #R5)
        END_BLOCK

        OUTPUT_BLOCK PAYEE_NUMBER /ROW=5 /COL=45 &
                        /PROMPT=(FIELD_SHORT_PROMPT(PAYEE_NUMBER)) &
                        /SOURCE=(PURCHASE_INVOICES(PAYEE_NUMBER))

        BEGIN_BLOCK DISPLAY_PAYEES
                FIND IN PAYEES &
                        /LOCK=NONE &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=AP_DIVISION=#DIVISION &
                        /WITH=PAYEE_NUMBER=PURCHASE_INVOICES(PAYEE_NUMBER)

                #TEN99_IN_USE = PAYEES(SYS_TEN99_IN_USE)
                #DEF_TEN99_FORM =PAYEES(SYS_TEN99_RETURN_TYPE)
                #DEF_TEN99_AMT_TYPE =PAYEES(SYS_TEN99_AMOUNT_TYPE)

                OUTPUT_BLOCK  /ROW=6 /COL=45 &
                        /SOURCE=(PAYEES(PAYEE_NAME))

                FIND IN SYS_COUNTRIES &
                        /LOCK=NONE &
                        /WITH=SYS_COUNTRY=PAYEES(SYS_COUNTRY)

                PERFORM "GEMLB:LB_ADDRESSES" (&
                        "D", &
                        (SYS_COUNTRIES(SYS_COUNTRY)), &
                        "PAYEES", &
                        "9", &
                        "46", &
                        "", &
                        "", &
                        "", &
                        "", &
                        "", &
                        #R1, &
                        #R2, &
                        #R3, &
                        #R4, &
                        #R5)
        END_BLOCK

        OUTPUT_BLOCK INVOICE_DATE /ROW=13 /COL=62 &
                        /PROMPT=(FIELD_PROMPT(INVOICE_DATE)) &
                        /SOURCE=(PURCHASE_INVOICES(INVOICE_DATE))

        OUTPUT_BLOCK POST_DATE /ROW=12 /COL=62 &
                        /PROMPT=(FIELD_PROMPT(POSTING_DATE)) &
                        /SOURCE=(PURCHASE_INVOICES(POSTING_DATE))

        OUTPUT_BLOCK VENDOR_REF /ROW=14 /COL=27 &
                        /PROMPT=(FIELD_PROMPT(VENDOR_INVOICE_NUMBER)) &
                        /SOURCE=(PURCHASE_INVOICES(VENDOR_INVOICE_NUMBER))

        OUTPUT_BLOCK CUR_PER /ROW=12 /COL=27 &
                        /PROMPT=(MESSAGE("P_00502")) &
                        /SOURCE=(PURCHASE_INVOICES(PERIOD))

        OUTPUT_BLOCK CUR_YEAR /ROW=13 /COL=27 &
                        /PROMPT=(MESSAGE("P_00908")) &
                        /SOURCE=(PURCHASE_INVOICES(YEAR))

        OUTPUT_BLOCK CREDIT_TERMS_CODE /ROW=15 /COL=27 &
                        /DOMAIN=CREDIT_TERMS &
                        /PROMPT=(FIELD_SHORT_PROMPT(CREDIT_TERMS_CODE)) &
                        /SOURCE=(PURCHASE_INVOICES(CREDIT_TERMS_CODE))

        OUTPUT_BLOCK CODE_DESC /ROW=15 /COL=34 &
                        /SOURCE=(CREDIT_TERMS(CODE_DESCRIPTION))

        OUTPUT_BLOCK DUE_DATE_1 /ROW=16 /COL=27 &
                        /PROMPT=(FIELD_PROMPT(DUE_DATE)) &
                        /SOURCE=(PURCHASE_INVOICES(DUE_DATE))

        OUTPUT_BLOCK DUE_PERIOD /ROW=16 /COL=52 &
                        /PROMPT=(FIELD_PROMPT(DUE_PERIOD)) &
                        /SOURCE=(PURCHASE_INVOICES(DUE_PERIOD))

        OUTPUT_BLOCK DUE_YEAR /ROW=16 /COL=61 &
                        /PROMPT=(MESSAGE("P_00908")) &
                        /SOURCE=(PURCHASE_INVOICES(DUE_YEAR))

        BEGIN_BLOCK WHICH_TAX
                OUTPUT_BLOCK SYS_TAXABLE_CODE /ROW=17 /COL=27 &
                        /PROMPT=(FIELD_PROMPT(SYS_TAXABLE_CODE)) &
                        /SOURCE=(PURCHASE_INVOICES(SYS_TAXABLE_CODE))

        END_BLOCK

        OUTPUT_BLOCK COST_CENTER /ROW=18 /COL=27 &
                        /PROMPT=(FIELD_PROMPT(COST_CENTER)) &
                        /SOURCE=(PURCHASE_INVOICES(COST_CENTER))

        BEGIN_BLOCK GET_COST_CENTER
                FIND IN COST_CENTERS &
                        /LOCK=NONE &
                        /WITH=COMPANY_CODE=PURCHASE_INVOICES(COMPANY_CODE) &
                        /WITH=SOURCE_MODULE=(PARAMETER("LOCAL_SOURCE_MODULE")) &
                        /WITH=COST_CENTER=PURCHASE_INVOICES(COST_CENTER)
        END_BLOCK

        BEGIN_BLOCK CURR_CODE_DESC
                FIND IN SYS_CURRENCY_CODES &
                        /LOCK=NONE &
                        /WITH=SYS_CURRENCY_CODE=PURCHASE_INVOICES(SYS_CURRENCY_CODE)

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_82400
                        EXIT (%FAILURE)
                END_IF
        END_BLOCK

        OUTPUT_BLOCK DISP_COST /ROW=18 /COL=31 &
                        /SOURCE=(COST_CENTERS(DESCRIPTION))

        BEGIN_BLOCK PA_WBS_NUMBER
                IF(#PA_IN_USE= #YES)
                    PERFORM GET_PA_WBS(#COMPANY_CODE,#PA_IN_USE, &
                                (PURCHASE_INVOICES(PA_PROJECT_CODE)), &
                                (PURCHASE_INVOICES(PA_WBS_NUMBER)), &
                                "","", &
                                #PA_WBS_NUMBER_MASKED, &
                                #ACTIVITY_DESCRIP)
                                
                    OUTPUT_BLOCK /ROW=19 /COL=27 &
                            /SOURCE=(#PA_WBS_NUMBER_MASKED) &
                            /USING=PURCHASE_INVOICES(PA_WBS_NUMBER) &
                            /PROMPT=FIELD_PROMPT(PA_WBS_NUMBER) &
                            /USE_IF=(#PA_IN_USE=#YES)
                END_IF
        END_BLOCK

        OUTPUT_BLOCK SYS_CURRENCY_CODE /ROW=20 /COL=27 &
                        /PROMPT=(FIELD_PROMPT(SYS_CURRENCY_CODE)) &
                        /SOURCE=(PURCHASE_INVOICES(SYS_CURRENCY_CODE)) &
                        /ATTRIBUTES=BOLD

        OUTPUT_BLOCK CURRENCY_DESC /ROW=20 /COL=34 &
                        /SOURCE=(SYS_CURRENCY_CODES(SYS_CURRENCY_SHORT_DESC)) &
                        /ATTRIBUTES=BOLD

        OUTPUT_BLOCK CURRENCY_RATE /ROW=21 /COL=27 &
                        /PROMPT=(MESSAGE("P_00562")) &
                        /SOURCE=(#CURRENCY_RATE) &
                        /USING=PURCHASE_INVOICES(SYS_CURRENCY_RATE) &
                        /ATTRIBUTES=BOLD &
                        /USE_IF=(#CURRENCY_METHOD <> '0')

        BEGIN_BLOCK CURRENCY_VT
                DELETE ALL FROM SYS_CURRENCY_CONTROL_VT
                CLEAR_BUFFER SYS_CURRENCY_CONTROL_VT

                SYS_CURRENCY_CONTROL_VT(COMPANY_CODE)   = #COMPANY_CODE
                SYS_CURRENCY_CONTROL_VT(DIVISION)       = #DIVISION
                SYS_CURRENCY_CONTROL_VT(SOURCE_MODULE)  = #PO
                SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE) = #CURRENCY_CODE
                SYS_CURRENCY_CONTROL_VT(RATE_TYPE) = PURCHASE_INVOICES(SYS_RATE_TYPE)
                SYS_CURRENCY_CONTROL_VT(CURRENCY_DATE) = #CURRENCY_DATE
                SYS_CURRENCY_CONTROL_VT(RATE_AUTHORITY) = PURCHASE_INVOICES(SYS_RATE_AUTHORITY)
                SYS_CURRENCY_CONTROL_VT(RATE_OVERRIDE)  = #NO
                ADD TO SYS_CURRENCY_CONTROL_VT

                PERFORM "GEMLB:LB_S_L_CURRENCY_RATES" &
                                (#R_STATUS,#R_MESSAGE)
                IF (#R_STATUS = #NO)
                        ERROR/TEXT_ONLY/WAIT #R_MESSAGE
                        EXIT(%FAILURE)
                END_IF

                FIND IN SYS_CURRENCY_CONTROL_VT

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/WAIT/BELL P_91710
                        EXIT(%FAILURE)
                END_IF
        END_BLOCK

        BEGIN_BLOCK FINISH
                COMMIT

                PERFORM INVOICE_CANCELLATION_NOTICE

                IF (%STATUS <> %FAILURE)
                        PERFORM CANCEL_INVOICE
                END_IF
        END_BLOCK

        BEGIN_BLOCK DUMMY
                PERFORM ADDRESS_CLEAR
                PERFORM DUE_DATE_CLEAR

                DISPLAY CLEAN
                GOTO SETUP
        END_BLOCK

END_FORM


PROCEDURE_FORM COPY_LINES_FROM_GRN &
        /LOCK = NONE &
        /TABLE = GOODS_RECEIVED_LINES &
        /WITH = COMPANY_CODE = #COMPANY_CODE &
        /WITH = DIVISION = #DIVISION &
        /WITH = GRN_NUMBER AMONG #GRN_NUMBER &
        /SORTED_BY = (GRN_LINE_NUMBER)

        BEGIN_BLOCK CHECK_IF_QTY_TO_INVOICE
                FIND IN GOODS_RECEIVED_LINE_QTYS &
                        /LOCK=NONE &
                        /WITH=COMPANY_CODE = GOODS_RECEIVED_LINES(COMPANY_CODE) &
                        /WITH=DIVISION = GOODS_RECEIVED_LINES(DIVISION) &
                        /WITH=GRN_NUMBER = GOODS_RECEIVED_LINES(GRN_NUMBER) &
                        /WITH=GRN_LINE_NUMBER = GOODS_RECEIVED_LINES(GRN_LINE_NUMBER) &
                        /WITH=UNIT_OF_MEASURE = GOODS_RECEIVED_LINES(UNIT_REC) &
                        /WITH=GRN_QTY_TO_INVOICE > 0.0

                IF (%STATUS <> %SUCCESS)
                        ! skip this line, there is no quantity outstanding
                        ! to invoice.
                        GOTO END_LINE
                END_IF
        END_BLOCK

        BEGIN_BLOCK GET_GRN_LINE_CONTROL_RECS
                IF (GOODS_RECEIVED_LINES(LINE_TYPE) = PARAMETER("LINE_TYPE_STOCK"))

                        FIND IN PRODUCT_MASTER &
                                /LOCK=NONE &
                                /WITH=COMPANY_CODE = GOODS_RECEIVED_LINES(COMPANY_CODE) &
                                /WITH=PART_CODE = GOODS_RECEIVED_LINES(PART_CODE)

                        IF (%STATUS <> %NORMAL)
                                MESSAGE/BELL/IDENTIFIER/WAIT P_00847, &
                                                GOODS_RECEIVED_LINES(PART_CODE)
                                EXIT(%STATUS)
                        END_IF

                        #WAREHOUSED_FLAG        = PRODUCT_MASTER(WAREHOUSED_FLAG)
                        #PURCH_CODE             = PRODUCT_MASTER(STD_VARIANCE_CODE)
                        #PURCH_ACC              = PRODUCT_MASTER(STD_VARIANCE_ACCOUNT)
                        #PART_TAXABLE           = PRODUCT_MASTER(TAXABLE)
                        #COSTING_UNIT           = PRODUCT_MASTER(IC_UNIT_COST)
                        #UOM_TYPE               = PRODUCT_MASTER(IC_PRODUCT_UOM_CONTROL)
                        !#CAPACITY_UNIT         = PRODUCT_MASTER(IC_UNIT_CAPACITY)
                        #PRODUCT_TAX_CODE       = PRODUCT_MASTER(PRODUCT_TAX_CODE)

                        IF (#WAREHOUSED_FLAG = PARAMETER("LANGUAGE_YES"))

                                FIND IN WAREHOUSE_CONTROLS &
                                        /LOCK=NONE &
                                        /WITH=COMPANY_CODE = GOODS_RECEIVED_LINES(COMPANY_CODE) &
                                        /WITH=WAREHOUSE = GOODS_RECEIVED_LINES(WAREHOUSE)

                                IF (%STATUS <> %NORMAL)
                                        MESSAGE/BELL/IDENTIFIER/WAIT P_00366, &
                                               GOODS_RECEIVED_LINES(WAREHOUSE)
                                        EXIT(%STATUS)
                                END_IF

                                IF (#PURCH_CODE = "" AND #PURCH_ACC = "")
                                        #PURCH_CODE = WAREHOUSE_CONTROLS(STD_VARIANCE_CODE)
                                        #PURCH_ACC  = WAREHOUSE_CONTROLS(STD_VARIANCE_ACCOUNT)
                                END_IF

                                FIND IN PRODUCT_WAREHOUSE &
                                        /LOCK=NONE &
                                        /WITH=COMPANY_CODE = GOODS_RECEIVED_LINES(COMPANY_CODE) &
                                        /WITH=WAREHOUSE = GOODS_RECEIVED_LINES(WAREHOUSE) &
                                        /WITH=PART_CODE = GOODS_RECEIVED_LINES(PART_CODE)

                                IF (%STATUS <> %NORMAL)
                                        MESSAGE/BELL/IDENTIFIER/WAIT P_52022, &
                                             GOODS_RECEIVED_LINES(PART_CODE), &
                                             GOODS_RECEIVED_LINES(WAREHOUSE)
                                        EXIT(%STATUS)
                                END_IF

                                #PART_TAXABLE = PRODUCT_WAREHOUSE(TAXABLE)
                                #PRODUCT_TAX_CODE = PRODUCT_WAREHOUSE(PRODUCT_TAX_CODE)
                        END_IF


                ELSE
                        ! product is non-stock
                        !++
                        ! The system assumes that non-stocked part are taxable,
                        ! if there is a default product tax code defined at
                        ! the divisional level
                        !--
                        IF (AP_CONTROLS(DEF_PRODUCT_TAX_CODE) <> "")
                                #PART_TAXABLE = PARAMETER("LANGUAGE_YES")
                                #PRODUCT_TAX_CODE = AP_CONTROLS(DEF_PRODUCT_TAX_CODE)
                        ELSE
                                #PART_TAXABLE = PARAMETER("LANGUAGE_NO")
                                #PRODUCT_TAX_CODE = ""
                        END_IF
                        ! Set default values
                        #WAREHOUSED_FLAG = #NO
                        #PURCH_CODE = AP_CONTROLS(GL_INV_CODE)
                        #PURCH_ACC = AP_CONTROLS(GL_INV)
                        #COSTING_UNIT = GOODS_RECEIVED_LINES(UNIT_PRICE)
                        #UOM_TYPE = PARAMETER("IC_SINGLE_UOM_CONTROL")

                END_IF
        END_BLOCK

        BEGIN_BLOCK CALL_GRN_DETAILS_PROC

                IF (#WAREHOUSED_FLAG = PARAMETER("LANGUAGE_YES"))

                        PERFORM COPY_LINES_FROM_GRN_LOTS
                        IF (%STATUS=%FAILURE)
                                EXIT(%FAILURE)
                        END_IF
                ELSE

                        PERFORM COPY_LINES_FROM_GRN_FOR_NONWH
                        IF (%STATUS=%FAILURE)
                                EXIT(%FAILURE)
                        END_IF

                END_IF

        END_BLOCK

        BEGIN_BLOCK END_LINE
        END_BLOCK

END_FORM


PROCEDURE_FORM COPY_LINES_FROM_GRN_LOTS &
        /LOCK=NONE &
        /TABLE=GOODS_RECEIVED_LINE_DETAILS &
        /WITH=COMPANY_CODE = GOODS_RECEIVED_LINES(COMPANY_CODE) &
        /WITH=DIVISION = GOODS_RECEIVED_LINES(DIVISION) &
        /WITH=GRN_NUMBER = GOODS_RECEIVED_LINES(GRN_NUMBER) &
        /WITH=GRN_LINE_NUMBER = GOODS_RECEIVED_LINES(GRN_LINE_NUMBER) &
        /SORTED_BY=(PO_NUMBER,PO_LINE_NUMBER,IC_LOT_NUMBER,IC_STATUS_CODE) &
        /BREAK=SETUP_PO_LINE_DATA,, &
                (GOODS_RECEIVED_LINE_DETAILS(PO_NUMBER) &
                & GOODS_RECEIVED_LINE_DETAILS(PO_LINE_NUMBER)) &
        /BREAK=SETUP_NEW_INVOICE_REC,CREATE_INVOICE_REC, &
                (GOODS_RECEIVED_LINE_DETAILS(IC_LOT_NUMBER) &
                & GOODS_RECEIVED_LINE_DETAILS(IC_STATUS_CODE))

        BEGIN_BLOCK CHECK_IF_QTY_TO_INVOICE
                ! for DETAIL quantities this time instead of line qtys.
                !
                FIND IN GOODS_RECEIVED_DETAIL_QTYS &
                        /LOCK=NONE &
                        /WITH=COMPANY_CODE = GOODS_RECEIVED_LINE_DETAILS(COMPANY_CODE) &
                        /WITH=DIVISION = GOODS_RECEIVED_LINE_DETAILS(DIVISION) &
                        /WITH=GRN_NUMBER = GOODS_RECEIVED_LINE_DETAILS(GRN_NUMBER) &
                        /WITH=GRN_LINE_NUMBER = GOODS_RECEIVED_LINE_DETAILS(GRN_LINE_NUMBER) &
                        /WITH=SEQUENCE = GOODS_RECEIVED_LINE_DETAILS(SEQUENCE) &
                        /WITH=UNIT_OF_MEASURE = GOODS_RECEIVED_LINES(UNIT_REC) &
                        /WITH=GRN_QTY_TO_INVOICE > 0.0

                IF (%STATUS <> %SUCCESS)
                        ! skip this line details record, there is no quantity
                        ! outstanding to invoice.
                        GOTO END_DETAIL_LINE
                END_IF
        END_BLOCK

    BEGIN_BLOCK STORE_RECORD_BREAK_VALUES
        ! because we are going to create an invoice line for this
        ! GRN line details record.
        #CURRENT_STATUS_CODE    = GOODS_RECEIVED_LINE_DETAILS(IC_STATUS_CODE)
        #CURRENT_LOT_NUMBER = GOODS_RECEIVED_LINE_DETAILS(IC_LOT_NUMBER)
        #CURRENT_PO_NUMBER  = GOODS_RECEIVED_LINE_DETAILS(PO_NUMBER)
        #CURRENT_PO_LINE_NUMBER = GOODS_RECEIVED_LINE_DETAILS(PO_LINE_NUMBER)

        IF ( #CURRENT_STATUS_CODE = PARAMETER("IC_STATUS_QOH") )
            #IC_STATUS_CODE = PARAMETER("QTY_ACCEPTED")
        END_IF
        IF ( #CURRENT_STATUS_CODE = PARAMETER("IC_STATUS_QC") )
            #IC_STATUS_CODE = PARAMETER("QTY_IN_QUALITY_CONTROL")
        END_IF
        IF ( #CURRENT_STATUS_CODE = PARAMETER("IC_STATUS_QR") )
            #IC_STATUS_CODE = PARAMETER("QTY_IN_QUARANTINE")
        END_IF
    END_BLOCK

        BEGIN_BLOCK GRN_LINE_STATUS_FOR_INVOICE_POSTINGS
!               #GRN_LINE_STATUS =GOODS_RECEIVED_LINES(POP_NORMAL_RECEIPT_STATUS)
        END_BLOCK

        BEGIN_BLOCK INCREMENT_QUANTITY_VALUES
                #INVOICE_QUANTITY = #INVOICE_QUANTITY &
                        + GOODS_RECEIVED_DETAIL_QTYS(GRN_QTY_TO_INVOICE)

                ! get nominated quantity for stocked products (regardless of
                ! UOM type)
                !
                IF (GOODS_RECEIVED_LINES(LINE_TYPE) = PARAMETER("LINE_TYPE_STOCK"))

                        FIND IN GOODS_RECEIVED_DETAIL_QTYS &
                                /SECONDARY &
                                /STREAM_NAME=NOMINATED &
                                /WITH=COMPANY_CODE = GOODS_RECEIVED_LINE_DETAILS(COMPANY_CODE) &
                                /WITH=DIVISION = GOODS_RECEIVED_LINE_DETAILS(DIVISION) &
                                /WITH=GRN_NUMBER = GOODS_RECEIVED_LINE_DETAILS(GRN_NUMBER) &
                                /WITH=GRN_LINE_NUMBER = GOODS_RECEIVED_LINE_DETAILS(GRN_LINE_NUMBER) &
                                /WITH=SEQUENCE = GOODS_RECEIVED_LINE_DETAILS(SEQUENCE) &
                                /WITH=UNIT_OF_MEASURE = &
                                        GOODS_RECEIVED_LINES(IC_NOMINATED_UNIT)

                        IF (%STATUS <> %SUCCESS)
                                #ERROR_MESSAGE = "Details nominated quantity not found for line !AS Seq !AS"
                                ERROR/TEXT_ONLY #ERROR_MESSAGE
                        END_IF

                        #NOMINATED_INVOICE_QUANTITY &
                                = #NOMINATED_INVOICE_QUANTITY &
                                + NOMINATED:GOODS_RECEIVED_DETAIL_QTYS(GRN_QTY_TO_INVOICE)

                        ! get other inventory quantity for stocked products
                        ! which do not have a Single UOM type (are catchweight
                        ! or potent)
                        !
                        IF ((#UOM_TYPE = PARAMETER("IC_CATCHWEIGHT_UOM_CONTROL")) &
                        OR (#UOM_TYPE = PARAMETER("IC_POTENT_UOM_CONTROL")))

                                FIND IN GOODS_RECEIVED_DETAIL_QTYS &
                                        /SECONDARY &
                                        /STREAM_NAME=OTHER &
                                        /WITH=COMPANY_CODE = GOODS_RECEIVED_LINE_DETAILS(COMPANY_CODE) &
                                        /WITH=DIVISION = GOODS_RECEIVED_LINE_DETAILS(DIVISION) &
                                        /WITH=GRN_NUMBER = GOODS_RECEIVED_LINE_DETAILS(GRN_NUMBER) &
                                        /WITH=GRN_LINE_NUMBER = GOODS_RECEIVED_LINE_DETAILS(GRN_LINE_NUMBER) &
                                        /WITH=SEQUENCE = GOODS_RECEIVED_LINE_DETAILS(SEQUENCE) &
                                        /WITH=UNIT_OF_MEASURE = &
                                   GOODS_RECEIVED_LINES(IC_OTHER_INVENTORY_UNIT)

                                IF (%STATUS <> %SUCCESS)
                                        #ERROR_MESSAGE = "Details other inventory quantity not found for line !AS Seq !AS"
                                        ERROR/TEXT_ONLY #ERROR_MESSAGE
                                END_IF

                                #OTHER_INVOICE_QUANTITY &
                                        = #OTHER_INVOICE_QUANTITY &
                                        + OTHER:GOODS_RECEIVED_DETAIL_QTYS(GRN_QTY_TO_INVOICE)
                        END_IF
                END_IF
        END_BLOCK

        BEGIN_BLOCK END_DETAIL_LINE
        END_BLOCK

END_FORM



PROCEDURE_FORM COPY_LINES_FROM_GRN_FOR_NONWH &
        /LOCK=NONE &
        /TABLE=GOODS_RECEIVED_LINE_DETAILS &
        /WITH=COMPANY_CODE = GOODS_RECEIVED_LINES(COMPANY_CODE) &
        /WITH=DIVISION = GOODS_RECEIVED_LINES(DIVISION) &
        /WITH=GRN_NUMBER = GOODS_RECEIVED_LINES(GRN_NUMBER) &
        /WITH=GRN_LINE_NUMBER = GOODS_RECEIVED_LINES(GRN_LINE_NUMBER)

        #INVOICE_QUANTITY_NONWH = 0
        #NOM_INVOICE_QTY_NONWH = 0

        BEGIN_BLOCK CHECK_IF_QTY_TO_INVOICE
                ! for DETAIL quantities this time instead of line qtys.
                !
                FIND IN GOODS_RECEIVED_DETAIL_QTYS &
                        /LOCK=NONE &
                        /WITH=COMPANY_CODE = GOODS_RECEIVED_LINE_DETAILS(COMPANY_CODE) &
                        /WITH=DIVISION = GOODS_RECEIVED_LINE_DETAILS(DIVISION) &
                        /WITH=GRN_NUMBER = GOODS_RECEIVED_LINE_DETAILS(GRN_NUMBER) &
                        /WITH=GRN_LINE_NUMBER = GOODS_RECEIVED_LINE_DETAILS(GRN_LINE_NUMBER) &
                        /WITH=SEQUENCE = GOODS_RECEIVED_LINE_DETAILS(SEQUENCE) &
                        /WITH=UNIT_OF_MEASURE = GOODS_RECEIVED_LINES(UNIT_REC) &
                        /WITH=GRN_QTY_TO_INVOICE > 0.0

                IF (%STATUS <> %SUCCESS)
                        ! skip this line details record, there is no quantity
                        ! outstanding to invoice.
                        GOTO END_LINE
                END_IF
        END_BLOCK

        BEGIN_BLOCK FIND_INV_QTY
                #INVOICE_QUANTITY_NONWH = GOODS_RECEIVED_DETAIL_QTYS(GRN_QTY_TO_INVOICE)
        END_BLOCK

        BEGIN_BLOCK FIND_NOM_QTY
                IF (GOODS_RECEIVED_LINES(LINE_TYPE) = PARAMETER("LINE_TYPE_STOCK"))

                        FIND IN GOODS_RECEIVED_DETAIL_QTYS &
                                /SECONDARY &
                                /STREAM_NAME=NOMINATED &
                                /WITH=COMPANY_CODE = GOODS_RECEIVED_LINE_DETAILS(COMPANY_CODE) &
                                /WITH=DIVISION = GOODS_RECEIVED_LINE_DETAILS(DIVISION) &
                                /WITH=GRN_NUMBER = GOODS_RECEIVED_LINE_DETAILS(GRN_NUMBER) &
                                /WITH=GRN_LINE_NUMBER = GOODS_RECEIVED_LINE_DETAILS(GRN_LINE_NUMBER) &
                                /WITH=SEQUENCE = GOODS_RECEIVED_LINE_DETAILS(SEQUENCE) &
                                /WITH=UNIT_OF_MEASURE = &
                                        GOODS_RECEIVED_LINES(IC_NOMINATED_UNIT)

                        IF (%STATUS <> %SUCCESS)
                                #ERROR_MESSAGE = "Details nominated quantity not found for line !AS Seq !AS"
                                ERROR/TEXT_ONLY #ERROR_MESSAGE
                        END_IF

                        #NOM_INVOICE_QTY_NONWH = NOMINATED:GOODS_RECEIVED_DETAIL_QTYS(GRN_QTY_TO_INVOICE)
                ELSE
                        ! Non stock part
                        #NOM_INVOICE_QTY_NONWH = #INVOICE_QUANTITY_NONWH

                END_IF

        END_BLOCK

        BEGIN_BLOCK STORE_RECORD_BREAK_VALUES
                ! because we are going to create an invoice line for this
                ! GRN line details record.
                #CURRENT_STATUS_CODE = GOODS_RECEIVED_LINE_DETAILS(IC_STATUS_CODE)
                #CURRENT_LOT_NUMBER = GOODS_RECEIVED_LINE_DETAILS(IC_LOT_NUMBER)
                #CURRENT_PO_NUMBER = GOODS_RECEIVED_LINE_DETAILS(PO_NUMBER)
                #CURRENT_PO_LINE_NUMBER = GOODS_RECEIVED_LINE_DETAILS(PO_LINE_NUMBER)

                IF (#CURRENT_STATUS_CODE = "QOH")
                        #IC_STATUS_CODE = PARAMETER("QTY_ACCEPTED")
                END_IF
                IF (#CURRENT_STATUS_CODE = "QC")
                        #IC_STATUS_CODE = PARAMETER("QTY_IN_QUALITY_CONTROL")
                END_IF
                IF (#CURRENT_STATUS_CODE = "QR")
                        #IC_STATUS_CODE = PARAMETER("QTY_IN_QUARANTINE")
                END_IF

        END_BLOCK

        BEGIN_BLOCK CREATE_NONWH_LINE

                PERFORM SETUP_PO_LINE_DATA
                PERFORM SETUP_NEW_INVOICE_REC
                #INVOICE_QUANTITY = #INVOICE_QUANTITY_NONWH
                #NOMINATED_INVOICE_QUANTITY = #NOM_INVOICE_QTY_NONWH

                PERFORM CREATE_INVOICE_REC

        END_BLOCK

        BEGIN_BLOCK END_LINE
        END_BLOCK

END_FORM



PROCEDURE_FORM SETUP_PO_LINE_DATA

        BEGIN_BLOCK INITIALIZE_VARS
                #PCV_PO_EXISTS = 0
                #PO_NUMBER = ""
                #PO_LINE_NUMBER = ""
                #ORDER_QUANTITY = 0.0
                #LINE_PERCENT = 0.0

                ! In case a PO does not exist, and no tax information existed
                ! before this point use the PURCHASE_INVOICES(SYS_TAXABLE_CODE)
                ! as the default value for the invoice line.
                !
                #INV_SYS_TAXABLE_CODE = PURCHASE_INVOICES(SYS_TAXABLE_CODE)
                #INV_VENDOR_TAX_CODE = PURCHASE_INVOICES(DEF_VENDOR_TAX_CODE)
        END_BLOCK

        BEGIN_BLOCK CHECK_IF_PO_TO_PROCESS
                IF ((GOODS_RECEIVED_LINE_DETAILS(PO_NUMBER) = "") &
                OR  (GOODS_RECEIVED_LINE_DETAILS(PO_LINE_NUMBER) = ""))
                        ! GRN line was not allocated to a PO line
                        GOTO END_PO_LINE_SETUP
                ELSE
                        !++
                        ! Set line control variable PCV_PO_EXISTS.
                        ! This boolean condition variable states whether or not
                        ! a one-to-one correspondence exists between the current
                        ! GRN line and a PO line.  If so, then the tax detail &
                        ! GL posting records from the PO line is copied in as
                        ! the invoice line defaults.
                        !
                        ! Note:  When a GRN line is entered and later allocated
                        !        to one or more PO line, new default tax details
                        !        & GL posting records will be created as if there
                        !        is no associated PO line.
                        !--
                        #PCV_PO_EXISTS = 1
                END_IF
        END_BLOCK

        BEGIN_BLOCK GET_PO_LINE_REC
                FIND IN POP_LINES &
                        /LOCK=NONE &
                        /WITH=COMPANY_CODE = GOODS_RECEIVED_LINE_DETAILS(COMPANY_CODE) &
                        /WITH=DIVISION = GOODS_RECEIVED_LINE_DETAILS(DIVISION) &
                        /WITH=PO_NUMBER = GOODS_RECEIVED_LINE_DETAILS(PO_NUMBER) &
                        /WITH=PO_LINE_NUMBER = GOODS_RECEIVED_LINE_DETAILS(PO_LINE_NUMBER)

                IF (%STATUS <> %NORMAL)
                        MESSAGE/BELL/IDENTIFIER/WAIT P_56177, &
                                GOODS_RECEIVED_LINE_DETAILS(PO_NUMBER), &
                                GOODS_RECEIVED_LINE_DETAILS(PO_LINE_NUMBER)
                        EXIT(%FAILURE)
                END_IF
        END_BLOCK

        BEGIN_BLOCK COPY_VAR_VALUES_FOR_PO
                #PO_NUMBER = POP_LINES(PO_NUMBER)
                #PO_LINE_NUMBER = POP_LINES(PO_LINE_NUMBER)
                #LINE_PERCENT = POP_LINES(LINE_DISCOUNT_PERCENT)
                !#PURCHASE_UNIT = POP_LINES(UNIT_PUR)

                IF (POP_LINES(TAX_VAL) <> 0.0)
                        ! If the original PO was taxed, then the current
                        ! invoice will then tax the part even if the part is
                        ! no longer taxable.
                        !
                        #PART_TAXABLE = #YES
                END_IF

                #ORDER_QUANTITY = POP_LINES(ORDER_QUANTITY)
                IF (GOODS_RECEIVED_LINES(LINE_TYPE) = PARAMETER("LINE_TYPE_STOCK"))

                        #ORDER_QUANTITY = POP_LINES(IC_NOMINATED_QTY)

                        IF ((#UOM_TYPE <> PARAMETER("IC_SINGLE_UOM_CONTROL")) &
                        AND (POP_LINES(IC_OTHER_INVENTORY_UNIT) = #COSTING_UNIT))

                                #ORDER_QUANTITY = POP_LINES(IC_OTHER_INVENTORY_QTY)

                        END_IF
                END_IF
        END_BLOCK

        BEGIN_BLOCK SETUP_PO_TAX_DATA
                !++
                ! Determine if original PO line taxable code along with current use tax/
                ! division accrual/vendor taxable code is still a valid combination.
                ! If not, then set the line taxable code to "N" and let the user take
                ! care of it.
                !--
                PERFORM "GEMLB:LB_CHK_TAX_FLAG" ( &
                         (#INV_SYS_TAXABLE_CODE), &
                         (#DIVISION_ACCRUE_TAX), &
                         (#USE_TAX_IN_USE), &
                         (#VENDOR_TAXABLE_CODE), &
                         (#PRICING_METHOD), &
                          #ERROR)

                IF (%STATUS <> %NORMAL)
                        #INV_SYS_TAXABLE_CODE = PARAMETER("VENDOR_TAX_NON_TAXABLE")
                        #INV_VENDOR_TAX_CODE = ""
                ELSE
                        ! #INV_SYS_TAXABLE_CODE = POP_LINES(SYS_TAXABLE_CODE)
                        #INV_VENDOR_TAX_CODE = POP_LINES(VENDOR_TAX_CODE)
                        #PRODUCT_TAX_CODE = POP_LINES(PRODUCT_TAX_CODE)
                END_IF
        END_BLOCK

        BEGIN_BLOCK END_PO_LINE_SETUP
        END_BLOCK

END_FORM


PROCEDURE_FORM SETUP_NEW_INVOICE_REC

        BEGIN_BLOCK SETUP_TAX_DATA
                !++
                ! Clear tax detail VT for each line.
                !--
                DELETE ALL FROM TAX_DETAILS_VT

                IF (#COMPANY_EC_REPORT_TYPE <> "")

                        #LINE_EC_REPORT_TYPE = #DEF_EC_REPORT_TYPE

                        IF (#LINE_EC_REPORT_TYPE <> "")
                                PERFORM CLEAR_EC_VARIABLES
                                #EC_TRANSACTION_TYPE    = #DEF_EC_TRANSACTION_TYPE
                                #EC_MODE_TRANSPORT      = #DEF_EC_MODE_TRANSPORT
                                #EC_DELIVERY_TERMS      = #DEF_EC_DELIVERY_TERMS
                                #EC_STAT_FACTOR         = #DEF_EC_STAT_FACTOR
                        END_IF
                END_IF

                IF (#PART_TAXABLE = "")
                        #PART_TAXABLE = PRODUCT_WAREHOUSE(TAXABLE)
                END_IF
                ! If tax is based on vendor tax code only, then clear out the product_tax_code
                !--
                BEGIN_CASE (AP_CONTROLS(TAX_BASED_ON))
                        CASE PARAMETER("TAX_BASED_ON_VENDOR")
                                #PRODUCT_TAX_CODE = ""
                        CASE PARAMETER("TAX_BASED_ON_PRODUCT")
                                #INV_VENDOR_TAX_CODE = ""
                END_CASE
        END_BLOCK

        BEGIN_BLOCK PA_SETUP
                IF(#PA_IN_USE= #YES AND (PURCHASE_INVOICES(PA_PROJECT_CODE)=""))
                    #PROJECT    = ""
                    #WBS_NUMBER = ""

                    FIND IN POP_LINES &
                        /LOCK = NONE &
                        /SECONDARY &
                        /STREAM_NAME=POLINES &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=PO_NUMBER=GOODS_RECEIVED_LINES(PO_NUMBER) &
                        /WITH=PO_LINE_NUMBER=GOODS_RECEIVED_LINES(PO_LINE_NUMBER) 
                
                        IF (%STATUS <> %FAILURE)
                            #PROJECT    = POLINES:POP_LINES(PA_PROJECT_CODE)
                            #WBS_NUMBER = POLINES:POP_LINES(PA_WBS_NUMBER)
                        END_IF
                        
                        IF (#PROJECT <> "")
                            PERFORM "GEMPA:PA_V_COMMON" PA_WBS_UPDATE_VALIDATION ( &
								#COMPANY_CODE, #PROJECT, #WBS_NUMBER, &
								#POSTING_DATE, #PERIOD , #YEAR , #YES , &
								"O","","","","", &
								#R_STATUS)
						END_IF
					
                
                END_IF
        END_BLOCK

        BEGIN_BLOCK POPULATE_INVOICE_LINE_FIELDS
                ! populate fields on the invoice line record which will
                ! not have different values for each GRN line details record.

                CLEAR_BUFFER PURCHASE_INVOICE_LINES

                #PURCHASE_INVOICE_LINE = #PURCHASE_INVOICE_LINE + 1

                PURCHASE_INVOICE_LINES(COMPANY_CODE)    = GOODS_RECEIVED_LINES(COMPANY_CODE)
                PURCHASE_INVOICE_LINES(DIVISION)        = GOODS_RECEIVED_LINES(DIVISION)
                PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_NUMBER) = #PURCHASE_INVOICE_NUMBER
                PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE)   = #PURCHASE_INVOICE_LINE
                PURCHASE_INVOICE_LINES(PO_LINE_NUMBER)  = GOODS_RECEIVED_LINES(PO_LINE_NUMBER)
                PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE_TYPE) = GOODS_RECEIVED_LINES(LINE_TYPE)
                PURCHASE_INVOICE_LINES(WAREHOUSE)       = GOODS_RECEIVED_LINES(WAREHOUSE)
                PURCHASE_INVOICE_LINES(PART_CODE)       = GOODS_RECEIVED_LINES(PART_CODE)
                !++
                ! The cost center default value is set to the cost center value held at the GRN line.
                !--
                PURCHASE_INVOICE_LINES(COST_CENTER)     = GOODS_RECEIVED_LINES(COST_CENTER)
                PURCHASE_INVOICE_LINES(SYS_BASE_CURRENCY_CODE)  = GOODS_RECEIVED_LINES(SYS_BASE_CURRENCY_CODE)
                PURCHASE_INVOICE_LINES(SYS_CURRENCY_CODE)       = PURCHASE_INVOICES(SYS_CURRENCY_CODE)
                PURCHASE_INVOICE_LINES(SYS_CURRENCY_RATE)       = #CURRENCY_RATE
                PURCHASE_INVOICE_LINES(SYS_CURRENCY_DATE)       = #CURRENCY_DATE
                PURCHASE_INVOICE_LINES(SYS_CURRENCY_FIXED_FLAG) = #CURRENCY_FIXED
                PURCHASE_INVOICE_LINES(SYS_CURRENCY_RATIO_INDIC) = #CURRENCY_RATIO_INDIC
                PURCHASE_INVOICE_LINES(SYS_RATE_AUTHORITY)      = GOODS_RECEIVED_LINES(SYS_RATE_AUTHORITY)
                PURCHASE_INVOICE_LINES(SYS_RATE_TYPE)   = GOODS_RECEIVED_LINES(SYS_RATE_TYPE)

                PURCHASE_INVOICE_LINES(IC_LOT_NUMBER)   = GOODS_RECEIVED_LINE_DETAILS(IC_LOT_NUMBER)
                PURCHASE_INVOICE_LINES(IC_STATUS_CODE)  = GOODS_RECEIVED_LINE_DETAILS(IC_STATUS_CODE)
                PURCHASE_INVOICE_LINES(PO_SEQUENCE)     = GOODS_RECEIVED_LINES(PO_SEQUENCE)

				! Check if GRN is from TM
                FIND IN SOURCE_MODULES &
                        /LOCK=NONE &
                        /WITH=SOURCE_MODULE=(PARAMETER("MODULE_TM")) &
                        /WITH=MODULE_IN_USE=(PARAMETER("LANGUAGE_YES"))

                IF (%STATUS = %SUCCESS)
                        #TM_IN_USE = PARAMETER("LANGUAGE_YES")
                ELSE
                        #TM_IN_USE = PARAMETER("LANGUAGE_NO")
                END_IF
				                 
				IF ((GOODS_RECEIVED_LINES(TM_COST_CATEGORY) <> "") AND (#TM_IN_USE = #YES))
					PURCHASE_INVOICE_LINES(PURCHASE_COST)   = GOODS_RECEIVED_LINE_DETAILS(GRN_COST)
				ELSE
					PURCHASE_INVOICE_LINES(PURCHASE_COST)   = POP_LINES(PURCHASE_PRICE)
				END_IF 

                PURCHASE_INVOICE_LINES(PURCHASE_COST_INC_TAX)   = POP_LINES(PURCHASE_PRICE_INC_TAX)

                IF ( PURCHASE_INVOICES(SYS_CURRENCY_CODE) <> POP_LINES(SYS_CURRENCY_CODE) )

                    IF ( PURCHASE_INVOICES(SYS_CURRENCY_CODE) = POP_LINES(SYS_BASE_CURRENCY_CODE) )

                        #CONVERT_RATE = POP_LINES(SYS_CURRENCY_RATE)

                        IF (POP_LINES(SYS_CURRENCY_RATIO_INDIC) = PARAMETER("MULTIPLY_RATIO_INDIC"))
                            PURCHASE_INVOICE_LINES(PURCHASE_COST)   = ROUND(POP_LINES(PURCHASE_PRICE)*#CONVERT_RATE,4)
                        ELSE
                            PURCHASE_INVOICE_LINES(PURCHASE_COST)   = ROUND(POP_LINES(PURCHASE_PRICE)/#CONVERT_RATE,4)
                        END_IF
                    END_IF

                END_IF
               
					 !PA SETUP
				IF (PURCHASE_INVOICES(PA_PROJECT_CODE)= "") 
                	PURCHASE_INVOICE_LINES(PA_PROJECT_CODE)         = #PROJECT
                	PURCHASE_INVOICE_LINES(PA_WBS_NUMBER)           = #WBS_NUMBER
				ELSE
	                PURCHASE_INVOICE_LINES(PA_PROJECT_CODE)         = ""
    	            PURCHASE_INVOICE_LINES(PA_WBS_NUMBER)           = ""
				END_IF 
			   
                PURCHASE_INVOICE_LINES(UNIT_PRICE)              = GOODS_RECEIVED_LINES(UNIT_PRICE)
                PURCHASE_INVOICE_LINES(POP_NOMINATED_PRICE_UNIT)= GOODS_RECEIVED_LINES(POP_NOMINATED_PRICE_UNIT)

                PURCHASE_INVOICE_LINES(UNIT_PUR)                = GOODS_RECEIVED_LINES(UNIT_REC)

                PURCHASE_INVOICE_LINES(IC_NOMINATED_UNIT)       = GOODS_RECEIVED_LINES(IC_NOMINATED_UNIT)
                PURCHASE_INVOICE_LINES(IC_OTHER_INVENTORY_UNIT) = GOODS_RECEIVED_LINES(IC_OTHER_INVENTORY_UNIT)

                PURCHASE_INVOICE_LINES(PURCHASE_LINE_DETAIL_DESCR) = GOODS_RECEIVED_LINES(RECEIVED_DETAIL_DESCRIPTION)
                PURCHASE_INVOICE_LINES(INVOICE_LINE_REFERENCE)  = GOODS_RECEIVED_LINES(ORDER_LINE_REFERENCE)
                PURCHASE_INVOICE_LINES(VENDOR_NUMBER)           = PURCHASE_INVOICES(VENDOR_NUMBER)
                PURCHASE_INVOICE_LINES(VENDORS_PART_CODE)       = GOODS_RECEIVED_LINES(VENDORS_PART_CODE)
                PURCHASE_INVOICE_LINES(QTY_ALLOCATED)           = 0.0
                PURCHASE_INVOICE_LINES(GRN_NUMBER)              = GOODS_RECEIVED_LINES(GRN_NUMBER)
                PURCHASE_INVOICE_LINES(GRN_LINE_NUMBER)         = GOODS_RECEIVED_LINES(GRN_LINE_NUMBER)             
                PURCHASE_INVOICE_LINES(INTERNAL_COMMENTS)       = GOODS_RECEIVED_LINES(DETAIL_DESCRIPTION)

                ! Provide defaults
                !--
                PURCHASE_INVOICE_LINES(DELIVERY_ADDRESS_CODE)   = #CORPORATE_ADDRESS_CODE
                PURCHASE_INVOICE_LINES(SYS_EC_WEIGHT)           = GOODS_RECEIVED_LINES(SYS_EC_WEIGHT)
                PURCHASE_INVOICE_LINES(TEMP_INVOICE_QUANTITY)   = 0.0
                PURCHASE_INVOICE_LINES(IC_NOMINATED_QTY)        = 0.0
                PURCHASE_INVOICE_LINES(IC_OTHER_INVENTORY_QTY)  = 0.0

                PURCHASE_INVOICE_LINES(PRODUCT_TAX_CODE)        = #PRODUCT_TAX_CODE
                PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE)        = #INV_SYS_TAXABLE_CODE
                PURCHASE_INVOICE_LINES(VENDOR_TAX_CODE)         = #INV_VENDOR_TAX_CODE
                PURCHASE_INVOICE_LINES(LINE_DISCOUNT_PERCENT)   = #LINE_PERCENT
                PURCHASE_INVOICE_LINES(SYS_TAX_RETAINERS_CURRENCY) = 0

                IF (GOODS_RECEIVED_LINES(SYS_TARIFF_CODE) <> "")
                        PURCHASE_INVOICE_LINES(SYS_EC_STATISTICS_APPLICABLE)    = GOODS_RECEIVED_LINES(SYS_EC_STATISTICS_APPLICABLE)
                        PURCHASE_INVOICE_LINES(SYS_EC_PROCESSED_INDICATOR)      = GOODS_RECEIVED_LINES(SYS_EC_PROCESSED_INDICATOR)
                        PURCHASE_INVOICE_LINES(SYS_EC_TRANSACTION_TYPE)         = GOODS_RECEIVED_LINES(SYS_EC_TRANSACTION_TYPE)
                        PURCHASE_INVOICE_LINES(SYS_TARIFF_CODE)                 = GOODS_RECEIVED_LINES(SYS_TARIFF_CODE)
                        PURCHASE_INVOICE_LINES(SYS_COUNTRY_OF_ORIGIN)           = GOODS_RECEIVED_LINES(SYS_COUNTRY_OF_ORIGIN)
                        PURCHASE_INVOICE_LINES(SYS_EC_DELIVERY_TERMS)           = GOODS_RECEIVED_LINES(SYS_EC_DELIVERY_TERMS)
                        PURCHASE_INVOICE_LINES(SYS_EC_MODE_OF_TRANSPORT)        = GOODS_RECEIVED_LINES(SYS_EC_MODE_OF_TRANSPORT)
                        PURCHASE_INVOICE_LINES(SYS_EC_STATISTICAL_VALUE)        = GOODS_RECEIVED_LINES(SYS_EC_STATISTICAL_VALUE)
                        PURCHASE_INVOICE_LINES(SYS_EC_ANALYSIS_1)               = GOODS_RECEIVED_LINES(SYS_EC_ANALYSIS_1)
                        PURCHASE_INVOICE_LINES(SYS_EC_ANALYSIS_2)               = GOODS_RECEIVED_LINES(SYS_EC_ANALYSIS_2)
                        PURCHASE_INVOICE_LINES(SYS_EC_ANALYSIS_3)               = GOODS_RECEIVED_LINES(SYS_EC_ANALYSIS_3)
                        PURCHASE_INVOICE_LINES(SYS_EC_ANALYSIS_4)               = GOODS_RECEIVED_LINES(SYS_EC_ANALYSIS_4)
                        PURCHASE_INVOICE_LINES(SYS_EC_ANALYSIS_5)               = GOODS_RECEIVED_LINES(SYS_EC_ANALYSIS_5)
                END_IF
        END_BLOCK


        BEGIN_BLOCK INITIALIZE_INVOICE_VARS
                #INVOICE_QUANTITY               = 0.0
                #NOMINATED_INVOICE_QUANTITY     = 0.0
                #OTHER_INVOICE_QUANTITY         = 0.0
                #COMMIT_VALUE                   = 0.0
                #LINE_VALUE                     = 0.0
                #SYS_N_TAX_VAL                  = 0.0
                #SYS_E_TAX_VAL                  = 0.0
                #TAX_VAL                        = 0.0
                #TOT_SYS_N_TAX_VAL              = 0.0
                #TOT_SYS_E_TAX_VAL              = 0.0
                #RETAINERS_VAL                  = 0
        END_BLOCK

END_FORM


PROCEDURE_FORM CREATE_INVOICE_REC


        BEGIN_BLOCK CHECK_IF_INV_LINE_REQD
                IF ((#CURRENT_LOT_NUMBER <> GOODS_RECEIVED_LINE_DETAILS(IC_LOT_NUMBER)) &
                OR  (#CURRENT_STATUS_CODE <> GOODS_RECEIVED_LINE_DETAILS(IC_STATUS_CODE)) &
                OR  (#CURRENT_PO_NUMBER <> GOODS_RECEIVED_LINE_DETAILS(PO_NUMBER)) &
                OR  (#CURRENT_PO_LINE_NUMBER <> GOODS_RECEIVED_LINE_DETAILS(PO_LINE_NUMBER)))
                        ! if current variable values do not match the values
                        ! in the fields used for the lowest level breaks, it
                        ! means that no valid GRN line details records have
                        ! been found before this break form was automatically
                        ! performed - so don't create an invoice line record.
                        !
                        GOTO END_CREATE_INVOICE_REC
                END_IF
        END_BLOCK

        BEGIN_BLOCK STORE_INVENTORY_QTYS
                PURCHASE_INVOICE_LINES(INVOICE_QUANTITY_DETAIL) = #INVOICE_QUANTITY
                PURCHASE_INVOICE_LINES(TEMP_INVOICE_QUANTITY) = #INVOICE_QUANTITY

                ! Populate new inventory quantity fields
                IF (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE_TYPE) &
                                                = PARAMETER("LINE_TYPE_STOCK"))
                        PURCHASE_INVOICE_LINES(IC_NOMINATED_QTY) &
                                        = #NOMINATED_INVOICE_QUANTITY


                        IF ((#UOM_TYPE = PARAMETER("IC_CATCHWEIGHT_UOM_CONTROL")) &
                        OR (#UOM_TYPE = PARAMETER("IC_POTENT_UOM_CONTROL")))

                                PURCHASE_INVOICE_LINES(IC_OTHER_INVENTORY_QTY) &
                                        = #OTHER_INVOICE_QUANTITY
                        END_IF
                ELSE
                        PURCHASE_INVOICE_LINES(IC_NOMINATED_QTY) = #INVOICE_QUANTITY
                END_IF
        END_BLOCK

    BEGIN_BLOCK CALCULATE_PRICE_QTY
        ! calculate price qty - means getting invoice quantity
        ! in terms of pricing unit before multiplying by purchase_cost

        IF ( PURCHASE_INVOICE_LINES(UNIT_PRICE) = PURCHASE_INVOICE_LINES(UNIT_PUR) )
            #STOCK_PRICING_QUANTITY    = PURCHASE_INVOICE_LINES(TEMP_INVOICE_QUANTITY)
            #NONSTOCK_PRICING_QUANTITY = PURCHASE_INVOICE_LINES(TEMP_INVOICE_QUANTITY)
        ELSE
            IF (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE_TYPE) = PARAMETER("LINE_TYPE_NONSTOCK"))
                ! non-stock line with different purchase and pricing
                ! units - direct UOM conversion only is required.

                #NONSTOCK_CONV_FACTOR = 1.0
                #NONSTOCK_PRICING_QUANTITY = 0.0

                PERFORM UOM_CONVERSION (&
                        (PURCHASE_INVOICE_LINES(COMPANY_CODE)), &
                        (PURCHASE_INVOICE_LINES(PART_CODE)), &
                        (PURCHASE_INVOICE_LINES(WAREHOUSE)), &
                        (PURCHASE_INVOICE_LINES(IC_LOT_NUMBER)), &
                        (PURCHASE_INVOICE_LINES(TEMP_INVOICE_QUANTITY)), &
                        (PURCHASE_INVOICE_LINES(UNIT_PUR)), &
                        (PURCHASE_INVOICE_LINES(UNIT_PRICE)), &
                        #NONSTOCK_CONV_FACTOR, &
                        #NONSTOCK_PRICING_QUANTITY)

                IF (%STATUS = %FAILURE)
                    EXIT(%FAILURE)
                END_IF
                GOTO CALCULATE_LINE_VALUE
            ELSE
                IF ((#UOM_TYPE = PARAMETER("IC_SINGLE_UOM_CONTROL"))  OR &
                    (PURCHASE_INVOICE_LINES(POP_NOMINATED_PRICE_UNIT) = PURCHASE_INVOICE_LINES(IC_NOMINATED_UNIT)))

                    #NOM_PRICE_CONV_FACTOR = 1.0
                    #STOCK_PRICING_QUANTITY = 0.0

                    PERFORM UOM_CONVERSION ( &
                            (PURCHASE_INVOICE_LINES(COMPANY_CODE)), &
                            (PURCHASE_INVOICE_LINES(PART_CODE)), &
                            (PURCHASE_INVOICE_LINES(WAREHOUSE)), &
                            (PURCHASE_INVOICE_LINES(IC_LOT_NUMBER)), &
                            (PURCHASE_INVOICE_LINES(IC_NOMINATED_QTY)), &
                            (PURCHASE_INVOICE_LINES(IC_NOMINATED_UNIT)), &
                            (PURCHASE_INVOICE_LINES(UNIT_PRICE)), &
                            #NOM_PRICE_CONV_FACTOR, &
                            #STOCK_PRICING_QUANTITY)

                    IF (%STATUS = %FAILURE)
                        EXIT(%FAILURE)
                    END_IF
                    GOTO CALCULATE_LINE_VALUE
                END_IF
            END_IF

            ! if this point is reached and product is not stocked or
            ! is stocked but is not catchweight or potent, there must be
            ! an error in the UOMs because all possible transaction UOM
            ! combinations have been allowed for
            !
            IF (((PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE_TYPE) = PARAMETER("LINE_TYPE_STOCK")) AND &
               (#UOM_TYPE = PARAMETER("IC_SINGLE_UOM_CONTROL"))) OR &
               (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE_TYPE) = PARAMETER("LINE_TYPE_NONSTOCK")))
                !ERROR
                EXIT(%FAILURE)
            END_IF

            ! product is catchweight or potent only
            IF (PURCHASE_INVOICE_LINES(POP_NOMINATED_PRICE_UNIT) = PURCHASE_INVOICE_LINES(IC_OTHER_INVENTORY_UNIT))
                #OTHER_PRICE_CONV_FACTOR = 1.0
                #STOCK_PRICING_QUANTITY  = 0.0

                PERFORM UOM_CONVERSION (&
                    (PURCHASE_INVOICE_LINES(COMPANY_CODE)), &
                    (PURCHASE_INVOICE_LINES(PART_CODE)), &
                    (PURCHASE_INVOICE_LINES(WAREHOUSE)), &
                    (PURCHASE_INVOICE_LINES(IC_LOT_NUMBER)), &
                    (PURCHASE_INVOICE_LINES(IC_OTHER_INVENTORY_QTY)), &
                    (PURCHASE_INVOICE_LINES(IC_OTHER_INVENTORY_UNIT)), &
                    (PURCHASE_INVOICE_LINES(UNIT_PRICE)), &
                    #OTHER_PRICE_CONV_FACTOR, &
                    #STOCK_PRICING_QUANTITY)

                IF (%STATUS = %FAILURE)
                    EXIT(%FAILURE)
                END_IF
            END_IF
        END_IF

    END_BLOCK

    BEGIN_BLOCK CALCULATE_LINE_VALUE

        IF ( #PRICING_METHOD <> #PRICING_METHOD_INCLUSIVE )
            IF (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE_TYPE) = PARAMETER("LINE_TYPE_NONSTOCK"))
                #LINE_VALUE = #NONSTOCK_PRICING_QUANTITY * PURCHASE_INVOICE_LINES(PURCHASE_COST)
            ELSE
                #LINE_VALUE = #STOCK_PRICING_QUANTITY * PURCHASE_INVOICE_LINES(PURCHASE_COST)
            END_IF
            #LINE_VALUE = ROUND(#LINE_VALUE,#CURRENCY_DECIMAL) * 1.0
            GOTO STORE_TAX_VALUES
        ELSE
            IF (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE_TYPE) = PARAMETER("LINE_TYPE_NONSTOCK"))
                #INVOICE_QTY = #NONSTOCK_PRICING_QUANTITY
            ELSE
                #INVOICE_QTY = #STOCK_PRICING_QUANTITY
            END_IF

            #TAX_MODE = "T"

            PERFORM LOAD_LB_TAX_CONTROL_VT

            #ERROR_OCCURRED = 0
            #ERROR_MESSAGE  = ""

            PERFORM "GEMLB:LB_L_TAX_CONTROL" ( &
                            (#TAX_MODE), &
                            #ERROR_OCCURRED, &
                            #ERROR_MESSAGE, &
                            "")

            IF ( %STATUS <> %SUCCESS OR #ERROR_OCCURRED )
                IF (#ERROR_MESSAGE <> "" )
                    ERROR/TEXT_ONLY/WAIT #ERROR_MESSAGE
                ELSE
                    MESSAGE/IDENTIFIER/BELL/WAIT P_02398
                END_IF
                EXIT( %FAILURE )
            ELSE
                FIND IN LB_TAX_CONTROL_VT

                IF ( %STATUS <> %SUCCESS )
                    MESSAGE/IDENTIFIER/BELL/WAIT P_02398
                    EXIT( %FAILURE )
                END_IF
                #LINE_VALUE = LB_TAX_CONTROL_VT(NET_LINE_VALUE)
            END_IF
        END_IF

    END_BLOCK

    BEGIN_BLOCK STORE_TAX_VALUES

        IF (#LINE_PERCENT > 0.0)
            #LINE_DISCOUNT = #LINE_VALUE * #LINE_PERCENT / 100.0
        ELSE
            #LINE_DISCOUNT = 0.0
        END_IF

        IF (#REGISTRATION_NUMBER <> "" AND #COPY_REGISTER_TAX = #YES)
            #SYS_E_TAX_VAL     = 0
            #SYS_N_TAX_VAL     = 0
            #TAX_VAL           = 0
            #TOT_SYS_E_TAX_VAL = 0
            #TOT_SYS_N_TAX_VAL = 0

            GOTO NET_VALUE
        END_IF

        ! If line is associated with a PO line and the PO line was taxable, then copy the tax detail
        ! records from the POP tax detail into the tax detail VT.  Otherwise, we'll calculate the
        ! tax and create new invoice tax detail records.
        !--
        IF ((#INV_SYS_TAXABLE_CODE = PARAMETER("VENDOR_TAX_ACCRUE") &
            OR #INV_SYS_TAXABLE_CODE = PARAMETER("VENDOR_TAX_COLLECT")) &
            AND #PART_TAXABLE = PARAMETER("LANGUAGE_YES"))

            #TAX_MODE ="C"
            ! Copy tax codes from Order line, if it was changed at order time
            !

            IF (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE_TYPE) = PARAMETER("LINE_TYPE_NONSTOCK"))
                #INVOICE_QTY = #NONSTOCK_PRICING_QUANTITY
            ELSE
                #INVOICE_QTY = #STOCK_PRICING_QUANTITY
            END_IF

            PERFORM LOAD_LB_TAX_CONTROL_VT_COPY

            #ERROR_OCCURRED   = 0
            #ERROR_MESSAGE    = ""

            PERFORM "GEMLB:LB_L_TAX_CONTROL" ( &
                            (#TAX_MODE), &
                            #ERROR_OCCURRED, &
                            #ERROR_MESSAGE, &
                            "")

            IF ( %STATUS <> %SUCCESS OR #ERROR_OCCURRED )
                IF ( #ERROR_MESSAGE <> "" )
                    ERROR/TEXT_ONLY/WAIT #ERROR_MESSAGE
                ELSE
                    MESSAGE/IDENTIFIER/BELL/WAIT P_02398
                END_IF
                EXIT( %FAILURE )
            ELSE
                FIND IN LB_TAX_CONTROL_VT

                IF ( %STATUS <> %SUCCESS )
                    MESSAGE/IDENTIFIER/BELL/WAIT P_02398
                    EXIT( %FAILURE )
                END_IF

                #TOTAL_TAX        = LB_TAX_CONTROL_VT(TOTAL_TAX_AMOUNT)
                #TOTAL_AMT        = LB_TAX_CONTROL_VT(TOTAL_LINE_VALUE)
                #NET_AMT          = LB_TAX_CONTROL_VT(NET_LINE_VALUE)

                #EXPENSED_TAX     = LB_TAX_CONTROL_VT(EXPENSED_TAX_AMOUNT)
                #NON_EXPENSED_TAX = LB_TAX_CONTROL_VT(NON_EXPENSED_TAX_AMOUNT)

                #SYS_E_TAX_VAL    = #EXPENSED_TAX
                #SYS_N_TAX_VAL    = #NON_EXPENSED_TAX

                #LINE_VARIANCE    = -LB_TAX_CONTROL_VT(INVENTORY_ROUNDING_VARIANCE)
            END_IF

            
            FIND IN PURCHASE_ORDER_TAX_DETAILS &
                /WITH=COMPANY_CODE=#COMPANY_CODE &
                /WITH=DIVISION = #DIVISION &
                /WITH=PO_NUMBER = #PO_NUMBER &
                /WITH=PO_LINE_NUMBER = POP_LINES(PO_LINE_NUMBER) &
                /WITH=TAX_TYPE = PARAMETER("TAX_TYPE_LINE")
                
            #PO_N_TAX = PURCHASE_ORDER_TAX_DETAILS(SYS_N_TAX_VAL)
            #PO_E_TAX = PURCHASE_ORDER_TAX_DETAILS(SYS_E_TAX_VAL)
            #PO_TAX_VAL = #PO_N_TAX + #PO_E_TAX
        
            IF ( #LINE_VALUE = 0 AND #PO_TAX_VAL > 0 ) 
            ! pass tax only value to the invoice and do not reset tax values to zero
            #SYS_E_TAX_VAL = #PO_E_TAX
            #SYS_N_TAX_VAL = #PO_N_TAX
            #TOTAL_TAX = #PO_TAX_VAL
            TAX_DETAILS_VT(SYS_E_TAX_VAL) = #PO_E_TAX
            TAX_DETAILS_VT(SYS_N_TAX_VAL) = #PO_N_TAX
            TAX_DETAILS_VT(COMPOSITE_TAX) = #PO_TAX_VAL
                        
            END_IF
        END_IF
        
        

        #TOT_SYS_E_TAX_VAL = #SYS_E_TAX_VAL
        #TOT_SYS_N_TAX_VAL = #SYS_N_TAX_VAL
        !++
        ! If there are any tax records in the tax VT table, then
        ! convert them to invoice tax detail records.
        !--
        FIND IN TAX_DETAILS_VT &
            /LOCK=NONE

        IF (%STATUS = %SUCCESS)
            #E_TAX_VAL = 0.0
            #N_TAX_VAL = 0.0

            PERFORM CREATE_TAX_DETAIL_FROM_VT
            IF (%STATUS <> %NORMAL) EXIT(%STATUS)

            #TOT_SYS_E_TAX_VAL = #E_TAX_VAL
            #TOT_SYS_N_TAX_VAL = #N_TAX_VAL
        END_IF

    END_BLOCK

        BEGIN_BLOCK NET_VALUE

                #TAX_VAL = #TOT_SYS_E_TAX_VAL + #TOT_SYS_N_TAX_VAL

                IF (PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE) = PARAMETER("VENDOR_TAX_COLLECT"))
                        #NET_VALUE = #TOTAL_AMT - #LINE_DISCOUNT
                ELSE
                        #NET_VALUE = #LINE_VALUE - #LINE_DISCOUNT
                END_IF

                IF (#REGISTRATION_NUMBER = "" OR #COPY_REGISTER_RETAINERS = #NO)
                        IF (#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
                                #DIV_TAX_RETAINERS_FLAG = #YES AND &
                                (#VENDOR_TAX_RETAINERS_FLAG=#YES OR #PAYEE_TAX_RETAINERS_FLAG=#YES))

                                #TAX_RETAINERS_MODE = "C"
                                #TITLE = ""

                                PERFORM  "GEMLB:LB_TAX_RETAINERS_DETAILS" ( &
                                        (#TAX_RETAINERS_MODE), &
                                        (#COMPANY_CODE), &
                                        (#DIVISION), &
                                        (#VENDOR_NUMBER), &
                                        (PURCHASE_INVOICES(PAYEE_NUMBER)), &
                                        (#VENDOR_TAX_RETAINERS_FLAG), &
                                        (#PAYEE_TAX_RETAINERS_FLAG), &
                                        (#LINE_VALUE-#LINE_DISCOUNT), &
                                        (#TAX_VAL), &
                                        (#BASE_CURRENCY_DECIMAL), &
                                        (#CURRENCY_MASK), &
                                        (#TITLE), &
                                        #RETAINERS_VAL, &
                                        #ERROR_CODE, &
                                        #ERROR_MSG)

                                PERFORM CREATE_TAX_RETAINERS_DETAIL_FROM_VT

                        ELSE
                                #RETAINERS_VAL = 0
                        END_IF
                END_IF

                IF (#TEN99_IN_USE = PARAMETER("LANGUAGE_YES"))

                        #TEN99_MODE = "C"

                        PERFORM "GEMLB:LB_TEN99_ANALYSIS" ( &
                                        #TEN99_MODE, &
                                        #DEF_TEN99_FORM, &
                                        #DEF_TEN99_AMT_TYPE, &
                                        (#NET_VALUE), &
                                        "", &
                                        #CURRENCY_DECIMAL, &
                                        #CURRENCY_MASK, &
                                        PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_NUMBER),&
                                        PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE),&
                                        "")

                        #TEN99_MODE = "M"

                        PERFORM CREATE_TEN99_DETAIL_FROM_VT
                END_IF
        END_BLOCK

        BEGIN_BLOCK STORE_REMAINING_INVOICE_FIELDS
                PURCHASE_INVOICE_LINES(SYS_E_TAX_VAL) = #TOT_SYS_E_TAX_VAL
                PURCHASE_INVOICE_LINES(SYS_N_TAX_VAL) = #TOT_SYS_N_TAX_VAL
                PURCHASE_INVOICE_LINES(LINE_DISCOUNT) = ROUND(#LINE_DISCOUNT, #CURRENCY_DECIMAL)
                PURCHASE_INVOICE_LINES(SYS_TAX_RETAINERS_CURRENCY) = ROUND(#RETAINERS_VAL,#CURRENCY_DECIMAL)

                PURCHASE_INVOICE_LINES(POP_INVOICE_TOTAL_CURRENCY) = ROUND(#LINE_VALUE, #CURRENCY_DECIMAL)

                #BATCH_TOTAL_TAX_RETAINERS = #BATCH_TOTAL_TAX_RETAINERS + #RETAINERS_VAL


                IF (#CURRENCY_METHOD > "0")

                ! Recalculate values in base and 2nd base currency
                DELETE ALL FROM SYS_CURRENCY_VALUES_VT

                SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE) = PURCHASE_INVOICE_TAX_RETAINERS(SYS_TAX_RETAINERS_CURRENCY)
                ADD TO SYS_CURRENCY_VALUES_VT

                PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
                IF (#R_STATUS <> #YES)
                        ERROR/WAIT #R_MESSAGE
                        EXIT (%FAILURE)
                END_IF

                FIND IN SYS_CURRENCY_VALUES_VT
                ! Store base values
                PURCHASE_INVOICE_TAX_RETAINERS(SYS_TAX_RETAINERS_BASE)   = SYS_CURRENCY_VALUES_VT(BASE_VALUE)
                PURCHASE_INVOICE_TAX_RETAINERS(SYS_TAX_RETAINERS_2_BASE) = SYS_CURRENCY_VALUES_VT(BASE_2_VALUE)

                END_IF

                !
                ! Calculate the value in base and 2nd base currency
                IF (#CURRENCY_METHOD > "0")
                        ! Convert to the base and 2nd base currency
                        DELETE ALL FROM SYS_CURRENCY_VALUES_VT
                        SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE) = PURCHASE_INVOICE_LINES(POP_INVOICE_TOTAL_CURRENCY)
                        ADD TO SYS_CURRENCY_VALUES_VT
                        PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
                        IF (#R_STATUS <> #YES)
                                ERROR/WAIT #R_MESSAGE
                                EXIT (%FAILURE)
                        END_IF
                        FIND IN SYS_CURRENCY_VALUES_VT
                        ! store base values
                        PURCHASE_INVOICE_LINES(POP_INVOICE_TOTAL_BASE)   = SYS_CURRENCY_VALUES_VT(BASE_VALUE)
                        PURCHASE_INVOICE_LINES(POP_INVOICE_TOTAL_2_BASE) = SYS_CURRENCY_VALUES_VT(BASE_2_VALUE)
                END_IF

                ADD TO PURCHASE_INVOICE_LINES
                IF (%STATUS <> %SUCCESS)
                        MESSAGE/BELL/IDENTIFIER/WAIT P_02609,"PURCHASE_INVOICE_LINES"
                        EXIT(%FAILURE)
                END_IF
        END_BLOCK

        BEGIN_BLOCK AFTER_REC_ADD_PROCESSING
                IF  (#PCV_PO_EXISTS)
                        PERFORM GET_PO_POSTING_VALUES
                        #COMMIT_VALUE = #OS_COMMIT
                ELSE
                        #COMMIT_VALUE = 0
                END_IF
                IF (#COMMIT_VALUE > #LINE_VALUE)
                        #COMMIT_VALUE = #LINE_VALUE
                END_IF

                ! vary some parameter values for this program depending on
                ! the invoice line:
                IF (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE_TYPE) &
                                        = PARAMETER("LINE_TYPE_NONSTOCK"))

                        !Qty for a nonstock part
                        #INV_POSTINGS_QTY = PURCHASE_INVOICE_LINES(TEMP_INVOICE_QUANTITY)

                        !UOM used for figuring nonstandard cost variance
                        !Nonstock UOM not needed; leave blank to fill parameter.
                        #INV_POSTINGS_QTY_UOM = ""

                ELSE
                        ! product is stocked
                        IF (PURCHASE_INVOICE_LINES(IC_NOMINATED_UNIT) = #COSTING_UNIT OR &
                        #UOM_TYPE = PARAMETER("IC_SINGLE_UOM_CONTROL"))

                                #INV_POSTINGS_QTY &
                                   = PURCHASE_INVOICE_LINES(IC_NOMINATED_QTY)

                                !UOM used for figuring nonstandard cost variance
                                #INV_POSTINGS_QTY_UOM &
                                   = PURCHASE_INVOICE_LINES(IC_NOMINATED_UNIT)
                        ELSE

                                #INV_POSTINGS_QTY &
                                   = PURCHASE_INVOICE_LINES(IC_OTHER_INVENTORY_QTY)

                                !UOM used for figuring nonstandard cost variance
                                #INV_POSTINGS_QTY_UOM &
                                   = PURCHASE_INVOICE_LINES(IC_OTHER_INVENTORY_UNIT)

                        END_IF
                END_IF

                ! If invoice Line Value = 0
                
                IF (PURCHASE_INVOICE_LINES(POP_INVOICE_TOTAL_CURRENCY) = 0)
                    ! If line value = 0 and not a standard cost warehouse, do not call posting routine
                    ! For std cost warehouse, even the line value = 0, there may be a variance postings for std cost method....

                    #STD_COST = #NO

                    IF ( PURCHASE_INVOICE_LINES(WAREHOUSE) <> "" ) 
        
                        FIND IN WAREHOUSE_CONTROLS &
                            /LOCK=NONE &
                            /WITH=COMPANY_CODE = PURCHASE_INVOICE_LINES(COMPANY_CODE) &
                            /WITH=WAREHOUSE = PURCHASE_INVOICE_LINES(WAREHOUSE)
                            
                        PERFORM 'GEMIC:IC_L_COSTING_METHOD' (PURCHASE_INVOICE_LINES(COMPANY_CODE),PURCHASE_INVOICE_LINES(PART_CODE),PURCHASE_INVOICE_LINES(WAREHOUSE),#R1,#R2,#R3)
                        IF(%STATUS = %SUCCESS)
                            #INV_VALUATION_METHOD =  #R1
                        ELSE
                            MESSAGE/IDENTIFIER/BELL/WAIT #R3,(PURCHASE_INVOICE_LINES(WAREHOUSE)),(PURCHASE_INVOICE_LINES(PART_CODE))
                            EXIT(%FAILURE)
                        END_IF                          
            
                        IF ( %STATUS <> %FAILURE ) 
            
                            IF (#INV_VALUATION_METHOD = PARAMETER("COSTING_STD") )
                                #STD_COST = #YES
                                
                            ELSE
                                #STD_COST = #NO
                                    
                            END_IF
                        END_IF
            
                    END_IF
                    
                    IF ( #STD_COST = #NO AND #PO_TAX_VAL = 0) 
                        GOTO END_LINE
                    END_IF 
                
                END_IF

                #GRN_IC_STATUS_CODE = GOODS_RECEIVED_LINE_DETAILS(IC_STATUS_CODE)
                PERFORM INVENTORY_REVALUATION
                
                IF (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE_TYPE) = PARAMETER("LINE_TYPE_NONSTOCK"))
                    #LINE_VAL_EX_TAX = ROUND( #NONSTOCK_PRICING_QUANTITY * PURCHASE_INVOICE_LINES(PURCHASE_COST), #CURRENCY_DECIMAL)
                ELSE
                    #LINE_VAL_EX_TAX = ROUND( #STOCK_PRICING_QUANTITY * PURCHASE_INVOICE_LINES(PURCHASE_COST), #CURRENCY_DECIMAL)
                END_IF

        IF ( PURCHASE_INVOICE_LINES(SYS_E_TAX_VAL) = 0.0 &
            AND PURCHASE_INVOICE_LINES(SYS_N_TAX_VAL) = 0.0 )   #LINE_VARIANCE  = 0.0

                PERFORM "GEMPOP:POP_L_DEF_INVOICE_POSTINGS" ( &
                                (PARAMETER("LANGUAGE_YES")), &
                                (PURCHASE_INVOICE_LINES(COMPANY_CODE)), &
                                (PURCHASE_INVOICE_LINES(DIVISION)), &
                                (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_NUMBER)), &
                                (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE)), &
                                (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE_TYPE)), &
                                (PURCHASE_INVOICE_LINES(PART_CODE)), &
                                (PURCHASE_INVOICE_LINES(WAREHOUSE)), &
                                (#INV_POSTINGS_QTY), &
                                (#LINE_VAL_EX_TAX), &
                                (PURCHASE_INVOICE_LINES(LINE_DISCOUNT)), &
                                (PURCHASE_INVOICE_LINES(SYS_E_TAX_VAL)), &
                                (PURCHASE_INVOICE_LINES(SYS_N_TAX_VAL)), &
                                (PURCHASE_INVOICE_LINES(SYS_TAX_RETAINERS_CURRENCY)), &
                                (PURCHASE_INVOICES(VENDOR_INVOICE_NUMBER)), &
                                (PURCHASE_INVOICES(POP_COMMITMENT_PERIOD)), &
                                (PURCHASE_INVOICES(POP_COMMITMENT_YEAR)), &
                                (PURCHASE_INVOICES(COST_CENTER)), &
                                (PURCHASE_INVOICES(INVOICE_DATE)), &
                                (PURCHASE_INVOICE_LINES(VENDOR_NUMBER)), &
                                "V", &
                                (PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE)), &
                                (PARAMETER("LANGUAGE_NO")), &
                                "0", &
                                "0", &
                                "0", &
                                "", &
                                "0", &
                                "0", &
                                "0", &
                                "", &
                                (#COPY_REGISTER_TAX), &
                                (#COPY_REGISTER_RETAINERS), &
                                "0", &
                                "0", &
                                "0", &
                                "0", &
                                (PURCHASE_INVOICE_LINES(VENDOR_NUMBER)), &
                                "G", &
                                (#PO_NUMBER), &
                                (#PO_LINE_NUMBER), &
                                (#ORDER_QUANTITY), &
!                                (#GRN_LINE_STATUS), &
                                (#CURRENT_STATUS_CODE), &
                                PURCHASE_INVOICE_LINES(DELIVERY_ADDRESS_CODE),  &
                                (PARAMETER("STATUS_LIVE")), &
                                PURCHASE_INVOICES(POSTING_DATE), &
                                (PURCHASE_INVOICES(INTERCOMPANY_POSTINGS)), &
                                (PURCHASE_INVOICE_LINES(IC_LOT_NUMBER)), &
                                (#INV_POSTINGS_QTY_UOM), &
                                (#CURRENT_STD_COST_AT_GRN), &
                                (#PRICING_METHOD), &
                                (#LINE_VARIANCE), &
                                (#PROJECT), &
                                (#WBS_NUMBER), &
                                #R1, #COPY_PA_REQUIRED)

                IF (%STATUS=%FAILURE)
                        ERROR/TEXT_ONLY/WAIT/BELL #R1
                        EXIT(%FAILURE)
                END_IF
        END_BLOCK

        BEGIN_BLOCK END_CREATE_INVOICE_REC
                DELETE ALL FROM TAX_DETAILS_VT
                IF (%STATUS <> %NORMAL) EXIT (%FAILURE)

                PERFORM "GEMLB:LB_CRE_TAX_RETAINERS_DETAILS_VT"
                IF (%STATUS <> %NORMAL) EXIT (%FAILURE)
        END_BLOCK

        BEGIN_BLOCK END_LINE
        END_BLOCK

END_FORM


PROCEDURE_FORM GET_PO_POSTING_VALUES &
        /TABLE=POP_GL_POSTINGS &
        /WITH=COMPANY_CODE = #COMPANY_CODE &
        /WITH=DIVISION = #DIVISION &
        /WITH=PO_NUMBER = #PO_NUMBER &
        /WITH=PO_LINE_NUMBER = #PO_LINE_NUMBER &
        /STATISTIC=#OS_COMMIT=TOTAL(POP_GL_POSTINGS(GL_POSTING_CURRENCY_BALANCE))

END_FORM


FORM HEADER_REPRINT /ROW=3 /COL=2 /HEIGHT=21 /WIDTH=78 &
        /TITLE=(MESSAGE("P_60182"))


        BEGIN_BLOCK FIND_HEADER
                START_TRANSACTION
        END_BLOCK

        OUTPUT_BLOCK INVOICE_NUMBER /ROW=1 /COL=14 &
                        /PROMPT=(MESSAGE("P_00921")) &
                        /SOURCE=(#PURCHASE_INVOICE_NUMBER) &
                        /USING=PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)

        OUTPUT_BLOCK VENDOR /ROW=1 /COL=34 &
                        /PROMPT=(FIELD_PROMPT(VENDOR_NUMBER)) &
                        /SOURCE=(#VENDOR_NUMBER) &
                        /USING=PURCHASE_INVOICES(VENDOR_NUMBER)

        OUTPUT_BLOCK VENDOR_NAME /ROW=1 /COL=47 &
                        /SOURCE=(#VENDOR_NAME) &
                        /USING=VENDORS(VENDOR_NAME)

        BEGIN_BLOCK LINES
                COMMIT

        #TOTAL_HEADING  = FIELD_HEADING(PURCHASE_INVOICES,POP_INVOICE_TOTAL_CURRENCY)
		#PERIOD = PURCHASE_INVOICES(PERIOD)
		#YEAR   = PURCHASE_INVOICES(YEAR)
		
		IF ( #PRICING_METHOD_STATE = #PRICING_METHOD_OPTIONAL AND &
            #PRICING_METHOD = #PRICING_METHOD_INCLUSIVE )

            #TOTAL_HEADING  = MESSAGE("P_23466")
        END_IF

                PERFORM PURCHASE_INVOICE_LINES

        END_BLOCK

        BEGIN_BLOCK REGISTER_TAX
                IF (#REGISTRATION_NUMBER <> "" AND #COPY_REGISTER_TAX = #YES)
                        START_TRANSACTION

                        FIND IN PURCHASE_INVOICES &
                                /LOCK=WRITE &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=DIVISION=#DIVISION &
                                /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER

                        IF (%STATUS <> %SUCCESS)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_22175
                                ROLLBACK
                                EXIT(%FAILURE)
                        END_IF

                         DELETE ALL FROM TAX_DETAILS_VT
                        IF (%STATUS <> %NORMAL) EXIT (%FAILURE)

                        #PURCHASE_INVOICE_LINE  = 0
                        #TAX_LINE_TYPE          = PARAMETER("TAX_TYPE_LINE")
                        #TAX_MODE               = "R"
                        #E_TAX_VAL = 0
                        #N_TAX_VAL = 0

                        PERFORM LOAD_TAX_VT

                        IF (%STATUS = %EMPTY)
                                PERFORM LOAD_REGISTER_TAX
                        END_IF

                        PERFORM DELETE_PREVIOUS_TAX_RECORDS
                        PERFORM CREATE_TAX_DETAIL_FROM_VT

                        PURCHASE_INVOICES(SYS_E_TAX_VAL) = #E_TAX_VAL
                        PURCHASE_INVOICES(SYS_N_TAX_VAL) = #N_TAX_VAL

                        COMMIT
                END_IF
        END_BLOCK

        BEGIN_BLOCK REGISTER_RETAINERS
                START_TRANSACTION

                FIND IN PURCHASE_INVOICES &
                        /LOCK=WRITE &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER

                IF (%STATUS <> %SUCCESS)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_22175
                        ROLLBACK
                        EXIT(%FAILURE)
                END_IF

                IF (#REGISTRATION_NUMBER <> "" AND #COPY_REGISTER_RETAINERS = #YES)

                        IF (#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
                                #DIV_TAX_RETAINERS_FLAG = #YES AND &
                                (#VENDOR_TAX_RETAINERS_FLAG = #YES OR #PAYEE_TAX_RETAINERS_FLAG = #YES))

                                PERFORM "GEMLB:LB_CRE_TAX_RETAINERS_DETAILS_VT"
                                IF (%STATUS <> %NORMAL) EXIT (%FAILURE)

                                START_STREAM  PIVLINE&
                                    /TABLE= PURCHASE_INVOICE_LINES&
                                    /LOCK= NONE &
                                    /SECONDARY &
                                    /WITH=COMPANY_CODE=#COMPANY_CODE &
                                    /WITH=DIVISION=#DIVISION &
                                    /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER &
                                    /SORTED_BY=PURCHASE_INVOICE_LINE DESC
                                                                    
                                FETCH PIVLINE
                                 
                                IF ( %STATUS = %SUCCESS ) 
                                        #PURCHASE_INVOICE_LINE = PIVLINE:PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE)
                                ELSE
                                        #PURCHASE_INVOICE_LINE = 0
                                END_IF 
                            
                                #TAX_LINE_TYPE = PARAMETER("TAX_TYPE_LINE")
                                #TAX_RETAINERS_MODE               = "R"

                                PERFORM LOAD_TAX_RETAINERS_VT
                                IF (%STATUS = %EMPTY)
                                        #RETAINERS_VAL = 0
                                        PERFORM LOAD_REGISTER_RETAINERS
                                END_IF

                                PERFORM DELETE_PREVIOUS_TAX_RETAINERS_RECORDS
                                PERFORM CREATE_TAX_RETAINERS_DETAIL_FROM_VT

                                PURCHASE_INVOICES(SYS_TAX_RETAINERS_CURRENCY) = #RETAINERS_VAL
                                PURCHASE_INVOICES(SYS_TAX_RETAINERS_BASE) = #RETAINERS_VAL_BASE
                                PURCHASE_INVOICES(SYS_TAX_RETAINERS_2_BASE) = #RETAINERS_VAL_2_BASE


                        END_IF
                END_IF

                #AP_SHORT_CODE          = PURCHASE_INVOICES(AP_SHORT_CODE)
                #AP_FULL_ACCOUNT        = PURCHASE_INVOICES(AP_FULL_ACCOUNT)

                COMMIT

                IF (#REGISTRATION_NUMBER <> "" AND (#COPY_REGISTER_TAX = #YES &
                         OR #COPY_REGISTER_RETAINERS = #YES))
                        DELETE ALL FROM TAX_DETAILS_VT
                END_IF
        END_BLOCK

        BEGIN_BLOCK TOTALS

                PERFORM "GEMLB:LB_C_INVOICE_TOTALS" &
                        ("POP_GRN", &
                         #DIVISION, &
                         #PURCHASE_INVOICE_NUMBER, &
                         #MAIN_OPT, &
                         #TAX_ON_CASH, &
                         #RETAINERS_VAL, &
                         #CORPORATE_ADDRESS_CODE, &
                         #ALLOW_NEGATIVES, &
                         #MODIFY_GL_CONTROL, &
                         #AP_SHORT_CODE, &
                         #AP_FULL_ACCOUNT, &
                         #ACCRUE_TAX_CODE, &
                         #ACCRUE_TAX_FULL, &
                         #TEN99_IN_USE, &
                         #IC_STATUS_CODE, &
                         #PAYEE_TAX_RETAINERS_FLAG, &
                         #REGISTRATION_NUMBER, &
                         #REG_VALUE, &
                         #REG_TAX, &
                         #REG_RETAINERS, &
                         "", &
                         #DORC, &
                         #OPT)
        
        IF(%STATUS <> %SUCCESS)
            ROLLBACK
            EXIT(%STATUS)
        END_IF

        PERFORM UPDATE_TAX_CODE

                IF (#OPT = "LINES")
                        IF (#MAIN_OPT = "ENTRY")
                                ! Invoice link records have not been
                                ! created yet
                                #LINKS_REQUIRED = #YES
                        END_IF

                        #MAIN_OPT = "MODIFY"
                        GOTO LINES
                END_IF

                IF (#OPT = "CANCEL")
                        #MAIN_OPT = "CANCEL"
                        PERFORM CANCEL_INVOICE
                        IF (%STATUS <> %NORMAL) EXIT(%STATUS)
                END_IF

                COMMIT
                
                
        !#RE_STATUS = "MODIFY_BACK"
        END_BLOCK

END_FORM


TABLE_FORM PURCHASE_INVOICE_LINES /ROW=5 /COL=2 /HEIGHT=19 /WIDTH=78 &
        /OPTIONS=NOINSERT &
        /ATTRIBUTES=NOBORDER &
        /TABLE=PURCHASE_INVOICE_LINES &
        /SEQUENCE=PURCHASE_INVOICE_LINE &
        /DELETE_FORM=DELETE_INVOICE_LINE &
        /WITH=COMPANY_CODE=#COMPANY_CODE &
        /WITH=DIVISION=#DIVISION &
        /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER &
        /ROW_HEIGHT=2 &
        /BEGIN_ROW=(7) &
        /END_ROW=(18)

        LINE /ROW=3 /COL=1 /END_ROW=3 /END_COL=32
        LINE /ROW=3 /COL=44 /END_ROW=3 /END_COL=78

        BEGIN_BLOCK  /DISPLAY_ONLY DISPLAY_SETUP
                IF (%EDIT_MODE=%MODIFY)
                        PURCHASE_INVOICE_LINES(SUPPLIER_PERFORMANCE_UPDATED)=#NO
                END_IF

                IF (PURCHASE_INVOICE_LINES(TEMP_INVOICE_QUANTITY) > 0)
                        #INVOICE_QUANTITY = PURCHASE_INVOICE_LINES(TEMP_INVOICE_QUANTITY)
                ELSE
                        #INVOICE_QUANTITY = PURCHASE_INVOICE_LINES(INVOICE_QUANTITY)
                END_IF
				
				#PERIOD = PURCHASE_INVOICES(PERIOD)
				#YEAR 	= PURCHASE_INVOICES(YEAR)
				
                FIND IN PURCHASE_INVOICES &
                        /LOCK=NONE &
                        /WITH=COMPANY_CODE = #COMPANY_CODE &
                        /WITH=DIVISION = #DIVISION &
                        /WITH=PURCHASE_INVOICE_NUMBER = #PURCHASE_INVOICE_NUMBER

                #TOTAL_LINE_DISCOUNT    = PURCHASE_INVOICES(LINE_DISCOUNT)
                #TOTAL_LINE_TAX = PURCHASE_INVOICES(SYS_E_TAX_VAL) + PURCHASE_INVOICES(SYS_N_TAX_VAL)
                #BATCH_TOTAL_TAX_RETAINERS = PURCHASE_INVOICES(SYS_TAX_RETAINERS_CURRENCY)
                #SYS_E_TAX_VAL    = PURCHASE_INVOICES(SYS_E_TAX_VAL)
                #SYS_N_TAX_VAL    = PURCHASE_INVOICES(SYS_N_TAX_VAL)

                #GRAND_TOTAL    = PURCHASE_INVOICES(POP_INVOICE_TOTAL_CURRENCY) &
                                + #TOTAL_LINE_TAX &
                                - #BATCH_TOTAL_TAX_RETAINERS &
                                - #TOTAL_LINE_DISCOUNT

                IF (PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE) = "A")
                        ! If tax is accrued then it should not be shown on the invoice !
                        ! and should only be seen on the line details !

                        #TOTAL_LINE_VAL =  PURCHASE_INVOICE_LINES(POP_INVOICE_TOTAL_CURRENCY) &
                                                - PURCHASE_INVOICE_LINES(LINE_DISCOUNT)
                ELSE
            IF ( #PRICING_METHOD_STATE <> #PRICING_METHOD_OPTIONAL OR &
                ( #PRICING_METHOD_STATE = #PRICING_METHOD_OPTIONAL &
                AND #PRICING_METHOD = #PRICING_METHOD_INCLUSIVE ) )

                #TOTAL_LINE_VAL =  PURCHASE_INVOICE_LINES(POP_INVOICE_TOTAL_CURRENCY) &
                        + PURCHASE_INVOICE_LINES(SYS_E_TAX_VAL) &
                        + PURCHASE_INVOICE_LINES(SYS_N_TAX_VAL) &
                        - PURCHASE_INVOICE_LINES(LINE_DISCOUNT)
            ELSE
                #TOTAL_LINE_VAL = PURCHASE_INVOICE_LINES(POP_INVOICE_TOTAL_CURRENCY) &
                        - PURCHASE_INVOICE_LINES(LINE_DISCOUNT)
            END_IF
                END_IF

                ! Get UOM-specific mask for quantity
                FIND IN IC_PRODUCT_MASTER_UNITS &
                        /LOCK=NONE &
                        /STREAM_NAME=PMU1 &
                        /SECONDARY &
                        /WITH=COMPANY_CODE=PURCHASE_INVOICE_LINES(COMPANY_CODE) &
                        /WITH=PART_CODE=PURCHASE_INVOICE_LINES(PART_CODE) &
                        /WITH=UNIT_OF_MEASURE=PURCHASE_INVOICE_LINES(UNIT_PUR) &
                        /WITH=IC_QUANTITY_MASK<>""

                IF (%STATUS = %SUCCESS)
                        #QUANTITY_MASK = PMU1:IC_PRODUCT_MASTER_UNITS(IC_QUANTITY_MASK)
                ELSE
                        FIND IN UNITS_OF_MEASURE &
                                /LOCK=NONE &
                                /STREAM_NAME=UOM1 &
                                /SECONDARY &
                                /WITH=UNIT_OF_MEASURE=PURCHASE_INVOICE_LINES(UNIT_PUR)

                        IF (%STATUS = %SUCCESS)
                                #QUANTITY_MASK = UOM1:UNITS_OF_MEASURE(IC_QUANTITY_MASK)
                        ELSE
                                MESSAGE/IDENTIFIER/BELL/WAIT P_62355
                                EXIT(%FAILURE)
                        END_IF
                END_IF

                FIND IN PRODUCT_MASTER &
                    /LOCK=NONE &
                        /WITH=COMPANY_CODE = PURCHASE_INVOICE_LINES(COMPANY_CODE) &
                        /WITH=PART_CODE = PURCHASE_INVOICE_LINES(PART_CODE)
						
				#UOM_TYPE = PRODUCT_MASTER(IC_PRODUCT_UOM_CONTROL)


        END_BLOCK

        OUTPUT_BLOCK TEXT_1 /ROW=1 /COL=2 /LEN=12 /ABSOLUTE_POSITION &
                        /SOURCE=(MESSAGE("P_00926")) &
                        /ATTRIBUTES=NONE &
                        /USE_IF=(#REGISTRATION_NUMBER <> "")

        OUTPUT_BLOCK TEXT_2 /ROW=1 /COL=18 /LEN=9 /ABSOLUTE_POSITION &
                        /SOURCE=(MESSAGE("P_00927")) &
                        /ATTRIBUTES=NONE &
                        /USE_IF=(#REGISTRATION_NUMBER <> "")

        OUTPUT_BLOCK TEXT_4 /ROW=1 /COL=34 /LEN=8 /ABSOLUTE_POSITION &
                        /SOURCE=(FIELD_PROMPT(DISCOUNT)) &
                        /ATTRIBUTES=NONE

        OUTPUT_BLOCK TEXT_5 /ROW=1 /COL=52 /LEN=9 /ABSOLUTE_POSITION &
                        /SOURCE=(FIELD_PROMPT(PURCHASE_INVOICES,TAX_VAL)) &
                        /ATTRIBUTES=NONE

        OUTPUT_BLOCK TEXT_6 /ROW=1 /COL=67 /LEN=11 /ABSOLUTE_POSITION &
                        /SOURCE=MESSAGE("P_00680") &
                        /ATTRIBUTES=NONE

        OUTPUT_BLOCK TEXT_7 /ROW=3 /COL=33 /LEN=13 /ABSOLUTE_POSITION &
                        /SOURCE=(MESSAGE("P_00376")) &
                        /ATTRIBUTES=NONE

        OUTPUT_BLOCK DISP_LINE_NUMBER_1 /ROW=1 /COL=1 &
                        /SOURCE=(PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE)) &
                        /HEADING=FIELD_HEADING(PURCHASE_INVOICE_LINE) &
                        /OUTPUT_MASK='!-@@@0'

        OUTPUT_BLOCK INVOICE_LINE_TYPE_6 /ROW=1 /COL=6 &
                        /SOURCE=(PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE_TYPE)) &
                        /HEADING=FIELD_HEADING(PURCHASE_INVOICE_LINE_TYPE)

        OUTPUT_BLOCK PART_CODE_1 /ROW=1 /COL=11 &
                        /SOURCE=(PURCHASE_INVOICE_LINES(PART_CODE)) &
                        /HEADING=FIELD_HEADING(PART_CODE)

    OUTPUT_BLOCK PART_DESC_1 /ROW=2 /COL=11 &
            /SOURCE=(PRODUCT_MASTER(PART_DESC_1))   &
            /NOHEADING

        OUTPUT_BLOCK WAREHOUSE_2 /ROW=1 /COL=27 &
                        /SOURCE=(PURCHASE_INVOICE_LINES(WAREHOUSE)) &
                        /HEADING=FIELD_HEADING(WAREHOUSE)

        OUTPUT_BLOCK LINE_REF_3 /ROW=1 /COL=30 &
                        /SOURCE=(PURCHASE_INVOICE_LINES(INVOICE_LINE_REFERENCE)) &
                        /HEADING=FIELD_HEADING(INVOICE_LINE_REFERENCE)

        OUTPUT_BLOCK INVOICE_QUANTITY_4 /ROW=1 /COL=39 /LEN=14 &
                        /SOURCE=(#INVOICE_QUANTITY) &
                        /RHEADING=FIELD_HEADING(INVOICE_QUANTITY) &
                        /USING=PURCHASE_INVOICE_LINES(INVOICE_QUANTITY) &
                        /OUTPUT_MASK=(#QUANTITY_MASK)

        OUTPUT_BLOCK UNIT_PUR /ROW=1 /COL=54 &
                        /SOURCE=(PURCHASE_INVOICE_LINES(UNIT_PUR)) &
                        /HEADING=(MESSAGE("P_00737"))

        OUTPUT_BLOCK GRN_NUMBER /ROW=1 /COL=59 &
                        /SOURCE=(PURCHASE_INVOICE_LINES(GRN_NUMBER)) &
                        /HEADING=FIELD_HEADING(GRN_NUMBER)

    OUTPUT_BLOCK PURCHASE_COST_EXTAX /ROW=2 /COL=41 &
        /PROMPT=(MESSAGE("P_22373")) &
        /SOURCE=(PURCHASE_INVOICE_LINES(PURCHASE_COST)) &
        /USE_IF = ( #PRICING_METHOD_STATE <> #PRICING_METHOD_OPTIONAL &
            OR ( #PRICING_METHOD_STATE = #PRICING_METHOD_OPTIONAL &
            AND #PRICING_METHOD <> #PRICING_METHOD_INCLUSIVE ) )

    OUTPUT_BLOCK PURCHASE_COST_INCTAX /ROW=2 /COL=41 &
        /PROMPT=(MESSAGE("P_23378")) &
        /SOURCE=(PURCHASE_INVOICE_LINES(PURCHASE_COST_INC_TAX)) &
        /USE_IF = ( #PRICING_METHOD_STATE = #PRICING_METHOD_OPTIONAL &
            AND #PRICING_METHOD = #PRICING_METHOD_INCLUSIVE )

        OUTPUT_BLOCK UNIT_PRICE /ROW=2 /COL=54 &
                        /SOURCE=(PURCHASE_INVOICE_LINES(UNIT_PRICE))

!       This block will display the Line Value withhout Tax
!        OUTPUT_BLOCK TOTAL_CURRENCY_6 /ROW=1 /COL=61 /LEN=(#CURRENCY_LEN) &
!                        /SOURCE=(PURCHASE_INVOICE_LINES(POP_INVOICE_TOTAL_CURRENCY)) &
!                        /RHEADING=FIELD_HEADING(PURCHASE_INVOICES,POP_INVOICE_TOTAL_CURRENCY) &
!                        /OUTPUT_MASK=#CURRENCY_MASK

    OUTPUT_BLOCK TOTAL_CURRENCY_EX_6A /ROW=1 /COL=61 /LEN=(#CURRENCY_LEN) &
        /SOURCE=(#TOTAL_LINE_VAL) &
        /RHEADING=( #TOTAL_HEADING ) &
        /USING=PURCHASE_INVOICE_LINES(POP_INVOICE_TOTAL_CURRENCY) &
        /OUTPUT_MASK=#CURRENCY_MASK &
        /USE_IF = ( #PRICING_METHOD_STATE <> #PRICING_METHOD_OPTIONAL &
            OR ( #PRICING_METHOD_STATE = #PRICING_METHOD_OPTIONAL &
            AND #PRICING_METHOD <> #PRICING_METHOD_INCLUSIVE ) )

    OUTPUT_BLOCK TOTAL_CURRENCY_INC_6B /ROW=1 /COL=61 /LEN=(#CURRENCY_LEN) &
        /SOURCE=(#TOTAL_LINE_VAL) &
        /RHEADING=( #TOTAL_HEADING ) &
        /USING=PURCHASE_INVOICE_LINES(POP_INVOICE_TOTAL_CURRENCY) &
        /OUTPUT_MASK=#CURRENCY_MASK &
        /USE_IF = ( #PRICING_METHOD_STATE = #PRICING_METHOD_OPTIONAL &
            AND #PRICING_METHOD = #PRICING_METHOD_INCLUSIVE )

        BEGIN_BLOCK SETUP
                ! Every block in this form has a number following the name.  This
                ! number represents the sequence in which this block should appear.
                ! Whether this form works correctly or not is dependent on the order
                ! these blocks are executed in.

                IF (%EDIT_MODE = %ADD)
                        #EC_MODE = "A"
                        #TEN99_MODE = "C"
                ELSE
                        #EC_MODE = "M"
                        #TEN99_MODE = "M"
                END_IF

                FIND IN PURCHASE_INVOICES &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER &
                        /LOCK=WRITE

                IF (%STATUS <> %SUCCESS)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_22175
                        ROLLBACK
                        EXIT (%FAILURE)
                END_IF

                #OPT = ""

                IF (PURCHASE_INVOICE_LINES(TEMP_INVOICE_QUANTITY) > 0)
                        #INVOICE_QUANTITY     = PURCHASE_INVOICE_LINES(TEMP_INVOICE_QUANTITY)
                ELSE
                        #INVOICE_QUANTITY= PURCHASE_INVOICE_LINES(INVOICE_QUANTITY)
                END_IF
				
								
				#INVOICE_QTY = #INVOICE_QUANTITY
                #IC_NOMINATED_QTY = #INVOICE_QUANTITY

                IF (PURCHASE_INVOICE_LINES(UNIT_PUR) <> PURCHASE_INVOICE_LINES(IC_NOMINATED_UNIT))
                        #IC_NOMINATED_QTY = 0
                        #IC_NOMINATED_PRICE_QTY = 0
                        PERFORM "GEMPOP:POP_L_FIND_TRANS_QUANTITIES" (&
                                (PURCHASE_INVOICE_LINES(COMPANY_CODE)), &
                                (PURCHASE_INVOICE_LINES(PART_CODE)), &
                                (PURCHASE_INVOICE_LINES(WAREHOUSE)), &
                                (PURCHASE_INVOICE_LINES(IC_LOT_NUMBER)), &
                                (#UOM_TYPE), &
                                (PRODUCT_MASTER(IC_UNIT_CAPACITY)), &
                                #INVOICE_QUANTITY,(PURCHASE_INVOICE_LINES(UNIT_PUR)), &
                                #IC_NOMINATED_QTY,(PURCHASE_INVOICE_LINES(IC_NOMINATED_UNIT)), &
                                #IC_NOMINATED_PRICE_QTY, &
                                PURCHASE_INVOICE_LINES(POP_NOMINATED_PRICE_UNIT), &
                                PURCHASE_INVOICE_LINES(UNIT_PRICE),#INVOICE_QTY, &
                                #STATUS,#MESSAGE)

                         IF (#STATUS = #NO OR %STATUS = %FAILURE)
                                 ERROR/TEXT_ONLY/CONFIRM #MESSAGE
                         END_IF
                END_IF

                IF (PURCHASE_INVOICE_LINES(UNIT_PUR) <> PURCHASE_INVOICE_LINES(UNIT_PRICE))
                        #IC_NOMINATED_QTY = 0
                        #IC_NOMINATED_PRICE_QTY = 0
                        PERFORM "GEMPOP:POP_L_FIND_TRANS_QUANTITIES" (&
                                (PURCHASE_INVOICE_LINES(COMPANY_CODE)), &
                                (PURCHASE_INVOICE_LINES(PART_CODE)), &
                                (PURCHASE_INVOICE_LINES(WAREHOUSE)), &
                                (PURCHASE_INVOICE_LINES(IC_LOT_NUMBER)), &
                                (#UOM_TYPE), &
                                (PRODUCT_MASTER(IC_UNIT_CAPACITY)), &
                                #INVOICE_QUANTITY,(PURCHASE_INVOICE_LINES(UNIT_PUR)), &
                                #IC_NOMINATED_QTY,(PURCHASE_INVOICE_LINES(IC_NOMINATED_UNIT)), &
                                #IC_NOMINATED_PRICE_QTY, &
                                PURCHASE_INVOICE_LINES(POP_NOMINATED_PRICE_UNIT), &
                                PURCHASE_INVOICE_LINES(UNIT_PRICE),#INVOICE_QTY, &
                                #STATUS,#MESSAGE)

                         IF (#STATUS = #NO OR %STATUS = %FAILURE)
                                 ERROR/TEXT_ONLY/CONFIRM #MESSAGE
                         END_IF
                END_IF


                #LINE_VALUE     = PURCHASE_INVOICE_LINES(POP_INVOICE_TOTAL_CURRENCY)
                #LINE_DISCOUNT  = PURCHASE_INVOICE_LINES(LINE_DISCOUNT)
                #TAX_VAL        = PURCHASE_INVOICE_LINES(SYS_E_TAX_VAL) + PURCHASE_INVOICE_LINES(SYS_N_TAX_VAL)
                #RETAINERS_VAL = PURCHASE_INVOICE_LINES(SYS_TAX_RETAINERS_CURRENCY)
                #SYS_E_TAX_VAL  = PURCHASE_INVOICE_LINES(SYS_E_TAX_VAL)
                #SYS_N_TAX_VAL  = PURCHASE_INVOICE_LINES(SYS_N_TAX_VAL)
                #LINE_PERCENT   = PURCHASE_INVOICE_LINES(LINE_DISCOUNT_PERCENT)
                #PURCHASE_INVOICE_LINE = PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE)
                #SYS_TAXABLE_CODE = PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE)

                #PART_CODE = PURCHASE_INVOICE_LINES(PART_CODE)
                #WAREHOUSE = PURCHASE_INVOICE_LINES(WAREHOUSE)

                #TAX_MODE = "R"

                IF (PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE) = PARAMETER("VENDOR_TAX_ACCRUE"))
                        #ACCRUAL_INDICATOR="*"
                ELSE
                        #ACCRUAL_INDICATOR=" "
                END_IF

                IF (PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE) = PARAMETER("VENDOR_TAX_ACCRUE") AND #ACCRUE_IGIC = #YES)
                        #ACCRUAL_INDICATOR = "*"
                END_IF


                IF (#TEN99_IN_USE = #YES)
                        PERFORM SETUP_TEN99_VT
                        PERFORM LOAD_TEN99_VT
                        #TEN99_MODE = "R"
                END_IF
                ! On a modify, set up all the working variables

                IF (#COMPANY_EC_REPORT_TYPE <> "" AND #VENDOR_EC_STATE <> "")
                        PERFORM LINE_MODIFICATION_SETUP
                END_IF

                ! When modifying a line set up a few
                ! defaults first as we can't determine
                ! in what order the modifications will be
                ! made

                IF (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE_TYPE) &
                                = #LINE_TYPE_NONSTOCK)
                        IF (#REGISTRATION_NUMBER = "" OR #COPY_REGISTER_TAX = #NO)

                                 DELETE ALL FROM TAX_DETAILS_VT
                                IF (%STATUS <> %NORMAL) EXIT (%FAILURE)

                                #TAX_LINE_TYPE = PARAMETER("TAX_TYPE_LINE")
                                PERFORM LOAD_TAX_VT
                                IF (%STATUS = %FAILURE) EXIT (%STATUS)

                        END_IF

                        #TAX_MODE = "R"

                        IF (#REGISTRATION_NUMBER = "" OR #COPY_REGISTER_RETAINERS = #NO)
                                IF (#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
                                        #DIV_TAX_RETAINERS_FLAG = #YES AND &
                                        (#VENDOR_TAX_RETAINERS_FLAG=#YES OR #PAYEE_TAX_RETAINERS_FLAG=#YES))

                                        PERFORM "GEMLB:LB_CRE_TAX_RETAINERS_DETAILS_VT"
                                        IF (%STATUS <> %NORMAL) EXIT (%FAILURE)

                                        PERFORM LOAD_TAX_RETAINERS_VT
                                        IF (%STATUS = %FAILURE) EXIT (%FAILURE)
                                END_IF

                        END_IF


                        #TAX_RETAINERS_MODE = "R"

                        PERFORM MAINTAIN_NON_STOCK
                        IF (%STATUS <> %SUCCESS) EXIT(%FAILURE)

                        IF (#REGISTRATION_NUMBER = "" OR #COPY_REGISTER_TAX = #NO)

!!                               DELETE ALL FROM TAX_DETAILS_VT
!!                              IF (%STATUS <> %NORMAL) EXIT(%FAILURE)
                                #E_TAX_VAL = 0.0
                                #N_TAX_VAL = 0.0

                                PERFORM DELETE_PREVIOUS_TAX_RECORDS
                                PERFORM CREATE_TAX_DETAIL_FROM_VT
                        END_IF

                        IF (#REGISTRATION_NUMBER = "" OR #COPY_REGISTER_RETAINERS = #NO)
                                IF (#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
                                        #DIV_TAX_RETAINERS_FLAG = #YES AND &
                                        (#VENDOR_TAX_RETAINERS_FLAG=#YES OR #PAYEE_TAX_RETAINERS_FLAG=#YES))

                                        PERFORM DELETE_PREVIOUS_TAX_RETAINERS_RECORDS
                                        PERFORM CREATE_TAX_RETAINERS_DETAIL_FROM_VT
                                END_IF
                        END_IF

                        DELETE ALL FROM TAX_DETAILS_VT

                        GOTO NEXT_LINE_48
                        ! If its a non-stock line go off to special form

                ELSE
                        ! STOCKED LINE
                        IF (#SECURITY_ACTIVE = #YES  AND #WAREHOUSE <> "")
                                FIND IN SECURITY_PERIOD_ACCESS_VT &
                                        /WITH=SYS_ACCESS_TYPE=(PARAMETER("ACCESS_TYPE_WAREHOUSE")) &
                                        /WITH=SOURCE_MODULE=(PARAMETER("MODULE_PO")) &
                                        /WITH=SYS_ACCESS_CODE = #WAREHOUSE

                                IF (%STATUS = %FAILURE)
                                        MESSAGE/IDENTIFIER/BELL/WAIT P_10631,PARAMETER("MODULE_PO")
                                        GOTO FORM_END
                                END_IF

                                IF (SECURITY_PERIOD_ACCESS_VT(SYS_ALLOW_ACCESS) <> #YES)
                                        MESSAGE/IDENTIFIER/BELL/WAIT P_10631,PARAMETER("MODULE_PO")
                                        GOTO FORM_END
                                END_IF
                        END_IF

                        IF (#REGISTRATION_NUMBER = "" OR #COPY_REGISTER_TAX = #NO)
                                 DELETE ALL FROM TAX_DETAILS_VT
                                IF (%STATUS <> %NORMAL) EXIT (%FAILURE)

                                #TAX_LINE_TYPE          = PARAMETER("TAX_TYPE_LINE")

                                PERFORM LOAD_TAX_VT
                        END_IF

                        IF (#REGISTRATION_NUMBER = "" OR #COPY_REGISTER_RETAINERS = #NO)
                                IF (#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
                                        #DIV_TAX_RETAINERS_FLAG = #YES AND &
                                        (#VENDOR_TAX_RETAINERS_FLAG=#YES OR #PAYEE_TAX_RETAINERS_FLAG=#YES))

                                        PERFORM "GEMLB:LB_CRE_TAX_RETAINERS_DETAILS_VT"
                                        IF (%STATUS <> %NORMAL) EXIT (%FAILURE)

                                        PERFORM LOAD_TAX_RETAINERS_VT
                                END_IF
                        END_IF

                        IF (#TEN99_IN_USE = #YES)
                                PERFORM SETUP_TEN99_VT
                                PERFORM LOAD_TEN99_VT
                        END_IF

                        #TAX_MODE = "R"
                        #TAX_RETAINERS_MODE = "R"

                        PERFORM MAINTAIN_STOCK_LINE
                        IF (%STATUS = %BACK  OR %STATUS = %EXIT)  EXIT(%BACK)

                        IF (%STATUS = %FAILURE) EXIT(%FAILURE)

                        IF (#REGISTRATION_NUMBER = "" OR #COPY_REGISTER_TAX = #NO)
!! spr W07428
!!                                 DELETE ALL FROM TAX_DETAILS_VT
!!                                IF (%STATUS <> %NORMAL) EXIT (%FAILURE)
                                #E_TAX_VAL = 0.0
                                #N_TAX_VAL = 0.0

                                PERFORM DELETE_PREVIOUS_TAX_RECORDS
                                PERFORM CREATE_TAX_DETAIL_FROM_VT
                        END_IF

                        IF (#REGISTRATION_NUMBER = "" OR #COPY_REGISTER_RETAINERS = #NO)
                                IF (#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
                                        #DIV_TAX_RETAINERS_FLAG = #YES AND &
                                        (#VENDOR_TAX_RETAINERS_FLAG=#YES OR #PAYEE_TAX_RETAINERS_FLAG=#YES))

                                        PERFORM DELETE_PREVIOUS_TAX_RETAINERS_RECORDS
                                        PERFORM CREATE_TAX_RETAINERS_DETAIL_FROM_VT
                                END_IF
                        END_IF

                        DELETE ALL FROM TAX_DETAILS_VT

                        GOTO NEXT_LINE_48
                END_IF
                ! For a stock line branch depending on whether its
                ! a copied line or not. If not we let them jump
                ! straight to the end of line menu, otherwise they
                ! have to work through the line input.
        END_BLOCK

        BEGIN_BLOCK NEXT_LINE_48
                IF (#TEN99_IN_USE = #YES)
                        PERFORM DELETE_PREVIOUS_TEN99_RECORDS
                        PERFORM CREATE_TEN99_DETAIL_FROM_VT
                END_IF

                FIND IN PURCHASE_INVOICES &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER &
                        /LOCK=WRITE

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_00276
                        EXIT(%FAILURE)
                END_IF
        END_BLOCK

        BEGIN_BLOCK ADD_PURCHASE_INVOICE_LINES_49

                PURCHASE_INVOICE_LINES(TEMP_INVOICE_QUANTITY)   = #INVOICE_QUANTITY
                PURCHASE_INVOICE_LINES(LINE_DISCOUNT)           = #LINE_DISCOUNT
                PURCHASE_INVOICE_LINES(LINE_DISCOUNT_PERCENT)   = #LINE_PERCENT

                PURCHASE_INVOICE_LINES(SYS_E_TAX_VAL)           = #SYS_E_TAX_VAL
                PURCHASE_INVOICE_LINES(SYS_N_TAX_VAL)           = #SYS_N_TAX_VAL

                PURCHASE_INVOICE_LINES(SYS_TAX_RETAINERS_CURRENCY) = #RETAINERS_VAL
                IF (#CURRENCY_METHOD > '0')
                        IF (#CURRENCY_RATIO_INDIC = PARAMETER("MULTIPLY_RATIO_INDIC"))
                                PURCHASE_INVOICE_LINES(SYS_TAX_RETAINERS_BASE) =  ROUND(#RETAINERS_VAL*#CURRENCY_RATE,#BASE_CURRENCY_DECIMAL)
                        ELSE
                                PURCHASE_INVOICE_LINES(SYS_TAX_RETAINERS_BASE) =  ROUND(#RETAINERS_VAL/#CURRENCY_RATE,#BASE_CURRENCY_DECIMAL)
                        END_IF
                END_IF

                PURCHASE_INVOICE_LINES(POP_INVOICE_TOTAL_CURRENCY)= #LINE_VALUE
                PURCHASE_INVOICE_LINES(STATUS_FLAG)=""

                ! NOTe: The line value trigger must perform after
                ! the line tax trigger

                ! Calculate the value in base currency
                IF (#CURRENCY_METHOD > '0')
                        IF (#CURRENCY_RATIO_INDIC = PARAMETER("MULTIPLY_RATIO_INDIC"))
                                PURCHASE_INVOICE_LINES(POP_INVOICE_TOTAL_BASE) =  ROUND(#LINE_VALUE*#CURRENCY_RATE,#BASE_CURRENCY_DECIMAL)
                        ELSE
                                PURCHASE_INVOICE_LINES(POP_INVOICE_TOTAL_BASE) =  ROUND(#LINE_VALUE/#CURRENCY_RATE,#BASE_CURRENCY_DECIMAL)
                        END_IF
                END_IF
        END_BLOCK

        BEGIN_BLOCK SET_UP_FOR_TOTALS_50
                #TOTAL_LINE_DISCOUNT    = PURCHASE_INVOICES(LINE_DISCOUNT)
                #TOTAL_LINE_TAX         = PURCHASE_INVOICES(SYS_E_TAX_VAL) + PURCHASE_INVOICES(SYS_N_TAX_VAL)
                #BATCH_TOTAL_TAX_RETAINERS = PURCHASE_INVOICES(SYS_TAX_RETAINERS_CURRENCY)

                #GRAND_TOTAL    = PURCHASE_INVOICES(POP_INVOICE_TOTAL_CURRENCY) &
                        + #TOTAL_LINE_TAX &
                        - #BATCH_TOTAL_TAX_RETAINERS &
                        - #TOTAL_LINE_DISCOUNT
        END_BLOCK

        OUTPUT_BLOCK TOTAL_REGISTERED_TAX_51 /ROW=2 /COL=2 /LEN=12 /ABSOLUTE_POSITION &
                        /SOURCE=(#REG_TAX) &
                        /USING=PURCHASE_INVOICES(TAX_VAL) &
!                        /OUTPUT_MASK=#CURRENCY_MASK &
                        /USE_IF=(#REGISTRATION_NUMBER <> "")

        OUTPUT_BLOCK TOTAL_REGISTER_VALUE_52 /ROW=2 /COL=15 /LEN=12 /ABSOLUTE_POSITION &
                        /SOURCE=(#REG_VALUE) &
                        /USING=PURCHASE_INVOICES(POP_INVOICE_TOTAL_CURRENCY) &
!                        /OUTPUT_MASK=#CURRENCY_MASK &
                        /USE_IF=(#REGISTRATION_NUMBER <> "")

        OUTPUT_BLOCK TOTAL_LINE_DISCOUNT_54 /ROW=2 /COL=26 /LEN=(#CURRENCY_LEN) /ABSOLUTE_POSITION &
                        /SOURCE=(#TOTAL_LINE_DISCOUNT) &
                        /USING=PURCHASE_INVOICES(LINE_DISCOUNT) &
                        /OUTPUT_MASK=#CURRENCY_MASK

        OUTPUT_BLOCK TOTAL_LINE_TAX_55 /ROW=2 /COL=44 /LEN=(#CURRENCY_LEN) /ABSOLUTE_POSITION &
                        /SOURCE=(#TOTAL_LINE_TAX) &
                        /USING=PURCHASE_INVOICES(TAX_VAL) &
                        /OUTPUT_MASK=#CURRENCY_MASK

        OUTPUT_BLOCK TOTAL_LINE_TOTAL_56 /ROW=2 /COL=62 /LEN=(#CURRENCY_LEN) /ABSOLUTE_POSITION &
                        /SOURCE=(#GRAND_TOTAL) &
                        /USING=PURCHASE_INVOICES(POP_INVOICE_TOTAL_CURRENCY) &
                        /OUTPUT_MASK=#CURRENCY_MASK

        BEGIN_BLOCK FORM_END
        END_BLOCK

END_FORM


PROCEDURE_FORM LINE_MODIFICATION_SETUP


        BEGIN_BLOCK SETUP_EC_REPORT_TYPE
                #LINE_EC_REPORT_TYPE = ""

                IF (PURCHASE_INVOICE_LINES(SYS_TARIFF_CODE) <> "")
                        #LINE_EC_REPORT_TYPE    = #COMPANY_EC_REPORT_TYPE
                        #EC_PROCESSED_INDICATOR = PURCHASE_INVOICE_LINES(SYS_EC_PROCESSED_INDICATOR)
                        #EC_TRANSACTION_TYPE    = PURCHASE_INVOICE_LINES(SYS_EC_TRANSACTION_TYPE)
                        #EC_TARIFF_CODE         = PURCHASE_INVOICE_LINES(SYS_TARIFF_CODE)
                        #EC_COUNTRY_OF_ORIGIN   = PURCHASE_INVOICE_LINES(SYS_COUNTRY_OF_ORIGIN)
                        #EC_SUPP_UNIT_QTY       = PURCHASE_INVOICE_LINES(SYS_EC_SUPP_UNIT_QTY)
                        #EC_WEIGHT              = PURCHASE_INVOICE_LINES(SYS_EC_WEIGHT)
                        #EC_MODE_TRANSPORT      = PURCHASE_INVOICE_LINES(SYS_EC_MODE_OF_TRANSPORT)
                        #EC_DELIVERY_TERMS      = PURCHASE_INVOICE_LINES(SYS_EC_DELIVERY_TERMS)
                        #EC_STATISTICAL_VALUE   = PURCHASE_INVOICE_LINES(SYS_EC_STATISTICAL_VALUE)
                        #EC_ANALYSIS_1          = PURCHASE_INVOICE_LINES(SYS_EC_ANALYSIS_1)
                        #EC_ANALYSIS_2          = PURCHASE_INVOICE_LINES(SYS_EC_ANALYSIS_2)
                        #EC_ANALYSIS_3          = PURCHASE_INVOICE_LINES(SYS_EC_ANALYSIS_3)
                        #EC_ANALYSIS_4          = PURCHASE_INVOICE_LINES(SYS_EC_ANALYSIS_4)
                        #EC_ANALYSIS_5          = PURCHASE_INVOICE_LINES(SYS_EC_ANALYSIS_5)
                        #EC_STAT_FACTOR         = #DEF_EC_STAT_FACTOR
                END_IF
        END_BLOCK

END_FORM


FORM MAINTAIN_STOCK_LINE /ROW=8 /COL=2 /HEIGHT=16 /WIDTH=78 &
        /TITLE=(MESSAGE("P_01192"))


        BEGIN_BLOCK INITIAL_1
                #OLD_NET_VALUE  = 0
                #PROJECT			= ""
                #WBS_NUMBER			= ""                
                #WBS_NUMBER_MASKED	= ""
                #OLD_PROJECT        = PURCHASE_INVOICE_LINES(PA_PROJECT_CODE)
				#OLD_WBS_NUMBER     = PURCHASE_INVOICE_LINES(PA_WBS_NUMBER)
                ! Store current quantity as reference point when checking
                ! that quantity has not been increased (increase will lead
                ! to orphaned quantities in linking and inaccurate
                ! posting values).
!               #OLD_INVOICE_QUANTITY = PURCHASE_INVOICE_LINES(INVOICE_QUANTITY)

				#OLD_INVOICE_QUANTITY =	#INVOICE_QUANTITY
				#OLD_PURCHASE_COST    = PURCHASE_INVOICE_LINES(PURCHASE_COST)

                FIND IN PRODUCT_MASTER &
                        /LOCK=NONE &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=PART_CODE=PURCHASE_INVOICE_LINES(PART_CODE)

                #PART_TAXABLE = PRODUCT_MASTER(TAXABLE)
                #PRODUCT_TAX_CODE = PRODUCT_MASTER(PRODUCT_TAX_CODE)
                #WAREHOUSED_FLAG = PRODUCT_MASTER(WAREHOUSED_FLAG)
                #UOM_TYPE = PRODUCT_MASTER(IC_PRODUCT_UOM_CONTROL)
                #PURCH_CODE             = PRODUCT_MASTER(STD_VARIANCE_CODE)
                #PURCH_ACC              = PRODUCT_MASTER(STD_VARIANCE_ACCOUNT)
                #COSTING_UNIT           = PRODUCT_MASTER(IC_UNIT_COST)

                IF (PRODUCT_MASTER(WAREHOUSED_FLAG) = #YES)
                        FIND IN WAREHOUSE_CONTROLS &
                                /LOCK=NONE &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=WAREHOUSE=PURCHASE_INVOICE_LINES(WAREHOUSE)

                        FIND IN PRODUCT_WAREHOUSE &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=WAREHOUSE=PURCHASE_INVOICE_LINES(WAREHOUSE) &
                                /WITH=PART_CODE=PURCHASE_INVOICE_LINES(PART_CODE) &
                                /LOCK=NONE

                        #PART_TAXABLE = PRODUCT_WAREHOUSE(TAXABLE)
                        #PRODUCT_TAX_CODE = PRODUCT_WAREHOUSE(PRODUCT_TAX_CODE)

                END_IF

                IF (PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE) = PARAMETER("VENDOR_TAX_COLLECT"))
                        #NET_VALUE = PURCHASE_INVOICE_LINES(POP_INVOICE_TOTAL_CURRENCY) &
                                     - PURCHASE_INVOICE_LINES(LINE_DISCOUNT) &
                                         + PURCHASE_INVOICE_LINES(SYS_E_TAX_VAL) &
                                         + PURCHASE_INVOICE_LINES(SYS_N_TAX_VAL)
                ELSE
                        #NET_VALUE = PURCHASE_INVOICE_LINES(POP_INVOICE_TOTAL_CURRENCY) &
                                     - PURCHASE_INVOICE_LINES(LINE_DISCOUNT)
                END_IF

                IF (#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
                        #DIV_TAX_RETAINERS_FLAG = #YES AND &
                        (#VENDOR_TAX_RETAINERS_FLAG=#YES OR #PAYEE_TAX_RETAINERS_FLAG=#YES))

                        #NET_VALUE = #NET_VALUE - PURCHASE_INVOICE_LINES(SYS_TAX_RETAINERS_CURRENCY)
                END_IF


                FIND IN GOODS_RECEIVED_LINES &
                        /LOCK=WRITE &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=GRN_NUMBER=PURCHASE_INVOICE_LINES(GRN_NUMBER) &
                        /WITH=GRN_LINE_NUMBER=PURCHASE_INVOICE_LINES(GRN_LINE_NUMBER)

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_62313,PURCHASE_INVOICE_LINES(GRN_LINE_NUMBER)
                        EXIT(%FAILURE)
                END_IF


                FIND IN GOODS_RECEIVED_LINE_QTYS &
                        /LOCK=WRITE &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=GRN_NUMBER=PURCHASE_INVOICE_LINES(GRN_NUMBER) &
                        /WITH=GRN_LINE_NUMBER=PURCHASE_INVOICE_LINES(GRN_LINE_NUMBER) &
                        /WITH=UNIT_OF_MEASURE=PURCHASE_INVOICE_LINES(IC_NOMINATED_UNIT)
                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_62319,PURCHASE_INVOICE_LINES(GRN_LINE_NUMBER)
                        EXIT(%FAILURE)
                END_IF

                ! Get correct UOM mask for order quantity on line display.
                ! Unable to perform the library program to do this in a
                ! display_only block, so have to code it here.
                #QUANTITY_MASK = ""
                PERFORM "GEMLB:LB_GET_QUANTITY_MASK" (&
                                (PURCHASE_INVOICE_LINES(COMPANY_CODE)), &
                                (PURCHASE_INVOICE_LINES(PART_CODE)), &
                                (PURCHASE_INVOICE_LINES(UNIT_PUR)), &
                                #QUANTITY_MASK, &
                                #QUANTITY_DECIMALS)

                IF (%STATUS = %FAILURE)
                        EXIT(%FAILURE)
                END_IF
                #EC_PROCESSED_INDICATOR = PURCHASE_INVOICE_LINES(SYS_EC_PROCESSED_INDICATOR)
                #EC_TARIFF_CODE         = PURCHASE_INVOICE_LINES(SYS_TARIFF_CODE)

                #NONEXP_TAX         = PURCHASE_INVOICE_LINES(SYS_N_TAX_VAL)
                #OLD_NET_VALUE = #NET_VALUE
                #OLD_TAX_VAL = #TAX_VAL
                #OLD_RETAINERS_VAL = #RETAINERS_VAL
                #OLD_LINE_VALUE = PURCHASE_INVOICE_LINES(POP_INVOICE_TOTAL_CURRENCY)
                #OLD_DISCOUNT = PURCHASE_INVOICE_LINES(LINE_DISCOUNT)

                IF(#PA_IN_USE= #YES)
       				IF ((PURCHASE_INVOICE_LINES(PA_PROJECT_CODE)) ="" AND &
       				     (PURCHASE_INVOICE_LINES(PA_WBS_NUMBER)) = ""  ) 
       				    #PROJECT    = (PURCHASE_INVOICES(PA_PROJECT_CODE))
       				    #WBS_NUMBER = (PURCHASE_INVOICES(PA_WBS_NUMBER))
       				ELSE
       				    #PROJECT    = (PURCHASE_INVOICE_LINES(PA_PROJECT_CODE))
       				    #WBS_NUMBER = (PURCHASE_INVOICE_LINES(PA_WBS_NUMBER))   				        				    
       				END_IF
                                            
                     PERFORM GET_PA_WBS(#COMPANY_CODE,#PA_IN_USE, &
                            (PURCHASE_INVOICES(PA_PROJECT_CODE)), &
                            (PURCHASE_INVOICES(PA_WBS_NUMBER)), &
                            (PURCHASE_INVOICE_LINES(PA_PROJECT_CODE)), &
                            (PURCHASE_INVOICE_LINES(PA_WBS_NUMBER)), &
                            #WBS_NUMBER_MASKED, &
                            #ACTIVITY_DESCRIP)
                END_IF

                DISPLAY DEFAULTS
                GOTO LINE_MENU_29
        END_BLOCK

        OUTPUT_BLOCK PART_CODE_2 /ROW=2 /COL=24 &
                        /PROMPT=(FIELD_PROMPT(PART_CODE)) &
                        /SOURCE=(PURCHASE_INVOICE_LINES(PART_CODE)) &
                        /HEADING=FIELD_HEADING(PART_CODE)

        OUTPUT_BLOCK PART_DESC_3 /ROW=2 /COL=40 &
                        /SOURCE=(PRODUCT_MASTER(PART_DESC_1))

        OUTPUT_BLOCK PART_DESC_4 /ROW=3 /COL=40 &
                        /SOURCE=(PRODUCT_MASTER(PART_DESC_2))

        OUTPUT_BLOCK WAREHOUSE_5 /ROW=4 /COL=24 &
                        /PROMPT=(FIELD_PROMPT(WAREHOUSE)) &
                        /SOURCE=(PURCHASE_INVOICE_LINES(WAREHOUSE)) &
                        /HEADING=FIELD_HEADING(WAREHOUSE)

        OUTPUT_BLOCK WAREHOSUE_DESC_6 /ROW=4 /COL=28 &
                        /SOURCE=(WAREHOUSE_CONTROLS(WAREHOUSE_DESCRIPTION))

        OUTPUT_BLOCK COST_CENTER_7 /ROW=5 /COL=24 &
                        /PROMPT=(FIELD_PROMPT(COST_CENTER)) &
                        /SOURCE=(PURCHASE_INVOICE_LINES(COST_CENTER))

        OUTPUT_BLOCK DELIVERY_ADDRESS_8 /ROW=5 /COL=38 &
                        /PROMPT=(MESSAGE("P_00214")) &
                        /SOURCE=(PURCHASE_INVOICE_LINES(DELIVERY_ADDRESS_CODE))

        OUTPUT_BLOCK UNIT_PRICE_DISPLAY_11 /ROW=9 /COL=44 &
                        /SOURCE=(PURCHASE_INVOICE_LINES(UNIT_PRICE)) &
                        /HEADING=FIELD_HEADING(UNIT_PRICE)

        OUTPUT_BLOCK UNIT_PUR_DISPLAY_10 /ROW=8 /COL=44 &
                        /SOURCE=(PURCHASE_INVOICE_LINES(UNIT_PUR))

        INPUT_BLOCK LINE_REF_12 /ROW=6 /COL=24 &
                        /PROMPT=(FIELD_PROMPT(INVOICE_LINE_REFERENCE)) &
                        /TARGET=PURCHASE_INVOICE_LINES(INVOICE_LINE_REFERENCE) &
                        /HEADING=FIELD_HEADING(INVOICE_LINE_REFERENCE)

        BEGIN_BLOCK PROJECT_INPUT
        
        IF ( #PA_IN_USE = #YES AND & 
                    ((PURCHASE_INVOICES(INTERCOMPANY_POSTINGS))=#NO) AND &
                    ((PURCHASE_INVOICES(PA_PROJECT_CODE)) = "") AND & 
                    ((PURCHASE_INVOICES(PA_WBS_NUMBER)) = ""))
            #ORIGINAL_WBS_MASKED = #WBS_NUMBER_MASKED
			#ORIGINAL_PROJECT	 = #PROJECT
			#ORIGINAL_WBS_NUMBER = #WBS_NUMBER
			        
            INPUT_BLOCK PROJECT_IN /ROW=7 /COL=24 /LEN=30 &
                /SOURCE=(#PROJECT) &
                /TARGET=#PROJECT &
                /PROMPT=FIELD_PROMPT(PA_WBS_NUMBER) &
                /USING=NOLOWER &
                /LOV=PA_PROJECTS(PA_PROJECT_CODE,PA_PROJECT_NAME,PA_OPEN_DATE) &
                /LOV_WITH=COMPANY_CODE = #COMPANY_CODE &
                /LOV_WITH=PA_PROJECT_STATUS = #STATUS_APPROVED &
                /LOV_WITH=PA_PROJECT_STATUS = #STATUS_OPEN &
                /LOV_WITH=PA_UPDATES_ALLOWED = #YES &
                /LOV_SELECTION=("A AND C AND D") &
                /USE_IF=(#PA_IN_USE AND #PROJECT = "")
                
                IF ( #PROJECT <> "" ) 
                    PERFORM "GEMLB:PA_L_WBS" ( &
                            (#COMPANY_CODE), &
                             #PROJECT, &
                             #WBS_NUMBER, &
                            (#NO), &
                            #POSTING_DATE, #PERIOD , #YEAR , &
                            (#YES), &
                            ("O"), &
                            (#YES), &
                            1, "", "", &
                            #ERROR_OCCURRED, &
                            #ERROR_MESSAGE, &
                            #WBS_NUMBER_MASKED, & 
                            #WBS_LEVEL_1, &
                            #WBS_LEVEL_2, &
                            #WBS_LEVEL_3, &
                            #WBS_LEVEL_4, &
                            #WBS_LEVEL_5, &
                            #ACTIVITY_DESCRIP )
                    IF (#ERROR_OCCURRED = 1)
                            ERROR/WAIT/TEXT_ONLY #ERROR_MESSAGE
                            GOTO PROJECT_IN
                    END_IF                            
                    IF ( #WBS_NUMBER_MASKED = "" ) 
                        #PROJECT    = ""
                        #WBS_NUMBER = ""
                    END_IF 
                END_IF
                
                PERFORM CHECK_LINE_PA_CHANGES( (#PROJECT), (#WBS_NUMBER), (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE)))						            
                
				IF ( %STATUS = %BACK ) 
					#WBS_NUMBER_MASKED = #ORIGINAL_WBS_MASKED
					#PROJECT           = #ORIGINAL_PROJECT
					#WBS_NUMBER        = #ORIGINAL_WBS_NUMBER
				END_IF 

				OUTPUT_BLOCK PROJECT_OUTPUT /ROW=7 /COL=24 /LEN=30 &
                    /SOURCE=#WBS_NUMBER_MASKED &
                    /PROMPT=FIELD_PROMPT(PA_WBS_NUMBER) &
                    /USE_IF=(#PA_IN_USE)
                                    
                PURCHASE_INVOICE_LINES(PA_PROJECT_CODE)     = #PROJECT
                PURCHASE_INVOICE_LINES(PA_WBS_NUMBER)       = #WBS_NUMBER   
        END_IF 
        
        END_BLOCK 

        INPUT_BLOCK INVOICE_QUANTITY /ROW=8 /COL=24 /LEN=14 &
                        /PROMPT=(FIELD_PROMPT(INVOICE_QUANTITY)) &
                        /TARGET=#INVOICE_QUANTITY &
                        /USING=PURCHASE_INVOICE_LINES(INVOICE_QUANTITY),NOZERO,NONEGATIVE &
                        /INPUT_MASK=#QUANTITY_MASK

                IF (#INVOICE_QUANTITY > PURCHASE_INVOICE_LINES(INVOICE_QUANTITY_DETAIL))
                        MESSAGE/IDENTIFIER/BELL/WAIT P_01464
                        GOTO INVOICE_QUANTITY
                END_IF

        BEGIN_BLOCK UNIT_OF_MEASURE
                ! Set defaults
                #PRICE_CONV = 1
                #INVOICE_QTY = #INVOICE_QUANTITY
                #IC_NOMINATED_QTY = #INVOICE_QUANTITY

                IF (PURCHASE_INVOICE_LINES(UNIT_PUR) = PURCHASE_INVOICE_LINES(IC_NOMINATED_UNIT))
                         PURCHASE_INVOICE_LINES(IC_NOMINATED_QTY) = #IC_NOMINATED_QTY
                ELSE
                        #IC_NOMINATED_QTY = 0
                        #IC_NOMINATED_PRICE_QTY = 0
                        PERFORM "GEMPOP:POP_L_FIND_TRANS_QUANTITIES" (&
                                (PURCHASE_INVOICE_LINES(COMPANY_CODE)), &
                                (PURCHASE_INVOICE_LINES(PART_CODE)), &
                                (PURCHASE_INVOICE_LINES(WAREHOUSE)), &
                                (PURCHASE_INVOICE_LINES(IC_LOT_NUMBER)), &
                                (#UOM_TYPE), &
                                (PRODUCT_MASTER(IC_UNIT_CAPACITY)), &
                                #INVOICE_QUANTITY,(PURCHASE_INVOICE_LINES(UNIT_PUR)), &
                                #IC_NOMINATED_QTY,(PURCHASE_INVOICE_LINES(IC_NOMINATED_UNIT)), &
                                #IC_NOMINATED_PRICE_QTY, &
                                PURCHASE_INVOICE_LINES(POP_NOMINATED_PRICE_UNIT), &
                                PURCHASE_INVOICE_LINES(UNIT_PRICE),#INVOICE_QTY, &
                                #STATUS,#MESSAGE)

                         IF (#STATUS = #NO OR %STATUS = %FAILURE)
                                 ERROR/TEXT_ONLY/CONFIRM #MESSAGE
                         END_IF
                         PURCHASE_INVOICE_LINES(IC_NOMINATED_QTY) = #IC_NOMINATED_QTY
                         PURCHASE_INVOICE_LINES(IC_OTHER_INVENTORY_QTY) = #IC_NOMINATED_PRICE_QTY
                END_IF

                IF (PURCHASE_INVOICE_LINES(UNIT_PUR) <> PURCHASE_INVOICE_LINES(UNIT_PRICE))
                        #IC_NOMINATED_QTY = 0
                        #IC_NOMINATED_PRICE_QTY = 0
                        PERFORM "GEMPOP:POP_L_FIND_TRANS_QUANTITIES" (&
                                (PURCHASE_INVOICE_LINES(COMPANY_CODE)), &
                                (PURCHASE_INVOICE_LINES(PART_CODE)), &
                                (PURCHASE_INVOICE_LINES(WAREHOUSE)), &
                                (PURCHASE_INVOICE_LINES(IC_LOT_NUMBER)), &
                                (#UOM_TYPE), &
                                (PRODUCT_MASTER(IC_UNIT_CAPACITY)), &
                                #INVOICE_QUANTITY,(PURCHASE_INVOICE_LINES(UNIT_PUR)), &
                                #IC_NOMINATED_QTY,(PURCHASE_INVOICE_LINES(IC_NOMINATED_UNIT)), &
                                #IC_NOMINATED_PRICE_QTY, &
                                PURCHASE_INVOICE_LINES(POP_NOMINATED_PRICE_UNIT), &
                                PURCHASE_INVOICE_LINES(UNIT_PRICE),#INVOICE_QTY, &
                                #STATUS,#MESSAGE)

                         IF (#STATUS = #NO OR %STATUS = %FAILURE)
                                 ERROR/TEXT_ONLY/CONFIRM #MESSAGE
                         END_IF
                         PURCHASE_INVOICE_LINES(IC_NOMINATED_QTY) = #IC_NOMINATED_QTY
                         PURCHASE_INVOICE_LINES(IC_OTHER_INVENTORY_QTY) = #IC_NOMINATED_PRICE_QTY
                END_IF

                ! Do conversion if costing unit differs from pricing unit to get
                ! IC_NOMINATED_QTY in terms of IC_NOMINATED_UNIT on PURCHASE_INVOICE_LINES

                IF (#COSTING_UNIT <> PURCHASE_INVOICE_LINES(UNIT_PRICE))
                        #IC_OTHER_NOMINATED_QTY = 0
                        #IC_NOMINATED_PRICE_QTY = 0
                        PERFORM "GEMPOP:POP_L_FIND_TRANS_QUANTITIES" (&
                                (PURCHASE_INVOICE_LINES(COMPANY_CODE)), &
                                (PURCHASE_INVOICE_LINES(PART_CODE)), &
                                (PURCHASE_INVOICE_LINES(WAREHOUSE)), &
                                (PURCHASE_INVOICE_LINES(IC_LOT_NUMBER)), &
                                (#UOM_TYPE), &
                                (PRODUCT_MASTER(IC_UNIT_CAPACITY)), &
                                #INVOICE_QTY,(PURCHASE_INVOICE_LINES(UNIT_PRICE)), &
                                #IC_NOMINATED_PRICE_QTY,(PURCHASE_INVOICE_LINES(POP_NOMINATED_PRICE_UNIT)), &
                                #IC_OTHER_NOMINATED_QTY, &
                                (#COSTING_UNIT), &
                                (#COSTING_UNIT), &
                                "", &
                                #STATUS,#MESSAGE)

                         IF (#STATUS = #NO OR %STATUS = %FAILURE)
                                 ERROR/TEXT_ONLY/CONFIRM #MESSAGE
                         END_IF
                        PURCHASE_INVOICE_LINES(IC_NOMINATED_QTY) = #IC_NOMINATED_PRICE_QTY
                        PURCHASE_INVOICE_LINES(IC_OTHER_INVENTORY_QTY) = #IC_OTHER_NOMINATED_QTY

                END_IF

        END_BLOCK

        BEGIN_BLOCK PURCHASE_PRICE_14
        #PRICE      = PURCHASE_INVOICE_LINES(PURCHASE_COST)
        #PRICE_INC_TAX  = PURCHASE_INVOICE_LINES(PURCHASE_COST_INC_TAX)

                INPUT_BLOCK  /ROW=9 /COL=24 /LEN=14 &
                        /PROMPT=(FIELD_PROMPT(PURCHASE_COST)) &
                        /TARGET=PURCHASE_INVOICE_LINES(PURCHASE_COST) &
                        /HEADING=FIELD_HEADING(PURCHASE_COST) &
            /USE_IF = ( #PRICING_METHOD_STATE <> #PRICING_METHOD_OPTIONAL &
                OR ( #PRICING_METHOD_STATE = #PRICING_METHOD_OPTIONAL &
                AND #PRICING_METHOD <> #PRICING_METHOD_INCLUSIVE ) )

        INPUT_BLOCK /ROW=9 /COL=24 /LEN=17 &
            /PROMPT = FIELD_PROMPT(PURCHASE_COST) &
            /TARGET = PURCHASE_INVOICE_LINES(PURCHASE_COST_INC_TAX) &
            /INPUT_MASK = #CURRENCY_MASK &
            /USE_IF = ( #PRICING_METHOD_STATE = #PRICING_METHOD_OPTIONAL &
                AND #PRICING_METHOD = #PRICING_METHOD_INCLUSIVE )

        IF ( #PRICING_METHOD_STATE <> #PRICING_METHOD_OPTIONAL &
            OR ( #PRICING_METHOD_STATE = #PRICING_METHOD_OPTIONAL &
            AND #PRICING_METHOD <> #PRICING_METHOD_INCLUSIVE ) )

            IF (#PRICE <> PURCHASE_INVOICE_LINES(PURCHASE_COST))

                PURCHASE_INVOICE_LINES(CHG_PURCHASE_COST)   = PURCHASE_INVOICE_LINES(PURCHASE_COST) &
                                        - #PRICE
!               PURCHASE_INVOICE_LINES(OLD_PURCHASE_COST)   = #PRICE
            ELSE
!               PURCHASE_INVOICE_LINES(OLD_PURCHASE_COST)   = 0.0
                PURCHASE_INVOICE_LINES(CHG_PURCHASE_COST)   = 0.0
                    END_IF
        ELSE
            IF ( #PRICE_INC_TAX <> PURCHASE_INVOICE_LINES(PURCHASE_COST_INC_TAX) )
                PURCHASE_INVOICE_LINES(CHG_PURCHASE_COST)   = PURCHASE_INVOICE_LINES(PURCHASE_COST_INC_TAX) &
                                        - #PRICE_INC_TAX
!               PURCHASE_INVOICE_LINES(OLD_PURCHASE_COST)   = #PRICE_INC_TAX
            ELSE
!               PURCHASE_INVOICE_LINES(OLD_PURCHASE_COST)   = 0.0
                PURCHASE_INVOICE_LINES(CHG_PURCHASE_COST)   = 0.0
                    END_IF
        END_IF

                #INV_COST       = PURCHASE_INVOICE_LINES(PURCHASE_COST)

        IF ( #PRICING_METHOD_STATE = #PRICING_METHOD_OPTIONAL &
            AND #PRICING_METHOD = #PRICING_METHOD_INCLUSIVE )

            #INV_COST   = PURCHASE_INVOICE_LINES(PURCHASE_COST_INC_TAX)
        END_IF
        END_BLOCK

    BEGIN_BLOCK PRICE_TYPE_DISPLAY
        OUTPUT_BLOCK PRICE_IS_INC /ROW=9 /COL=49 &
            /ATTRIBUTES = NONE &
            /SOURCE = MESSAGE("P_23213") &
            /USE_IF = ( #PRICING_METHOD_STATE = #PRICING_METHOD_OPTIONAL &
                AND #PRICING_METHOD = #PRICING_METHOD_INCLUSIVE )

        OUTPUT_BLOCK PRICE_IS_EX /ROW=9 /COL=49 &
            /ATTRIBUTES = NONE &
            /SOURCE = MESSAGE("P_23214") &
            /USE_IF = ( #PRICING_METHOD_STATE = #PRICING_METHOD_OPTIONAL &
                AND #PRICING_METHOD <> #PRICING_METHOD_INCLUSIVE )
    END_BLOCK

        BEGIN_BLOCK RECALC_LINE_VALUE_15

                #TOLERANCE_IN_USE = #SAVE_TOLERANCE_IN_USE

                FIND IN PRODUCT_MASTER_BY_VENDOR &
                        /LOCK=NONE &
                        /WITH=COMPANY_CODE=PURCHASE_INVOICES(COMPANY_CODE) &
                        /WITH=DIVISION=PURCHASE_INVOICES(DIVISION) &
                        /WITH=PART_CODE=PURCHASE_INVOICE_LINES(PART_CODE) &
                        /WITH=VENDOR_NUMBER=PURCHASE_INVOICES(VENDOR_NUMBER)

                IF (%STATUS=%SUCCESS AND &
                   PRODUCT_MASTER_BY_VENDOR(POP_I_TOLERANCE_IN_USE)=PARAMETER("LANGUAGE_YES"))
                        #MAX_TOLERANCE          = PRODUCT_MASTER_BY_VENDOR(POP_MAX_INVOICE_TOLERANCE)
                        #TOTAL_TOLERANCE        = PRODUCT_MASTER_BY_VENDOR(POP_TOTAL_INVOICE_TOLERANCE)
                        #AMOUNT_TOLERANCE       = PRODUCT_MASTER_BY_VENDOR(POP_INVOICE_AMOUNT_TOLERANCE)
                        #PRICE_TOLERANCE        = ROUND(PRODUCT_MASTER_BY_VENDOR(POP_INVOICE_PRICE_TOLERANCE)/100.,2)

                        #TOLERANCE_IN_USE = PRODUCT_MASTER_BY_VENDOR(POP_I_TOLERANCE_IN_USE)
                ELSE
                        #MAX_TOLERANCE          = #SAVE_MAX_TOLERANCE
                        #TOTAL_TOLERANCE        = #SAVE_TOTAL_TOLERANCE
                        #AMOUNT_TOLERANCE       = #SAVE_AMOUNT_TOLERANCE
                        #PRICE_TOLERANCE        = #SAVE_PRICE_TOLERANCE
                END_IF

                IF (#TOLERANCE_IN_USE = PARAMETER("LANGUAGE_YES"))

                        PERFORM "GEMPOP:POP_L_TOLERANCE_CHECKING" ( &
                                (#INV_COST), &
                                (GOODS_RECEIVED_LINES(GRN_COST)), &
                                (#INVOICE_QUANTITY), &
                                (GOODS_RECEIVED_LINE_QTYS(GRN_QTY_IN_INVENTORY)), &
                                (#MAX_TOLERANCE), &
                                (#TOTAL_TOLERANCE), &
                                (#INVOICE_TOLERANCE_CONTROL), &
                                (#INVOICE_INDIC), &
                                (PARAMETER("LANGUAGE_NO")), &
                                "", &
                                (#PRICE_TOLERANCE), &
                                (#AMOUNT_TOLERANCE), &
                                (#ID),  &
                                #ERROR_CODE,    &
                                #ERROR_PARAM)

                        IF (%STATUS = %FAILURE)
                        ! No need to use error status, since qty cannot use
                        ! tolerance when matching against a receipt
                                GOTO INVOICE_QUANTITY
                        END_IF
                END_IF
        END_BLOCK

    BEGIN_BLOCK GET_NET_WHEN_TOT_ENTERED
        IF ( #PRICING_METHOD_STATE = #PRICING_METHOD_OPTIONAL &
            AND #PRICING_METHOD = #PRICING_METHOD_INCLUSIVE )

            #TAX_MODE   = "C"
            PERFORM LOAD_LB_TAX_CONTROL_VT

            #TAX_RATE_CHANGED   = ""
            #ERROR_OCCURRED     = 0
            #ERROR_MESSAGE      = ""

            PERFORM "GEMLB:LB_L_TAX_CONTROL" ( #TAX_MODE, &
                            #ERROR_OCCURRED, &
                            #ERROR_MESSAGE, &
                            #TAX_RATE_CHANGED )

            IF ( %STATUS <> %SUCCESS OR #ERROR_OCCURRED )
                IF (#ERROR_MESSAGE <> "" )
                    ERROR/TEXT_ONLY/WAIT #ERROR_MESSAGE
                ELSE
                    MESSAGE/IDENTIFIER/BELL/WAIT P_02398
                END_IF
                EXIT( %FAILURE )
            ELSE
                FIND IN LB_TAX_CONTROL_VT

                IF ( %STATUS <> %SUCCESS )
                    MESSAGE/IDENTIFIER/BELL/WAIT P_02398
                    EXIT( %FAILURE )
                END_IF
                #TOTAL_TAX  = LB_TAX_CONTROL_VT(TOTAL_TAX_AMOUNT)
                #TAX_VAL    = LB_TAX_CONTROL_VT(TOTAL_TAX_AMOUNT)
                #NET_AMT    = LB_TAX_CONTROL_VT(NET_LINE_VALUE)

                #EXPENSED_TAX       = LB_TAX_CONTROL_VT(EXPENSED_TAX_AMOUNT)
                #NON_EXPENSED_TAX   = LB_TAX_CONTROL_VT(NON_EXPENSED_TAX_AMOUNT)

                #LINE_VALUE = #NET_AMT
                #LINE_VAL_EX_TAX = #LINE_VALUE
                #LINE_VARIANCE  = -LB_TAX_CONTROL_VT(INVENTORY_ROUNDING_VARIANCE)
                DISPLAY DEFAULTS
            END_IF
        ELSE
			IF ( #OLD_INVOICE_QUANTITY = #INVOICE_QUANTITY AND #OLD_PURCHASE_COST = PURCHASE_INVOICE_LINES(PURCHASE_COST)) 
				#LINE_VALUE = PURCHASE_INVOICE_LINES(POP_INVOICE_TOTAL_CURRENCY)
			ELSE
				#LINE_VALUE = ROUND(#INVOICE_QTY * PURCHASE_INVOICE_LINES(PURCHASE_COST),#CURRENCY_DECIMAL) * 1.0	
			END_IF
        END_IF
    END_BLOCK

        OUTPUT_BLOCK LINE_VALUE_16 /ROW=10 /COL=24 /LEN=(#CURRENCY_LEN) &
                        /PROMPT=FIELD_PROMPT(POP_INVOICE_TOTAL_CURRENCY) &
                        /SOURCE=(#LINE_VALUE) &
                        /USING=PURCHASE_INVOICE_LINES(POP_INVOICE_TOTAL_CURRENCY) &
                        /OUTPUT_MASK=#CURRENCY_MASK

        BEGIN_BLOCK DISCOUNTING_ROUTINE_17
                #LINE_VALUE = ROUND(#LINE_VALUE,#CURRENCY_DECIMAL) * 1.0

                IF (#LD_IN_USE <> #YES ) GOTO SALES_TAX_23

                OUTPUT_BLOCK  /ROW=11 /COL=24 /LEN=(#CURRENCY_LEN) &
                        /SOURCE=(#LINE_DISCOUNT) &
                        /USING=PURCHASE_INVOICE_LINES(LINE_DISCOUNT) &
                        /OUTPUT_MASK=#CURRENCY_MASK

                #LINE_PERCENT = ROUND(#LINE_DISCOUNT/#LINE_VALUE*100,2) * 1.0
        END_BLOCK

        BEGIN_BLOCK PERCENT_DISCOUNT_18
                IF (#LD_OVERRIDE = #YES )
                        #LINE_PERCENT_OLD = #LINE_PERCENT

                INPUT_BLOCK  /ROW=11 /COL=16 &
                        /TARGET=#LINE_PERCENT &
                        /INPUT_MASK='!-^@0.0@'

                        #LINE_PERCENT = ROUND(#LINE_PERCENT,2) * 1.0

                        IF (#LINE_PERCENT <> 0.0)
                                IF (#LINE_PERCENT < 0 OR #LINE_PERCENT > 99)
                                        MESSAGE/IDENTIFIER/BELL/WAIT P_62139
                                        GOTO PERCENT_DISCOUNT_18
                                END_IF

                                IF (#LINE_PERCENT <> #LINE_PERCENT_OLD) &
                                        #LINE_DISCOUNT = ROUND(#LINE_VALUE*#LINE_PERCENT/100.,#CURRENCY_DECIMAL) * 1.0
                        ELSE
                                #LINE_DISCOUNT = 0
                        END_IF
        END_BLOCK

        BEGIN_BLOCK LINE_DISCOUNT_19
                        #LINE_DISCOUNT_OLD = #LINE_DISCOUNT
                INPUT_BLOCK  /ROW=11 /COL=24 /LEN=(#CURRENCY_LEN) &
                        /TARGET=#LINE_DISCOUNT &
                        /USING=PURCHASE_INVOICE_LINES(LINE_DISCOUNT) &
                        /INPUT_MASK=#CURRENCY_MASK

                        #LINE_DISCOUNT = ROUND(#LINE_DISCOUNT,#CURRENCY_DECIMAL) * 1.0

                        IF (#LINE_DISCOUNT * 1.0 > #LINE_VALUE * 1.0)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_52071
                                GOTO LINE_DISCOUNT_19
                        END_IF

                        IF (#LINE_DISCOUNT <> #LINE_DISCOUNT_OLD)
                                #LINE_PERCENT = ROUND(#LINE_DISCOUNT/#LINE_VALUE*100,2) * 1.0
        END_BLOCK

        BEGIN_BLOCK LINE_DISCOUNT_20
                OUTPUT_BLOCK  /ROW=11 /COL=16 &
                        /PROMPT=(FIELD_PROMPT(LINE_DISCOUNT)) &
                        /SOURCE=(#LINE_PERCENT) &
                        /OUTPUT_MASK="!-^@0.0@"

                        END_IF

                ELSE
                ! No override of line discounts
        END_BLOCK

        OUTPUT_BLOCK PERCENT_21 /ROW=11 /COL=16 &
                        /SOURCE=(#LINE_PERCENT) &
                        /OUTPUT_MASK="!-^@0.0@"

        BEGIN_BLOCK LINE_DISCOUNT_DISPLAY_22
                OUTPUT_BLOCK  /ROW=11 /COL=24 /LEN=(#CURRENCY_LEN) &
                        /SOURCE=(#LINE_DISCOUNT) &
                        /USING=PURCHASE_INVOICE_LINES(LINE_DISCOUNT) &
                        /OUTPUT_MASK=#CURRENCY_MASK

                END_IF
                ! If discount is not able to be changed display it
        END_BLOCK

    BEGIN_BLOCK SALES_TAX_23
        IF (#LINE_VALUE - #LINE_DISCOUNT < 0)
            MESSAGE/IDENTIFIER/BELL/WAIT P_59121
            GOTO LINE_REF_12
        END_IF

        IF (#REGISTRATION_NUMBER <> "" AND #COPY_REGISTER_TAX = #YES)
            #TAX_VAL=0
            #NONEXP_TAX=0
            GOTO TAX_VALUE_24
        END_IF
        !++
        ! If we are     using sales     tax     then get the relevant
        ! tax from the library routine (see     library routine for
        ! details of parameters.
        !--

        IF (#PART_TAXABLE=PARAMETER("LANGUAGE_YES")     AND     &
            PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE)     <> PARAMETER("LANGUAGE_NO"))
            ! Both the address code and the vendor have to be eligible
            ! for tax to be applied.
            #ADDRESS_CODE           = PURCHASE_INVOICE_LINES(DELIVERY_ADDRESS_CODE)
            #SYS_TAXABLE_CODE       = PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE)

            PERFORM CHECK_TAXABLE
            IF (%STATUS <> %NORMAL)
                #TAX_CODE = ""
            END_IF

            IF ((#TAX_BASED_ON = "B") OR (#TAX_BASED_ON = "P"))
                IF (#PRODUCT_TAX_CODE = "") #PRODUCT_TAX_CODE = #DEF_PART_TAX_CODE
            END_IF

            IF ((#TAX_BASED_ON = "B") OR (#TAX_BASED_ON = "V"))
                IF (#TAX_CODE = "") #TAX_CODE = #DEF_VENDOR_TAX_CODE
            END_IF

            PURCHASE_INVOICE_LINES(PRODUCT_TAX_CODE) = #PRODUCT_TAX_CODE
            PURCHASE_INVOICE_LINES(VENDOR_TAX_CODE)  = #TAX_CODE

            PERFORM LOAD_LB_TAX_CONTROL_VT
            #TAX_RATE_CHANGED = ""
            #ERROR_OCCURRED   = 0
            #ERROR_MESSAGE    = ""

            PERFORM "GEMLB:LB_L_TAX_CONTROL" ( #TAX_MODE, &
                            #ERROR_OCCURRED, &
                            #ERROR_MESSAGE, &
                            #TAX_RATE_CHANGED )

            IF ( %STATUS <> %SUCCESS OR #ERROR_OCCURRED )
                IF ( #ERROR_MESSAGE <> "" )
                    ERROR/TEXT_ONLY/WAIT #ERROR_MESSAGE
                ELSE
                    MESSAGE/IDENTIFIER/BELL/WAIT P_02398
                END_IF
                EXIT( %FAILURE )
            ELSE
                FIND IN LB_TAX_CONTROL_VT

                IF ( %STATUS <> %SUCCESS )
                    MESSAGE/IDENTIFIER/BELL/WAIT P_02398
                    EXIT( %FAILURE )
                END_IF

                #TOTAL_TAX  = LB_TAX_CONTROL_VT(TOTAL_TAX_AMOUNT)
                #TAX_VAL    = LB_TAX_CONTROL_VT(TOTAL_TAX_AMOUNT)
                #NET_AMT    = LB_TAX_CONTROL_VT(NET_LINE_VALUE)

                #EXPENSED_TAX       = LB_TAX_CONTROL_VT(EXPENSED_TAX_AMOUNT)
                #NON_EXPENSED_TAX   = LB_TAX_CONTROL_VT(NON_EXPENSED_TAX_AMOUNT)
                #LINE_VARIANCE      = -LB_TAX_CONTROL_VT(INVENTORY_ROUNDING_VARIANCE)

                #SYS_E_TAX_VAL = #EXPENSED_TAX
                #SYS_N_TAX_VAL = #NON_EXPENSED_TAX
            END_IF

            PURCHASE_INVOICE_LINES(PRODUCT_TAX_CODE)= #PRODUCT_TAX_CODE
            PURCHASE_INVOICE_LINES(VENDOR_TAX_CODE) = #TAX_CODE
            PURCHASE_INVOICE_LINES(SYS_E_TAX_VAL)   = #SYS_E_TAX_VAL
            PURCHASE_INVOICE_LINES(SYS_N_TAX_VAL)   = #SYS_N_TAX_VAL

            #TAX_MODE   = "R"
            #NONEXP_TAX = #SYS_N_TAX_VAL

            IF (%STATUS=%BACK OR %STATUS=%EXIT)
            IF (#LD_IN_USE=PARAMETER("LANGUAGE_YES")) GOTO LINE_DISCOUNT_19
            GOTO INVOICE_QUANTITY
            END_IF
        ELSE
            #TAX_VAL    = 0.0
            #NONEXP_TAX = 0.0
            #SYS_E_TAX_VAL = 0.0
            #SYS_N_TAX_VAL = 0.0
            MESSAGE/IDENTIFIER/WAIT P_66094
        END_IF

        ! If we are using sales tax then get the relevant
        ! tax from the library routine (see library routine for
        ! details of parameters.

        IF (PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE) = PARAMETER("VENDOR_TAX_ACCRUE"))
            #ACCRUAL_INDICATOR="*"
        ELSE
            #ACCRUAL_INDICATOR=" "
        END_IF
        IF (PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE) = PARAMETER("VENDOR_TAX_ACCRUE") AND #ACCRUE_IGIC = #YES)
            #ACCRUAL_INDICATOR = "*"
        END_IF
    END_BLOCK

        OUTPUT_BLOCK TAX_VALUE_24 /ROW=12 /COL=24 /LEN=(#CURRENCY_LEN) &
                        /PROMPT=(MESSAGE("P_00648")) &
                        /SOURCE=(#TAX_VAL) &
                        /USING=PURCHASE_INVOICE_LINES(TAX_VAL) &
                        /OUTPUT_MASK=#CURRENCY_MASK

        OUTPUT_BLOCK ASTERISK /ROW=12 /COL=43 &
                        /SOURCE=(#ACCRUAL_INDICATOR) &
                        /ATTRIBUTES=NONE

                BEGIN_BLOCK SALES_TAX_23B
                IF( #OLD_TAX_VAL <> #TAX_VAL) GOTO TAX_RETAINERS_CODE
                IF (#OPT = "TAX") GOTO LINE_VALUE_25
        END_BLOCK

        BEGIN_BLOCK TAX_RETAINERS_CODE

                IF (#REGISTRATION_NUMBER <> "" AND #COPY_REGISTER_RETAINERS = #YES) GOTO TEN99_CODE
                        IF (#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
                                #DIV_TAX_RETAINERS_FLAG = #YES AND &
                                (#VENDOR_TAX_RETAINERS_FLAG=#YES OR #PAYEE_TAX_RETAINERS_FLAG=#YES))

                                #TAX_RETAINERS_MODE = "R"
                                #TITLE = ""
                                IF( #OLD_LINE_VALUE <> 0.0 AND &
                                        (#OLD_LINE_VALUE <> #LINE_VALUE OR &
                                        #OLD_DISCOUNT <> #LINE_DISCOUNT OR &
                                        #OLD_TAX_VAL <> #TAX_VAL))

                                        #TAX_RETAINERS_MODE = "V"
                                END_IF
                                #OLD_LINE_VALUE = #LINE_VALUE
                                #OLD_DISCOUNT = #LINE_DISCOUNT

                                PERFORM  "GEMLB:LB_TAX_RETAINERS_DETAILS" ( &
                                        (#TAX_RETAINERS_MODE), &
                                        (#COMPANY_CODE), &
                                        (#DIVISION), &
                                        (#VENDOR_NUMBER), &
                                        (PURCHASE_INVOICES(PAYEE_NUMBER)), &
                                        (#VENDOR_TAX_RETAINERS_FLAG), &
                                        (#PAYEE_TAX_RETAINERS_FLAG), &
                                        (#LINE_VALUE-#LINE_DISCOUNT), &
                                        (#TAX_VAL), &
                                        (#BASE_CURRENCY_DECIMAL), &
                                        (#CURRENCY_MASK), &
                                        (#TITLE), &
                                        #RETAINERS_VAL, &
                                        #ERROR_CODE, &
                                        #ERROR_MSG)

                                IF (%STATUS = %FAILURE)
                                        EXIT (%FAILURE)
                                END_IF

                                IF (%STATUS = %BACK OR %STATUS = %EXIT)
                                        IF (#LD_IN_USE=#YES)
                                                GOTO LINE_DISCOUNT_19
                                        ELSE
                                                GOTO INVOICE_QUANTITY
                                        END_IF
                                END_IF
                        ELSE
                                #RETAINERS_VAL = 0
                        END_IF

        END_BLOCK

        OUTPUT_BLOCK TOTAL_TAX_RETAINERS /ROW=13 /COL=24 /LEN=(#CURRENCY_LEN) &
                        /PROMPT=(MESSAGE("P_91439")) &
                        /SOURCE=(#RETAINERS_VAL) &
                        /USING=AP_TRANSACTIONS(SYS_TAX_RETAINERS_CURRENCY) &
                        /OUTPUT_MASK=(#CURRENCY_MASK) &
                        /USE_IF=(#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
                                #DIV_TAX_RETAINERS_FLAG = #YES AND &
                                (#VENDOR_TAX_RETAINERS_FLAG=#YES OR #PAYEE_TAX_RETAINERS_FLAG=#YES))

        BEGIN_BLOCK SAVE_TAX_RETAINERS
                PURCHASE_INVOICE_LINES(SYS_TAX_RETAINERS_CURRENCY) = #RETAINERS_VAL
                IF (#CURRENCY_RATIO_INDIC = (PARAMETER("MULTIPLY_RATIO_INDIC")))
                        PURCHASE_INVOICE_LINES(SYS_TAX_RETAINERS_BASE)= &
                                ROUND(#RETAINERS_VAL * #CURRENCY_RATE,#BASE_CURRENCY_DECIMAL)
                ELSE
                        PURCHASE_INVOICE_LINES(SYS_TAX_RETAINERS_BASE)= &
                                ROUND(#RETAINERS_VAL / #CURRENCY_RATE,#BASE_CURRENCY_DECIMAL)
                END_IF
        END_BLOCK

        BEGIN_BLOCK LINE_VALUE_25
                IF (PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE) = PARAMETER("VENDOR_TAX_COLLECT"))
                        #NET_VALUE = #LINE_VALUE - #LINE_DISCOUNT + #TAX_VAL
                ELSE
                        #NET_VALUE = #LINE_VALUE - #LINE_DISCOUNT
                END_IF
                IF (#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
                        #DIV_TAX_RETAINERS_FLAG = #YES AND &
                        (#VENDOR_TAX_RETAINERS_FLAG=#YES OR #PAYEE_TAX_RETAINERS_FLAG=#YES))

                        #NET_VALUE = #NET_VALUE - #RETAINERS_VAL
                ELSE
                        #NET_VALUE = #NET_VALUE
                END_IF

                OUTPUT_BLOCK  /ROW=14 /COL=24 /LEN=(#CURRENCY_LEN) &
                        /PROMPT=MESSAGE("P_00680") &
                        /SOURCE=#NET_VALUE &
                        /USING=PURCHASE_INVOICES(POP_INVOICE_TOTAL_CURRENCY) &
                        /OUTPUT_MASK=#CURRENCY_MASK

                #CHECK_NET = #LINE_VALUE - #LINE_DISCOUNT + #TAX_VAL

                IF (#SECURITY_ACTIVE = #YES AND #CHECK_NET > #TRANSACTION_MAX)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_00872
                        GOTO INVOICE_QUANTITY
                END_IF
        END_BLOCK

        BEGIN_BLOCK TEN99_CODE

                IF (#TEN99_IN_USE = #YES)

                        PERFORM "GEMLB:LB_TEN99_ANALYSIS" ( &
                                        #TEN99_MODE, &
                                        #DEF_TEN99_FORM, &
                                        #DEF_TEN99_AMT_TYPE, &
                                        (#NET_VALUE), &
                                        "", &
                                        #CURRENCY_DECIMAL, &
                                        #CURRENCY_MASK, &
                                        PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_NUMBER),&
                                        PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE),&
                                        "")

                        #TEN99_MODE = "M"

                        IF (%STATUS = %BACK OR %STATUS = %EXIT)
                                IF (#LD_IN_USE=#YES)
                                        GOTO LINE_DISCOUNT_19
                                ELSE
                                        GOTO INVOICE_QUANTITY
                                END_IF
                        END_IF
                END_IF
        END_BLOCK

        BEGIN_BLOCK EC_REPORTING_26
                IF (#OPT <> "EC_REP" AND #OPT <> "") GOTO CHECK_GL_POSTINGS_27

                IF (#LINE_EC_REPORT_TYPE <> "")
                        #LINE_WEIGHT = PRODUCT_MASTER(WEIGHT_GROSS)
                        IF   (PURCHASE_INVOICE_LINES(POP_INVOICE_TOTAL_CURRENCY) <> #LINE_VALUE) &
                                        #EC_STATISTICAL_VALUE   = ROUND((#LINE_VALUE * #EC_STAT_FACTOR),#CURRENCY_DECIMAL)

                        PERFORM "GEMLB:LB_EC_REPORTING" &
                                (#EC_MODE, &
                                 #LINE_EC_REPORT_TYPE, &
                                 (PURCHASE_INVOICE_LINES(UNIT_PUR)), &
                                 #COMPANY_CODE, &
                                 (#PART_CODE), &
                                 (#INVOICE_QUANTITY), &
                                 (#WAREHOUSE), &
                                 (PRODUCT_MASTER(WEIGHT_UOM)), &
                                 (#LINE_WEIGHT), &
                                 (#CORPORATE_ADDRESS_CODE), &
                                 (#CURRENCY_MASK), &
                                 "", &
                                 #EC_PROCESSED_INDICATOR, &
                                 #EC_TRANSACTION_TYPE, &
                                 #EC_TARIFF_CODE, &
                                 #EC_COUNTRY_OF_ORIGIN, &
                                 #EC_SUPP_UNIT_QTY, &
                                 #EC_WEIGHT, &
                                 #EC_MODE_TRANSPORT, &
                                 #EC_DELIVERY_TERMS, &
                                 #EC_STATISTICAL_VALUE, &
                                 #EC_ANALYSIS_1, &
                                 #EC_ANALYSIS_2, &
                                 #EC_ANALYSIS_3, &
                                 #EC_ANALYSIS_4, &
                                 #EC_ANALYSIS_5, &
                                 "","","")

                        IF (#EC_TARIFF_CODE = "00000000000")
                                PURCHASE_INVOICE_LINES(SYS_EC_STATISTICS_APPLICABLE) = #NO
                        ELSE
                                PURCHASE_INVOICE_LINES(SYS_EC_STATISTICS_APPLICABLE) = #YES
                        END_IF

                        PURCHASE_INVOICE_LINES(SYS_EC_PROCESSED_INDICATOR)= #EC_PROCESSED_INDICATOR
                        PURCHASE_INVOICE_LINES(SYS_EC_TRANSACTION_TYPE) = #EC_TRANSACTION_TYPE
                        PURCHASE_INVOICE_LINES(SYS_TARIFF_CODE)         = #EC_TARIFF_CODE
                        PURCHASE_INVOICE_LINES(SYS_COUNTRY_OF_ORIGIN)   = #EC_COUNTRY_OF_ORIGIN
                        PURCHASE_INVOICE_LINES(SYS_EC_SUPP_UNIT_QTY)    = #EC_SUPP_UNIT_QTY
                        PURCHASE_INVOICE_LINES(SYS_EC_WEIGHT)           = #EC_WEIGHT
                        PURCHASE_INVOICE_LINES(SYS_EC_MODE_OF_TRANSPORT)= #EC_MODE_TRANSPORT
                        PURCHASE_INVOICE_LINES(SYS_EC_DELIVERY_TERMS)   = #EC_DELIVERY_TERMS
                        PURCHASE_INVOICE_LINES(SYS_EC_STATISTICAL_VALUE)        = #EC_STATISTICAL_VALUE
                        PURCHASE_INVOICE_LINES(SYS_EC_ANALYSIS_1)               = #EC_ANALYSIS_1
                        PURCHASE_INVOICE_LINES(SYS_EC_ANALYSIS_2)               = #EC_ANALYSIS_2
                        PURCHASE_INVOICE_LINES(SYS_EC_ANALYSIS_3)               = #EC_ANALYSIS_3
                        PURCHASE_INVOICE_LINES(SYS_EC_ANALYSIS_4)               = #EC_ANALYSIS_4
                        PURCHASE_INVOICE_LINES(SYS_EC_ANALYSIS_5)               = #EC_ANALYSIS_5
                        #EC_MODE = "M"
                END_IF

                IF (#OPT = "EC_REP") GOTO LINE_MENU_29
        END_BLOCK

        BEGIN_BLOCK CHECK_GL_POSTINGS_27
                        ! If theres been no changes, skip postings
                #TAX_CHANGED = #NO
                PERFORM CHECK_FOR_CHANGED_TAX_DETAILS (#PURCHASE_INVOICE_LINE)

                IF (%STATUS = %EMPTY AND #TAX_VAL<>0.0)
                        #TAX_CHANGED = #YES
                END_IF

                IF (#TAX_CHANGED=#NO AND #NET_VALUE = #OLD_NET_VALUE AND &
                        #TAX_VAL = PURCHASE_INVOICE_LINES(SYS_E_TAX_VAL) + #NONEXP_TAX AND &
						#OLD_PROJECT = PURCHASE_INVOICE_LINES(PA_PROJECT_CODE) AND &
						#OLD_WBS_NUMBER = PURCHASE_INVOICE_LINES(PA_WBS_NUMBER))
                        GOTO LINE_MENU_29
                END_IF

        IF (#WAREHOUSED_FLAG = #YES) 
            ! Don't allow to modify or split the GL Distribution
            #MOD_OPTION = 3
        ELSE
            #MOD_OPTION = 1
        END_IF 

        END_BLOCK

        BEGIN_BLOCK RECALC_GL_POSTINGS_28
				IF ( #PRICING_METHOD_STATE = #PRICING_METHOD_OPTIONAL &
				AND #PRICING_METHOD = #PRICING_METHOD_INCLUSIVE )
					#LINE_VAL_EX_TAX = ROUND(#LINE_VAL_EX_TAX, #CURRENCY_DECIMAL)
				ELSE
					#LINE_VAL_EX_TAX	= ROUND( #INVOICE_QTY * PURCHASE_INVOICE_LINES(PURCHASE_COST), #CURRENCY_DECIMAL )
				END_IF
                ! KR p44 is now quantity field i.e. QTY_ACCEPTED,
                ! QTY_IN_QUALITY_CONTROL so posting accounts for GRNI are
                ! correct.
                !

                ! vary some parameter values for this program depending on
                ! the invoice line:
                IF (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE_TYPE) &
                                        = PARAMETER("LINE_TYPE_NONSTOCK"))

                        !Qty for a nonstock part
                        #INVOICE_QTY = #INVOICE_QUANTITY

                        !UOM used for figuring nonstandard cost variance
                        !Nonstock UOM not needed; leave blank to fill parameter.
                        #INVOICE_QTY_UOM = ""

                ELSE
                        ! product is stocked
                        IF (PURCHASE_INVOICE_LINES(IC_NOMINATED_UNIT) = #COSTING_UNIT OR &
                        #UOM_TYPE = PARAMETER("IC_SINGLE_UOM_CONTROL"))

                                #INVOICE_QTY &
                                   = PURCHASE_INVOICE_LINES(IC_NOMINATED_QTY)

                                !UOM used for figuring nonstandard cost variance
                                #INVOICE_QTY_UOM &
                                   = PURCHASE_INVOICE_LINES(IC_NOMINATED_UNIT)

                        ELSE

                                #INVOICE_QTY &
                                   = PURCHASE_INVOICE_LINES(IC_OTHER_INVENTORY_QTY)

                                !UOM used for figuring nonstandard cost variance
                                #INVOICE_QTY_UOM &
                                   = PURCHASE_INVOICE_LINES(IC_OTHER_INVENTORY_UNIT)

                        END_IF
                END_IF

                #GRN_IC_STATUS_CODE = PURCHASE_INVOICE_LINES(IC_STATUS_CODE)

                PERFORM INVENTORY_REVALUATION          

                IF ( #PRICING_METHOD_STATE = #PRICING_METHOD_OPTIONAL &
                        AND #PRICING_METHOD = #PRICING_METHOD_INCLUSIVE )
                        #LINE_VAL_EX_TAX = ROUND(#LINE_VAL_EX_TAX, #CURRENCY_DECIMAL)
				END_IF
			
        IF ( #SYS_E_TAX_VAL = 0.0 &
            AND #NONEXP_TAX = 0.0 ) #LINE_VARIANCE  = 0.0

		#COPY_PA_FROM_PO = #YES
		
        FIND IN POP_HEADERS &
	        /LOCK=NONE &
			/SECONDARY &
			/STREAM_NAME=POPH &
	        /WITH=COMPANY_CODE = GOODS_RECEIVED_HEADERS(COMPANY_CODE) &
	        /WITH=DIVISION = GOODS_RECEIVED_HEADERS(DIVISION) &
	        /WITH=PO_NUMBER = GOODS_RECEIVED_HEADERS(DEFAULT_PO_NUMBER)

        FIND IN POP_LINES &
	        /LOCK=NONE &
			/SECONDARY &
			/STREAM_NAME=POPL &
	        /WITH=COMPANY_CODE = GOODS_RECEIVED_HEADERS(COMPANY_CODE) &
	        /WITH=DIVISION = GOODS_RECEIVED_HEADERS(DIVISION) &
	        /WITH=PO_NUMBER = GOODS_RECEIVED_HEADERS(DEFAULT_PO_NUMBER) &
			/WITH=PO_LINE_NUMBER = GOODS_RECEIVED_LINES(PO_LINE_NUMBER)

		IF ( (PURCHASE_INVOICES(PA_WBS_NUMBER) <> POPH:POP_HEADERS(PA_WBS_NUMBER)) OR (PURCHASE_INVOICE_LINES(PA_WBS_NUMBER) <> POPL:POP_LINES(PA_WBS_NUMBER))) 
			#COPY_PA_FROM_PO = #NO		
		END_IF

                PERFORM "GEMPOP:POP_L_DEF_INVOICE_POSTINGS" ( &
                                (PARAMETER("LANGUAGE_YES")), &
                                (PURCHASE_INVOICE_LINES(COMPANY_CODE)), &
                                (PURCHASE_INVOICE_LINES(DIVISION)), &
                                (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_NUMBER)), &
                                (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE)), &
                                (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE_TYPE)), &
                                (PURCHASE_INVOICE_LINES(PART_CODE)), &
                                (PURCHASE_INVOICE_LINES(WAREHOUSE)), &
                                (#INVOICE_QTY), &
                                (#LINE_VAL_EX_TAX), &
                                (#LINE_DISCOUNT), &
                                (#SYS_E_TAX_VAL), &
                                (#NONEXP_TAX), &
                                (#RETAINERS_VAL), &
                                (PURCHASE_INVOICES(VENDOR_INVOICE_NUMBER)), &
                                (PURCHASE_INVOICES(POP_COMMITMENT_PERIOD)), &
                                (PURCHASE_INVOICES(POP_COMMITMENT_YEAR)), &
                                (PURCHASE_INVOICES(COST_CENTER)), &
                                (PURCHASE_INVOICES(INVOICE_DATE)), &
                                (PURCHASE_INVOICE_LINES(VENDOR_NUMBER)), &
                                "V", &
                                (PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE)), &
                                (PARAMETER("LANGUAGE_NO")), &
                                "0", &
                                "0", &
                                "0", &
                                "", &
                                "0", &
                                "0", &
                                "0", &
                                "", &
                                (#COPY_REGISTER_TAX), &
                                (#COPY_REGISTER_RETAINERS), &
                                "0", &
                                "0", &
                                "0", &
                                "0", &
                                (PURCHASE_INVOICE_LINES(VENDOR_NUMBER)), &
                                "G", &
                                (GOODS_RECEIVED_LINES(PO_NUMBER)), &
                                (GOODS_RECEIVED_LINES(PO_LINE_NUMBER)), &
                                (PURCHASE_INVOICE_LINES(INVOICE_QUANTITY)), &
!                                (GOODS_RECEIVED_LINES(POP_NORMAL_RECEIPT_STATUS)), &
                                (#CURRENT_STATUS_CODE), &
                                PURCHASE_INVOICE_LINES(DELIVERY_ADDRESS_CODE),  &
                                (PARAMETER("STATUS_LIVE")), &
                                PURCHASE_INVOICES(POSTING_DATE), &
                                (PURCHASE_INVOICES(INTERCOMPANY_POSTINGS)), &
                                (PURCHASE_INVOICE_LINES(IC_LOT_NUMBER)), &
                                (#INVOICE_QTY_UOM), &
                                (#CURRENT_STD_COST_AT_GRN), &
                                (#PRICING_METHOD), &
                                (#LINE_VARIANCE), &
                                (#PROJECT), &
                                (#WBS_NUMBER), &
                                #R1, &
								#COPY_PA_FROM_PO)

                IF (%STATUS=%FAILURE)
                        ERROR/TEXT_ONLY/WAIT/BELL #R1
                        EXIT(%FAILURE)
                END_IF

        END_BLOCK

        BEGIN_BLOCK GL_POSTINGS_28
                ! Skip, if there are no postings for the line
                ! unless the GL line menu option is specifically selected
                IF(#LINE_VALUE=0 AND #OPT<>"POST")
                ! If new line value is zero, goto delete old PURCHASE_INVOICE_GL_POSTINGS
                     ! START_STREAM DR &
                        ! /TABLE=PURCHASE_INVOICE_GL_POSTINGS &
                        ! /LOCK=WRITE &
                        ! /WITH=COMPANY_CODE=PURCHASE_INVOICE_LINES(COMPANY_CODE) &
                        ! /WITH=DIVISION=PURCHASE_INVOICE_LINES(DIVISION) &
                        ! /WITH=PURCHASE_INVOICE_NUMBER= PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_NUMBER) &
                        ! /WITH=PURCHASE_INVOICE_LINE= PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE)

                    ! WHILE (1)

                        ! FETCH DR /FAILURE=(CONTINUE OUT)

                            ! DELETE FROM PURCHASE_INVOICE_GL_POSTINGS

                            ! IF (%STATUS = %FAILURE)
                                ! MESSAGE/IDENTIFIER/BELL/WAIT P_62111
                                ! EXIT(%FAILURE)
                            ! END_IF
                    ! END_WHILE


                     GOTO LINE_MENU_29
                END_IF

                PERFORM "GEMPOP:POP_L_MAINTAIN_INVOICE_GLPS" ( &
                        (#COMPANY_CODE), &
                        (#DIVISION), &
                        (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_NUMBER)), &
                        (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE)), &
                        (PURCHASE_INVOICES(COST_CENTER)), &
                        "", &
                        (PURCHASE_INVOICES(INVOICE_DATE)), &
                        (PURCHASE_INVOICES(VENDOR_INVOICE_NUMBER)), &
                        "", &
                        (PURCHASE_INVOICES(POP_COMMITMENT_PERIOD)), &
                        (PURCHASE_INVOICES(POP_COMMITMENT_YEAR)), &
                        (PURCHASE_INVOICES(VENDOR_NUMBER)), &
                        (#INVOICE_QTY), &
                        (#LINE_VALUE), &
                        (#LINE_DISCOUNT), &
                        (#SYS_E_TAX_VAL), &
                        (#NONEXP_TAX), &
                        (#RETAINERS_VAL), &
                        (PURCHASE_INVOICES(INTERCOMPANY_POSTINGS)), &
                        (#ALLOW_NEGATIVES), &
                        (#MODIFY_GL_CONTROL), &
                        "V", &
                        (#SYS_TAXABLE_CODE), &
                        "0", &
                        "0", &
                        "0", &
                        "", &
                        "0", &
                        "0", &
                        "0", &
                        "", &
                        "0", &
                        "0", &
                        "0", &
                        "0", &
                         #R1, &
                         (""), &
                         (#MOD_OPTION), &
                         (#PROJECT),&
                         (#WBS_NUMBER))

                IF      (%STATUS=%FAILURE)
                        ERROR/TEXT_ONLY/WAIT/BELL #R1
                        EXIT(%FAILURE)
                END_IF
        END_BLOCK

        BEGIN_BLOCK LINE_MENU_29
                IF (#SECURITY_ACTIVE = #YES AND #NET_VALUE > #TRANSACTION_MAX)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_00872
                        GOTO INVOICE_QUANTITY
                END_IF

                #OLD_NET_VALUE = #NET_VALUE
                #OLD_TAX_VAL = #TAX_VAL
                #OLD_RETAINERS_VAL = #RETAINERS_VAL

        IF ( #OPT = "TAX" &
            AND #PRICING_METHOD = #PRICING_METHOD_INCLUSIVE &
            AND #TAX_RATE_CHANGED = #YES )

            GOTO PURCHASE_PRICE_14
        END_IF

                #OPT            = ""

                PERFORM LINE_MENU
                IF (%STATUS = %BACK OR %STATUS =%EXIT)
                        EXIT(%BACK)
                END_IF

                IF (#OPT="TAX") GOTO SALES_TAX_23
                IF (#OPT="TAX_RET") GOTO TAX_RETAINERS_CODE
                IF (#OPT = "CODES")
                        OUTPUT_BLOCK /ROW=5 /COL=38 &
                                /PROMPT=(MESSAGE("P_00214")) &
                                /SOURCE=(PURCHASE_INVOICE_LINES(DELIVERY_ADDRESS_CODE))

                        #OPT = "TAX"
                        GOTO SALES_TAX_23

                END_IF

                IF (#OPT = "LINE")              GOTO LINE_REF_12
                IF (#OPT = "NEXT")              EXIT(%SUCCESS)
                IF (#OPT = "MENU")              GOTO LINE_MENU_29
                IF (#OPT = "EC_REP")            GOTO EC_REPORTING_26
                IF (#OPT = "POST")
                    IF (#WAREHOUSED_FLAG = #YES) 
                        ! Allow to modify but not split the GL Distribution
                        #MOD_OPTION = 2
                    ELSE
                        #MOD_OPTION = 1
                    END_IF 
                    GOTO GL_POSTINGS_28
                 END_IF
                IF (#OPT = "INQ")               GOTO GRN_INQ_30

                GOTO LINE_MENU_29
                !Perform the end of line menu and based on the results
                ! charge off and perform the relevant routine
        END_BLOCK

        BEGIN_BLOCK GRN_INQ_30
                PERFORM "GEMPOP:POP_I_GOODS_RECEIVED" LINK_ENTRY &
                        (#COMPANY_CODE,#DIVISION,PURCHASE_INVOICE_LINES(GRN_NUMBER))

                GOTO LINE_MENU_29
        END_BLOCK

END_FORM


FORM LINE_MENU /ROW=13 /COL=69 /HEIGHT=4 /WIDTH=2 &
        /ATTRIBUTES=NOBORDER

        MENU_BLOCK MENU_1_TEN99 /ROW=2 /COL=1 &
                /TITLE=("") &
                /SOURCE=(MESSAGE("P_00432")) /NOREPEAT &
                /BACK=(EXIT(%BACK)) &
                /EXIT=(EXIT(%EXIT)) &
                /ITEM=(MESSAGE("P_00108")),(""),(PERFORM COMMENTS) &
                /ITEM=(MESSAGE("P_24001")),(""),(PERFORM ADDITIONAL_DESCRIPTION) &
                /ITEM=(MESSAGE("P_00107")),(""),(PERFORM LINE_CODES) &
                /ITEM=(MESSAGE("P_82345")),(""),(#OPT="TAX") &
                /ITEM_IF=(#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
                        #DIV_TAX_RETAINERS_FLAG = #YES AND &
                        (#VENDOR_TAX_RETAINERS_FLAG=#YES OR #PAYEE_TAX_RETAINERS_FLAG=#YES)), &
                        (MESSAGE("P_91792")),(""),(#OPT="TAX_RET") &
                /ITEM=(MESSAGE("P_30350")),(""),(PERFORM TEN99_DETAILS) &
                /ITEM=(MESSAGE("P_00295")),(""),(#OPT="POST") &
                /ITEM=(MESSAGE("P_24135")),(""),(#OPT="LINE") &
                /ITEM=(MESSAGE("P_01864")),(""),(#OPT="INQ") &
                /ITEM=(MESSAGE("P_00432")),(""),(#OPT="NEXT") &
                /USE_IF=(PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE_TYPE) &
                        = #LINE_TYPE_STOCK &
                        AND #PRICE_OVERRIDE = #YES &
                        AND #LINE_EC_REPORT_TYPE = "" &
                        AND (#TEN99_IN_USE = #YES) &
                        AND (PARAMETER("TEN99_IN_USE") = #YES))

        MENU_BLOCK MENU_1_NOTEN99 /ROW=3 /COL=1 &
                /TITLE=("") &
                /SOURCE=(MESSAGE("P_00432")) /NOREPEAT &
                /BACK=(EXIT(%BACK)) &
                /EXIT=(EXIT(%EXIT)) &
                /ITEM=(MESSAGE("P_00108")),(""),(PERFORM COMMENTS) &
                /ITEM=(MESSAGE("P_24001")),(""),(PERFORM ADDITIONAL_DESCRIPTION) &
                /ITEM=(MESSAGE("P_00107")),(""),(PERFORM LINE_CODES) &
                /ITEM=(MESSAGE("P_82345")),(""),(#OPT="TAX") &
                /ITEM_IF=(#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
                        #DIV_TAX_RETAINERS_FLAG = #YES AND &
                        (#VENDOR_TAX_RETAINERS_FLAG=#YES OR #PAYEE_TAX_RETAINERS_FLAG=#YES)), &
                        (MESSAGE("P_91792")),(""),(#OPT="TAX_RET") &
                /ITEM=(MESSAGE("P_00295")),(""),(#OPT="POST") &
                /ITEM=(MESSAGE("P_24135")),(""),(#OPT="LINE") &
                /ITEM=(MESSAGE("P_01864")),(""),(#OPT="INQ") &
                /ITEM=(MESSAGE("P_00432")),(""),(#OPT="NEXT") &
                /USE_IF=(PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE_TYPE)&
                        = #LINE_TYPE_STOCK &
                        AND #PRICE_OVERRIDE = #YES &
                        AND #LINE_EC_REPORT_TYPE = "" &
                        AND ((#TEN99_IN_USE <> #YES) &
                        OR (PARAMETER("TEN99_IN_USE") <> #YES)))

        MENU_BLOCK MENU_2_TEN99 /ROW=1 /COL=1 &
                /TITLE=("") &
                /SOURCE=(MESSAGE("P_00432")) /NOREPEAT &
                /BACK=(EXIT(%BACK)) &
                /EXIT=(EXIT(%EXIT)) &
                /ITEM=(MESSAGE("P_00108")),(""),(PERFORM COMMENTS) &
                /ITEM=(MESSAGE("P_24001")),(""),(PERFORM ADDITIONAL_DESCRIPTION) &
                /ITEM=(MESSAGE("P_00107")),(""),(PERFORM LINE_CODES) &
                /ITEM=(MESSAGE("P_82345")),(""),(#OPT="TAX") &
                /ITEM_IF=(#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
                        #DIV_TAX_RETAINERS_FLAG = #YES AND &
                        (#VENDOR_TAX_RETAINERS_FLAG=#YES OR #PAYEE_TAX_RETAINERS_FLAG=#YES)), &
                        (MESSAGE("P_91792")),(""),(#OPT="TAX_RET") &
                /ITEM=(MESSAGE("P_30350")),(""),(PERFORM TEN99_DETAILS) &
                /ITEM=(MESSAGE("P_00295")),(""),(#OPT="POST") &
                /ITEM=(MESSAGE("P_02055")),(""),(#OPT="EC_REP") &
                /ITEM=(MESSAGE("P_24135")),(""),(#OPT="LINE") &
                /ITEM=(MESSAGE("P_01864")),(""),(#OPT="INQ") &
                /ITEM=(MESSAGE("P_00432")),(""),(#OPT="NEXT") &
                /USE_IF=(PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE_TYPE)&
                         = #LINE_TYPE_STOCK &
                        AND #PRICE_OVERRIDE = #YES &
                        AND #LINE_EC_REPORT_TYPE <> "" &
                        AND (#TEN99_IN_USE = #YES) &
                        AND (PARAMETER("TEN99_IN_USE") = #YES))

        MENU_BLOCK MENU_2_NOTEN99 /ROW=2 /COL=1 &
                /TITLE=("") &
                /SOURCE=(MESSAGE("P_00432")) /NOREPEAT &
                /BACK=(EXIT(%BACK)) &
                /EXIT=(EXIT(%EXIT)) &
                /ITEM=(MESSAGE("P_00108")),(""),(PERFORM COMMENTS) &
                /ITEM=(MESSAGE("P_24001")),(""),(PERFORM ADDITIONAL_DESCRIPTION) &
                /ITEM=(MESSAGE("P_00107")),(""),(PERFORM LINE_CODES) &
                /ITEM=(MESSAGE("P_82345")),(""),(#OPT="TAX") &
                /ITEM_IF=(#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
                        #DIV_TAX_RETAINERS_FLAG = #YES AND &
                        (#VENDOR_TAX_RETAINERS_FLAG=#YES OR #PAYEE_TAX_RETAINERS_FLAG=#YES)), &
                        (MESSAGE("P_91792")),(""),(#OPT="TAX_RET") &
                /ITEM=(MESSAGE("P_00295")),(""),(#OPT="POST") &
                /ITEM=(MESSAGE("P_02055")),(""),(#OPT="EC_REP") &
                /ITEM=(MESSAGE("P_24135")),(""),(#OPT="LINE") &
                /ITEM=(MESSAGE("P_01864")),(""),(#OPT="INQ") &
                /ITEM=(MESSAGE("P_00432")),(""),(#OPT="NEXT") &
                /USE_IF=(PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE_TYPE)&
                         = #LINE_TYPE_STOCK &
                        AND #PRICE_OVERRIDE = #YES &
                        AND #LINE_EC_REPORT_TYPE <> "" &
                        AND ((#TEN99_IN_USE <> #YES) &
                        OR (PARAMETER("TEN99_IN_USE") <> #YES)))

        MENU_BLOCK MENU_3_TEN99 /ROW=2 /COL=1 &
                /TITLE=("") &
                /SOURCE=(MESSAGE("P_00432")) /NOREPEAT &
                /ITEM=(MESSAGE("P_00108")),(""),(PERFORM COMMENTS) &
                /ITEM=(MESSAGE("P_24001")),(""),(PERFORM ADDITIONAL_DESCRIPTION) &
                /ITEM=(MESSAGE("P_00107")),(""),(PERFORM LINE_CODES) &
                /ITEM=(MESSAGE("P_82345")),(""),(#OPT="TAX") &
                /ITEM_IF=(#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
                        #DIV_TAX_RETAINERS_FLAG = #YES AND &
                        (#VENDOR_TAX_RETAINERS_FLAG=#YES OR #PAYEE_TAX_RETAINERS_FLAG=#YES)), &
                        (MESSAGE("P_91792")),(""),(#OPT="TAX_RET") &
                /ITEM=(MESSAGE("P_30350")),(""),(PERFORM TEN99_DETAILS) &
                /ITEM=(MESSAGE("P_00295")),(""),(#OPT="POST") &
                /ITEM=(MESSAGE("P_24135")),(""),(#OPT="LINE") &
                /ITEM=(MESSAGE("P_01864")),(""),(#OPT="INQ") &
                /ITEM=(MESSAGE("P_00432")),(""),(#OPT="NEXT") &
                /USE_IF=(PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE_TYPE)&
                        = #LINE_TYPE_STOCK &
                        AND #PRICE_OVERRIDE <> #YES &
                        AND #LINE_EC_REPORT_TYPE = "" &
                        AND (#TEN99_IN_USE = #YES) &
                        AND (PARAMETER("TEN99_IN_USE") = #YES))

        MENU_BLOCK MENU_3_NOTEN99 /ROW=3 /COL=1 &
                /TITLE=("") &
                /SOURCE=(MESSAGE("P_00432")) /NOREPEAT &
                /ITEM=(MESSAGE("P_00108")),(""),(PERFORM COMMENTS) &
                /ITEM=(MESSAGE("P_24001")),(""),(PERFORM ADDITIONAL_DESCRIPTION) &
                /ITEM=(MESSAGE("P_00107")),(""),(PERFORM LINE_CODES) &
                /ITEM=(MESSAGE("P_82345")),(""),(#OPT="TAX") &
                /ITEM_IF=(#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
                        #DIV_TAX_RETAINERS_FLAG = #YES AND &
                        (#VENDOR_TAX_RETAINERS_FLAG=#YES OR #PAYEE_TAX_RETAINERS_FLAG=#YES)), &
                        (MESSAGE("P_91792")),(""),(#OPT="TAX_RET") &
                /ITEM=(MESSAGE("P_00295")),(""),(#OPT="POST") &
                /ITEM=(MESSAGE("P_24135")),(""),(#OPT="LINE") &
                /ITEM=(MESSAGE("P_01864")),(""),(#OPT="INQ") &
                /ITEM=(MESSAGE("P_00432")),(""),(#OPT="NEXT") &
                /USE_IF=(PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE_TYPE)&
                        = #LINE_TYPE_STOCK &
                        AND #PRICE_OVERRIDE <> #YES &
                        AND #LINE_EC_REPORT_TYPE = "" &
                        AND ((#TEN99_IN_USE <> #YES) &
                        OR (PARAMETER("TEN99_IN_USE") <> #YES)))

        MENU_BLOCK MENU_4_TEN99 /ROW=1 /COL=1 &
                /TITLE=("") &
                /SOURCE=(MESSAGE("P_00432")) /NOREPEAT &
                /ITEM=(MESSAGE("P_00108")),(""),(PERFORM COMMENTS) &
                /ITEM=(MESSAGE("P_24001")),(""),(PERFORM ADDITIONAL_DESCRIPTION) &
                /ITEM=(MESSAGE("P_00107")),(""),(PERFORM LINE_CODES) &
                /ITEM=(MESSAGE("P_82345")),(""),(#OPT="TAX") &
                /ITEM_IF=(#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
                        #DIV_TAX_RETAINERS_FLAG = #YES AND &
                        (#VENDOR_TAX_RETAINERS_FLAG=#YES OR #PAYEE_TAX_RETAINERS_FLAG=#YES)), &
                        (MESSAGE("P_91792")),(""),(#OPT="TAX_RET") &
                /ITEM=(MESSAGE("P_30350")),(""),(PERFORM TEN99_DETAILS) &
                /ITEM=(MESSAGE("P_00295")),(""),(#OPT="POST") &
                /ITEM=(MESSAGE("P_02055")),(""),(#OPT="EC_REP") &
                /ITEM=(MESSAGE("P_24135")),(""),(#OPT="LINE") &
                /ITEM=(MESSAGE("P_01864")),(""),(#OPT="INQ") &
                /ITEM=(MESSAGE("P_00432")),(""),(#OPT="NEXT") &
                /USE_IF=(PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE_TYPE)&
                        = #LINE_TYPE_STOCK &
                        AND #PRICE_OVERRIDE <> #YES &
                        AND #LINE_EC_REPORT_TYPE <> "" &
                        AND (#TEN99_IN_USE = #YES) &
                        AND (PARAMETER("TEN99_IN_USE") = #YES))

        MENU_BLOCK MENU_4_NOTEN99 /ROW=2 /COL=1 &
                /TITLE=("") &
                /SOURCE=(MESSAGE("P_00432")) /NOREPEAT &
                /ITEM=(MESSAGE("P_00108")),(""),(PERFORM COMMENTS) &
                /ITEM=(MESSAGE("P_24001")),(""),(PERFORM ADDITIONAL_DESCRIPTION) &
                /ITEM=(MESSAGE("P_00107")),(""),(PERFORM LINE_CODES) &
                /ITEM=(MESSAGE("P_82345")),(""),(#OPT="TAX") &
                /ITEM_IF=(#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
                        #DIV_TAX_RETAINERS_FLAG = #YES AND &
                        (#VENDOR_TAX_RETAINERS_FLAG=#YES OR #PAYEE_TAX_RETAINERS_FLAG=#YES)), &
                        (MESSAGE("P_91792")),(""),(#OPT="TAX_RET") &
                /ITEM=(MESSAGE("P_00295")),(""),(#OPT="POST") &
                /ITEM=(MESSAGE("P_02055")),(""),(#OPT="EC_REP") &
                /ITEM=(MESSAGE("P_24135")),(""),(#OPT="LINE") &
                /ITEM=(MESSAGE("P_01864")),(""),(#OPT="INQ") &
                /ITEM=(MESSAGE("P_00432")),(""),(#OPT="NEXT") &
                /USE_IF=(PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE_TYPE)&
                        = #LINE_TYPE_STOCK &
                        AND #PRICE_OVERRIDE <> #YES &
                        AND #LINE_EC_REPORT_TYPE <> "" &
                        AND ((#TEN99_IN_USE <> #YES) &
                        OR (PARAMETER("TEN99_IN_USE") <> #YES)))

        MENU_BLOCK MENU_5_TEN99 /ROW=2 /COL=1 &
                /TITLE=("") &
                /SOURCE=(MESSAGE("P_00432")) /NOREPEAT &
                /ITEM=(MESSAGE("P_00108")),(""),(PERFORM COMMENTS) &
                /ITEM=(MESSAGE("P_24001")),(""),(PERFORM ADDITIONAL_DESCRIPTION) &
                /ITEM=(MESSAGE("P_00107")),(""),(PERFORM LINE_CODES) &
                /ITEM=(MESSAGE("P_82345")),(""),(#OPT="TAX") &
                /ITEM_IF=(#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
                        #DIV_TAX_RETAINERS_FLAG = #YES AND &
                        (#VENDOR_TAX_RETAINERS_FLAG=#YES OR #PAYEE_TAX_RETAINERS_FLAG=#YES)), &
                        (MESSAGE("P_91792")),(""),(#OPT="TAX_RET") &
                /ITEM=(MESSAGE("P_30350")),(""),(PERFORM TEN99_DETAILS) &
                /ITEM=(MESSAGE("P_00295")),(""),(#OPT="POST") &
                /ITEM=(MESSAGE("P_24135")),(""),(#OPT="LINE") &
                /ITEM=(MESSAGE("P_01864")),(""),(#OPT="INQ") &
                /ITEM=(MESSAGE("P_00432")),(""),(#OPT="NEXT") &
                /USE_IF=(PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE_TYPE) &
                        = #LINE_TYPE_NONSTOCK &
                        AND #LINE_EC_REPORT_TYPE = "" &
                        AND (#TEN99_IN_USE = #YES) &
                        AND (PARAMETER("TEN99_IN_USE") = #YES))

        MENU_BLOCK MENU_5_NOTEN99 /ROW=3 /COL=1 &
                /TITLE=("") &
                /SOURCE=(MESSAGE("P_00432")) /NOREPEAT &
                /ITEM=(MESSAGE("P_00108")),(""),(PERFORM COMMENTS) &
                /ITEM=(MESSAGE("P_24001")),(""),(PERFORM ADDITIONAL_DESCRIPTION) &
                /ITEM=(MESSAGE("P_00107")),(""),(PERFORM LINE_CODES) &
                /ITEM=(MESSAGE("P_82345")),(""),(#OPT="TAX") &
                /ITEM_IF=(#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
                        #DIV_TAX_RETAINERS_FLAG = #YES AND &
                        (#VENDOR_TAX_RETAINERS_FLAG=#YES OR #PAYEE_TAX_RETAINERS_FLAG=#YES)), &
                        (MESSAGE("P_91792")),(""),(#OPT="TAX_RET") &
                /ITEM=(MESSAGE("P_00295")),(""),(#OPT="POST") &
                /ITEM=(MESSAGE("P_24135")),(""),(#OPT="LINE") &
                /ITEM=(MESSAGE("P_01864")),(""),(#OPT="INQ") &
                /ITEM=(MESSAGE("P_00432")),(""),(#OPT="NEXT") &
                /USE_IF=(PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE_TYPE) &
                        = #LINE_TYPE_NONSTOCK &
                        AND #LINE_EC_REPORT_TYPE = "" &
                        AND ((#TEN99_IN_USE <> #YES) &
                        OR (PARAMETER("TEN99_IN_USE") <> #YES)))

        MENU_BLOCK MENU_6_TEN99 /ROW=1 /COL=1 &
                /TITLE=("") &
                /SOURCE=(MESSAGE("P_00432")) /NOREPEAT &
                /ITEM=(MESSAGE("P_00108")),(""),(PERFORM COMMENTS) &
                /ITEM=(MESSAGE("P_24001")),(""),(PERFORM ADDITIONAL_DESCRIPTION) &
                /ITEM=(MESSAGE("P_00107")),(""),(PERFORM LINE_CODES) &
                /ITEM=(MESSAGE("P_82345")),(""),(#OPT="TAX") &
                /ITEM_IF=(#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
                        #DIV_TAX_RETAINERS_FLAG = #YES AND &
                        (#VENDOR_TAX_RETAINERS_FLAG=#YES OR #PAYEE_TAX_RETAINERS_FLAG=#YES)), &
                        (MESSAGE("P_91792")),(""),(#OPT="TAX_RET") &
                /ITEM=(MESSAGE("P_30350")),(""),(PERFORM TEN99_DETAILS) &
                /ITEM=(MESSAGE("P_00295")),(""),(#OPT="POST") &
                /ITEM=(MESSAGE("P_02055")),(""),(#OPT="EC_REP") &
                /ITEM=(MESSAGE("P_24135")),(""),(#OPT="LINE") &
                /ITEM=(MESSAGE("P_01864")),(""),(#OPT="INQ") &
                /ITEM=(MESSAGE("P_00432")),(""),(#OPT="NEXT") &
                /USE_IF=(PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE_TYPE) &
                        = #LINE_TYPE_NONSTOCK &
                        AND #LINE_EC_REPORT_TYPE <> "" &
                        AND (#TEN99_IN_USE = #YES) &
                        AND (PARAMETER("TEN99_IN_USE") = #YES))

        MENU_BLOCK MENU_6_NOTEN99 /ROW=2 /COL=1 &
                /TITLE=("") &
                /SOURCE=(MESSAGE("P_00432")) /NOREPEAT &
                /ITEM=(MESSAGE("P_00108")),(""),(PERFORM COMMENTS) &
                /ITEM=(MESSAGE("P_24001")),(""),(PERFORM ADDITIONAL_DESCRIPTION) &
                /ITEM=(MESSAGE("P_00107")),(""),(PERFORM LINE_CODES) &
                /ITEM=(MESSAGE("P_82345")),(""),(#OPT="TAX") &
                /ITEM_IF=(#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
                        #DIV_TAX_RETAINERS_FLAG = #YES AND &
                        (#VENDOR_TAX_RETAINERS_FLAG=#YES OR #PAYEE_TAX_RETAINERS_FLAG=#YES)), &
                        (MESSAGE("P_91792")),(""),(#OPT="TAX_RET") &
                /ITEM=(MESSAGE("P_00295")),(""),(#OPT="POST") &
                /ITEM=(MESSAGE("P_02055")),(""),(#OPT="EC_REP") &
                /ITEM=(MESSAGE("P_24135")),(""),(#OPT="LINE") &
                /ITEM=(MESSAGE("P_01864")),(""),(#OPT="INQ") &
                /ITEM=(MESSAGE("P_00432")),(""),(#OPT="NEXT") &
                /USE_IF=(PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE_TYPE) &
                        = #LINE_TYPE_NONSTOCK &
                        AND #LINE_EC_REPORT_TYPE <> "" &
                        AND ((#TEN99_IN_USE <> #YES) &
                        OR (PARAMETER("TEN99_IN_USE") <> #YES)))

END_FORM


FORM LINE_CODES /ROW=8 /COL=2 /HEIGHT=16 /WIDTH=78 &
        /TITLE=(MESSAGE("P_30134", PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE)))


        BEGIN_BLOCK DELIVERY
                #ORIG_LINE_EC_REPORT_TYPE = #LINE_EC_REPORT_TYPE

                #ORIG_SYS_TAXABLE_CODE = PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE)
                #ORIG_COST_CENTER  = PURCHASE_INVOICE_LINES(COST_CENTER)
                #ORIG_TAX_CODE = #TAX_CODE

                IF (PURCHASE_INVOICE_LINES(DELIVERY_ADDRESS_CODE) = "")
                        PURCHASE_INVOICE_LINES(DELIVERY_ADDRESS_CODE) = &
                                #DEF_DELIVERY_ADDR_CODE
                END_IF

                #OLD_DELIVERY = PURCHASE_INVOICE_LINES(DELIVERY_ADDRESS_CODE)
                #ADDRESS_CODE = #OLD_DELIVERY
                FIND IN CORPORATE_ADDRESSES &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION = #DIVISION &
                        /WITH=ADDRESS_CODE=PURCHASE_INVOICE_LINES(DELIVERY_ADDRESS_CODE) &
                        /LOCK=NONE

                IF (%STATUS <> %SUCCESS)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_32407
                END_IF

                FIND IN COST_CENTERS &
                        /LOCK=NONE &
                        /WITH=COMPANY_CODE=PURCHASE_INVOICE_LINES(COMPANY_CODE) &
                        /WITH=SOURCE_MODULE=(PARAMETER("LOCAL_SOURCE_MODULE")) &
                        /WITH=COST_CENTER=PURCHASE_INVOICE_LINES(COST_CENTER)

                FIND IN SYS_COUNTRIES &
                        /LOCK=NONE &
                        /WITH=SYS_COUNTRY=CORPORATE_ADDRESSES(SYS_COUNTRY)

                PERFORM "GEMLB:LB_ADDRESSES" (&
                                "D", &
                                (SYS_COUNTRIES(SYS_COUNTRY)), &
                                "CORPORATE_ADDRESSES", &
                                "11", &
                                "9", &
                                "", &
                                "", &
                                "", &
                                "", &
                                "", &
                                #R1, &
                                #R2, &
                                #R3, &
                                #R4, &
                                #R5)
        END_BLOCK

        BEGIN_BLOCK DEFAULTS
                DISPLAY DEFAULTS

                GOTO CONFIRM
        END_BLOCK

        INPUT_BLOCK DELIVERY_ADDRESS_CODE /ROW=2 /COL=14 &
                        /PROMPT=(MESSAGE("P_00214")) &
                        /TARGET=PURCHASE_INVOICE_LINES(DELIVERY_ADDRESS_CODE) &
                        /BACK=(GOTO RESET_DELIVERY_ADDR_CODE) &
                        /EXIT=(GOTO RESET_DELIVERY_ADDR_CODE) &
                        /LOV=CORPORATE_ADDRESSES(ADDRESS_CODE,CORP_OFFICE_NAME) &
                        /LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
                        /LOV_WITH=DIVISION=#DIVISION

        BEGIN_BLOCK VALIDATE_DELIVERY_ADDRESS
                IF (PURCHASE_INVOICE_LINES(DELIVERY_ADDRESS_CODE) = "")
                        PURCHASE_INVOICE_LINES(DELIVERY_ADDRESS_CODE) = &
                                #DEF_DELIVERY_ADDR_CODE
                END_IF

                FIND IN CORPORATE_ADDRESSES &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION = #DIVISION &
                        /WITH=ADDRESS_CODE=PURCHASE_INVOICE_LINES(DELIVERY_ADDRESS_CODE) &
                        /LOCK=NONE

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_32192
                        GOTO DELIVERY_ADDRESS_CODE
                END_IF

                FIND IN SYS_COUNTRIES &
                        /LOCK=NONE &
                        /WITH=SYS_COUNTRY=CORPORATE_ADDRESSES(SYS_COUNTRY)

                #PHONE_MASK = SYS_COUNTRIES(SYS_PHONE_MASK)

                IF (PURCHASE_INVOICE_LINES(DELIVERY_ADDRESS_CODE) <> #OLD_DELIVERY)
                        #ADDRESS_CODE = PURCHASE_INVOICE_LINES(DELIVERY_ADDRESS_CODE)
                END_IF

        END_BLOCK

        BEGIN_BLOCK DISPLAY_ADDRESS
                PERFORM "GEMLB:LB_ADDRESSES" (&
                                "D", &
                                (SYS_COUNTRIES(SYS_COUNTRY)), &
                                "CORPORATE_ADDRESSES", &
                                "11", &
                                "9", &
                                "", &
                                "", &
                                "", &
                                "", &
                                "", &
                                #R1, &
                                #R2, &
                                #R3, &
                                #R4, &
                                #R5)
        END_BLOCK

        OUTPUT_BLOCK VENDOR_NAME_1 /ROW=3 /COL=8 &
                        /PROMPT=(MESSAGE("P_00435")) &
                        /SOURCE=(CORPORATE_ADDRESSES(CORP_OFFICE_NAME))

        OUTPUT_BLOCK PHONE_1 /ROW=3 /COL=47 /LEN=21 &
                        /PROMPT=(MESSAGE("P_00513")) &
                        /SOURCE=(CORPORATE_ADDRESSES(PHONE)) &
                        /OUTPUT_MASK=(#PHONE_MASK)

        OUTPUT_BLOCK FAX_NUMBER_1 /ROW=4 /COL=47 /LEN=21 &
                        /PROMPT=(FIELD_PROMPT(FAX_NUMBER)) &
                        /SOURCE=(CORPORATE_ADDRESSES(FAX_NUMBER)) &
                        /OUTPUT_MASK=(#PHONE_MASK)
						
		OUTPUT_BLOCK EMAIL_1 /ROW=5 /COL=47 /LEN=30 &
                        /PROMPT=(FIELD_SHORT_PROMPT(EMAIL)) &
                        /SOURCE=(CORPORATE_ADDRESSES(EMAIL))


        INPUT_BLOCK COST_CENTER /ROW=11 /COL=26 &
                        /PROMPT=(FIELD_PROMPT(COST_CENTER)) &
                        /TARGET=PURCHASE_INVOICE_LINES(COST_CENTER) &
                        /LOV=COST_CENTERS(COST_CENTER,DESCRIPTION) &
                        /LOV_WITH=COMPANY_CODE=PURCHASE_INVOICE_LINES(COMPANY_CODE) &
                        /LOV_WITH=SOURCE_MODULE=(PARAMETER("LOCAL_SOURCE_MODULE"))

        BEGIN_BLOCK BLOCK_1
                IF (PURCHASE_INVOICE_LINES(COST_CENTER)<>"")
                        FIND IN COST_CENTERS &
                                /LOCK=NONE &
                                /WITH=COMPANY_CODE=PURCHASE_INVOICE_LINES(COMPANY_CODE) &
                                /WITH=SOURCE_MODULE=(PARAMETER("LOCAL_SOURCE_MODULE")) &
                                /WITH=COST_CENTER=PURCHASE_INVOICE_LINES(COST_CENTER)

                        IF (%STATUS=%FAILURE)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_00347
                                GOTO COST_CENTER
                        END_IF
                END_IF
        END_BLOCK

        OUTPUT_BLOCK OUTPUT_1 /ROW=11 /COL=31 &
                        /SOURCE=(COST_CENTERS(DESCRIPTION))

        OUTPUT_BLOCK DELI_ADDRESS_CODE /ROW=2 /COL=14 &
                        /PROMPT=(MESSAGE("P_00214")) &
                        /SOURCE=(PURCHASE_INVOICE_LINES(DELIVERY_ADDRESS_CODE))

        BEGIN_BLOCK WHICH_TAX
                INPUT_BLOCK SYS_TAXABLE_CODE /ROW=13 /COL=35 &
                        /PROMPT=(FIELD_PROMPT(SYS_TAXABLE_CODE)) &
                        /SOURCE= (PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE))     &
                        /TARGET=#SYS_TAXABLE_CODE &
                        /USING= PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE)


                PERFORM "GEMLB:LB_CHK_TAX_FLAG" ( &
                                (#SYS_TAXABLE_CODE), &
                                (#DIVISION_ACCRUE_TAX), &
                                (#USE_TAX_IN_USE), &
                                (#VENDOR_TAXABLE_CODE), &
                (#PRICING_METHOD), &
                #ERROR)

                IF (%STATUS <> %NORMAL)
                        ERROR/TEXT_ONLY/NOWAIT/NOBELL #ERROR
                        GOTO WHICH_TAX
                END_IF

                PERFORM CHECK_TAXABLE
                IF (%STATUS <> %SUCCESS)
                        GOTO WHICH_TAX
                END_IF

                PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE) = #SYS_TAXABLE_CODE

        END_BLOCK

        YESNO_BLOCK CONFIRM /ROW=15 /COL=35 &
                        /PROMPT=(MESSAGE("P_00149")) &
                        /BACK=(GOTO RESET_DELIVERY_ADDR_CODE) &
                        /EXIT=(GOTO RESET_DELIVERY_ADDR_CODE) &
                        /SUCCESS=(GOTO GET_EC_CODES) &
                        /FAILURE=(GOTO DELIVERY_ADDRESS_CODE)

        BEGIN_BLOCK RESET_DELIVERY_ADDR_CODE
                PURCHASE_INVOICE_LINES(DELIVERY_ADDRESS_CODE) = #OLD_DELIVERY
                PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE) = #ORIG_SYS_TAXABLE_CODE
                PURCHASE_INVOICE_LINES(COST_CENTER) = #ORIG_COST_CENTER

                EXIT(%EXIT)
        END_BLOCK

        BEGIN_BLOCK GET_EC_CODES
                IF (#OLD_DELIVERY <> PURCHASE_INVOICE_LINES(DELIVERY_ADDRESS_CODE))
                        FIND IN CORPORATE_ADDRESSES &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=DIVISION=#DIVISION &
                                /WITH=ADDRESS_CODE=PURCHASE_INVOICE_LINES(DELIVERY_ADDRESS_CODE) &
                                /LOCK=NONE

                        IF (#COMPANY_EC_REPORT_TYPE = "" OR #VENDOR_EC_STATE = "") GOTO TAX_CODES

                        FIND IN SYS_COUNTRIES &
                                /LOCK=NONE &
                                /WITH=SYS_COUNTRY=CORPORATE_ADDRESSES(SYS_COUNTRY)

                        IF (SYS_COUNTRIES(SYS_EC_MEMBER) = #YES AND &
                                        SYS_COUNTRIES(SYS_EC_MEMBER_STATE_CODE) <> #VENDOR_EC_STATE)
                                #LINE_EC_REPORT_TYPE = #COMPANY_EC_REPORT_TYPE
                        ELSE
                                #LINE_EC_REPORT_TYPE = ""
                        END_IF

                        IF (#ORIG_LINE_EC_REPORT_TYPE <> #LINE_EC_REPORT_TYPE)
                                IF (#ORIG_LINE_EC_REPORT_TYPE = "")
                                        #OPT     = "EC_REP"
                                        #EC_MODE = "A"

                                        PERFORM CLEAR_EC_VARIABLES

                                        #PART_CODE = PURCHASE_INVOICE_LINES(PART_CODE)

                                        #EC_TRANSACTION_TYPE    = VENDOR_ADDRESSES(SYS_EC_TRANSACTION_TYPE)
                                        #EC_MODE_TRANSPORT      = VENDOR_ADDRESSES(SYS_EC_MODE_OF_TRANSPORT)
                                        #EC_DELIVERY_TERMS      = VENDOR_ADDRESSES(SYS_EC_DELIVERY_TERMS)
                                        #EC_STAT_FACTOR         = VENDOR_ADDRESSES(SYS_EC_FACTOR)

                                        PURCHASE_INVOICE_LINES(SYS_EC_STATISTICS_APPLICABLE) = ""
                                ELSE
                                        MESSAGE/IDENTIFIER/BELL/WAIT P_02052
                                        PURCHASE_INVOICE_LINES(SYS_EC_STATISTICS_APPLICABLE) = ""
                                        PURCHASE_INVOICE_LINES(SYS_EC_PROCESSED_INDICATOR)      = ""
                                        PURCHASE_INVOICE_LINES(SYS_EC_TRANSACTION_TYPE) = ""
                                        PURCHASE_INVOICE_LINES(SYS_TARIFF_CODE) = ""
                                        PURCHASE_INVOICE_LINES(SYS_COUNTRY_OF_ORIGIN) = ""
                                        PURCHASE_INVOICE_LINES(SYS_EC_SUPP_UNIT_QTY) = ""
                                        PURCHASE_INVOICE_LINES(SYS_EC_WEIGHT)   = ""
                                        PURCHASE_INVOICE_LINES(SYS_EC_MODE_OF_TRANSPORT) = ""
                                        PURCHASE_INVOICE_LINES(SYS_EC_DELIVERY_TERMS) = ""
                                        PURCHASE_INVOICE_LINES(SYS_EC_STATISTICAL_VALUE)= ""
                                        PURCHASE_INVOICE_LINES(SYS_EC_ANALYSIS_1)       = ""
                                        PURCHASE_INVOICE_LINES(SYS_EC_ANALYSIS_2)       = ""
                                        PURCHASE_INVOICE_LINES(SYS_EC_ANALYSIS_3)       = ""
                                        PURCHASE_INVOICE_LINES(SYS_EC_ANALYSIS_4)       = ""
                                        PURCHASE_INVOICE_LINES(SYS_EC_ANALYSIS_5)       = ""
                                END_IF
                        END_IF
                END_IF
        END_BLOCK

        BEGIN_BLOCK TAX_CODES
                IF (PURCHASE_INVOICE_LINES(DELIVERY_ADDRESS_CODE) <> #OLD_DELIVERY &
                        OR (PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE) <> #ORIG_SYS_TAXABLE_CODE))

                        #OPT = "CODES"

                        !++
                        ! Note: If taxable code was changed from:
                        !
                        !       (1) "A" or "C" to "N"
                        !       (2) "C" to "A"
                        !       (3) "A" to "C"
                        !
                        !       then the trigger will not relieve the PURCHASE_INVOICES table of
                        !       the old tax amounts properly.  Must do it manually here.
                        !--

                        IF ((PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE) <> #ORIG_SYS_TAXABLE_CODE) AND &
                            (#ORIG_SYS_TAXABLE_CODE <> PARAMETER("VENDOR_TAX_NON_TAXABLE")))

                                BEGIN_CASE (#ORIG_SYS_TAXABLE_CODE)

                                        CASE (PARAMETER("VENDOR_TAX_COLLECT"))
                                                PURCHASE_INVOICES(SYS_N_TAX_VAL) = &
                                                        PURCHASE_INVOICES(SYS_N_TAX_VAL) - PURCHASE_INVOICE_LINES(SYS_N_TAX_VAL)
                                                PURCHASE_INVOICES(SYS_E_TAX_VAL) = &
                                                        PURCHASE_INVOICES(SYS_E_TAX_VAL) - PURCHASE_INVOICE_LINES(SYS_E_TAX_VAL)

                                        CASE (PARAMETER("VENDOR_TAX_ACCRUE"))
                                                PURCHASE_INVOICES(POP_LINE_TAX_ACCRUED) = &
                                                        PURCHASE_INVOICES(POP_LINE_TAX_ACCRUED) - &
                                                        PURCHASE_INVOICE_LINES(SYS_N_TAX_VAL) - PURCHASE_INVOICE_LINES(SYS_E_TAX_VAL)

                                END_CASE

                                !++
                                ! Temporary set PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE) to no tax so that header flds
                                ! do not get updated by trigger when line tax values are set back to zero.
                                ! This is so that the entire new tax value will be updated to the proper
                                ! header fields when line flds are updated later, instead of the difference
                                ! between the old & new line tax values.
                                !--

                                PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE) = PARAMETER("VENDOR_TAX_NON_TAXABLE")

                                PURCHASE_INVOICE_LINES(SYS_E_TAX_VAL) = 0.00
                                PURCHASE_INVOICE_LINES(SYS_N_TAX_VAL) = 0.00

                                PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE) = #SYS_TAXABLE_CODE

                        END_IF

                        IF (#SYS_TAXABLE_CODE = PARAMETER("LANGUAGE_NO") AND &
                                #ORIG_SYS_TAXABLE_CODE <> PARAMETER("LANGUAGE_NO") AND #TAX_VAL <> 0.0)

                                PERFORM DELETE_EXISTING_TAX_DETAILS (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE))
                                DELETE ALL FROM TAX_DETAILS_VT
                                PERFORM DELETE_TAX_DISCOUNT_POSTINGS (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE))

                                #TAX_VAL = 0.0
                                #SYS_E_TAX_VAL = 0.00
                                #SYS_N_TAX_VAL = 0.00
                        ELSE
                                !  This was put on the else because the if
                                !  clause was getting too unwieldy

                                IF ((#ORIG_TAX_CODE <> #TAX_CODE) OR &
                                    (#ORIG_SYS_TAXABLE_CODE <> #SYS_TAXABLE_CODE))

                                        #TAX_MODE = "R"

                                        PERFORM DELETE_EXISTING_TAX_DETAILS (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE))
                                        DELETE ALL FROM TAX_DETAILS_VT
                                        PERFORM DELETE_TAX_DISCOUNT_POSTINGS (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE))

                                        #TAX_VAL = 0.0
                                        #SYS_E_TAX_VAL = 0.00
                                        #SYS_N_TAX_VAL = 0.00

                                END_IF
                        END_IF
                        IF (#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
                                #DIV_TAX_RETAINERS_FLAG = #YES AND &
                                (#VENDOR_TAX_RETAINERS_FLAG=#YES OR #PAYEE_TAX_RETAINERS_FLAG=#YES))

                                PERFORM DELETE_EXISTING_TAX_RETAINERS
                                DELETE ALL FROM TAX_RETAINERS_DETAILS_VT
                                #RETAINERS_VAL = 0
                        END_IF
                END_IF
        END_BLOCK

END_FORM

FORM COMMENTS /ROW=10 /COL=8 /HEIGHT=14 /WIDTH=62 &
        /TITLE=(MESSAGE("P_00138"))


        BEGIN_BLOCK DETAIL_DESCRIPTION
                INPUT_BLOCK  /ROW=2 /COL=2 &
                        /TARGET=PURCHASE_INVOICE_LINES(INTERNAL_COMMENTS)

                #OPT = MESSAGE("P_00108")
        END_BLOCK

END_FORM


FORM ADDITIONAL_DESCRIPTION /ROW=10 /COL=21 /HEIGHT=14 /WIDTH=32 &
        /TITLE=(MESSAGE("P_00036"))


        INPUT_BLOCK DETAIL_DESCRIPTION /ROW=2 /COL=2 &
                        /TARGET=PURCHASE_INVOICE_LINES(PURCHASE_LINE_DETAIL_DESCR)

        BEGIN_BLOCK SETUP_OPT
                #OPT = "DESC"
        END_BLOCK

END_FORM


FORM MAINTAIN_NON_STOCK /ROW=6 /COL=2 /HEIGHT=18 /WIDTH=78 &
        /TITLE=(MESSAGE("P_30202"))


        OUTPUT_BLOCK BLOCK_1 /ROW=8 /COL=35 &
                        /SOURCE=(FIELD_SHORT_PROMPT(UNIT_REC)) &
                        /ATTRIBUTES=NONE

        OUTPUT_BLOCK BLOCK_3 /ROW=9 /COL=35 &
                        /SOURCE=(FIELD_SHORT_PROMPT(UNIT_REC)) &
                        /ATTRIBUTES=NONE

        OUTPUT_BLOCK BLOCK_2 /ROW=11 /COL=45 &
                        /SOURCE=("%") &
                        /ATTRIBUTES=NONE

        BEGIN_BLOCK  QTY_MASK

            #UOM = PURCHASE_INVOICE_LINES(UNIT_PUR)

            FIND IN IC_PRODUCT_MASTER_UNITS &
                /LOCK=NONE &
                /STREAM_NAME=PMU1 &
                /SECONDARY &
                /WITH=COMPANY_CODE=#COMPANY_CODE &
                /WITH=PART_CODE=PURCHASE_INVOICE_LINES(PART_CODE) &
                /WITH=UNIT_OF_MEASURE=#UOM &
                /WITH=IC_QUANTITY_MASK<>""

            IF (%STATUS = %SUCCESS)
                #NONSTOCK_MASK = PMU1:IC_PRODUCT_MASTER_UNITS(IC_QUANTITY_MASK)
            ELSE
                FIND IN UNITS_OF_MEASURE &
                    /LOCK=NONE &
                    /STREAM_NAME=UOM1 &
                    /SECONDARY &
                    /WITH=UNIT_OF_MEASURE=#UOM

                IF (%STATUS = %FAILURE)
                    ! Unit does not exist on UNITS_OF_MEASURE table
                    MESSAGE/IDENTIFIER/BELL/WAIT P_62355
                    EXIT(%FAILURE)
                END_IF

                #NONSTOCK_MASK = UOM1:UNITS_OF_MEASURE(IC_QUANTITY_MASK)
            END_IF
        END_BLOCK

        BEGIN_BLOCK DEFAULTS
                FIND IN GOODS_RECEIVED_LINES &
                        /LOCK=WRITE &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=GRN_NUMBER=PURCHASE_INVOICE_LINES(GRN_NUMBER) &
                        /WITH=GRN_LINE_NUMBER=PURCHASE_INVOICE_LINES(GRN_LINE_NUMBER)

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_62319,PURCHASE_INVOICE_LINES(GRN_LINE_NUMBER)
                        EXIT(%FAILURE)
                END_IF

                FIND IN GOODS_RECEIVED_LINE_QTYS &
                        /LOCK=WRITE &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=GRN_NUMBER=PURCHASE_INVOICE_LINES(GRN_NUMBER) &
                        /WITH=GRN_LINE_NUMBER=PURCHASE_INVOICE_LINES(GRN_LINE_NUMBER)

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_62319,PURCHASE_INVOICE_LINES(GRN_LINE_NUMBER)
                        EXIT(%FAILURE)
                END_IF

                IF (PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE) = PARAMETER("VENDOR_TAX_COLLECT"))
                        #NET_VALUE = #LINE_VALUE - #LINE_DISCOUNT + #TAX_VAL
                ELSE
                        #NET_VALUE = #LINE_VALUE - #LINE_DISCOUNT
                END_IF

                IF (#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
                        #DIV_TAX_RETAINERS_FLAG = #YES AND &
                        (#VENDOR_TAX_RETAINERS_FLAG=#YES OR #PAYEE_TAX_RETAINERS_FLAG=#YES))

                        #NET_VALUE = #NET_VALUE - #RETAINERS_VAL
                END_IF

				#OLD_PROJECT = PURCHASE_INVOICE_LINES(PA_PROJECT_CODE)
				#OLD_WBS_NUMBER = PURCHASE_INVOICE_LINES(PA_WBS_NUMBER)

                IF(#PA_IN_USE= #YES)
       				IF ((PURCHASE_INVOICE_LINES(PA_PROJECT_CODE)) ="" AND &
       				     (PURCHASE_INVOICE_LINES(PA_WBS_NUMBER)) = ""  ) 
       				    #PROJECT    = (PURCHASE_INVOICES(PA_PROJECT_CODE))
       				    #WBS_NUMBER = (PURCHASE_INVOICES(PA_WBS_NUMBER))
       				ELSE
       				    #PROJECT    = (PURCHASE_INVOICE_LINES(PA_PROJECT_CODE))
       				    #WBS_NUMBER = (PURCHASE_INVOICE_LINES(PA_WBS_NUMBER))   				        				    
       				END_IF

!                    #PROJECT    = PURCHASE_INVOICE_LINES(PA_PROJECT_CODE)
!                    #WBS_NUMBER = PURCHASE_INVOICE_LINES(PA_WBS_NUMBER)
!                    IF (#PROJECT = "" AND #WBS_NUMBER = "")                    
!                            FIND IN POP_LINES &
!                                /LOCK = NONE &
!                                /SECONDARY &
!                                /STREAM_NAME=POLINES &
!                                /WITH=COMPANY_CODE=#COMPANY_CODE &
!                                /WITH=DIVISION=#DIVISION &
!                                /WITH=PO_NUMBER=GOODS_RECEIVED_LINES(PO_NUMBER) &
!                                /WITH=PO_LINE_NUMBER=GOODS_RECEIVED_LINES(PO_LINE_NUMBER) 
!                        
!                                IF (%STATUS <> %FAILURE)
!                                    #PROJECT    = POLINES:POP_LINES(PA_PROJECT_CODE)
!                                    #WBS_NUMBER = POLINES:POP_LINES(PA_WBS_NUMBER)
!                                END_IF
!                     
!                            IF (#PROJECT = "" AND #WBS_NUMBER = "")
!                                FIND IN POP_HEADERS &
!                                    /LOCK = NONE &
!                                    /SECONDARY &
!                                    /WITH = COMPANY_CODE=#COMPANY_CODE &
!                                    /WITH = DIVISION = #DIVISION &
!                                    /WITH = PO_NUMBER = GOODS_RECEIVED_LINES(PO_NUMBER)
!                                    IF (%STATUS <> %FAILURE)
!                                        #PROJECT    = POP_HEADERS(PA_PROJECT_CODE)
!                                        #WBS_NUMBER = POP_HEADERS(PA_WBS_NUMBER)
!                                    END_IF
!                            END_IF
!                     END_IF
                        
                     PERFORM GET_PA_WBS(#COMPANY_CODE,#PA_IN_USE, &
                            (PURCHASE_INVOICES(PA_PROJECT_CODE)), &
                            (PURCHASE_INVOICES(PA_WBS_NUMBER)), &
                            (PURCHASE_INVOICE_LINES(PA_PROJECT_CODE)), &
                            (PURCHASE_INVOICE_LINES(PA_WBS_NUMBER)), &
                            #WBS_NUMBER_MASKED, &
                            #ACTIVITY_DESCRIP)
                END_IF

        IF ( #PRICING_METHOD_STATE = #PRICING_METHOD_OPTIONAL &
            AND #PRICING_METHOD = #PRICING_METHOD_INCLUSIVE )

            #TAX_MODE   = "T"
            PERFORM LOAD_LB_TAX_CONTROL_VT

            #TAX_RATE_CHANGED   = ""
            #ERROR_OCCURRED     = 0
            #ERROR_MESSAGE      = ""

            PERFORM "GEMLB:LB_L_TAX_CONTROL" ( #TAX_MODE, &
                            #ERROR_OCCURRED, &
                            #ERROR_MESSAGE, &
                            #TAX_RATE_CHANGED )

            IF ( %STATUS <> %SUCCESS OR #ERROR_OCCURRED )
                IF (#ERROR_MESSAGE <> "" )
                    ERROR/TEXT_ONLY/WAIT #ERROR_MESSAGE
                ELSE
                    MESSAGE/IDENTIFIER/BELL/WAIT P_02398
                END_IF
                EXIT( %FAILURE )
            ELSE
                FIND IN LB_TAX_CONTROL_VT

                IF ( %STATUS <> %SUCCESS )
                    MESSAGE/IDENTIFIER/BELL/WAIT P_02398
                    EXIT( %FAILURE )
                END_IF
                #TOTAL_TAX  = LB_TAX_CONTROL_VT(TOTAL_TAX_AMOUNT)
                #TAX_VAL    = LB_TAX_CONTROL_VT(TOTAL_TAX_AMOUNT)
                #NET_AMT    = LB_TAX_CONTROL_VT(NET_LINE_VALUE)

                #EXPENSED_TAX       = LB_TAX_CONTROL_VT(EXPENSED_TAX_AMOUNT)
                #NON_EXPENSED_TAX   = LB_TAX_CONTROL_VT(NON_EXPENSED_TAX_AMOUNT)

                #LINE_VALUE = #NET_AMT
                #LINE_VARIANCE  = -LB_TAX_CONTROL_VT(INVENTORY_ROUNDING_VARIANCE)

                DISPLAY DEFAULTS
            END_IF
        END_IF
                DISPLAY DEFAULTS

                #OLD_LINE_VALUE = #LINE_VALUE
                #OLD_NET_VALUE  = #NET_VALUE
                #OLD_TAX_VAL = #TAX_VAL
                #OLD_RETAINERS_VAL = #RETAINERS_VAL

                GOTO LINE_MENU
        END_BLOCK

        OUTPUT_BLOCK PART_CODE /ROW=2 /COL=18 &
                        /PROMPT=(FIELD_PROMPT(PART_CODE)) &
                        /SOURCE=(PURCHASE_INVOICE_LINES(PART_CODE))

        OUTPUT_BLOCK ITEM_DESCRIPTION /ROW=3 /COL=18 &
                        /PROMPT=(FIELD_PROMPT(PURCHASE_LINE_DETAIL_DESCR)) &
                        /SOURCE=(PURCHASE_INVOICE_LINES(PURCHASE_LINE_DETAIL_DESCR))

        OUTPUT_BLOCK DETAIL_DESC_2 /ROW=3 /COL=18 /HEIGHT=2 &
                        /SOURCE=(PURCHASE_INVOICE_LINES(PURCHASE_LINE_DETAIL_DESCR))

        INPUT_BLOCK LINE_REFERENCE /ROW=5 /COL=18 &
                        /PROMPT=(FIELD_SHORT_PROMPT(ORDER_LINE_REFERENCE)) &
                        /TARGET=PURCHASE_INVOICE_LINES(INVOICE_LINE_REFERENCE)

        INPUT_BLOCK VENDOR_PART_CODE /ROW=5 /COL=41 &
                        /PROMPT=(FIELD_SHORT_PROMPT(VENDORS_PART_CODE)) &
                        /TARGET=PURCHASE_INVOICE_LINES(VENDORS_PART_CODE) &
                        /LOV=PRODUCT_MASTER_BY_VENDOR(VENDORS_PART_CODE,DESCRIPTION,PART_CODE) &
                        /LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
                        /LOV_WITH=VENDOR_NUMBER=#VENDOR_NUMBER

        OUTPUT_BLOCK DELIVERY /ROW=6 /COL=18 &
                        /PROMPT=(MESSAGE("P_00214")) &
                        /SOURCE=(PURCHASE_INVOICE_LINES(DELIVERY_ADDRESS_CODE))

        OUTPUT_BLOCK CORP_OFFICE_NAME /ROW=6 /COL=29 &
                        /SOURCE=(CORPORATE_ADDRESSES(CORP_OFFICE_NAME))

        BEGIN_BLOCK PROJECT_INPUT
        
        IF ( #PA_IN_USE = #YES AND & 
                    ((PURCHASE_INVOICES(INTERCOMPANY_POSTINGS))=#NO) AND &
                    ((PURCHASE_INVOICES(PA_PROJECT_CODE)) = "") AND & 
                    ((PURCHASE_INVOICES(PA_WBS_NUMBER)) = "") )
            #ORIGINAL_WBS_MASKED = #WBS_NUMBER_MASKED
			#ORIGINAL_PROJECT	 = #PROJECT
			#ORIGINAL_WBS_NUMBER = #WBS_NUMBER
			        
            INPUT_BLOCK PROJECT_IN /ROW=7 /COL=18 /LEN=30 &
                /SOURCE=(#PROJECT) &
                /TARGET=#PROJECT &
                /PROMPT=FIELD_PROMPT(PA_WBS_NUMBER) &
                /USING=NOLOWER &
                /LOV=PA_PROJECTS(PA_PROJECT_CODE,PA_PROJECT_NAME,PA_OPEN_DATE) &
                /LOV_WITH=COMPANY_CODE = #COMPANY_CODE &
                /LOV_WITH=PA_PROJECT_STATUS = #STATUS_APPROVED &
                /LOV_WITH=PA_PROJECT_STATUS = #STATUS_OPEN &
                /LOV_WITH=PA_UPDATES_ALLOWED = #YES &
                /LOV_SELECTION=("A AND C AND D") &
                /USE_IF=(#PA_IN_USE AND #PROJECT = "")
                
                IF ( #PROJECT <> "" ) 
                    PERFORM "GEMLB:PA_L_WBS" ( &
                            (#COMPANY_CODE), &
                             #PROJECT, &
                             #WBS_NUMBER, &
                            (#NO), &
                            #POSTING_DATE, #PERIOD , #YEAR , &
                            (#YES), &
                            ("O"), &
                            (#YES), &
                            1, "", "", &
                            #ERROR_OCCURRED, &
                            #ERROR_MESSAGE, &
                            #WBS_NUMBER_MASKED, & 
                            #WBS_LEVEL_1, &
                            #WBS_LEVEL_2, &
                            #WBS_LEVEL_3, &
                            #WBS_LEVEL_4, &
                            #WBS_LEVEL_5, &
                            #ACTIVITY_DESCRIP )
                    IF (#ERROR_OCCURRED = 1)
                            ERROR/WAIT/TEXT_ONLY #ERROR_MESSAGE
                            GOTO PROJECT_IN
                    END_IF
                    IF ( #WBS_NUMBER_MASKED = "" ) 
                        #PROJECT    = ""
                        #WBS_NUMBER = ""
                    END_IF 
                END_IF
                            
                PERFORM CHECK_LINE_PA_CHANGES( (#PROJECT), (#WBS_NUMBER), (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE)))						
                IF(%STATUS = %BACK)
					#WBS_NUMBER_MASKED = #ORIGINAL_WBS_MASKED
					#PROJECT           = #ORIGINAL_PROJECT
					#WBS_NUMBER        = #ORIGINAL_WBS_NUMBER					
				END_IF
				OUTPUT_BLOCK PROJECT_OUTPUT /ROW=7 /COL=18 /LEN=30 &
                    /SOURCE=#WBS_NUMBER_MASKED &
                    /PROMPT=FIELD_PROMPT(PA_WBS_NUMBER) &
                    /USE_IF=(#PA_IN_USE)
                                    
                PURCHASE_INVOICE_LINES(PA_PROJECT_CODE)     = #PROJECT
                PURCHASE_INVOICE_LINES(PA_WBS_NUMBER)       = #WBS_NUMBER   
        END_IF 
        
        END_BLOCK 


        BEGIN_BLOCK INVOICE_QUANTITY
                INPUT_BLOCK  /ROW=8 /COL=18 /LEN=14 &
                        /PROMPT=(MESSAGE("P_00377")) &
                        /TARGET=#INVOICE_QUANTITY &
                        /USING=PURCHASE_INVOICE_LINES(INVOICE_QUANTITY),NOZERO,NONEGATIVE &
                        /INPUT_MASK=#NONSTOCK_MASK

                IF (#INVOICE_QUANTITY > PURCHASE_INVOICE_LINES(INVOICE_QUANTITY_DETAIL))
                        MESSAGE/IDENTIFIER/BELL/WAIT P_01464
                        GOTO INVOICE_QUANTITY
                END_IF
                PURCHASE_INVOICE_LINES(IC_NOMINATED_QTY) = #INVOICE_QUANTITY

        END_BLOCK

        BEGIN_BLOCK SAVE_UNIT
                #ORIG_UNIT_PUR = PURCHASE_INVOICE_LINES(UNIT_PUR)
        END_BLOCK

        BEGIN_BLOCK UNIT_PUR
                IF (PURCHASE_INVOICE_LINES(UNIT_PUR) = "") PURCHASE_INVOICE_LINES(UNIT_PUR) = PARAMETER("DEFAULT_UNIT")

                INPUT_BLOCK  /ROW=8 /COL=42 &
                        /TARGET=PURCHASE_INVOICE_LINES(UNIT_PUR) &
                        /USING=REQUIRED &
                        /LOV=UNITS_OF_MEASURE(UNIT_OF_MEASURE,UNIT_OF_MEASURE_DESC)

                FIND IN UNITS_OF_MEASURE &
                        /WITH=UNIT_OF_MEASURE=PURCHASE_INVOICE_LINES(UNIT_PUR) &
                        /LOCK=NONE

                IF (%STATUS <> %SUCCESS)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_32312
                        GOTO UNIT_PUR
                ELSE
                    #NONSTOCK_MASK = UNITS_OF_MEASURE(IC_QUANTITY_MASK)
                END_IF

                IF (PURCHASE_INVOICE_LINES(UNIT_PUR) = PURCHASE_INVOICE_LINES(UNIT_PRICE))
                        #PRICE_CONV = 1
                        #INVOICE_QTY = #INVOICE_QUANTITY * #PRICE_CONV
                ELSE

                        PERFORM UOM_CONVERSION &
                                (#COMPANY_CODE, &
                                (PURCHASE_INVOICE_LINES(PART_CODE)),&
                                (PURCHASE_INVOICE_LINES(WAREHOUSE)), &
                                (PURCHASE_INVOICE_LINES(IC_LOT_NUMBER)),&
                                (#INVOICE_QUANTITY),&
                                (PURCHASE_INVOICE_LINES(UNIT_PUR)), &
                                (PURCHASE_INVOICE_LINES(UNIT_PRICE)), &
                                #PRICE_CONV,&
                                #INVOICE_QTY)

                        IF (%STATUS = %FAILURE)
                                PURCHASE_INVOICE_LINES(UNIT_PUR) = #ORIG_UNIT_PUR
                                GOTO UNIT_PUR
                        END_IF
                END_IF

        END_BLOCK

        BEGIN_BLOCK PUR_PRICE
        #PRICE      = PURCHASE_INVOICE_LINES(PURCHASE_COST)
        #PRICE_INC_TAX  = PURCHASE_INVOICE_LINES(PURCHASE_COST_INC_TAX)

        #PURCHASE_COST      = PURCHASE_INVOICE_LINES(PURCHASE_COST)
        #PURCHASE_COST_INC_TAX  = PURCHASE_INVOICE_LINES(PURCHASE_COST_INC_TAX)

                INPUT_BLOCK  /ROW=9 /COL=18 &
                        /PROMPT=(MESSAGE("P_3PURCHASE_COST_3")) &
                        /TARGET=#PURCHASE_COST &
                        /USING=PURCHASE_INVOICE_LINES(PURCHASE_COST), NONEGATIVE &
            /USE_IF = ( #PRICING_METHOD_STATE <> #PRICING_METHOD_OPTIONAL &
                OR ( #PRICING_METHOD_STATE = #PRICING_METHOD_OPTIONAL &
                AND #PRICING_METHOD <> #PRICING_METHOD_INCLUSIVE ) )

        INPUT_BLOCK /ROW=9 /COL=18 &
            /PROMPT = MESSAGE("P_3PURCHASE_COST_3") &
            /TARGET = #PURCHASE_COST_INC_TAX &
            /USING = PURCHASE_INVOICE_LINES(PURCHASE_COST_INC_TAX), NONEGATIVE &
            /USE_IF = ( #PRICING_METHOD_STATE = #PRICING_METHOD_OPTIONAL &
                AND #PRICING_METHOD = #PRICING_METHOD_INCLUSIVE )


                #INV_COST = #PURCHASE_COST

        IF ( #PRICING_METHOD_STATE = #PRICING_METHOD_OPTIONAL &
            AND #PRICING_METHOD = #PRICING_METHOD_INCLUSIVE )

            #INV_COST   = #PURCHASE_COST_INC_TAX
        END_IF
        END_BLOCK

        OUTPUT_BLOCK UNIT_PRICE /ROW=9 /COL=42 &
                        /SOURCE=(PURCHASE_INVOICE_LINES(UNIT_PRICE))

    BEGIN_BLOCK PRICE_TYPE_DISPLAY
        OUTPUT_BLOCK PRICE_IS_INC /ROW=9 /COL=47 &
            /ATTRIBUTES = NONE &
            /SOURCE = MESSAGE("P_23213") &
            /USE_IF = ( #PRICING_METHOD_STATE = #PRICING_METHOD_OPTIONAL &
                AND #PRICING_METHOD = #PRICING_METHOD_INCLUSIVE )

        OUTPUT_BLOCK PRICE_IS_EX /ROW=9 /COL=47 &
            /ATTRIBUTES = NONE &
            /SOURCE = MESSAGE("P_23214") &
            /USE_IF = ( #PRICING_METHOD_STATE = #PRICING_METHOD_OPTIONAL &
                AND #PRICING_METHOD <> #PRICING_METHOD_INCLUSIVE )
    END_BLOCK

        BEGIN_BLOCK CALC_LINE_VALUE
                        IF (PURCHASE_INVOICE_LINES(UNIT_PUR)=PURCHASE_INVOICE_LINES(UNIT_PRICE))
                                #PRICE_CONV = 1
                        ELSE
                                PERFORM UOM_CONVERSION &
                                        (#COMPANY_CODE, &
                                        (PURCHASE_INVOICE_LINES(PART_CODE)),&
                                        (PURCHASE_INVOICE_LINES(WAREHOUSE)), &
                                        (PURCHASE_INVOICE_LINES(IC_LOT_NUMBER)),&
                                        (1.0),&
                                        PURCHASE_INVOICE_LINES(UNIT_PUR), &
                                        PURCHASE_INVOICE_LINES(UNIT_PRICE), &
                                        #PRICE_CONV,&
                                        #PRICE_CONV)

                                IF (%STATUS = %FAILURE)
                                        GOTO UNIT_PUR
                                END_IF
                        END_IF

                !
                ! Find conversion factor from ordered units to pricing
                ! units.
                !

                IF (#PURCHASE_COST = 0 AND #INVOICE_QUANTITY = 0)
                        GOTO NO_VALUES
                END_IF

                IF (#PURCHASE_COST = 0 OR #INVOICE_QUANTITY = 0)
                        INPUT_BLOCK LINE_VALUE /ROW=10 /COL=18 &
                                /PROMPT=FIELD_PROMPT(POP_INVOICE_TOTAL_CURRENCY) &
                                /TARGET=#LINE_VALUE &
                                /USING=PURCHASE_INVOICE_LINES(POP_INVOICE_TOTAL_CURRENCY)

                        IF (#LINE_VALUE > 0)
                                IF (#PURCHASE_COST = 0)
                                        #PURCHASE_COST = ROUND(#LINE_VALUE /(#INVOICE_QUANTITY * #PRICE_CONV) &
                                        ,4)

                                ELSE
                                        #INVOICE_QUANTITY = ROUND(#LINE_VALUE /(#PURCHASE_COST* #PRICE_CONV) &
                                        ,2)
                                END_IF
                        ELSE
                                #LINE_VALUE = ROUND(#INVOICE_QUANTITY *#PURCHASE_COST &
                                * #PRICE_CONV,#CURRENCY_DECIMAL)
                        END_IF
                ELSE
                        #LINE_VALUE = ROUND(#INVOICE_QUANTITY * #PURCHASE_COST &
                        * #PRICE_CONV,#CURRENCY_DECIMAL)

                END_IF

        END_BLOCK

        BEGIN_BLOCK NO_VALUES
                #LINE_VALUE = ROUND(#INVOICE_QUANTITY * #PURCHASE_COST &
                * #PRICE_CONV,#CURRENCY_DECIMAL)
        END_BLOCK

        BEGIN_BLOCK TOLERANCE

                #TOLERANCE_IN_USE = #SAVE_TOLERANCE_IN_USE
                IF (#TOLERANCE_IN_USE = PARAMETER("LANGUAGE_YES"))
                        #MAX_TOLERANCE   = #SAVE_MAX_TOLERANCE
                        #TOTAL_TOLERANCE = #SAVE_TOTAL_TOLERANCE
                        #AMOUNT_TOLERANCE= #SAVE_AMOUNT_TOLERANCE
                        #PRICE_TOLERANCE = #SAVE_PRICE_TOLERANCE

                        PERFORM "GEMPOP:POP_L_TOLERANCE_CHECKING" ( &
                                (#INV_COST), &
                                (GOODS_RECEIVED_LINES(GRN_COST)), &
                                (#INVOICE_QUANTITY), &
                                (GOODS_RECEIVED_LINE_QTYS(GRN_QTY_IN_INVENTORY)), &
                                (#MAX_TOLERANCE), &
                                (#TOTAL_TOLERANCE), &
                                (#INVOICE_TOLERANCE_CONTROL), &
                                (#INVOICE_INDIC), &
                                (PARAMETER("LANGUAGE_YES")), &
                                "", &
                                (#PRICE_TOLERANCE), &
                                (#AMOUNT_TOLERANCE), &
                                #ERROR)


                        IF (%STATUS = %FAILURE)
                        ! No need to use error status, since qty cannot use
                        ! tolerance when matching against a receipt

                                GOTO INVOICE_QUANTITY
                        END_IF
                END_IF

                PURCHASE_INVOICE_LINES(PURCHASE_COST) = #PURCHASE_COST

                IF (#PRICE <> PURCHASE_INVOICE_LINES(PURCHASE_COST))
                        PURCHASE_INVOICE_LINES(CHG_PURCHASE_COST) = (PURCHASE_INVOICE_LINES(PURCHASE_COST) - #PRICE)
!                        PURCHASE_INVOICE_LINES(OLD_PURCHASE_COST) = #PRICE
                ELSE
!                        PURCHASE_INVOICE_LINES(OLD_PURCHASE_COST) = 0
                        PURCHASE_INVOICE_LINES(CHG_PURCHASE_COST) = 0
                END_IF
        END_BLOCK

        OUTPUT_BLOCK INVOICE_QTY /ROW=8 /COL=18 /LEN=14 &
                        /SOURCE=#INVOICE_QUANTITY &
                        /USING=PURCHASE_INVOICE_LINES(INVOICE_QUANTITY),NONEGATIVE

    OUTPUT_BLOCK PURCH_PRICE /ROW=9 /COL=18 &
        /SOURCE=PURCHASE_INVOICE_LINES(PURCHASE_COST) &
        /USE_IF = ( #PRICING_METHOD_STATE <> #PRICING_METHOD_OPTIONAL OR &
                ( #PRICING_METHOD_STATE = #PRICING_METHOD_OPTIONAL &
                AND #PRICING_METHOD <> #PRICING_METHOD_INCLUSIVE ) )

    OUTPUT_BLOCK PURCH_PRICE_INC /ROW=9 /COL=18 &
        /SOURCE = PURCHASE_INVOICE_LINES(PURCHASE_COST_INC_TAX) &
        /USE_IF = ( #PRICING_METHOD_STATE = #PRICING_METHOD_OPTIONAL &
            AND #PRICING_METHOD = #PRICING_METHOD_INCLUSIVE )
            

    BEGIN_BLOCK GET_NET_WHEN_TOT_ENTERED
        IF ( #PRICING_METHOD_STATE = #PRICING_METHOD_OPTIONAL &
            AND #PRICING_METHOD = #PRICING_METHOD_INCLUSIVE )

            #TAX_MODE   = "T"
            PERFORM LOAD_LB_TAX_CONTROL_VT

            #TAX_RATE_CHANGED   = ""
            #ERROR_OCCURRED     = 0
            #ERROR_MESSAGE      = ""

            PERFORM "GEMLB:LB_L_TAX_CONTROL" ( #TAX_MODE, &
                            #ERROR_OCCURRED, &
                            #ERROR_MESSAGE, &
                            #TAX_RATE_CHANGED )

            IF ( %STATUS <> %SUCCESS OR #ERROR_OCCURRED )
                IF (#ERROR_MESSAGE <> "" )
                    ERROR/TEXT_ONLY/WAIT #ERROR_MESSAGE
                ELSE
                    MESSAGE/IDENTIFIER/BELL/WAIT P_02398
                END_IF
                EXIT( %FAILURE )
            ELSE
                FIND IN LB_TAX_CONTROL_VT

                IF ( %STATUS <> %SUCCESS )
                    MESSAGE/IDENTIFIER/BELL/WAIT P_02398
                    EXIT( %FAILURE )
                END_IF
                #TOTAL_TAX  = LB_TAX_CONTROL_VT(TOTAL_TAX_AMOUNT)
                #TAX_VAL    = LB_TAX_CONTROL_VT(TOTAL_TAX_AMOUNT)
                #NET_AMT    = LB_TAX_CONTROL_VT(NET_LINE_VALUE)

                #EXPENSED_TAX       = LB_TAX_CONTROL_VT(EXPENSED_TAX_AMOUNT)
                #NON_EXPENSED_TAX   = LB_TAX_CONTROL_VT(NON_EXPENSED_TAX_AMOUNT)

                #LINE_VALUE = #NET_AMT
                #LINE_VARIANCE  = -LB_TAX_CONTROL_VT(INVENTORY_ROUNDING_VARIANCE)

                DISPLAY DEFAULTS
            END_IF
        END_IF
    END_BLOCK

        OUTPUT_BLOCK LINE_VALUE_1 /ROW=10 /COL=18 /LEN=(#CURRENCY_LEN) &
                        /PROMPT=FIELD_PROMPT(POP_INVOICE_TOTAL_CURRENCY) &
                        /SOURCE=#LINE_VALUE &
                        /USING=PURCHASE_INVOICE_LINES(POP_INVOICE_TOTAL_CURRENCY) &
                        /OUTPUT_MASK=#CURRENCY_MASK

        BEGIN_BLOCK LINE_DISCOUNT
                #LINE_VALUE = ROUND(#LINE_VALUE,#CURRENCY_DECIMAL) * 1.0

                INPUT_BLOCK  /ROW=11 /COL=18 &
                        /PROMPT=(FIELD_PROMPT(DISCOUNT)) &
                        /TARGET=#LINE_DISCOUNT &
                        /USING=PURCHASE_INVOICE_LINES(LINE_DISCOUNT)

                #LINE_DISCOUNT = ROUND(#LINE_DISCOUNT,#CURRENCY_DECIMAL) * 1.0

                IF (#LINE_DISCOUNT > #LINE_VALUE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_62080
                        GOTO LINE_DISCOUNT
                END_IF
                IF (#LINE_DISCOUNT > 0)
                                #LINE_PERCENT = ROUND(#LINE_DISCOUNT * 100/#LINE_VALUE, 2) * 1.0
                END_IF
        END_BLOCK

        BEGIN_BLOCK LINE_PERCENT
                IF (#LINE_DISCOUNT = "" OR #LINE_DISCOUNT = "0")

                INPUT_BLOCK  /ROW=11 /COL=38 &
                        /TARGET=#LINE_PERCENT &
                        /USING=PURCHASE_INVOICE_LINES(LINE_DISCOUNT_PERCENT)

                        IF (#LINE_PERCENT > 100)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_62079
                                GOTO LINE_PERCENT
                        END_IF
        END_BLOCK

        BEGIN_BLOCK CALC_DISCOUNT
                        #LINE_PERCENT = ROUND(#LINE_PERCENT,2) * 1.0
                        #LINE_DISCOUNT = ROUND(#LINE_VALUE*#LINE_PERCENT /100., #CURRENCY_DECIMAL) * 1.0

                OUTPUT_BLOCK  /ROW=11 /COL=18 &
                        /SOURCE=(#LINE_DISCOUNT) &
                        /USING=PURCHASE_INVOICE_LINES(LINE_DISCOUNT)

                END_IF
        END_BLOCK

        OUTPUT_BLOCK PERCENT_REDISPLAY /ROW=11 /COL=38 &
                        /SOURCE=(#LINE_PERCENT) &
                        /USING=PURCHASE_INVOICE_LINES(LINE_DISCOUNT_PERCENT)


        BEGIN_BLOCK     CALC_SALES_TAX
                IF (#REGISTRATION_NUMBER <> "" AND #COPY_REGISTER_TAX = #YES)
                        #TAX_VAL        = 0
                        #SYS_N_TAX_VAL =        0
                        GOTO    LINE_TAX
                END_IF

                IF (PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE) <> PARAMETER("LANGUAGE_NO") AND #TAX_BASED_ON <> #NO)

                        IF (PURCHASE_INVOICE_LINES(PRODUCT_TAX_CODE) = "") &
                                PURCHASE_INVOICE_LINES(PRODUCT_TAX_CODE) = #DEF_PART_TAX_CODE

                                #ADDRESS_CODE              = PURCHASE_INVOICE_LINES(DELIVERY_ADDRESS_CODE)
                                #SYS_TAXABLE_CODE          = PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE)

                                PERFORM CHECK_TAXABLE
                                IF (%STATUS <> %NORMAL)
                                        #TAX_CODE = ""
                                END_IF


                                IF ((#TAX_BASED_ON =    "B") OR (#TAX_BASED_ON = "P"))
                                           IF (#PRODUCT_TAX_CODE = "") #PRODUCT_TAX_CODE = #DEF_PART_TAX_CODE
                                END_IF

                                IF ((#TAX_BASED_ON =    "B") OR (#TAX_BASED_ON = "V"))
                                           IF (#TAX_CODE = "") #TAX_CODE = #DEF_VENDOR_TAX_CODE
                                END_IF

                                IF (#TAX_CODE = "") #TAX_CODE = #DEF_VENDOR_TAX_CODE
                                #TAX_MODE = "R"

                PURCHASE_INVOICE_LINES(PRODUCT_TAX_CODE)    = #PRODUCT_TAX_CODE
                PURCHASE_INVOICE_LINES(VENDOR_TAX_CODE)     = #TAX_CODE

                PERFORM LOAD_LB_TAX_CONTROL_VT
                #TAX_RATE_CHANGED   = ""
                #ERROR_OCCURRED     = 0
                #ERROR_MESSAGE      = ""

            PERFORM "GEMLB:LB_L_TAX_CONTROL" ( #TAX_MODE, &
                            #ERROR_OCCURRED, &
                            #ERROR_MESSAGE, &
                            #TAX_RATE_CHANGED )

                IF ( %STATUS <> %SUCCESS OR #ERROR_OCCURRED )
                    IF ( #ERROR_MESSAGE <> "" )
                        ERROR/TEXT_ONLY/WAIT #ERROR_MESSAGE
                    ELSE
                        MESSAGE/IDENTIFIER/BELL/WAIT P_02398
                    END_IF
                    EXIT( %FAILURE )
                ELSE
                    FIND IN LB_TAX_CONTROL_VT

                    IF ( %STATUS <> %SUCCESS )
                        MESSAGE/IDENTIFIER/BELL/WAIT P_02398
                        EXIT( %FAILURE )
                    END_IF

                    #TOTAL_TAX  = LB_TAX_CONTROL_VT(TOTAL_TAX_AMOUNT)
                    #TAX_VAL    = LB_TAX_CONTROL_VT(TOTAL_TAX_AMOUNT)
                    #NET_AMT    = LB_TAX_CONTROL_VT(NET_LINE_VALUE)

                    #EXPENSED_TAX       = LB_TAX_CONTROL_VT(EXPENSED_TAX_AMOUNT)
                    #NON_EXPENSED_TAX   = LB_TAX_CONTROL_VT(NON_EXPENSED_TAX_AMOUNT)

                    #SYS_E_TAX_VAL  = #EXPENSED_TAX
                    #SYS_N_TAX_VAL  = #NON_EXPENSED_TAX

                    #TAX_VAL    = #TOTAL_TAX

                    #LINE_VARIANCE  = -LB_TAX_CONTROL_VT(INVENTORY_ROUNDING_VARIANCE)
                    DISPLAY DEFAULTS
                END_IF


                              PURCHASE_INVOICE_LINES(PRODUCT_TAX_CODE)        = #PRODUCT_TAX_CODE
                                PURCHASE_INVOICE_LINES(VENDOR_TAX_CODE) = #TAX_CODE
                                PURCHASE_INVOICE_LINES(SYS_E_TAX_VAL)   = #SYS_E_TAX_VAL
                                PURCHASE_INVOICE_LINES(SYS_N_TAX_VAL)   = #SYS_N_TAX_VAL

                                #TAX_MODE = "M"

                                IF (%STATUS = %BACK OR %STATUS =        %EXIT)
                                           GOTO LINE_DISCOUNT
                                END_IF
                        ELSE

                                #TAX_VAL        = 0.0
                                MESSAGE/IDENTIFIER/BELL/WAIT    P_32334
                        END_IF


                IF (PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE) = PARAMETER("VENDOR_TAX_ACCRUE"))
                        #ACCRUAL_INDICATOR="*"
                ELSE
                        #ACCRUAL_INDICATOR=" "
                END_IF
                IF (PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE) = PARAMETER("VENDOR_TAX_ACCRUE") AND #ACCRUE_IGIC = #YES)
                        #ACCRUAL_INDICATOR = "*"
                END_IF
        END_BLOCK

        OUTPUT_BLOCK LINE_TAX /ROW=12 /COL=18 /LEN=(#CURRENCY_LEN) &
                        /PROMPT=(MESSAGE("P_00648")) &
                        /SOURCE=(#TAX_VAL) &
                        /USING=PURCHASE_INVOICE_LINES(TAX_VAL) &
                        /OUTPUT_MASK=(#CURRENCY_MASK)

        OUTPUT_BLOCK ASTERISK /ROW=12 /COL=38 &
                        /SOURCE=(#ACCRUAL_INDICATOR) &
                        /ATTRIBUTES=NONE

        BEGIN_BLOCK CALC_SALES_TAXB
                IF( #OLD_TAX_VAL <> #TAX_VAL) GOTO TAX_RETAINERS_CODE
                IF (#OPT = "TAX") GOTO LINE_VAL
        END_BLOCK

        BEGIN_BLOCK TAX_RETAINERS_CODE

                IF (#REGISTRATION_NUMBER <> "" AND #COPY_REGISTER_RETAINERS = #YES) GOTO TEN99_CODE
                        IF (#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
                                #DIV_TAX_RETAINERS_FLAG = #YES AND &
                                 (#VENDOR_TAX_RETAINERS_FLAG=#YES OR #PAYEE_TAX_RETAINERS_FLAG=#YES))

                                #TAX_RETAINERS_MODE = "R"
                                #TITLE = ""

                                IF( #OLD_NET_VALUE <> 0.0 AND &
                                        (#OLD_NET_VALUE <> #NET_VALUE OR &
                                        #OLD_TAX_VAL <> #TAX_VAL))

                                        #TAX_RETAINERS_MODE = "V"
                                 END_IF

                                 #OLD_LINE_VALUE = #LINE_VALUE
                                 #OLD_DISCOUNT = #LINE_DISCOUNT

                                 PERFORM  "GEMLB:LB_TAX_RETAINERS_DETAILS" ( &
                                        (#TAX_RETAINERS_MODE), &
                                        (#COMPANY_CODE), &
                                        (#DIVISION), &
                                        (#VENDOR_NUMBER), &
                                        (PURCHASE_INVOICES(PAYEE_NUMBER)), &
                                        (#VENDOR_TAX_RETAINERS_FLAG), &
                                        (#PAYEE_TAX_RETAINERS_FLAG), &
                                        (#LINE_VALUE-#LINE_DISCOUNT), &
                                        (#TAX_VAL), &
                                        (#BASE_CURRENCY_DECIMAL), &
                                        (#CURRENCY_MASK), &
                                        (#TITLE), &
                                        #RETAINERS_VAL, &
                                        #ERROR_CODE, &
                                        #ERROR_MSG)

                                IF (%STATUS = %FAILURE)
                                        EXIT (%FAILURE)
                                END_IF

                                IF (%STATUS = %BACK OR %STATUS = %EXIT)
                                        GOTO LINE_DISCOUNT
                                END_IF
                        ELSE
                                #RETAINERS_VAL = 0
                        END_IF

        END_BLOCK

        OUTPUT_BLOCK TOTAL_TAX_RETAINERS /ROW=13 /COL=18 /LEN=(#CURRENCY_LEN) &
                        /PROMPT=(MESSAGE("P_91439")) &
                        /SOURCE=(#RETAINERS_VAL) &
                        /USING=AP_TRANSACTIONS(SYS_TAX_RETAINERS_CURRENCY) &
                        /OUTPUT_MASK=(#CURRENCY_MASK) &
                        /USE_IF=(#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
                                #DIV_TAX_RETAINERS_FLAG = #YES AND &
                                (#VENDOR_TAX_RETAINERS_FLAG=#YES OR #PAYEE_TAX_RETAINERS_FLAG=#YES))

        BEGIN_BLOCK SAVE_TAX_RETAINERS
                PURCHASE_INVOICE_LINES(SYS_TAX_RETAINERS_CURRENCY) = #RETAINERS_VAL
        END_BLOCK

        BEGIN_BLOCK LINE_VAL
                IF (PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE) = PARAMETER("VENDOR_TAX_COLLECT"))
                        #NET_VALUE = #LINE_VALUE - #LINE_DISCOUNT + #TAX_VAL
                ELSE
                        #NET_VALUE = #LINE_VALUE - #LINE_DISCOUNT
                END_IF
                IF (#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
                        #DIV_TAX_RETAINERS_FLAG = #YES AND &
                        (#VENDOR_TAX_RETAINERS_FLAG=#YES OR #PAYEE_TAX_RETAINERS_FLAG=#YES))

                        #NET_VALUE = #NET_VALUE - #RETAINERS_VAL
                ELSE
                        #NET_VALUE = #NET_VALUE
                END_IF

                OUTPUT_BLOCK  /ROW=14 /COL=18 &
                        /PROMPT=MESSAGE("P_00680") &
                        /SOURCE=#NET_VALUE &
                        /USING=PURCHASE_INVOICE_LINES(POP_INVOICE_TOTAL_CURRENCY)

                IF (#OPT = "TAX" OR #OPT = "TAX_RET")
                        GOTO EC_REPORTING
                END_IF

        END_BLOCK


        BEGIN_BLOCK TEN99_CODE

                IF (#TEN99_IN_USE = #YES)

                        PERFORM "GEMLB:LB_TEN99_ANALYSIS" ( &
                                        #TEN99_MODE, &
                                        #DEF_TEN99_FORM, &
                                        #DEF_TEN99_AMT_TYPE, &
                                        (#NET_VALUE), &
                                        "", &
                                        #CURRENCY_DECIMAL, &
                                        #CURRENCY_MASK, &
                                        PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_NUMBER),&
                                        PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE),&
                                        "")

                        #TEN99_MODE = "M"

                        IF (%STATUS = %BACK OR %STATUS = %EXIT)
                                GOTO LINE_DISCOUNT
                        END_IF
                END_IF

        END_BLOCK

        BEGIN_BLOCK COST_CENTER
                INPUT_BLOCK  /ROW=15 /COL=18 &
                        /PROMPT=(FIELD_PROMPT(COST_CENTER)) &
                        /TARGET=PURCHASE_INVOICE_LINES(COST_CENTER) &
                        /LOV=COST_CENTERS(COST_CENTER,DESCRIPTION) &
                        /LOV_WITH=COMPANY_CODE=PURCHASE_INVOICE_LINES(COMPANY_CODE) &
                        /LOV_WITH=SOURCE_MODULE=(PARAMETER("LOCAL_SOURCE_MODULE"))

                IF (PURCHASE_INVOICE_LINES(COST_CENTER)<>"")
                        FIND IN COST_CENTERS &
                                /WITH=COMPANY_CODE=PURCHASE_INVOICE_LINES(COMPANY_CODE) &
                                /WITH=SOURCE_MODULE=(PARAMETER("LOCAL_SOURCE_MODULE")) &
                                /WITH=COST_CENTER=PURCHASE_INVOICE_LINES(COST_CENTER)

                        IF (%STATUS<>%SUCCESS)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_00347
                                GOTO COST_CENTER
                        END_IF
                END_IF
        END_BLOCK

        OUTPUT_BLOCK FIND_COST_CENTER /ROW=15 /COL=23 &
                        /SOURCE=(COST_CENTERS(DESCRIPTION))

        INPUT_BLOCK COMMENTS /ROW=16 /COL=13 &
                        /PROMPT=(FIELD_PROMPT(INTERNAL_COMMENTS)) &
                        /TARGET=PURCHASE_INVOICE_LINES(INTERNAL_COMMENTS)

        BEGIN_BLOCK EC_REPORTING
                IF (#OPT <> "EC_REP" AND #OPT <> "") GOTO CHECK_GL_POSTINGS

                IF (#LINE_EC_REPORT_TYPE <> "")
                        #WEIGHT = PURCHASE_INVOICE_LINES(SYS_EC_WEIGHT)/#INVOICE_QUANTITY
                        IF   (#OLD_LINE_VALUE <> #LINE_VALUE) &
                                        #EC_STATISTICAL_VALUE   = ROUND((#LINE_VALUE * #EC_STAT_FACTOR),#CURRENCY_DECIMAL)

                        PERFORM "GEMLB:LB_EC_REPORTING" &
                                (#EC_MODE, &
                                 #LINE_EC_REPORT_TYPE, &
                                 (PURCHASE_INVOICE_LINES(UNIT_PUR)), &
                                 #COMPANY_CODE, &
                                 "", &
                                 (#INVOICE_QUANTITY), &
                                 "", &
                                 "", &
                                 (#WEIGHT), &
                                 (#CORPORATE_ADDRESS_CODE), &
                                 (#CURRENCY_MASK), &
                                 "", &
                                 #EC_PROCESSED_INDICATOR, &
                                 #EC_TRANSACTION_TYPE, &
                                 #EC_TARIFF_CODE, &
                                 #EC_COUNTRY_OF_ORIGIN, &
                                 #EC_SUPP_UNIT_QTY, &
                                 #EC_WEIGHT, &
                                 #EC_MODE_TRANSPORT, &
                                 #EC_DELIVERY_TERMS, &
                                 #EC_STATISTICAL_VALUE, &
                                 #EC_ANALYSIS_1, &
                                 #EC_ANALYSIS_2, &
                                 #EC_ANALYSIS_3, &
                                 #EC_ANALYSIS_4, &
                                 #EC_ANALYSIS_5, &
                                 "","","")

                        IF (#EC_TARIFF_CODE = "00000000000")
                                PURCHASE_INVOICE_LINES(SYS_EC_STATISTICS_APPLICABLE) = #NO
                        ELSE
                                PURCHASE_INVOICE_LINES(SYS_EC_STATISTICS_APPLICABLE) = #YES
                        END_IF

                        PURCHASE_INVOICE_LINES(SYS_EC_PROCESSED_INDICATOR)= #EC_PROCESSED_INDICATOR
                        PURCHASE_INVOICE_LINES(SYS_EC_TRANSACTION_TYPE) = #EC_TRANSACTION_TYPE
                        PURCHASE_INVOICE_LINES(SYS_TARIFF_CODE)         = #EC_TARIFF_CODE
                        PURCHASE_INVOICE_LINES(SYS_COUNTRY_OF_ORIGIN)   = #EC_COUNTRY_OF_ORIGIN
                        PURCHASE_INVOICE_LINES(SYS_EC_SUPP_UNIT_QTY)    = #EC_SUPP_UNIT_QTY
                        PURCHASE_INVOICE_LINES(SYS_EC_WEIGHT)           = #EC_WEIGHT
                        PURCHASE_INVOICE_LINES(SYS_EC_MODE_OF_TRANSPORT)= #EC_MODE_TRANSPORT
                        PURCHASE_INVOICE_LINES(SYS_EC_DELIVERY_TERMS)   = #EC_DELIVERY_TERMS
                        PURCHASE_INVOICE_LINES(SYS_EC_STATISTICAL_VALUE)        = #EC_STATISTICAL_VALUE
                        PURCHASE_INVOICE_LINES(SYS_EC_ANALYSIS_1)               = #EC_ANALYSIS_1
                        PURCHASE_INVOICE_LINES(SYS_EC_ANALYSIS_2)               = #EC_ANALYSIS_2
                        PURCHASE_INVOICE_LINES(SYS_EC_ANALYSIS_3)               = #EC_ANALYSIS_3
                        PURCHASE_INVOICE_LINES(SYS_EC_ANALYSIS_4)               = #EC_ANALYSIS_4
                        PURCHASE_INVOICE_LINES(SYS_EC_ANALYSIS_5)               = #EC_ANALYSIS_5
                        #EC_MODE = "M"
                END_IF

                IF (#OPT = "EC_REP") GOTO LINE_MENU
        END_BLOCK

        BEGIN_BLOCK CHECK_GL_POSTINGS
                        ! If theres been no changes, skip postings
                #TAX_CHANGED = #NO
                PERFORM CHECK_FOR_CHANGED_TAX_DETAILS (#PURCHASE_INVOICE_LINE)

                IF (%STATUS = %EMPTY AND #TAX_VAL<>0.0)
                        #TAX_CHANGED = #YES
                END_IF

                IF (#TAX_CHANGED=#NO AND #NET_VALUE = #OLD_NET_VALUE AND #TAX_VAL = #OLD_TAX_VAL AND #RETAINERS_VAL = #OLD_RETAINERS_VAL AND &
					#OLD_PROJECT = PURCHASE_INVOICE_LINES(PA_PROJECT_CODE) AND &
					#OLD_WBS_NUMBER = PURCHASE_INVOICE_LINES(PA_WBS_NUMBER))
                     IF ( #CHECK_GL_POSTINGS_AGAIG<>#YES ) 
                           GOTO LINE_MENU
                     END_IF 
                END_IF

        END_BLOCK

        BEGIN_BLOCK RECALC_GL_POSTINGS
                ! KR p44 is now quantity field i.e. QTY_ACCEPTED,
                ! QTY_IN_QUALITY_CONTROL so posting accounts for GRNI are
                ! correct.
                !

                ! vary some parameter values for this program depending on
                ! the invoice line:
                IF (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE_TYPE) &
                                        = PARAMETER("LINE_TYPE_NONSTOCK"))

                        !Qty for a nonstock part
                        #INV_POSTINGS_QTY = #INVOICE_QUANTITY

                        !UOM used for figuring nonstandard cost variance
                        !Nonstock UOM not needed; leave blank to fill parameter.
                        #INV_POSTINGS_QTY_UOM = ""

                ELSE
                        ! product is stocked
                        IF (PURCHASE_INVOICE_LINES(IC_NOMINATED_UNIT) = #COSTING_UNIT OR &
                        #UOM_TYPE = PARAMETER("IC_SINGLE_UOM_CONTROL"))

                                #INV_POSTINGS_QTY &
                                   = PURCHASE_INVOICE_LINES(IC_NOMINATED_QTY)

                                !UOM used for figuring nonstandard cost variance
                                #INV_POSTINGS_QTY_UOM &
                                   = PURCHASE_INVOICE_LINES(IC_NOMINATED_UNIT)

                        ELSE

                                #INV_POSTINGS_QTY &
                                   = PURCHASE_INVOICE_LINES(IC_OTHER_INVENTORY_QTY)

                                !UOM used for figuring nonstandard cost variance
                                #INV_POSTINGS_QTY_UOM &
                                   = PURCHASE_INVOICE_LINES(IC_OTHER_INVENTORY_UNIT)

                        END_IF
                END_IF

        #LINE_VAL_EX_TAX    = ROUND( #INVOICE_QUANTITY * PURCHASE_INVOICE_LINES(PURCHASE_COST), #CURRENCY_DECIMAL )

        IF ( #SYS_E_TAX_VAL = 0.0 &
            AND #SYS_N_TAX_VAL = 0.0 )  #LINE_VARIANCE  = 0.0

                IF ( #FUND_IN_USE=#YES )   
                        #CHECK_GL_POSTINGS_AGAIG=#NO
                        !#DIFF_BALANCE = #LINE_VALUE - #OLD_LINE_VALUE
                        PERFORM CHECK_FUND
                        IF ( %STATUS = %FAILURE ) 
                            #CHECK_GL_POSTINGS_AGAIG=#YES
                            GOTO INVOICE_QUANTITY
                        END_IF      
                END_IF

		#COPY_PA_FROM_PO = #YES

        FIND IN POP_HEADERS &
	        /LOCK=NONE &
			/SECONDARY &
			/STREAM_NAME=POPH2 &
	        /WITH=COMPANY_CODE = PURCHASE_INVOICES(COMPANY_CODE) &
	        /WITH=DIVISION = PURCHASE_INVOICES(DIVISION) &
	        /WITH=PO_NUMBER = PURCHASE_INVOICES(PO_NUMBER)
		   
        FIND IN POP_LINES &
	        /LOCK=NONE &
			/SECONDARY &
			/STREAM_NAME=POPL2 &
	        /WITH=COMPANY_CODE = PURCHASE_INVOICES(COMPANY_CODE) &
	        /WITH=DIVISION = PURCHASE_INVOICES(DIVISION) &
	        /WITH=PO_NUMBER = PURCHASE_INVOICES(PO_NUMBER) &
			/WITH=PO_LINE_NUMBER = PURCHASE_INVOICE_LINES(PO_LINE_NUMBER)
		
		IF ( (PURCHASE_INVOICES(PA_WBS_NUMBER) <> POPH2:POP_HEADERS(PA_WBS_NUMBER)) OR (PURCHASE_INVOICE_LINES(PA_WBS_NUMBER) <> POPL2:POP_LINES(PA_WBS_NUMBER))) 
			#COPY_PA_FROM_PO = #NO		
		END_IF

                PERFORM "GEMPOP:POP_L_DEF_INVOICE_POSTINGS" ( &
                                (PARAMETER("LANGUAGE_YES")), &
                                (PURCHASE_INVOICE_LINES(COMPANY_CODE)), &
                                (PURCHASE_INVOICE_LINES(DIVISION)), &
                                (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_NUMBER)), &
                                (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE)), &
                                (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE_TYPE)), &
                                (PURCHASE_INVOICE_LINES(PART_CODE)), &
                                (PURCHASE_INVOICE_LINES(WAREHOUSE)), &
                                (#INV_POSTINGS_QTY), &
                                (#LINE_VALUE), &
                                (#LINE_DISCOUNT), &
                                (#SYS_E_TAX_VAL), &
                                (#SYS_N_TAX_VAL), &
                                (#RETAINERS_VAL), &
                                (PURCHASE_INVOICES(VENDOR_INVOICE_NUMBER)), &
                                (PURCHASE_INVOICES(POP_COMMITMENT_PERIOD)), &
                                (PURCHASE_INVOICES(POP_COMMITMENT_YEAR)), &
                                (PURCHASE_INVOICES(COST_CENTER)), &
                                (PURCHASE_INVOICES(INVOICE_DATE)), &
                                (PURCHASE_INVOICE_LINES(VENDOR_NUMBER)), &
                                "V", &
                                (PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE)), &
                                (PARAMETER("LANGUAGE_NO")), &
                                "0", &
                                "0", &
                                "0", &
                                "", &
                                "0", &
                                "0", &
                                "0", &
                                "", &
                                (PURCHASE_INVOICES(SYS_COPY_REGISTER_TAX)), &
                                (PURCHASE_INVOICES(SYS_COPY_REGISTER_TAX_RETAINERS)), &
                                "0", &
                                "0", &
                                "0", &
                                "0", &
                                (PURCHASE_INVOICE_LINES(VENDOR_NUMBER)), &
                                "G", &
                                (GOODS_RECEIVED_LINES(PO_NUMBER)), &
                                (GOODS_RECEIVED_LINES(PO_LINE_NUMBER)), &
                                (PURCHASE_INVOICE_LINES(INVOICE_QUANTITY)), &
!                                (#GRN_LINE_STATUS), &
                                (#CURRENT_STATUS_CODE), &
                                PURCHASE_INVOICE_LINES(DELIVERY_ADDRESS_CODE),  &
                                (PARAMETER("STATUS_LIVE")), &
                                PURCHASE_INVOICES(POSTING_DATE), &
                                (PURCHASE_INVOICES(INTERCOMPANY_POSTINGS)), &
                                (PURCHASE_INVOICE_LINES(IC_LOT_NUMBER)), &
                                (#INV_POSTINGS_QTY_UOM), &
                                 "" , &
                                (#PRICING_METHOD), &
                                (#LINE_VARIANCE), &
                                (#PROJECT), &
                                (#WBS_NUMBER), &
                                #R1, &
								#COPY_PA_FROM_PO)

                IF (%STATUS=%FAILURE)
                        ERROR/TEXT_ONLY/WAIT/BELL #R1
                        !EXIT(%FAILURE)
                END_IF

        END_BLOCK

        BEGIN_BLOCK GL_POSTINGS
        
                #TOT_LINE_VAL = #LINE_VALUE - #LINE_DISCOUNT + #SYS_E_TAX_VAL + #SYS_N_TAX_VAL
                ! Skip, if there are no postings for the line
                IF(#TOT_LINE_VAL=0)
                ! If new line value is zero, goto delete old PURCHASE_INVOICE_GL_POSTINGS
                     START_STREAM DR &
                        /TABLE=PURCHASE_INVOICE_GL_POSTINGS &
                        /LOCK=WRITE &
                        /WITH=COMPANY_CODE=PURCHASE_INVOICE_LINES(COMPANY_CODE) &
                        /WITH=DIVISION=PURCHASE_INVOICE_LINES(DIVISION) &
                        /WITH=PURCHASE_INVOICE_NUMBER= PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_NUMBER) &
                        /WITH=PURCHASE_INVOICE_LINE= PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE)

                    WHILE (1)

                        FETCH DR /FAILURE=(CONTINUE OUT)

                            DELETE FROM PURCHASE_INVOICE_GL_POSTINGS

                            IF (%STATUS = %FAILURE)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_62111
                                EXIT(%FAILURE)
                            END_IF
                    END_WHILE


                     GOTO LINE_MENU
                END_IF

                ! Non-stock, Allow to modify and split the GL Distribution  
                #MOD_OPTION = 1

                PERFORM "GEMPOP:POP_L_MAINTAIN_INVOICE_GLPS" ( &
                        (#COMPANY_CODE), &
                        (#DIVISION), &
                        (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_NUMBER)), &
                        (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE)), &
                        (PURCHASE_INVOICES(COST_CENTER)), &
                        "", &
                        (PURCHASE_INVOICES(INVOICE_DATE)), &
                        (PURCHASE_INVOICES(VENDOR_INVOICE_NUMBER)), &
                        "", &
                        (PURCHASE_INVOICES(POP_COMMITMENT_PERIOD)), &
                        (PURCHASE_INVOICES(POP_COMMITMENT_YEAR)), &
                        (PURCHASE_INVOICES(VENDOR_NUMBER)), &
                        (#INV_POSTINGS_QTY), &
                        (#LINE_VALUE), &
                        (#LINE_DISCOUNT), &
                        (#SYS_E_TAX_VAL), &
                        (#SYS_N_TAX_VAL), &
                        (#RETAINERS_VAL), &
                        (PURCHASE_INVOICES(INTERCOMPANY_POSTINGS)), &
                        (#ALLOW_NEGATIVES), &
                        (#MODIFY_GL_CONTROL), &
                        "V", &
                        (#SYS_TAXABLE_CODE), &
                        "0", &
                        "0", &
                        "0", &
                        "", &
                        "0", &
                        "0", &
                        "0", &
                        "", &
                        "0", &
                        "0", &
                        "0", &
                        "0", &
                         #R1, &
                         (""), &
                         (#MOD_OPTION), &
                         (#PROJECT), &
                         (#WBS_NUMBER))

                IF      (%STATUS=%FAILURE)
                        ERROR/TEXT_ONLY/WAIT/BELL #R1
                        EXIT(%FAILURE)
                END_IF
        END_BLOCK

        BEGIN_BLOCK LINE_MENU
                #OLD_NET_VALUE = #NET_VALUE
                #OLD_TAX_VAL = #TAX_VAL
                #OLD_RETAINERS_VAL = #RETAINERS_VAL
                #TEN99_MODE = "M"


        IF ( #OPT = "TAX" &
            AND #PRICING_METHOD = #PRICING_METHOD_INCLUSIVE &
            AND #TAX_RATE_CHANGED )

            GOTO PUR_PRICE
        END_IF
                #OPT = ""

                PERFORM LINE_MENU

                IF (#OPT = "CODES")
                        OUTPUT_BLOCK /ROW=6 /COL=18 &
                                /PROMPT=(MESSAGE("P_00214")) &
                                /SOURCE=(PURCHASE_INVOICE_LINES(DELIVERY_ADDRESS_CODE))

                        #OPT = "TAX"
                        GOTO CALC_SALES_TAX

                END_IF

                IF (%STATUS = %BACK)    GOTO COMMENTS
                IF (#OPT = "POST")              GOTO GL_POSTINGS
                IF (#OPT = "TAX")               GOTO CALC_SALES_TAX
                IF (#OPT = "TAX_RET")               GOTO TAX_RETAINERS_CODE
                IF (#OPT = "EC_REP")    GOTO EC_REPORTING
                IF (#OPT = "LINE")      GOTO PART_CODE
                IF (#OPT = "NEXT")              EXIT(%SUCCESS)
                IF (#OPT = "INQ")               GOTO GRN_INQ_30
                IF (#OPT = "EXIT")              EXIT(%STATUS)

                GOTO LINE_MENU
                !Perform the end of line menu and based on the results
                ! charge off and perform the relevant routine
        END_BLOCK

        BEGIN_BLOCK GRN_INQ_30
                PERFORM "GEMPOP:POP_I_GOODS_RECEIVED" LINK_ENTRY (#COMPANY_CODE,#DIVISION,PURCHASE_INVOICE_LINES(GRN_NUMBER))

                GOTO LINE_MENU
        END_BLOCK

END_FORM

PROCEDURE_FORM DELETE_EXISTING_TAX_DETAILS (#LINE) &
        /TABLE=PURCHASE_INVOICE_TAX_DETAILS &
        /WITH=COMPANY_CODE=#COMPANY_CODE &
        /WITH=DIVISION=#DIVISION &
        /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER &
        /WITH=PURCHASE_INVOICE_LINE=#LINE

        BEGIN_BLOCK DELETE_LINES
                DELETE FROM PURCHASE_INVOICE_TAX_DETAILS
                IF (%STATUS <> %SUCCESS)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_32106
                        EXIT(%FAILURE)
                END_IF
        END_BLOCK

END_FORM


PROCEDURE_FORM DELETE_EXISTING_TAX_RETAINERS (#LINE) &
        /TABLE=PURCHASE_INVOICE_TAX_RETAINERS &
        /WITH=COMPANY_CODE=#COMPANY_CODE &
        /WITH=DIVISION=#DIVISION &
        /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER &
        /WITH=PURCHASE_INVOICE_LINE=#LINE

        BEGIN_BLOCK DELETE_LINES
                DELETE FROM PURCHASE_INVOICE_TAX_RETAINERS
                IF (%STATUS <> %SUCCESS)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_32106
                        EXIT(%FAILURE)
                END_IF
        END_BLOCK

END_FORM

PROCEDURE_FORM DELETE_INVOICE_LINE


        BEGIN_BLOCK DELETE_DETAILS
                FIND IN PURCHASE_INVOICES &
                        /LOCK=WRITE &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_62338
                        EXIT(%FAILURE)
                END_IF

                IF (PURCHASE_INVOICE_LINES(QTY_ALLOCATED)<>'0')
                        MESSAGE/IDENTIFIER/BELL/WAIT P_32232
                        EXIT(%FAILURE)
                END_IF

                #PURCHASE_INVOICE_LINE = PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE)

                !... If Cost is 0 there are not posting for this line
                PERFORM CHECK_INVOICE_POSTINGS (#PURCHASE_INVOICE_LINE)
                IF (%STATUS<>%EMPTY AND %STATUS<>%FAILURE)
                        PERFORM "GEMPOP:POP_L_DEL_INVOICE_GLPS" (&
                                (PURCHASE_INVOICE_LINES(COMPANY_CODE)), &
                                (PURCHASE_INVOICE_LINES(DIVISION)), &
                                (PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_NUMBER)), &
                                (#PURCHASE_INVOICE_LINE), &
                                "N","","","", &
                                (PARAMETER("STATUS_LIVE")), &
                                #R1, &
                                "")

                        IF      (%STATUS=%FAILURE)
                                MESSAGE/IDENTIFIER/BELL/WAIT #R1
                                EXIT(%FAILURE)
                        END_IF
                END_IF

                PERFORM DELETE_EXISTING_TAX_DETAILS (#PURCHASE_INVOICE_LINE)
                IF (%STATUS = %FAILURE) EXIT(%FAILURE)

                PERFORM DELETE_EXISTING_TAX_RETAINERS (#PURCHASE_INVOICE_LINE)
                IF (%STATUS = %FAILURE) EXIT(%FAILURE)

                PERFORM DELETE_EXISTING_TEN99_DETAILS
                IF (%STATUS = %FAILURE) EXIT(%STATUS)

                        ! Need to find the header for the benefit of the
                        ! triggers.

                #TOTAL_LINE_DISCOUNT = PURCHASE_INVOICES(LINE_DISCOUNT) - &
                        PURCHASE_INVOICE_LINES(LINE_DISCOUNT)

                IF (PURCHASE_INVOICE_LINES(SYS_TAXABLE_CODE) <> PARAMETER("LANGUAGE_NO"))
                        #E_TOTAL_LINE_TAX = PURCHASE_INVOICES(SYS_E_TAX_VAL) &
                                - PURCHASE_INVOICE_LINES(SYS_E_TAX_VAL)

                        #N_TOTAL_LINE_TAX = PURCHASE_INVOICES(SYS_N_TAX_VAL) &
                                - PURCHASE_INVOICE_LINES(SYS_N_TAX_VAL)

                        #TOTAL_LINE_TAX = #E_TOTAL_LINE_TAX + #N_TOTAL_LINE_TAX

                END_IF

                #BATCH_TOTAL_TAX_RETAINERS=PURCHASE_INVOICES(SYS_TAX_RETAINERS_CURRENCY) &
                        - PURCHASE_INVOICE_LINES(SYS_TAX_RETAINERS_CURRENCY)

                #GRAND_TOTAL    = (PURCHASE_INVOICES(POP_INVOICE_TOTAL_CURRENCY) &
                                - PURCHASE_INVOICE_LINES(POP_INVOICE_TOTAL_CURRENCY)) &
                                + #TOTAL_LINE_TAX &
                                - #TOTAL_LINE_DISCOUNT

                IF (#SYS_TAX_RETAINERS_FLAG_AP = #YES AND &
                        #DIV_TAX_RETAINERS_FLAG = #YES AND &
                        (#VENDOR_TAX_RETAINERS_FLAG=#YES OR #PAYEE_TAX_RETAINERS_FLAG=#YES))

                        #GRAND_TOTAL    = #GRAND_TOTAL &
                                - #BATCH_TOTAL_TAX_RETAINERS
                END_IF
        END_BLOCK

        OUTPUT_BLOCK TOTAL_LINE_DISCOUNT_54 /ROW=2 /COL=26 /LEN=(#CURRENCY_LEN) &
                        /SOURCE=(#TOTAL_LINE_DISCOUNT) &
                        /USING=PURCHASE_INVOICES(LINE_DISCOUNT) &
                        /OUTPUT_MASK=#CURRENCY_MASK

        OUTPUT_BLOCK TOTAL_LINE_TAX_55 /ROW=2 /COL=44 /LEN=(#CURRENCY_LEN) &
                        /SOURCE=(#TOTAL_LINE_TAX) &
                        /USING=PURCHASE_INVOICES(TAX_VAL) &
                        /OUTPUT_MASK=#CURRENCY_MASK

        OUTPUT_BLOCK TOTAL_LINE_TOTAL_56 /ROW=2 /COL=62 /LEN=(#CURRENCY_LEN) &
                        /SOURCE=(#GRAND_TOTAL) &
                        /USING=PURCHASE_INVOICES(POP_INVOICE_TOTAL_CURRENCY) &
                        /OUTPUT_MASK=#CURRENCY_MASK

END_FORM


PROCEDURE_FORM CANCEL_INVOICE

        BEGIN_BLOCK CHECK_INVOICE_STATUS
                !
                ! Reverse POP & GRN record updates only when cancelling
                ! an existing invoice, either directly from the header screen
                ! as the main option or after selecting modify as the main
                ! option and canceling from the totals screen.  Reversal is not
                ! needed if cancelling a new invoice from the totals screen.
                !

                IF (#MAIN_OPT <> "ENTRY")
                				#INDEX = 0
                        PERFORM UPDATE_LINKS
        
                        IF (%STATUS = %FAILURE)
                            MESSAGE/IDENTIFIER/BELL/WAIT P_01166,PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)         
                            ROLLBACK
                            EXIT(%FAILURE)
                        END_IF
                END_IF

                START_TRANSACTION

                FIND IN PURCHASE_INVOICES &
                        /LOCK=WRITE &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER

                IF (%STATUS=%FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_32134
                        EXIT(%FAILURE)
                END_IF
        END_BLOCK

        BEGIN_BLOCK FINISH_DELETE
                PERFORM CANCEL_ALL_LINES
                IF (%STATUS = %FAILURE) EXIT(%STATUS)

                #PURCHASE_INVOICE_LINE = "0"
                PERFORM CANCEL_GL_POSTINGS
                IF (%STATUS = %FAILURE) EXIT(%STATUS)

                PERFORM DELETE_EXISTING_TAX_DETAILS (#PURCHASE_INVOICE_LINE)
                IF (%STATUS     = %FAILURE)     EXIT(%STATUS)

                PERFORM CANCEL_REGISTRATION

                DELETE FROM PURCHASE_INVOICES
                
                COMMIT
        END_BLOCK

END_FORM


PROCEDURE_FORM CANCEL_ALL_LINES &
        /TABLE=PURCHASE_INVOICE_LINES &
        /WITH=COMPANY_CODE=#COMPANY_CODE &
        /WITH=DIVISION=#DIVISION &
        /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER


        BEGIN_BLOCK DELETE_DETAIL_LINES
                #PURCHASE_INVOICE_LINE = PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE)
                #CANCEL_GRN_NUMBER = PURCHASE_INVOICE_LINES(GRN_NUMBER)

                PERFORM CANCEL_GL_POSTINGS
                IF (%STATUS = %FAILURE) EXIT(%STATUS)

                PERFORM DELETE_EXISTING_TAX_DETAILS (#PURCHASE_INVOICE_LINE)
                IF (%STATUS = %FAILURE) EXIT(%STATUS)

                PERFORM DELETE_EXISTING_TAX_RETAINERS (#PURCHASE_INVOICE_LINE)
                IF (%STATUS = %FAILURE) EXIT(%STATUS)

                PERFORM DELETE_EXISTING_TEN99_DETAILS
                IF (%STATUS = %FAILURE) EXIT(%STATUS)
                
                PERFORM CANCEL_GRN_HEADER
                IF (%STATUS = %FAILURE) EXIT(%STATUS)

                DELETE FROM PURCHASE_INVOICE_LINES
        END_BLOCK

END_FORM


PROCEDURE_FORM CANCEL_GL_POSTINGS &
        /TABLE=PURCHASE_INVOICE_GL_POSTINGS &
        /WITH=COMPANY_CODE=#COMPANY_CODE &
        /WITH=DIVISION=#DIVISION &
        /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER &
        /WITH=PURCHASE_INVOICE_LINE=#PURCHASE_INVOICE_LINE &
        /SORTED_BY=(COMPANY_CODE,DIVISION,PURCHASE_INVOICE_NUMBER,PURCHASE_INVOICE_LINE) &
        /REDUCED_TO=(COMPANY_CODE,DIVISION,PURCHASE_INVOICE_NUMBER,PURCHASE_INVOICE_LINE)


        BEGIN_BLOCK DELETE_INVOICE_GLPS
                DELETE ALL FROM SYS_POSTINGS_CONTROL_VT
                DELETE ALL FROM SYS_POSTINGS_VT
                DELETE ALL FROM SYS_PA_POSTINGS_VT

                CLEAR_BUFFER SYS_POSTINGS_CONTROL_VT
                CLEAR_BUFFER SYS_POSTINGS_VT

                SYS_POSTINGS_CONTROL_VT(COMPANY_CODE) = #COMPANY_CODE
                SYS_POSTINGS_CONTROL_VT(DIVISION) = #DIVISION
                SYS_POSTINGS_CONTROL_VT(DOCUMENT_NUMBER) = #PURCHASE_INVOICE_NUMBER

                SYS_POSTINGS_VT(DOCUMENT_LINE) = #PURCHASE_INVOICE_LINE

                ADD TO SYS_POSTINGS_CONTROL_VT
                ADD TO SYS_POSTINGS_VT

                PERFORM "GEMPOP:POP_L_DEL_INVOICE_GLPS" (&
                        (PURCHASE_INVOICE_GL_POSTINGS(COMPANY_CODE)), &
                        (PURCHASE_INVOICE_GL_POSTINGS(DIVISION)), &
                        (PURCHASE_INVOICE_GL_POSTINGS(PURCHASE_INVOICE_NUMBER)), &
                        (#PURCHASE_INVOICE_LINE), &
                        "N","","","", &
                        (PARAMETER("STATUS_LIVE")), &
                        #R1, &
                        "")

                IF (%STATUS=%FAILURE)
                        ERROR/TEXT_ONLY/BELL/WAIT #R1
                        EXIT(%FAILURE)
                END_IF
        END_BLOCK

END_FORM


FORM INVOICE_CANCELLATION_NOTICE /ROW=15 /COL=40 /HEIGHT=5 /WIDTH=37


        YESNO_BLOCK YES_NO_1 /ROW=4 /COL=29 &
                        /PROMPT=(MESSAGE("P_59017")) &
                        /FAILURE=(EXIT(%FAILURE))

END_FORM


FORM DUE_DATE_CHECK /ROW=18 /COL=11 /HEIGHT=1 /WIDTH=40 &
        /REMAIN &
        /ATTRIBUTES=NOBORDER


        BEGIN_BLOCK DML_1
                IF (CREDIT_TERMS(PAYMENT_CODE) = #PAYMENT_CODE_DATE)
                        PERFORM DUE_DATE
                        IF (%STATUS = %BACK) EXIT(%BACK)
                END_IF

                IF (CREDIT_TERMS(PAYMENT_CODE) = #PAYMENT_CODE_PERIOD)
                        PERFORM DUE_PERIOD
                        IF (%STATUS = %BACK) EXIT(%BACK)
                END_IF
        END_BLOCK

END_FORM


FORM DUE_PERIOD /ROW=18 /COL=12 /HEIGHT=1 /WIDTH=40 &
        /REMAIN &
        /ATTRIBUTES=NOBORDER


        INPUT_BLOCK PERIOD /ROW=1 /COL=15 &
                        /PROMPT=FIELD_PROMPT(DUE_PERIOD) &
                        /TARGET=PURCHASE_INVOICES(DUE_PERIOD) &
                        /BACK=(EXIT(%BACK))

        INPUT_BLOCK YEAR /ROW=1 /COL=28 &
                        /PROMPT=(FIELD_PROMPT(DUE_YEAR)) &
                        /TARGET=PURCHASE_INVOICES(DUE_YEAR)

        BEGIN_BLOCK DATE
                IF (PURCHASE_INVOICES(DUE_PERIOD) <> #PERIOD_DUE  OR   PURCHASE_INVOICES(DUE_YEAR) <> #YEAR_DUE)
                        FIND IN COMPANY_PERIOD_CONTROLS &
                                /LOCK=NONE &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=CURRENT_YEAR=PURCHASE_INVOICES(DUE_YEAR)

                        IF (%STATUS = %SUCCESS)
                                #CURRENT = TABLE_DATA("COMPANY_PERIOD_CONTROLS","START_DATE_"&MASK("!-0@",PURCHASE_INVOICES(DUE_PERIOD)))
                                IF (CREDIT_TERMS_LINES(DAY_IN_PERIOD_DUE) > 0)
                                        PURCHASE_INVOICES(DUE_DATE) = DATE(DAYS(#CURRENT)-1+CREDIT_TERMS_LINES(DAY_IN_PERIOD_DUE))
                                ELSE
                                        PURCHASE_INVOICES(DUE_DATE) = #CURRENT
                                END_IF
                                ! If due period/year has changed, find new due date.
                        END_IF
                END_IF
        END_BLOCK

END_FORM


FORM DUE_PERIOD_DISPLAY /ROW=18 /COL=12 /HEIGHT=1 /WIDTH=40 &
        /REMAIN &
        /ATTRIBUTES=NOBORDER


        OUTPUT_BLOCK PERIOD /ROW=1 /COL=15 &
                        /PROMPT=FIELD_PROMPT(DUE_PERIOD) &
                        /SOURCE=(PURCHASE_INVOICES(DUE_PERIOD))

        OUTPUT_BLOCK YEAR /ROW=1 /COL=28 &
                        /PROMPT=FIELD_PROMPT(DUE_YEAR) &
                        /SOURCE=(PURCHASE_INVOICES(DUE_YEAR))

END_FORM


FORM DUE_DATE /ROW=18 /COL=12 /HEIGHT=1 /WIDTH=40 &
        /REMAIN &
        /ATTRIBUTES=NOBORDER


        INPUT_BLOCK DUE_DATE /ROW=1 /COL=17 &
                        /PROMPT=(FIELD_PROMPT(DUE_DATE)) &
                        /TARGET=PURCHASE_INVOICES(DUE_DATE)

END_FORM


FORM DUE_DATE_DISPLAY /ROW=18 /COL=12 /HEIGHT=1 /WIDTH=40 &
        /REMAIN &
        /ATTRIBUTES=NOBORDER


        OUTPUT_BLOCK DUE_DATE /ROW=1 /COL=17 &
                        /PROMPT=(FIELD_PROMPT(DUE_DATE)) &
                        /SOURCE=(PURCHASE_INVOICES(DUE_DATE))

END_FORM


FORM ERROR (#ERROR_1,#ERROR_2) /ROW=22 /COL=2 /HEIGHT=2 /WIDTH=78 &
        /ATTRIBUTES=NOBORDER


        OUTPUT_BLOCK ERROR /ROW=1 /COL=15 /LEN=45 &
                        /SOURCE=(#ERROR_1) &
                        /ATTRIBUTES=NONE

        YESNO_BLOCK PAUSE_1 /ROW=2 /COL=35 &
                        /PROMPT=(#ERROR_2) &
                        /BACK=(EXIT(%BACK)) &
                        /EXIT=(EXIT(%BACK)) &
                        /SUCCESS=(EXIT(%SUCCESS)) &
                        /FAILURE=(EXIT(%FAILURE))

END_FORM


FORM CHANGE_REGISTRATION /ROW=15 /COL=48 /HEIGHT=4 /WIDTH=30


        OUTPUT_BLOCK BLOCK_1 /ROW=2 /COL=2 /LEN=24 &
                        /SOURCE=(MESSAGE("P_00937")) &
                        /ATTRIBUTES=NONE

        YESNO_BLOCK YES_NO_1 /ROW=3 /COL=24 &
                        /PROMPT=(MESSAGE("P_00061")) &
                        /BACK=(GOTO YES_NO_1) &
                        /EXIT=(GOTO YES_NO_1) &
                        /FAILURE=(EXIT(%BACK))

        BEGIN_BLOCK REVERSE_REGISTER
                IF (#REGISTRATION_NUMBER <> "" AND #CHANGE_REG = #YES)
                        FIND IN PURCHASE_REGISTER_LINES &
                                /LOCK=WRITE &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=DIVISION = #DIVISION &
                                /WITH=REGISTRATION_NUMBER=PURCHASE_INVOICES(REGISTRATION_NUMBER) &

                        IF (%STATUS = %FAILURE)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_00861
                                ROLLBACK
                                EXIT(%FAILURE)
                        END_IF

                        FIND IN PURCHASE_REGISTER_LINES &
                                /LOCK=WRITE &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=DIVISION = #DIVISION &
                                /WITH=REGISTRATION_NUMBER=PURCHASE_INVOICES(REGISTRATION_NUMBER) &
                                /WITH=SEQUENCE = "998"

                        IF (%STATUS = %FAILURE)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_00861
                                ROLLBACK
                                EXIT(%FAILURE)
                        END_IF

                        DELETE FROM PURCHASE_REGISTER_LINES

                        PURCHASE_REGISTER(STATUS_FLAG)           = PARAMETER("STATUS_APPROVE")
                        PURCHASE_REGISTER(AP_TRANSACTION_NUMBER) = ""
                END_IF
                #CHANGE_REG = #YES
        END_BLOCK

END_FORM


FORM ADDRESS_CLEAR /ROW=9 /COL=2 /HEIGHT=5 /WIDTH=78 &
        /REMAIN &
        /ATTRIBUTES=NOBORDER


END_FORM


FORM DUE_DATE_CLEAR /ROW=18 /COL=12 /HEIGHT=1 /WIDTH=40 &
        /REMAIN &
        /ATTRIBUTES=NOBORDER


END_FORM

PROCEDURE_FORM LOAD_TAX_VT &
        /TABLE=PURCHASE_INVOICE_TAX_DETAILS &
        /WITH=COMPANY_CODE=#COMPANY_CODE &
        /WITH=DIVISION=#DIVISION &
        /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER &
        /WITH=PURCHASE_INVOICE_LINE=#PURCHASE_INVOICE_LINE &
        /WITH=TAX_TYPE=#TAX_LINE_TYPE


        BEGIN_BLOCK WRITE_RECORDS
                CLEAR_BUFFER TAX_DETAILS_VT

                TAX_DETAILS_VT(TRAN_LINE_NBR)   = PURCHASE_INVOICE_TAX_DETAILS(TRANSACTION_LINE_NUMBER)
                TAX_DETAILS_VT(TAX_CODE_2)      = PURCHASE_INVOICE_TAX_DETAILS(VENDOR_TAX_CODE)
                TAX_DETAILS_VT(TAX_CODE_1)      = PURCHASE_INVOICE_TAX_DETAILS(PRODUCT_TAX_CODE)
                TAX_DETAILS_VT(TRAN_VALUE)      = PURCHASE_INVOICE_TAX_DETAILS(SYS_TRAN_TOTAL_CURRENCY)
                TAX_DETAILS_VT(SYS_E_TAX_VAL)   = PURCHASE_INVOICE_TAX_DETAILS(SYS_E_TAX_VAL)
                TAX_DETAILS_VT(SYS_N_TAX_VAL)   = PURCHASE_INVOICE_TAX_DETAILS(SYS_N_TAX_VAL)
                TAX_DETAILS_VT(SYS_E_TAX_ADJ_VAL) = PURCHASE_INVOICE_TAX_DETAILS(SYS_E_TAX_ADJ_VAL)
                TAX_DETAILS_VT(SYS_N_TAX_ADJ_VAL) = PURCHASE_INVOICE_TAX_DETAILS(SYS_N_TAX_ADJ_VAL)
                TAX_DETAILS_VT(WAREHOUSE)       = PURCHASE_INVOICE_TAX_DETAILS(WAREHOUSE)
                TAX_DETAILS_VT(PART_CODE)       = PURCHASE_INVOICE_TAX_DETAILS(PART_CODE)
                TAX_DETAILS_VT(ACCOUNT_NUMBER)  = PURCHASE_INVOICE_TAX_DETAILS(AP_TAX_FULL_ACCOUNT)
                TAX_DETAILS_VT(GL_SHORT_CODE)   = PURCHASE_INVOICE_TAX_DETAILS(AP_TAX_CODE)
                TAX_DETAILS_VT(FORMAT_CODE)     = PURCHASE_INVOICE_TAX_DETAILS(AP_POSTING_FORMAT)
                TAX_DETAILS_VT(COMPOSITE_TAX)   = PURCHASE_INVOICE_TAX_DETAILS(SYS_N_TAX_VAL) + &
                                                         PURCHASE_INVOICE_TAX_DETAILS(SYS_E_TAX_VAL)
                TAX_DETAILS_VT(ACCRUE_IGIC)     = PURCHASE_INVOICE_TAX_DETAILS(ACCRUE_IGIC)
                TAX_DETAILS_VT(SYS_TAX_ON_CASH) = PURCHASE_INVOICE_TAX_DETAILS(SYS_TAX_ON_CASH)

                ADD TO TAX_DETAILS_VT
        END_BLOCK

END_FORM

PROCEDURE_FORM LOAD_TAX_RETAINERS_VT &
        /TABLE=PURCHASE_INVOICE_TAX_RETAINERS &
        /WITH=COMPANY_CODE=#COMPANY_CODE &
        /WITH=DIVISION=#DIVISION &
        /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER &
        /WITH=PURCHASE_INVOICE_LINE=#PURCHASE_INVOICE_LINE

        BEGIN_BLOCK WRITE_RECORDS
                CLEAR_BUFFER TAX_RETAINERS_DETAILS_VT

                TAX_RETAINERS_DETAILS_VT(SEQUENCE) = PURCHASE_INVOICE_TAX_RETAINERS(SEQUENCE)
                TAX_RETAINERS_DETAILS_VT(SYS_TAX_RETAINERS_CODE) = PURCHASE_INVOICE_TAX_RETAINERS(SYS_TAX_RETAINERS_CODE)
                TAX_RETAINERS_DETAILS_VT(SYS_TAX_RETAINERS_PERCENT) = PURCHASE_INVOICE_TAX_RETAINERS(SYS_TAX_RETAINERS_PERCENT)
                TAX_RETAINERS_DETAILS_VT(SYS_TAX_RETAINERS_ACCOUNT) = PURCHASE_INVOICE_TAX_RETAINERS(SYS_TAX_RETAINERS_ACCOUNT)
                TAX_RETAINERS_DETAILS_VT(SYS_TAX_RETAINERS_SHORT_CODE) = PURCHASE_INVOICE_TAX_RETAINERS(SYS_TAX_RETAINERS_SHORT_CODE)
                TAX_RETAINERS_DETAILS_VT(SYS_TAX_RETAINERS_TYPE) = PURCHASE_INVOICE_TAX_RETAINERS(SYS_TAX_RETAINERS_TYPE)
                TAX_RETAINERS_DETAILS_VT(SYS_TAX_RETAINERS_CURRENCY) = PURCHASE_INVOICE_TAX_RETAINERS(SYS_TAX_RETAINERS_CURRENCY)
                TAX_RETAINERS_DETAILS_VT(SYS_TAX_RETAINERS_CURRENCY) = PURCHASE_INVOICE_TAX_RETAINERS(SYS_TAX_RETAINERS_CURRENCY)
                TAX_RETAINERS_DETAILS_VT(SYS_TRAN_TOTAL_CURRENCY) = PURCHASE_INVOICE_TAX_RETAINERS(SYS_TRAN_TOTAL_CURRENCY)

                ADD TO TAX_RETAINERS_DETAILS_VT


        END_BLOCK

END_FORM

PROCEDURE_FORM DELETE_PREVIOUS_TAX_RECORDS &
        /TABLE=PURCHASE_INVOICE_TAX_DETAILS &
        /WITH=COMPANY_CODE=#COMPANY_CODE &
        /WITH=DIVISION=#DIVISION &
        /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER &
        /WITH=PURCHASE_INVOICE_LINE=#PURCHASE_INVOICE_LINE &
        /WITH=TAX_TYPE=#TAX_LINE_TYPE


        BEGIN_BLOCK DELETE_IT
                DELETE FROM PURCHASE_INVOICE_TAX_DETAILS
        END_BLOCK

END_FORM

PROCEDURE_FORM DELETE_PREVIOUS_TAX_RETAINERS_RECORDS &
        /LOCK=WRITE &
        /TABLE=PURCHASE_INVOICE_TAX_RETAINERS &
        /WITH=COMPANY_CODE=#COMPANY_CODE &
        /WITH=DIVISION=#DIVISION &
        /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER &
        /WITH=PURCHASE_INVOICE_LINE=#PURCHASE_INVOICE_LINE


        BEGIN_BLOCK DELETE_IT
                DELETE FROM PURCHASE_INVOICE_TAX_RETAINERS
        END_BLOCK

END_FORM

PROCEDURE_FORM CREATE_TAX_RETAINERS_DETAIL_FROM_VT &
        /TABLE=TAX_RETAINERS_DETAILS_VT


        BEGIN_BLOCK MAIN
                CLEAR_BUFFER PURCHASE_INVOICE_TAX_RETAINERS

                PURCHASE_INVOICE_TAX_RETAINERS(COMPANY_CODE)                  = #COMPANY_CODE
                PURCHASE_INVOICE_TAX_RETAINERS(DIVISION)                      = #DIVISION
                PURCHASE_INVOICE_TAX_RETAINERS(PURCHASE_INVOICE_NUMBER)       = #PURCHASE_INVOICE_NUMBER
                PURCHASE_INVOICE_TAX_RETAINERS(PURCHASE_INVOICE_LINE)         = #PURCHASE_INVOICE_LINE
                PURCHASE_INVOICE_TAX_RETAINERS(SEQUENCE)                      = TAX_RETAINERS_DETAILS_VT(SEQUENCE)
                PURCHASE_INVOICE_TAX_RETAINERS(SYS_TAX_RETAINERS_CODE)        = TAX_RETAINERS_DETAILS_VT(SYS_TAX_RETAINERS_CODE)
                PURCHASE_INVOICE_TAX_RETAINERS(SYS_TAX_RETAINERS_PERCENT)     = TAX_RETAINERS_DETAILS_VT(SYS_TAX_RETAINERS_PERCENT)
                PURCHASE_INVOICE_TAX_RETAINERS(SYS_TAX_RETAINERS_ACCOUNT)     = TAX_RETAINERS_DETAILS_VT(SYS_TAX_RETAINERS_ACCOUNT)
                PURCHASE_INVOICE_TAX_RETAINERS(SYS_TAX_RETAINERS_SHORT_CODE)  = TAX_RETAINERS_DETAILS_VT(SYS_TAX_RETAINERS_SHORT_CODE)
                PURCHASE_INVOICE_TAX_RETAINERS(SYS_TAX_RETAINERS_TYPE)        = TAX_RETAINERS_DETAILS_VT(SYS_TAX_RETAINERS_TYPE)
                PURCHASE_INVOICE_TAX_RETAINERS(SYS_TAX_RETAINERS_CURRENCY)    = TAX_RETAINERS_DETAILS_VT(SYS_TAX_RETAINERS_CURRENCY)


                DELETE ALL FROM SYS_CURRENCY_CONTROL_VT
                CLEAR_BUFFER SYS_CURRENCY_CONTROL_VT

                SYS_CURRENCY_CONTROL_VT(COMPANY_CODE) = #COMPANY_CODE
                SYS_CURRENCY_CONTROL_VT(DIVISION) = #DIVISION
                SYS_CURRENCY_CONTROL_VT(SOURCE_MODULE) = PARAMETER("MODULE_PO")
                SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE) =#CURRENCY_CODE
                SYS_CURRENCY_CONTROL_VT(RATE_OVERRIDE) = #NO

                ADD TO SYS_CURRENCY_CONTROL_VT

                PERFORM "GEMLB:LB_S_L_CURRENCY_RATES" &
                        (#SUCCESS_STAT, &
                        #RTN_MESSAGE)

                IF(#SUCCESS_STAT = #NO)
                        ERROR/TEXT_ONLY/WAIT #RTN_MESSAGE
                        EXIT(%FAILURE)
                END_IF

                FIND IN SYS_CURRENCY_CONTROL_VT

                IF(%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_91710
                        EXIT(%FAILURE)
                END_IF

                DELETE ALL FROM SYS_CURRENCY_VALUES_VT
                CLEAR_BUFFER SYS_CURRENCY_VALUES_VT

                SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE) = PURCHASE_INVOICE_TAX_RETAINERS(SYS_TAX_RETAINERS_CURRENCY)

                ADD TO SYS_CURRENCY_VALUES_VT

                PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" &
                        (#SUCCESS_STAT, &
                        #RTN_MESSAGE)

                IF(#SUCCESS_STAT = #NO)
                        ERROR/TEXT_ONLY/WAIT #RTN_MESSAGE
                        EXIT(%FAILURE)
                END_IF

                FIND IN SYS_CURRENCY_VALUES_VT

                IF(%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_91711
                        EXIT(%FAILURE)
                END_IF

                PURCHASE_INVOICE_TAX_RETAINERS(SYS_TAX_RETAINERS_BASE) = SYS_CURRENCY_VALUES_VT(BASE_VALUE)
                PURCHASE_INVOICE_TAX_RETAINERS(SYS_TAX_RETAINERS_2_BASE) = SYS_CURRENCY_VALUES_VT(BASE_2_VALUE)

                PURCHASE_INVOICE_TAX_RETAINERS(SYS_TRAN_TOTAL_CURRENCY)       = TAX_RETAINERS_DETAILS_VT(SYS_TRAN_TOTAL_CURRENCY)


                ADD TO PURCHASE_INVOICE_TAX_RETAINERS

                IF (%STATUS = %FAILURE)
                        MESSAGE/BELL/IDENTIFIER/WAIT P_02609, "PURCHASE_INVOICE_TAX_RETAINERS"
                        EXIT (%STATUS)
                END_IF
        END_BLOCK

END_FORM

PROCEDURE_FORM CREATE_TAX_DETAIL_FROM_VT &
        /TABLE=TAX_DETAILS_VT

        BEGIN_BLOCK MAIN
                CLEAR_BUFFER PURCHASE_INVOICE_TAX_DETAILS

                PURCHASE_INVOICE_TAX_DETAILS(COMPANY_CODE)              = #COMPANY_CODE
                PURCHASE_INVOICE_TAX_DETAILS(DIVISION)                  = #DIVISION
                PURCHASE_INVOICE_TAX_DETAILS(PURCHASE_INVOICE_NUMBER)   = #PURCHASE_INVOICE_NUMBER
                PURCHASE_INVOICE_TAX_DETAILS(PURCHASE_INVOICE_LINE)     = #PURCHASE_INVOICE_LINE
                PURCHASE_INVOICE_TAX_DETAILS(TAX_TYPE)                  = #TAX_LINE_TYPE
                PURCHASE_INVOICE_TAX_DETAILS(TRANSACTION_LINE_NUMBER)   = TAX_DETAILS_VT(TRAN_LINE_NBR)
                PURCHASE_INVOICE_TAX_DETAILS(AP_TAX_FULL_ACCOUNT)       = TAX_DETAILS_VT(ACCOUNT_NUMBER)
                PURCHASE_INVOICE_TAX_DETAILS(AP_TAX_CODE)               = TAX_DETAILS_VT(GL_SHORT_CODE)
                PURCHASE_INVOICE_TAX_DETAILS(AP_POSTING_FORMAT)         = TAX_DETAILS_VT(FORMAT_CODE)
                PURCHASE_INVOICE_TAX_DETAILS(PRODUCT_TAX_CODE)          = TAX_DETAILS_VT(TAX_CODE_1)
                PURCHASE_INVOICE_TAX_DETAILS(VENDOR_TAX_CODE)           = TAX_DETAILS_VT(TAX_CODE_2)
                PURCHASE_INVOICE_TAX_DETAILS(SYS_TRAN_TOTAL_CURRENCY)   = TAX_DETAILS_VT(TRAN_VALUE)
                PURCHASE_INVOICE_TAX_DETAILS(SYS_E_TAX_VAL)             = TAX_DETAILS_VT(SYS_E_TAX_VAL)
                PURCHASE_INVOICE_TAX_DETAILS(SYS_N_TAX_VAL)             = TAX_DETAILS_VT(SYS_N_TAX_VAL)
                PURCHASE_INVOICE_TAX_DETAILS(SYS_E_TAX_ADJ_VAL)         = TAX_DETAILS_VT(SYS_E_TAX_ADJ_VAL)
                PURCHASE_INVOICE_TAX_DETAILS(SYS_N_TAX_ADJ_VAL)         = TAX_DETAILS_VT(SYS_N_TAX_ADJ_VAL)

                #E_TAX_VAL = #E_TAX_VAL + TAX_DETAILS_VT(SYS_E_TAX_VAL)
                #N_TAX_VAL = #N_TAX_VAL + TAX_DETAILS_VT(SYS_N_TAX_VAL)


!               IF (PURCHASE_INVOICE_TAX_DETAILS(SYS_E_TAX_ADJ_VAL) = 0.0 AND &
!                   PURCHASE_INVOICE_TAX_DETAILS(SYS_N_TAX_ADJ_VAL) = 0.0)

                PURCHASE_INVOICE_TAX_DETAILS(SYS_E_TAX_ADJ_VAL) = PURCHASE_INVOICE_TAX_DETAILS(SYS_E_TAX_VAL)
                PURCHASE_INVOICE_TAX_DETAILS(SYS_N_TAX_ADJ_VAL) = PURCHASE_INVOICE_TAX_DETAILS(SYS_N_TAX_VAL)
!               END_IF

                PURCHASE_INVOICE_TAX_DETAILS(WAREHOUSE) = TAX_DETAILS_VT(WAREHOUSE)
                PURCHASE_INVOICE_TAX_DETAILS(PART_CODE) = TAX_DETAILS_VT(PART_CODE)
                PURCHASE_INVOICE_TAX_DETAILS(ACCRUE_IGIC)       = TAX_DETAILS_VT(ACCRUE_IGIC)
                                PURCHASE_INVOICE_TAX_DETAILS(SYS_TAX_ON_CASH) = TAX_DETAILS_VT(SYS_TAX_ON_CASH)

                ADD TO PURCHASE_INVOICE_TAX_DETAILS
                IF (%STATUS <> %NORMAL)
                        MESSAGE/BELL/IDENTIFIER/WAIT P_02609, "PURCHASE_INVOICE_TAX_DETAILS"
                        EXIT(%STATUS)
                END_IF
        END_BLOCK
END_FORM

PROCEDURE_FORM DECIDE_EC_REPORTING


        BEGIN_BLOCK GET_VENDOR_ADDRESS
                #DEF_EC_REPORT_TYPE     = ""
                #VENDOR_EC_STATE        = ""

                FIND IN VENDOR_ADDRESSES &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=AP_DIVISION=#DIVISION &
                        /WITH=VENDOR_NUMBER=#VENDOR_NUMBER &
                        /WITH=ADDRESS_CODE=VENDORS(DEFAULT_ADDR) &
                        /LOCK=NONE

                IF (%STATUS <> %SUCCESS)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_62009,VENDORS(DEFAULT_ADDR)
                        EXIT (%FAILURE)
                END_IF

                FIND IN SYS_COUNTRIES &
                        /LOCK=NONE &
                        /WITH=SYS_COUNTRY=VENDOR_ADDRESSES(SYS_COUNTRY)

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_52166
                        EXIT (%FAILURE)
                ELSE
                        IF (SYS_COUNTRIES(SYS_EC_MEMBER) = #YES)
                                #VENDOR_EC_STATE        = SYS_COUNTRIES(SYS_EC_MEMBER_STATE_CODE)
                                #DEF_EC_TRANSACTION_TYPE= VENDOR_ADDRESSES(SYS_EC_TRANSACTION_TYPE)
                                #DEF_EC_MODE_TRANSPORT  = VENDOR_ADDRESSES(SYS_EC_MODE_OF_TRANSPORT)
                                #DEF_EC_DELIVERY_TERMS  = VENDOR_ADDRESSES(SYS_EC_DELIVERY_TERMS)
                                #DEF_EC_STAT_FACTOR     = VENDOR_ADDRESSES(SYS_EC_FACTOR)
                        END_IF
                END_IF
        END_BLOCK

        BEGIN_BLOCK CHECK_OUR_ADDRESS
                FIND IN SYS_COUNTRIES &
                        /LOCK=NONE &
                        /WITH=SYS_COUNTRY=CORPORATE_ADDRESSES(SYS_COUNTRY)

                IF (%STATUS=%FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_02501
                        EXIT (%FAILURE)
                END_IF

                IF (SYS_COUNTRIES(SYS_EC_MEMBER) = #YES AND &
                        SYS_COUNTRIES(SYS_EC_MEMBER_STATE_CODE) <> #VENDOR_EC_STATE &
                        AND #VENDOR_EC_STATE <> "")
                                #DEF_EC_REPORT_TYPE = #COMPANY_EC_REPORT_TYPE
                END_IF
        END_BLOCK

END_FORM


PROCEDURE_FORM CLEAR_EC_VARIABLES
        BEGIN_BLOCK CLEAR_EC
                #EC_PROCESSED_INDICATOR = ""
                #EC_TARIFF_CODE         = ""
                #EC_COUNTRY_OF_ORIGIN   = ""
                #EC_SUPP_UNIT_QTY       = ""
                #EC_WEIGHT              = ""
                #EC_TRANSACTION_TYPE    = ""
                #EC_MODE_TRANSPORT      = ""
                #EC_DELIVERY_TERMS      = ""
                #EC_STATISTICAL_VALUE   = ""
                #EC_ANALYSIS_1          = ""
                #EC_ANALYSIS_2          = ""
                #EC_ANALYSIS_3          = ""
                #EC_ANALYSIS_4          = ""
                #EC_ANALYSIS_5          = ""
        END_BLOCK
END_FORM

PROCEDURE_FORM CLOSE_PO

!	BEGIN_BLOCK	CLOSE_OUTSTANDING_LINES
!
!		IF (#CLOSE = PARAMETER("LANGUAGE_YES"))
!				PERFORM	"GEMPOP:POP_L_CLOSE_PO"	&
!						("E", &
!						(#COMPANY_CODE), &
!						(#COMMIT_PERIOD), &
!						(#COMMIT_YEAR),	&
!						(#POSTING_PERIOD), &
!						(#POSTING_YEAR), &
!						(#DIVISION), &
!						(#COST_CENTER),	&
!						(#FUND_IN_USE),	&
!						"",	&
!						(#PO_NUMBER), &
!						"",	&
!						(#VENDOR_NUMBER), &
!				"",	&
!						#R1, &
!						#R2)
!
!				IF (%STATUS	<> %NORMAL)
!							MESSAGE/IDENTIFIER/BELL/WAIT P_62308
!				END_IF
!		END_IF
!	END_BLOCK

	BEGIN_BLOCK	FIND_ALLOC_PO
			! Determine	which po lines and details are fully allocated and close line.

		#COUNT = 1
		WHILE (#COUNT <= #INDEX)

				START_TRANSACTION
				START_STREAM LINES &
					/TABLE=POP_LINES &
						/LOCK=WRITE	&
						/WITH=COMPANY_CODE=#COMPANY_CODE &
						/WITH=DIVISION=#DIVISION &
						/WITH=PO_NUMBER=#PO_NUMBER(#COUNT) &
						/WITH=PO_LINE_NUMBER=#PO_LINE_NUMBER(#COUNT)

				WHILE (1)
					#DETAILS_STILL_OPEN = #NO

					   	FETCH LINES	/FAILURE=(CONTINUE OUT)

						START_STREAM DETAILS &
							   	/LOCK=WRITE	&
								/TABLE=POP_LINE_DETAILS	&
								/WITH=COMPANY_CODE=#COMPANY_CODE &
								/WITH=DIVISION=#DIVISION &
								/WITH=PO_NUMBER=LINES:POP_LINES(PO_NUMBER) &
								/WITH=PO_LINE_NUMBER=LINES:POP_LINES(PO_LINE_NUMBER)

					WHILE (1)

						FETCH DETAILS /FAILURE=(CONTINUE OUT)

						IF (LINES:POP_LINES(ORDER_QUANTITY)=0)

							IF ( #ORDER_TYPE = "N" )
								DETAILS:POP_LINE_DETAILS(CLOSED_FOR_PI)	= PARAMETER("LINE_CLOSED_O")
								#DETAILS_STILL_OPEN = #YES


							ELSE
								IF (DETAILS:POP_LINE_DETAILS(PO_QTY_OUTSTANDING) <= 0)
									DETAILS:POP_LINE_DETAILS(CLOSED_FOR_PI)	= PARAMETER("LINE_CLOSED_C")
								ELSE
									DETAILS:POP_LINE_DETAILS(CLOSED_FOR_PI)	= PARAMETER("LINE_CLOSED_O")
									#DETAILS_STILL_OPEN = #YES
								END_IF

							END_IF

						ELSE
							IF (DETAILS:POP_LINE_DETAILS(ORDER_QUANTITY) < = DETAILS:POP_LINE_DETAILS(QTY_INVOICED))

								DETAILS:POP_LINE_DETAILS(CLOSED_FOR_PI)	= PARAMETER("LINE_CLOSED_C")
							ELSE
								DETAILS:POP_LINE_DETAILS(CLOSED_FOR_PI)	= PARAMETER("LINE_CLOSED_O")
								#DETAILS_STILL_OPEN = #YES
							END_IF
						END_IF

					END_WHILE

				 	IF	(LINES:POP_LINES(ORDER_QUANTITY)=0)
						IF (LINES:POP_LINES(POP_VALUE_OUTSTANDING)=0 AND #DETAILS_STILL_OPEN <> #YES)
							LINES:POP_LINES(CLOSED_FOR_PI)=PARAMETER("LINE_CLOSED_C")
						END_IF
				 	ELSE
						IF ((LINES:POP_LINES(ORDER_QUANTITY) - LINES:POP_LINES(QTY_INVOICED)) <= 0 AND &
							#DETAILS_STILL_OPEN <> #YES)
							LINES:POP_LINES(CLOSED_FOR_PI) = PARAMETER("LINE_CLOSED_C")
							IF (#ORDER_TYPE	= "N")
								LINES:POP_LINES(POP_VALUE_OUTSTANDING) = 0
							END_IF
						ELSE
							IF(LINES:POP_LINES(CLOSED_FOR_GRN) = PARAMETER("LINE_CLOSED_C") AND &
								LINES:POP_LINES(PO_QTY_TO_INVOICE)= 0)
									LINES:POP_LINES(CLOSED_FOR_PI) = PARAMETER("LINE_CLOSED_C")
							ELSE
									IF(LINES:POP_LINES(CLOSED_FOR_GRN) = PARAMETER("LINE_CLOSED_C") AND &
										LINES:POP_LINES(PO_QTY_TO_INVOICE)= 0)
											LINES:POP_LINES(CLOSED_FOR_PI) = PARAMETER("LINE_CLOSED_C")
									ELSE
											LINES:POP_LINES(CLOSED_FOR_PI) = PARAMETER("LINE_CLOSED_O")
									END_IF
							END_IF
						END_IF
				 	END_IF
				END_WHILE
				#COUNT = #COUNT	+ 1
				COMMIT
		END_WHILE
	END_BLOCK

END_FORM

PROCEDURE_FORM CURRENCY_CONVERSION (#FROM_CURRENCY,#TO_CURRENCY,#FROM_COST,#TO_COST)

        BEGIN_BLOCK GET_CONVERTED_VALUE

                DELETE ALL FROM SYS_CURRENCY_CONTROL_VT
                CLEAR_BUFFER SYS_CURRENCY_CONTROL_VT

                SYS_CURRENCY_CONTROL_VT(COMPANY_CODE) = #COMPANY_CODE
                SYS_CURRENCY_CONTROL_VT(DIVISION) = #DIVISION
                SYS_CURRENCY_CONTROL_VT(SOURCE_MODULE) = #PO
                SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE) = #FROM_CURRENCY
                SYS_CURRENCY_CONTROL_VT(TRANS_2_CURRENCY_CODE) = #TO_CURRENCY
                SYS_CURRENCY_CONTROL_VT(RATE_OVERRIDE) = #NO
                ADD TO SYS_CURRENCY_CONTROL_VT

                PERFORM "GEMLB:LB_S_L_CURRENCY_RATES" (#R_STATUS, #R_MESSAGE)


                IF (#R_STATUS = #NO)
                        ERROR/TEXT_ONLY/WAIT #R_MESSAGE
                        EXIT(%FAILURE)
                END_IF

                FIND IN SYS_CURRENCY_CONTROL_VT

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/WAIT/BELL P_91710
                        EXIT(%FAILURE)
                END_IF

                DELETE ALL FROM SYS_CURRENCY_COST_VT
                CLEAR_BUFFER SYS_CURRENCY_COST_VT

                SYS_CURRENCY_COST_VT(COST_TRANS_VALUE) = #FROM_COST
                SYS_CURRENCY_COST_VT(COST_DECIMALS) = #COST_DECIMALS

                ADD TO SYS_CURRENCY_COST_VT

                PERFORM "GEMLB:LB_S_L_COST_CONVERSIONS" (#R_STATUS, #R_MESSAGE )

                IF (#R_STATUS = #NO)
                        ERROR/TEXT_ONLY/WAIT #R_MESSAGE
                        EXIT(%FAILURE)
                ELSE
                        FIND IN SYS_CURRENCY_COST_VT

                        IF (%STATUS = %FAILURE)
                                MESSAGE/IDENTIFIER/WAIT/BELL P_91711
                                EXIT (%FAILURE)
                        END_IF

                        #TO_COST = SYS_CURRENCY_COST_VT(COST_TRANS_2_VALUE)
                END_IF

        END_BLOCK

END_FORM


PROCEDURE_FORM UPDATE_LINKS &
        /TABLE=PURCHASE_INVOICE_LINES &
        /WITH=COMPANY_CODE=#COMPANY_CODE &
        /WITH=DIVISION=#DIVISION &
        /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER


        BEGIN_BLOCK SETUP
                #LINE_TYPE      = PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE_TYPE)
                #UNIT_INV       = PURCHASE_INVOICE_LINES(UNIT_PUR)
        !       #UNIT_PRICE     = PURCHASE_INVOICE_LINES(UNIT_PRICE)
                #INV_COST       = PURCHASE_INVOICE_LINES(PURCHASE_COST)
                #PART_CODE      = PURCHASE_INVOICE_LINES(PART_CODE)
                #WAREHOUSE      = PURCHASE_INVOICE_LINES(WAREHOUSE)

                IF (#MAIN_OPT="CANCEL")
                        IF (#ORIG_MAIN_OPT = "MODIFY" AND &
                            PURCHASE_INVOICE_LINES(CHG_PURCHASE_COST) <> 0)
                                #OLD_INV_COST = PURCHASE_INVOICE_LINES(OLD_PURCHASE_COST)
                        ELSE
                                #OLD_INV_COST   = PURCHASE_INVOICE_LINES(PURCHASE_COST)
                        END_IF
                ELSE
                        #OLD_INV_COST   = PURCHASE_INVOICE_LINES(OLD_PURCHASE_COST)
                        #COST_CHANGE    = PURCHASE_INVOICE_LINES(CHG_PURCHASE_COST)

                        IF (#OLD_INV_COST=0.0 OR #COST_CHANGE = 0.0)
                                 #OLD_INV_COST = PURCHASE_INVOICE_LINES(PURCHASE_COST)
                        END_IF
                END_IF

                FIND IN PURCHASE_INVOICES &
                        /LOCK=WRITE &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER

                IF (%STATUS=%FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_22175
                        EXIT(%FAILURE)
                END_IF
        END_BLOCK

        BEGIN_BLOCK INVENTORY_DETAIL
!               #POSTING_CURRENCY = #CURRENCY_CODE
                ! This value will be overwritten if a conversion takes place along the way.
                ! It is used to store the correct currency on the gl_posting created

                IF (#LINE_TYPE = #LINE_TYPE_STOCK)
                        #WAREHOUSE = PURCHASE_INVOICE_LINES(WAREHOUSE)

                        FIND IN PRODUCT_MASTER &
                                /LOCK=NONE &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=PART_CODE=#PART_CODE

                        IF (%STATUS = %FAILURE)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_42014,#PART_CODE
                                EXIT(%FAILURE)
                        END_IF
                        #IC_PRODUCT_TYPE = PRODUCT_MASTER(IC_PRODUCT_UOM_CONTROL)
                        #WAREHOUSED_FLAG = PRODUCT_MASTER(WAREHOUSED_FLAG)
                        #LINK_UOM        = PURCHASE_INVOICE_LINES(IC_NOMINATED_UNIT)
                        #CAPACITY_UOM    = PRODUCT_MASTER(IC_UNIT_CAPACITY)
!THIS NEEDS LOOKING AT  #INV_UOM         = PRODUCT_MASTER(UNIT_INV)
                ELSE
                        #WAREHOUSE       = ""
                        #WAREHOUSED_FLAG = #NO
                        #IC_PRODUCT_TYPE = PARAMETER("IC_SINGLE_UOM_CONTROL")
                        #LINK_UOM        = PURCHASE_INVOICE_LINES(UNIT_PUR)
                END_IF

                IF (#WAREHOUSED_FLAG = #YES)
                        FIND IN PRODUCT_WAREHOUSE &
                                /LOCK=NONE &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=PART_CODE=PURCHASE_INVOICE_LINES(PART_CODE) &
                                /WITH=WAREHOUSE=PURCHASE_INVOICE_LINES(WAREHOUSE)

                        IF (%STATUS = %FAILURE)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_42024
                        END_IF

                        FIND IN WAREHOUSE_CONTROLS &
                                /LOCK=NONE &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=WAREHOUSE=PURCHASE_INVOICE_LINES(WAREHOUSE)

                        IF (%STATUS = %FAILURE)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_00366
                                EXIT(%FAILURE)
                        END_IF

                        ! Setup warehouse information
                END_IF
                !
                ! Nonstock Part (N) continues here ...
                !
                #COST_UPDATE = #NO
                IF (#MAIN_OPT <> "CANCEL")

                        IF (PURCHASE_INVOICE_LINES(CHG_PURCHASE_COST) <> 0.0 AND &
                            PURCHASE_INVOICE_LINES(TEMP_INVOICE_QUANTITY) = PURCHASE_INVOICE_LINES(INVOICE_QUANTITY))

                                #INVOICE_QUANTITY = PURCHASE_INVOICE_LINES(INVOICE_QUANTITY)
                                #QTY_INVOICED = #INVOICE_QUANTITY
                                IF (#QTY_INVOICED <> 0)
                                        PERFORM COST_UPDATE
                                        PURCHASE_INVOICE_LINES(CHG_PURCHASE_COST) = 0
                                        #COST_UPDATE = #YES
                                END_IF
                                ! We may have only changed the price.
                        END_IF
                END_IF

								!get order type
								FIND IN	POP_LINES &
									/LOCK=NONE	&
									/WITH=COMPANY_CODE=#COMPANY_CODE &
									/WITH=DIVISION=#DIVISION &
									/WITH=PO_NUMBER=#PO_NUMBER &
									/WITH=PO_LINE_NUMBER=PURCHASE_INVOICE_LINES(PO_LINE_NUMBER)
						
								IF (%STATUS <> %FAILURE)
									#ORDER_TYPE = POP_LINES(POP_ORDER_TYPE)
								END_IF

                ! test if qty was changed
                IF (PURCHASE_INVOICE_LINES(TEMP_INVOICE_QUANTITY) = 0 OR &
                        PURCHASE_INVOICE_LINES(TEMP_INVOICE_QUANTITY) = PURCHASE_INVOICE_LINES(INVOICE_QUANTITY))

                        IF (#MAIN_OPT = "CANCEL" OR (#MAIN_OPT = "MODIFY" AND #OPT = "CANCEL"))
                                GOTO FINISH
                        ELSE
                                GOTO END
                        END_IF
                END_IF
                ! No need to process if we aren't in CANCEL mode, and haven't changed the quantity

        END_BLOCK

        BEGIN_BLOCK FINISH
                IF ((#MAIN_OPT <> "ENTRY") &
                AND (#LINKS_REQUIRED <> #YES))
                        ! Reverse qties on PO Lines first
                        ! BUT only if link records have already been created

                        #SELECT1        = "A AND B AND C AND D AND E AND G"
                        #SELECT2        = "A AND B AND C AND D AND F AND G"

                        ! Reverse using original qty in INVOICE_QUANTITY first.
                        ! New quantity is in TEMP_INVOICE_QUANTITY.

                        #UPDATE_QTY = PURCHASE_INVOICE_LINES(INVOICE_QUANTITY)

                        #LINK_CONV_FACTOR = 1
                        #LINK_UPDATE_QTY = #UPDATE_QTY

                        IF (PURCHASE_INVOICE_LINES(UNIT_PUR) <> #LINK_UOM)
                                PERFORM UOM_CONVERSION (&
                                        (PURCHASE_INVOICE_LINES(COMPANY_CODE)), &
                                        (PURCHASE_INVOICE_LINES(PART_CODE)), &
                                        (PURCHASE_INVOICE_LINES(WAREHOUSE)), &
                                        (PURCHASE_INVOICE_LINES(IC_LOT_NUMBER)), &
                                        (PURCHASE_INVOICE_LINES(INVOICE_QUANTITY)), &
                                        (PURCHASE_INVOICE_LINES(UNIT_PUR)), &
                                        (#LINK_UOM), &
                                        #LINK_CONV_FACTOR, &
                                        #LINK_UPDATE_QTY)

                                IF (%STATUS = %FAILURE)
                                        EXIT(%FAILURE)
                                END_IF
                        END_IF


                        PERFORM UPDATE (#LINK_UPDATE_QTY,"-1",#OLD_INV_COST)

                        IF ( %STATUS = %FAILURE OR %STATUS = %DEADLOCK)
                            ROLLBACK
                            EXIT(%FAILURE) 
                        END_IF 

                        !***************Post currency conversion rounding differences ****
                        #ROUND_DIFF = #ROUND_ACCUM_DR - #ROUND_ACCUM_CR

                        IF (#ROUND_DIFF <> 0.0)
                                GL_POSTINGS(GL_POSTING_BASE_DR) = GL_POSTINGS(GL_POSTING_BASE_DR) - #ROUND_DIFF
                        END_IF
                        ! If the base currency calcs didn't balance to zero, balance them by adding the rounding
                        ! to the last one.

                        PURCHASE_INVOICE_LINES(QTY_ALLOCATED) = PURCHASE_INVOICE_LINES(QTY_ALLOCATED) + &
                                (#UPDATE_QTY * -1)

                        PURCHASE_INVOICE_LINES(INVOICE_QUANTITY) = PURCHASE_INVOICE_LINES(INVOICE_QUANTITY) +  &
                                (#UPDATE_QTY * -1)

                END_IF

                ! Do not update from TEMP_INVOICE_QUANTITY if Cancelling Invoice.

                IF (#OPT = "CANCEL" OR #MAIN_OPT = "CANCEL")
                        GOTO END
                END_IF

                IF (PURCHASE_INVOICE_LINES(TEMP_INVOICE_QUANTITY) > 0)

                ! Update with new qty

                        #UPDATE_QTY     = PURCHASE_INVOICE_LINES(TEMP_INVOICE_QUANTITY)
                        #SELECT1        = "A AND B AND C AND D AND E AND F"
                        #SELECT2        = "A AND B AND C AND D AND E AND G"

                        #LINK_CONV_FACTOR = 1
                        #LINK_UPDATE_QTY = #UPDATE_QTY

                        IF (PURCHASE_INVOICE_LINES(UNIT_PUR) <> #LINK_UOM)
                                PERFORM UOM_CONVERSION (&
                                        (PURCHASE_INVOICE_LINES(COMPANY_CODE)), &
                                        (PURCHASE_INVOICE_LINES(PART_CODE)), &
                                        (PURCHASE_INVOICE_LINES(WAREHOUSE)), &
                                        (PURCHASE_INVOICE_LINES(IC_LOT_NUMBER)), &
                                        (PURCHASE_INVOICE_LINES(TEMP_INVOICE_QUANTITY)), &
                                        (PURCHASE_INVOICE_LINES(UNIT_PUR)), &
                                        (#LINK_UOM), &
                                        #LINK_CONV_FACTOR, &
                                        #LINK_UPDATE_QTY)

                                IF (%STATUS = %FAILURE)
                                        EXIT(%FAILURE)
                                END_IF
                        END_IF

                        PERFORM UPDATE (#LINK_UPDATE_QTY,"1",#INV_COST)

                        IF ( %STATUS = %FAILURE OR %STATUS = %DEADLOCK)
                            ROLLBACK
                            EXIT(%FAILURE) 
                        END_IF 

                        ! Put through new LINES
                        !***************Post currency conversion rounding differences ****
                        #ROUND_DIFF = #ROUND_ACCUM_DR - #ROUND_ACCUM_CR

                        IF (#ROUND_DIFF <> 0.0)
                                GL_POSTINGS(GL_POSTING_BASE_DR) = GL_POSTINGS(GL_POSTING_BASE_DR) - #ROUND_DIFF
                        END_IF
                        ! If the base currency calcs didn't balance to zero, balance them by adding the rounding
                        ! to the last one.

                ! Subtract the old quantity allocated and old invoiced quantity while modifying quantities.

                        #OLD_QTY_ALLOCATED = PURCHASE_INVOICE_LINES(QTY_ALLOCATED)
                        PURCHASE_INVOICE_LINES(QTY_ALLOCATED) = PURCHASE_INVOICE_LINES(QTY_ALLOCATED) + #UPDATE_QTY - &
                                #OLD_QTY_ALLOCATED
                        #OLD_QTY_INVOICED = PURCHASE_INVOICE_LINES(INVOICE_QUANTITY)
                        PURCHASE_INVOICE_LINES(INVOICE_QUANTITY) = PURCHASE_INVOICE_LINES(INVOICE_QUANTITY) + #UPDATE_QTY - &
                                #OLD_QTY_INVOICED
                        PURCHASE_INVOICE_LINES(TEMP_INVOICE_QUANTITY)   = 0
                        PURCHASE_INVOICE_LINES(POP_SUSPENSE_COST)       = #INV_COST
!                        PURCHASE_INVOICE_LINES(CHG_PURCHASE_COST)       = 0
!                        PURCHASE_INVOICE_LINES(OLD_PURCHASE_COST)       = 0

                        PURCHASE_INVOICES(TOTAL_INVOICE_QUANTITY) = PURCHASE_INVOICES(TOTAL_INVOICE_QUANTITY) + #UPDATE_QTY - &
                                #OLD_QTY_INVOICED
                END_IF
        END_BLOCK

        BEGIN_BLOCK END
                PURCHASE_INVOICE_LINES(OLD_PURCHASE_COST) = PURCHASE_INVOICE_LINES(PURCHASE_COST)
                PURCHASE_INVOICES(UPDATE_FLAG) = PARAMETER("UPDATE_FLAG_M")
        END_BLOCK

END_FORM


PROCEDURE_FORM UPDATE (#P1,#P2,#P3)


        BEGIN_BLOCK DO_ALLOCATION
                #ROUND_ACCUM_DR         = 0
                #ROUND_ACCUM_CR         = 0
                #TOTAL_QTY_INVOICED     = #P1
                #OPERATOR               = #P2
                #COST                   = #P3

                FIND IN GOODS_RECEIVED_HEADERS &
                        /LOCK=NONE &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=GRN_NUMBER=PURCHASE_INVOICE_LINES(GRN_NUMBER)

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_62312,PURCHASE_INVOICE_LINES(GRN_NUMBER)
                        EXIT(%FAILURE)
                END_IF

                FIND IN GOODS_RECEIVED_LINES &
                        /LOCK=WRITE &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=GRN_NUMBER=PURCHASE_INVOICE_LINES(GRN_NUMBER) &
                        /WITH=GRN_LINE_NUMBER=PURCHASE_INVOICE_LINES(GRN_LINE_NUMBER)

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_62313,PURCHASE_INVOICE_LINES(GRN_LINE_NUMBER)
                        EXIT(%FAILURE)
                END_IF

                !
                ! Start stream to locate GRN line detail qty records which have
                ! invoice quantities to reverse qty if modifying or cancelling
                ! an invoice.
                ! Note that any sequence number could be matched here, that's
                ! why the line_details record is read AFTER the fetch.
                !

                IF (#OPERATOR < 0)
                    IF (PURCHASE_INVOICE_LINES(IC_STATUS_CODE) = "QOH" OR PURCHASE_INVOICE_LINES(IC_STATUS_CODE) = "")
                            START_STREAM GRN_DETAILS &
                                    /TABLE=GOODS_RECEIVED_DETAIL_QTYS &
                                    /LOCK=WRITE &
                                    /WITH=COMPANY_CODE=#COMPANY_CODE &
                                    /WITH=DIVISION=#DIVISION &
                                    /WITH=GRN_NUMBER=PURCHASE_INVOICE_LINES(GRN_NUMBER) &
                                    /WITH=GRN_LINE_NUMBER=PURCHASE_INVOICE_LINES(GRN_LINE_NUMBER) &
                                    /WITH=UNIT_OF_MEASURE=#LINK_UOM &
                                    /WITH=QTY_INVOICED>0 &
                    /WITH=QTY_ACCEPTED>0
                    END_IF
                    IF (PURCHASE_INVOICE_LINES(IC_STATUS_CODE) = "QC")
                            START_STREAM GRN_DETAILS &
                                    /TABLE=GOODS_RECEIVED_DETAIL_QTYS &
                                    /LOCK=WRITE &
                                    /WITH=COMPANY_CODE=#COMPANY_CODE &
                                    /WITH=DIVISION=#DIVISION &
                                    /WITH=GRN_NUMBER=PURCHASE_INVOICE_LINES(GRN_NUMBER) &
                                    /WITH=GRN_LINE_NUMBER=PURCHASE_INVOICE_LINES(GRN_LINE_NUMBER) &
                                    /WITH=UNIT_OF_MEASURE=#LINK_UOM &
                                    /WITH=QTY_INVOICED>0 &
                    /WITH=QTY_IN_QUALITY_CONTROL>0
                    END_IF
                    IF (PURCHASE_INVOICE_LINES(IC_STATUS_CODE) = "QR")
                            START_STREAM GRN_DETAILS &
                                    /TABLE=GOODS_RECEIVED_DETAIL_QTYS &
                                    /LOCK=WRITE &
                                    /WITH=COMPANY_CODE=#COMPANY_CODE &
                                    /WITH=DIVISION=#DIVISION &
                                    /WITH=GRN_NUMBER=PURCHASE_INVOICE_LINES(GRN_NUMBER) &
                                    /WITH=GRN_LINE_NUMBER=PURCHASE_INVOICE_LINES(GRN_LINE_NUMBER) &
                                    /WITH=UNIT_OF_MEASURE=#LINK_UOM &
                                    /WITH=QTY_INVOICED>0 &
                    /WITH=QTY_IN_QUARANTINE>0
                    END_IF
                ELSE
                        !
                        ! Start stream to locate only GRN line detail records
                        ! which have invoice qty outstanding.  This is to bypass
                        ! details records which have already been fully invoiced.
                        !

                    IF (PURCHASE_INVOICE_LINES(IC_STATUS_CODE) = "QOH" OR PURCHASE_INVOICE_LINES(IC_STATUS_CODE) = "")
                            START_STREAM GRN_DETAILS &
                                    /TABLE=GOODS_RECEIVED_DETAIL_QTYS &
                                    /LOCK=WRITE &
                                    /WITH=COMPANY_CODE=#COMPANY_CODE &
                                    /WITH=DIVISION=#DIVISION &
                                    /WITH=GRN_NUMBER=PURCHASE_INVOICE_LINES(GRN_NUMBER) &
                                    /WITH=GRN_LINE_NUMBER=PURCHASE_INVOICE_LINES(GRN_LINE_NUMBER) &
                                    /WITH=UNIT_OF_MEASURE=#LINK_UOM &
                                    /WITH=GRN_QTY_TO_INVOICE > 0.0 &
                    /WITH=QTY_ACCEPTED>0
                    END_IF
                    IF (PURCHASE_INVOICE_LINES(IC_STATUS_CODE) = "QC")
                            START_STREAM GRN_DETAILS &
                                    /TABLE=GOODS_RECEIVED_DETAIL_QTYS &
                                    /LOCK=WRITE &
                                    /WITH=COMPANY_CODE=#COMPANY_CODE &
                                    /WITH=DIVISION=#DIVISION &
                                    /WITH=GRN_NUMBER=PURCHASE_INVOICE_LINES(GRN_NUMBER) &
                                    /WITH=GRN_LINE_NUMBER=PURCHASE_INVOICE_LINES(GRN_LINE_NUMBER) &
                                    /WITH=UNIT_OF_MEASURE=#LINK_UOM &
                                    /WITH=GRN_QTY_TO_INVOICE > 0.0 &
                    /WITH=QTY_IN_QUALITY_CONTROL>0
                    END_IF
                    IF (PURCHASE_INVOICE_LINES(IC_STATUS_CODE) = "QR")
                            START_STREAM GRN_DETAILS &
                                    /TABLE=GOODS_RECEIVED_DETAIL_QTYS &
                                    /LOCK=WRITE &
                                    /WITH=COMPANY_CODE=#COMPANY_CODE &
                                    /WITH=DIVISION=#DIVISION &
                                    /WITH=GRN_NUMBER=PURCHASE_INVOICE_LINES(GRN_NUMBER) &
                                    /WITH=GRN_LINE_NUMBER=PURCHASE_INVOICE_LINES(GRN_LINE_NUMBER) &
                                    /WITH=UNIT_OF_MEASURE=#LINK_UOM &
                                    /WITH=GRN_QTY_TO_INVOICE > 0.0 &
                    /WITH=QTY_IN_QUARANTINE>0
                    END_IF
                END_IF

                WHILE (#TOTAL_QTY_INVOICED > 0)

                        FETCH GRN_DETAILS/FAILURE=(CONTINUE OUT)

                        ! Sync the line_details record with the
                        ! line_detail_qtys record that has been found
                        FIND IN GOODS_RECEIVED_LINE_DETAILS &
                                /LOCK=WRITE &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=DIVISION=#DIVISION &
                                /WITH=GRN_NUMBER=GRN_DETAILS:GOODS_RECEIVED_DETAIL_QTYS(GRN_NUMBER) &
                                /WITH=GRN_LINE_NUMBER=GRN_DETAILS:GOODS_RECEIVED_DETAIL_QTYS(GRN_LINE_NUMBER) &
                                /WITH=SEQUENCE=GRN_DETAILS:GOODS_RECEIVED_DETAIL_QTYS(SEQUENCE)

                        IF (%STATUS = %FAILURE)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_62313,PURCHASE_INVOICE_LINES(GRN_LINE_NUMBER)
                                GOTO END
                        END_IF

                        IF ((#OPERATOR > 0) &
                        AND ((#MAIN_OPT = "ENTRY") OR (#LINKS_REQUIRED = #YES)))
                                #QTY_INVOICED = GRN_DETAILS:GOODS_RECEIVED_DETAIL_QTYS(GRN_QTY_TO_INVOICE)
                        ELSE
                                #QTY_INVOICED = #TOTAL_QTY_INVOICED
                        END_IF

                        ! Take min of total invoice qty on invoice line or
                        ! avail qty to allocate or deallocate in GRN details.

                        IF (#QTY_INVOICED > #TOTAL_QTY_INVOICED)
                              #QTY_INVOICED = #TOTAL_QTY_INVOICED
                        END_IF


                        IF (#OPERATOR > 0 )
                        ! Find next allocation sequence for new lines only

                                START_STREAM FIND_GRN_SEQ &
                                        /TABLE=LINK_INV_GRN &
                                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                                        /WITH=DIVISION=#DIVISION &
                                        /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER &
                                        /WITH=PURCHASE_INVOICE_LINE=PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE) &
                                        /WITH=GRN_NUMBER=GOODS_RECEIVED_LINE_DETAILS(GRN_NUMBER) &
                                        /WITH=GRN_LINE_NUMBER=GOODS_RECEIVED_LINE_DETAILS(GRN_LINE_NUMBER) &
                                        /WITH=GRN_SEQUENCE=GOODS_RECEIVED_LINE_DETAILS(SEQUENCE) &
                                        /FIRST=1 &
                                        /SORTED_BY=(-SEQUENCE)

                                FETCH FIND_GRN_SEQ &
                                        /FAILURE=(#GRN_ALLOC_SEQ = 1) &
                                        /SUCCESS=(#GRN_ALLOC_SEQ=LINK_INV_GRN(SEQUENCE) + 1)

                        END_IF
                        ! end option entry

                        #POSTING_COST           = #COST
        END_BLOCK

        BEGIN_BLOCK UPDATE_LINES
                #FIELD          = GOODS_RECEIVED_LINE_DETAILS(FIELD_NAME)

!!!                #COST = GOODS_RECEIVED_LINE_DETAILS(GRN_COST)

                IF (#OPERATOR > 0 AND #MAIN_OPT = "ENTRY")
                        #QTY_ALLOC = (TABLE_DATA("GOODS_RECEIVED_DETAIL_QTYS",#FIELD) - &
                        GRN_DETAILS:GOODS_RECEIVED_DETAIL_QTYS(QTY_INVOICED))
                ELSE
                        #QTY_ALLOC = #TOTAL_QTY_INVOICED
                END_IF
                !
                !
                ! 2. Convert #COST value to be terms of all UOM's on the invoice line
                !

                #CONV_RATE = 1.0
                #INV_COST_FOR_NOMINATED = #COST
                #COST_NOMINATED_UOM = GOODS_RECEIVED_LINES(POP_NOMINATED_PRICE_UNIT)

                IF (GOODS_RECEIVED_LINES(LINE_TYPE) = PARAMETER("LINE_TYPE_NONSTOCK"))
                        #COST_NOMINATED_UOM = GOODS_RECEIVED_LINES(UNIT_REC)
                END_IF

                IF (#COST_NOMINATED_UOM <> "")
                        #CONV_RATE = 1.0

                        IF (#COST_NOMINATED_UOM <> PURCHASE_INVOICE_LINES(UNIT_PRICE))

                                PERFORM UOM_CONVERSION &
                                        ((#COMPANY_CODE), &
                                        (PURCHASE_INVOICE_LINES(PART_CODE)),&
                                        (PURCHASE_INVOICE_LINES(WAREHOUSE)), &
                                        (PURCHASE_INVOICE_LINES(IC_LOT_NUMBER)),&
                                        (1.0), &
                                        (PURCHASE_INVOICE_LINES(UNIT_PRICE)), &
                                        (#COST_NOMINATED_UOM), &
                                        #CONV_RATE)

                                IF (%STATUS <> %SUCCESS)
                                        MESSAGE/IDENTIFIER/BELL/WAIT P_32402
                                        EXIT(%FAILURE)
                                END_IF
                        END_IF

                        ! Calculate nominated inventory cost
                        #INV_COST_FOR_NOMINATED = #COST / #CONV_RATE
                END_IF

                !
                ! 4. Test if #LINK_UOM = #COST_NOMINATED_UOM
                !
                IF ((#LINK_UOM = #COST_NOMINATED_UOM) &
                        OR (#IC_PRODUCT_TYPE = PARAMETER("IC_SINGLE_UOM_CONTROL")))

                        #LINK_INV_COST = #INV_COST_FOR_NOMINATED
                ELSE
                        ! 5.  If not same, nominated purchase cost must be converted
                        !     to be in terms of #LINK_UOM.
                        !
                        ! 5.1 Potent Product
                        IF (#IC_PRODUCT_TYPE = PARAMETER("IC_POTENT_UOM_CONTROL"))
                                #LINK_INV_COST = #INV_COST_FOR_NOMINATED * &
                                        GOODS_RECEIVED_LINE_DETAILS(IC_POTENT_DEFAULT_FACTOR)
                        END_IF
                        ! 5.2 Catchweight Product
                        IF (#IC_PRODUCT_TYPE = PARAMETER("IC_CATCHWEIGHT_UOM_CONTROL"))
                                IF(#COST_NOMINATED_UOM = PRODUCT_MASTER(IC_UNIT_CAPACITY))

                                        #LINK_INV_COST = #INV_COST_FOR_NOMINATED / &
                                                GOODS_RECEIVED_LINE_DETAILS(IC_CATCHWEIGHT_AVERAGE)


                                ELSE
                                        #LINK_INV_COST = #INV_COST_FOR_NOMINATED * &
                                                GOODS_RECEIVED_LINE_DETAILS(IC_CATCHWEIGHT_AVERAGE)

                                END_IF

                        END_IF
                END_IF
                !
        END_BLOCK

        BEGIN_BLOCK ROUND_QTYS

                #PART_CODE = GOODS_RECEIVED_LINES(PART_CODE)
                #UNIT_REC = GOODS_RECEIVED_LINES(UNIT_REC)
                #OTHER_UNIT = GOODS_RECEIVED_LINES(IC_OTHER_INVENTORY_UNIT)
                #UOM_CONTROL = PARAMETER("IC_SINGLE_UOM_CONTROL")

                FIND IN PRODUCT_MASTER &
                        /LOCK=NONE &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=PART_CODE=#PART_CODE

                IF (%STATUS <> %FAILURE)
                        #UOM_CONTROL  = PRODUCT_MASTER(IC_PRODUCT_UOM_CONTROL)
                END_IF

                PERFORM "GEMLB:LB_GET_QUANTITY_MASK" (#COMPANY_CODE,#PART_CODE,&
                #LINK_UOM,#UNIT_LINK_MASK,#R2)
                IF (%STATUS=%FAILURE)
                        #UNIT_LINK_DECIMALS = 2
                ELSE
                        #UNIT_LINK_DECIMALS = #R2
                END_IF

                PERFORM "GEMLB:LB_GET_QUANTITY_MASK" (#COMPANY_CODE,#PART_CODE,&
                #UNIT_REC,#UNIT_REC_MASK,#R2)

                IF (%STATUS=%FAILURE)
                        #UNIT_REC_DECIMALS = 2
                ELSE
                        #UNIT_REC_DECIMALS = #R2
                END_IF

                IF (#UOM_CONTROL <> PARAMETER("IC_SINGLE_UOM_CONTROL"))
                        PERFORM "GEMLB:LB_GET_QUANTITY_MASK" (#COMPANY_CODE,#PART_CODE,&
                        #OTHER_UNIT,#OTHER_INV_MASK,#R2)

                        IF (%STATUS=%FAILURE)
                                #OTHER_INV_DECIMALS = 2
                        ELSE
                                #OTHER_INV_DECIMALS = #R2
                        END_IF
                END_IF

                ! Round to number of decimals from Product master
                #QTY_INVOICED = ROUND(#QTY_INVOICED,#UNIT_LINK_DECIMALS)

        END_BLOCK

        BEGIN_BLOCK UPDATE_QTYS

                !
                #QTY_ALLOC = #QTY_INVOICED

                ! Update Qty for #LINK_UOM record
                IF ((#OPERATOR < 0) OR (#OPT = "CANCEL") OR (#MAIN_OPT = "CANCEL"))
                        GRN_DETAILS:GOODS_RECEIVED_DETAIL_QTYS(QTY_INVOICED) =GRN_DETAILS:GOODS_RECEIVED_DETAIL_QTYS(QTY_INVOICED) &
                                 - #QTY_ALLOC
                ELSE
                        GRN_DETAILS:GOODS_RECEIVED_DETAIL_QTYS(QTY_INVOICED) =GRN_DETAILS:GOODS_RECEIVED_DETAIL_QTYS(QTY_INVOICED) &
                                 + #QTY_ALLOC
                END_IF

                FIND IN GOODS_RECEIVED_LINE_QTYS &
                        /LOCK=WRITE &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=GRN_NUMBER=PURCHASE_INVOICE_LINES(GRN_NUMBER) &
                        /WITH=GRN_LINE_NUMBER=PURCHASE_INVOICE_LINES(GRN_LINE_NUMBER) &
                        /WITH=UNIT_OF_MEASURE=#LINK_UOM &

                ! Update Qty for #LINK_UOM record
                IF ((#OPERATOR < 0) OR (#OPT = "CANCEL") OR (#MAIN_OPT = "CANCEL"))
                        GOODS_RECEIVED_LINE_QTYS(QTY_INVOICED) = &
                        GOODS_RECEIVED_LINE_QTYS(QTY_INVOICED) - #QTY_INVOICED

                        GOODS_RECEIVED_LINE_QTYS(QTY_ALLOCATED) = &
                        GOODS_RECEIVED_LINE_QTYS(QTY_ALLOCATED) - #QTY_ALLOC
                ELSE
                        GOODS_RECEIVED_LINE_QTYS(QTY_INVOICED) = &
                        GOODS_RECEIVED_LINE_QTYS(QTY_INVOICED) + #QTY_INVOICED

                        GOODS_RECEIVED_LINE_QTYS(QTY_ALLOCATED) = &
                        GOODS_RECEIVED_LINE_QTYS(QTY_ALLOCATED) + #QTY_ALLOC
                END_IF

        END_BLOCK

        BEGIN_BLOCK ADD_LINK
                IF ((#OPERATOR > 0) &
                AND ((#MAIN_OPT = "ENTRY") OR (#LINKS_REQUIRED = #YES)))
                        CLEAR_BUFFER LINK_INV_GRN

                        LINK_INV_GRN(COMPANY_CODE)              = #COMPANY_CODE
                        LINK_INV_GRN(DIVISION)                  = #DIVISION
                        LINK_INV_GRN(PURCHASE_INVOICE_NUMBER)   = #PURCHASE_INVOICE_NUMBER
                        LINK_INV_GRN(PURCHASE_INVOICE_LINE)     = PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE)
                        LINK_INV_GRN(GRN_NUMBER)                = PURCHASE_INVOICE_LINES(GRN_NUMBER)
                        LINK_INV_GRN(GRN_LINE_NUMBER)           = PURCHASE_INVOICE_LINES(GRN_LINE_NUMBER)
                        LINK_INV_GRN(GRN_SEQUENCE)              = GOODS_RECEIVED_LINE_DETAILS(SEQUENCE)
                        LINK_INV_GRN(SEQUENCE)                  = #GRN_ALLOC_SEQ
                        LINK_INV_GRN(ALLOCATION_DATE)           = %NOW
                        LINK_INV_GRN(SYSTEM_DATE)               = %NOW
                        LINK_INV_GRN(UNIT_PRICE)                = #LINK_UOM
                        LINK_INV_GRN(GRN_COST)                  = GRN_DETAILS:GOODS_RECEIVED_DETAIL_QTYS(GRN_COST)
                        LINK_INV_GRN(INVOICE_COST)              = #LINK_INV_COST
                        LINK_INV_GRN(UNIT_ALLOC)                = #LINK_UOM
                        LINK_INV_GRN(UNIT_REC)                  = #LINK_UOM
                        LINK_INV_GRN(QTY_ALLOCATED)             = #QTY_ALLOC

                        ADD TO LINK_INV_GRN
                        IF (%STATUS <> %NORMAL)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_62383
                                EXIT(%FAILURE)
                        END_IF

                        #GRN_ALLOC_SEQ = #GRN_ALLOC_SEQ + 1
                ELSE
                        FIND IN LINK_INV_GRN &
                                /LOCK=WRITE &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=DIVISION=#DIVISION &
                                /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER &
                                /WITH=PURCHASE_INVOICE_LINE=PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE) &
                                /WITH=GRN_NUMBER=PURCHASE_INVOICE_LINES(GRN_NUMBER) &
                                /WITH=GRN_LINE_NUMBER=PURCHASE_INVOICE_LINES(GRN_LINE_NUMBER)

                        LINK_INV_GRN(INVOICE_COST)  = #LINK_INV_COST
                        LINK_INV_GRN(QTY_ALLOCATED) = #QTY_ALLOC
                END_IF
        END_BLOCK

        BEGIN_BLOCK DELETE_LINK_INV_GRN
                        ! Delete LINK_INV_GRN records if Cancelling Invoice.

                        IF ((#OPERATOR < 0) AND (#OPT = "CANCEL") OR (#MAIN_OPT = "CANCEL"))
                                START_STREAM FIND_GRN_LINK &
                                        /LOCK=WRITE &
                                        /TABLE=LINK_INV_GRN &
                                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                                        /WITH=DIVISION=#DIVISION &
                                        /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER &
                                        /WITH=PURCHASE_INVOICE_LINE=PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE)

                                WHILE (1)
                                        FETCH FIND_GRN_LINK /FAILURE=(CONTINUE OUT)
                                        DELETE FROM LINK_INV_GRN
                                                IF (%STATUS = %FAILURE)
                                                        MESSAGE/IDENTIFIER/BELL/WAIT P_60159
                                                        EXIT(%STATUS)
                                                END_IF
                                END_WHILE
                        END_IF
        END_BLOCK

        BEGIN_BLOCK UPDATE_GRN_LINE
                #GRN_CONVERT = 1.0
                #GRN_TRANS_QTY_ALLOC = #QTY_ALLOC
!                IF (#LINK_UOM = GOODS_RECEIVED_LINES(IC_NOMINATED_UNIT) AND &

                IF (#LINK_UOM <> GOODS_RECEIVED_LINES(UNIT_REC))
                        IF (#IC_PRODUCT_TYPE = PARAMETER("IC_SINGLE_UOM_CONTROL"))
                        ! The allocation unit may not be in the same uom as the allocation
                        ! unit. So we must convert to the unit received.

                                PERFORM UOM_CONVERSION &
                                        (#COMPANY_CODE, &
                                        (GOODS_RECEIVED_LINES(PART_CODE)), &
                                        (GOODS_RECEIVED_LINES(WAREHOUSE)), &
                                        (GOODS_RECEIVED_LINES(IC_LOT_NUMBER)), &
                                        (#QTY_ALLOC), &
                                        (#LINK_UOM), &
                                        (GOODS_RECEIVED_LINES(UNIT_REC)), &
                                        #GRN_CONVERT, &
                                        #GRN_TRANS_QTY_ALLOC)

!                               #GRN_TRANS_QTY_ALLOC = #QTY_ALLOC * #GRN_CONVERT
                                IF (%STATUS <> %SUCCESS)
                                        EXIT(%FAILURE)
                                END_IF
                        ELSE
                                ! If the two NOM UOM's not equal then go through the averages to get correct value
                                IF (PURCHASE_INVOICE_LINES(IC_NOMINATED_UNIT) <> GOODS_RECEIVED_LINES(IC_NOMINATED_UNIT))
                                        ! Potent Product
                                        IF (#IC_PRODUCT_TYPE = PARAMETER("IC_POTENT_UOM_CONTROL"))
                                                IF (GOODS_RECEIVED_LINES(IC_NOMINATED_UNIT) = #CAPACITY_UOM)
                                                        #GRN_TRANS_QTY_ALLOC = #QTY_ALLOC *     &
                                                        GOODS_RECEIVED_LINE_DETAILS(IC_POTENT_DEFAULT_FACTOR)
                                                ELSE
                                                        #GRN_TRANS_QTY_ALLOC = #QTY_ALLOC /     &
                                                        GOODS_RECEIVED_LINE_DETAILS(IC_POTENT_DEFAULT_FACTOR)
                                                END_IF
                                        END_IF
                                        ! Catchweight Product
                                        IF (#IC_PRODUCT_TYPE = PARAMETER("IC_CATCHWEIGHT_UOM_CONTROL"))
                                                IF (GOODS_RECEIVED_LINES(IC_NOMINATED_UNIT) = #CAPACITY_UOM)
                                                        #GRN_TRANS_QTY_ALLOC = #QTY_ALLOC *     &
                                                        GOODS_RECEIVED_LINE_DETAILS(IC_CATCHWEIGHT_AVERAGE)
                                                ELSE
                                                        #GRN_TRANS_QTY_ALLOC = #QTY_ALLOC /     &
                                                        GOODS_RECEIVED_LINE_DETAILS(IC_CATCHWEIGHT_AVERAGE)
                                                END_IF
                                        END_IF
                                END_IF

                                PERFORM UOM_CONVERSION &
                                        (#COMPANY_CODE, &
                                        (GOODS_RECEIVED_LINES(PART_CODE)), &
                                        (GOODS_RECEIVED_LINES(WAREHOUSE)), &
                                        (GOODS_RECEIVED_LINES(IC_LOT_NUMBER)), &
                                        (#GRN_TRANS_QTY_ALLOC), &
                                        (#LINK_UOM), &
                                        (GOODS_RECEIVED_LINES(UNIT_REC)), &
                                        #GRN_CONVERT, &
                                        #GRN_TRANS_QTY_ALLOC)

                                        IF (%STATUS <> %SUCCESS)
                                                EXIT(%FAILURE)
                                        END_IF
                        END_IF
                END_IF

                ! 2. If product is a catchweight or potent type, the value
                !    of #QTY_ALLOC will also be required for the other inventory
                !    UOM on the GRN line
                #GRN_OTHER_QTY_ALLOC = 0

                IF (GOODS_RECEIVED_LINES(IC_OTHER_INVENTORY_UNIT) = #LINK_UOM)
                        GOTO END_OF_CONV
                END_IF

                ! 3. Potent Product
                IF (#IC_PRODUCT_TYPE = PARAMETER("IC_POTENT_UOM_CONTROL"))
                        IF (#LINK_UOM = #CAPACITY_UOM)
                                #GRN_OTHER_QTY_ALLOC = #QTY_ALLOC * &
                                GOODS_RECEIVED_LINE_DETAILS(IC_POTENT_DEFAULT_FACTOR)
                        ELSE
                                #GRN_OTHER_QTY_ALLOC = #QTY_ALLOC / &
                                GOODS_RECEIVED_LINE_DETAILS(IC_POTENT_DEFAULT_FACTOR)
                        END_IF
                END_IF

                ! 4. Catchweight Product
                IF (#IC_PRODUCT_TYPE = PARAMETER("IC_CATCHWEIGHT_UOM_CONTROL"))

                        IF (#LINK_UOM = #CAPACITY_UOM)
                                #GRN_OTHER_QTY_ALLOC = #QTY_ALLOC * &
                                GOODS_RECEIVED_LINE_DETAILS(IC_CATCHWEIGHT_AVERAGE)
                        ELSE
                                #GRN_OTHER_QTY_ALLOC = #QTY_ALLOC / &
                                GOODS_RECEIVED_LINE_DETAILS(IC_CATCHWEIGHT_AVERAGE)
                        END_IF
                END_IF


                ! End of S, C or P product

        END_BLOCK

        BEGIN_BLOCK ROUND_OTHER_QTYS
                #GRN_TRANS_QTY_ALLOC = ROUND(#GRN_TRANS_QTY_ALLOC, #UNIT_REC_DECIMALS)
                #GRN_OTHER_QTY_ALLOC = ROUND(#GRN_OTHER_QTY_ALLOC, #OTHER_INV_DECIMALS)
        END_BLOCK


        BEGIN_BLOCK END_OF_CONV

                #BALANCE = #QTY_INVOICED
                PERFORM MATCH_PO_GRN

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_62242
                        EXIT(%FAILURE)
                END_IF
        END_BLOCK

        BEGIN_BLOCK TOLERANCES
                IF (#COST_UPDATE = #NO)
                        PERFORM UPDATE_TOLERANCES (&
                                (#QTY_INVOICED), &
                                (#POSTING_COST), &
                                (#COST), &
                                (#OPERATOR))
                END_IF
        END_BLOCK

        BEGIN_BLOCK UPDATE_INVOICE
			        	  IF (#OPERATOR >	0)
											#INDEX					= #INDEX + 1
											#PO_NUMBER(#INDEX)		= POP_LINES(PO_NUMBER)
											#PO_LINE_NUMBER(#INDEX)	= POP_LINES(PO_LINE_NUMBER)
									END_IF
                        #TOTAL_QTY_INVOICED = #TOTAL_QTY_INVOICED - #QTY_INVOICED

                END_WHILE
        END_BLOCK

        BEGIN_BLOCK END
        END_BLOCK

END_FORM


PROCEDURE_FORM MATCH_PO_GRN


        BEGIN_BLOCK CREATE_GRN_LINK
                ! Update quantities on origianl grn lines and add a link record to
                ! connect the invoice line with grn line it was allocated to

                CLEAR_BUFFER LINK_PO_GRN

                START_STREAM MATCH &
                        /TABLE=LINK_PO_GRN &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=GRN_NUMBER=GOODS_RECEIVED_LINES(GRN_NUMBER) &
                        /WITH=GRN_LINE_NUMBER=GOODS_RECEIVED_LINES(GRN_LINE_NUMBER) &
                        /WITH=GRN_SEQUENCE=GOODS_RECEIVED_LINE_DETAILS(SEQUENCE) &
                        /WITH=QTY_PROCESSED > 0 &
                        /WITH=QTY_ALLOCATED > 0 &
                        /SORTED_BY=(ALLOCATION_DATE) &
                        /SELECTION=(#SELECT1)

                WHILE (#BALANCE > 0)

                        FETCH MATCH /FAILURE=(CONTINUE OUT)

                        IF (#MAIN_OPT = "ENTRY" OR #MAIN_OPT = "MODIFY")
                                START_STREAM FIND_PO_SEQ &
                                        /TABLE=LINK_INV_PO &
                                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                                        /WITH=DIVISION=#DIVISION &
                                        /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER &
                                        /WITH=PURCHASE_INVOICE_LINE=PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE) &
                                        /WITH=PO_NUMBER=MATCH:LINK_PO_GRN(PO_NUMBER) &
                                        /WITH=PO_LINE_NUMBER=MATCH:LINK_PO_GRN(PO_LINE_NUMBER) &
                                        /WITH=PO_SEQUENCE=MATCH:LINK_PO_GRN(PO_SEQUENCE) &
                                        /FIRST=1 &
                                        /SORTED_BY=(-SEQUENCE)

                                FETCH FIND_PO_SEQ &
                                        /FAILURE=(#PO_ALLOC_SEQ = 1) &
                                        /SUCCESS=(#PO_ALLOC_SEQ=LINK_INV_PO(SEQUENCE) + 1)
                        END_IF

                        FIND IN POP_LINES &
                                /LOCK=WRITE &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=DIVISION=#DIVISION &
                                /WITH=PO_NUMBER=MATCH:LINK_PO_GRN(PO_NUMBER) &
                                /WITH=PO_LINE_NUMBER=MATCH:LINK_PO_GRN(PO_LINE_NUMBER) &

                        IF (%STATUS = %FAILURE)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_62312
                                EXIT(%FAILURE)
                        END_IF

                        PERFORM "GEMLB:LB_GET_QUANTITY_MASK" (#COMPANY_CODE,POP_LINES(PART_CODE), &
                        POP_LINES(UNIT_PUR),#UNIT_PUR_MASK,#R2)
                        IF (%STATUS=%FAILURE)
                                #UNIT_PUR_DECIMALS = 2
                        ELSE
                                #UNIT_PUR_DECIMALS = #R2
                        END_IF

                        START_STREAM POP_DETAILS &
                                /LOCK=WRITE &
                                /TABLE=POP_LINE_DETAILS &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=DIVISION=#DIVISION &
                                /WITH=PO_NUMBER=MATCH:LINK_PO_GRN(PO_NUMBER) &
                                /WITH=PO_LINE_NUMBER=MATCH:LINK_PO_GRN(PO_LINE_NUMBER) &
                                /WITH=PO_QTY_TO_INVOICE > 0 &
                                /WITH=PO_QTY_IN_INVENTORY > 0 &
                                /WITH=SEQUENCE=MATCH:LINK_PO_GRN(PO_SEQUENCE) &
                                /SELECTION=(#SELECT2)

                        WHILE (#BALANCE > 0)

                                FETCH POP_DETAILS /FAILURE=(CONTINUE OUT)

                                #PO_CONVERT = 1
                                IF (POP_LINES(UNIT_PUR) <> #LINK_UOM)
                                        ! Unit invoiced is not the same as unit order, so we must
                                        ! convert into units ordered for updating order line
                                        IF (#IC_PRODUCT_TYPE = PARAMETER("IC_SINGLE_UOM_CONTROL"))
                                                PERFORM UOM_CONVERSION &
                                                        (#COMPANY_CODE, &
                                                        (POP_LINES(PART_CODE)),&
                                                        (POP_LINES(WAREHOUSE)), &
                                                        (POP_LINE_DETAILS(IC_LOT_NUMBER)),&
                                                        (#BALANCE),&
                                                        (#LINK_UOM), &
                                                        (POP_LINES(UNIT_PUR)), &
                                                        #PO_CONVERT, &
                                                        #BALANCE)

                                                IF (%STATUS <> %SUCCESS)
                                                        EXIT(%FAILURE)
                                                END_IF
                                        ELSE
                                                ! If the two NOM UOM's not equal then go through the averages to get correct value
                                                IF (PURCHASE_INVOICE_LINES(IC_NOMINATED_UNIT) <> POP_LINES(IC_NOMINATED_UNIT))
                                                        ! Potent Product
                                                        IF (#IC_PRODUCT_TYPE = PARAMETER("IC_POTENT_UOM_CONTROL"))
                                                                IF (POP_LINES(IC_NOMINATED_UNIT) = PRODUCT_MASTER(IC_UNIT_CAPACITY))
                                                                        #BALANCE  = #QTY_ALLOC *     &
                                                                        POP_LINE_DETAILS(IC_POTENT_DEFAULT_FACTOR)
                                                                ELSE
                                                                        #BALANCE = #QTY_ALLOC /     &
                                                                        POP_LINE_DETAILS(IC_POTENT_DEFAULT_FACTOR)
                                                                END_IF
                                                        END_IF
                                                        ! Catchweight Product
                                                        IF (#IC_PRODUCT_TYPE = PARAMETER("IC_CATCHWEIGHT_UOM_CONTROL"))
                                                                IF (POP_LINES(IC_NOMINATED_UNIT) = PRODUCT_MASTER(IC_UNIT_CAPACITY))
                                                                        #BALANCE = #QTY_ALLOC *     &
                                                                        POP_LINE_DETAILS(IC_CATCHWEIGHT_AVERAGE)
                                                                ELSE
                                                                        #BALANCE = #QTY_ALLOC /     &
                                                                        POP_LINE_DETAILS(IC_CATCHWEIGHT_AVERAGE)
                                                                END_IF
                                                        END_IF
                                                END_IF

                                                PERFORM UOM_CONVERSION &
                                                        (#COMPANY_CODE, &
                                                        (POP_LINES(PART_CODE)),&
                                                        (POP_LINES(WAREHOUSE)), &
                                                        (POP_LINE_DETAILS(IC_LOT_NUMBER)),&
                                                        (#BALANCE),&
                                                        (POP_LINES(IC_NOMINATED_UNIT)), &
                                                        (POP_LINES(UNIT_PUR)), &
                                                        #PO_CONVERT, &
                                                        #BALANCE)

                                                IF (%STATUS <> %SUCCESS)
                                                        EXIT(%FAILURE)
                                                END_IF
                                        END_IF
                                END_IF
                                ! Add link record to connect po line with grn line it was allocated to
                                ! Update quantities on po lines
                                IF ((#OPERATOR < 0) OR (#OPT = "CANCEL") OR (#MAIN_OPT = "CANCEL"))

                                        POP_LINES(QTY_INVOICED) = POP_LINES(QTY_INVOICED) - &
                                        ROUND(#BALANCE,#UNIT_PUR_DECIMALS)

                                        POP_LINE_DETAILS(QTY_INVOICED) = POP_LINE_DETAILS(QTY_INVOICED) - &
                                        ROUND(#BALANCE,#UNIT_PUR_DECIMALS)

                                        IF (POP_LINES(QTY_INVOICED) < POP_LINES(ORDER_QUANTITY))
                                                POP_LINES(CLOSED_FOR_PI) = PARAMETER("LINE_CLOSED_O")
                                        END_IF

                                ELSE

                                        POP_LINES(QTY_INVOICED) = POP_LINES(QTY_INVOICED) + &
                                        ROUND(#BALANCE,#UNIT_PUR_DECIMALS)

                                        POP_LINE_DETAILS(QTY_INVOICED) = POP_LINE_DETAILS(QTY_INVOICED) + &
                                        ROUND(#BALANCE,#UNIT_PUR_DECIMALS)

                                        IF (POP_LINE_DETAILS(QTY_INVOICED) = POP_LINE_DETAILS(ORDER_QUANTITY))
                                                POP_LINE_DETAILS(CLOSED_FOR_PI) = PARAMETER("LINE_CLOSED_C")
                                        END_IF
                                END_IF

                                IF (POP_LINES(ORDER_QUANTITY) - POP_LINES(QTY_INVOICED) < = 0)
                                        POP_LINES(CLOSED_FOR_PI) = PARAMETER("LINE_CLOSED_C")
                                END_IF

                                ! Calculate nominated purchase cost
                                #CONV_RATE = 1.0
                                IF (#COST_NOMINATED_UOM <> "")
                                        IF (#COST_NOMINATED_UOM <> POP_LINES(UNIT_PRICE))

                                        PERFORM UOM_CONVERSION &
                                                ((#COMPANY_CODE), &
                                                (POP_LINES(PART_CODE)), &
                                                (POP_LINES(WAREHOUSE)), &
                                                (PURCHASE_INVOICE_LINES(IC_LOT_NUMBER)), &
                                                (1.0), &
                                                (POP_LINES(UNIT_PRICE)), &
                                                (#COST_NOMINATED_UOM), &
                                                #CONV_RATE)


                                                IF (%STATUS <> %SUCCESS)
                                                        MESSAGE/IDENTIFIER/BELL/WAIT P_32402
                                                        EXIT(%FAILURE)
                                                END_IF
                                        END_IF
                                END_IF
                                ! Calculate nominated inventory cost
                                        #PUR_COST_FOR_NOMINATED = POP_LINES(PURCHASE_PRICE) / #CONV_RATE
                                ! #LINK_PO_PRICE = #PUR_COST_FOR_NOMINATED

                                !
                                ! 4. Test if #LINK_UOM = #COST_NOMINATED_UOM
                                !
                                IF (#LINK_UOM = #COST_NOMINATED_UOM)
                                        #LINK_PO_PRICE = #PUR_COST_FOR_NOMINATED
                                ELSE
                                        ! 5.  If not same, nominated purchase cost must be converted
                                        !     to be in terms of #LINK_UOM.
                                        !
                                        ! 5.1 Potent Product
                                        IF (#IC_PRODUCT_TYPE = PARAMETER("IC_POTENT_UOM_CONTROL"))

                                                #LINK_PO_PRICE = #PUR_COST_FOR_NOMINATED * &
                                                        POP_LINE_DETAILS(IC_POTENT_DEFAULT_FACTOR)
                                        END_IF
                                        ! 5.2 Catchweight Product
                                        IF (#IC_PRODUCT_TYPE = PARAMETER("IC_CATCHWEIGHT_UOM_CONTROL"))
                                                IF(#COST_NOMINATED_UOM = PRODUCT_MASTER(IC_UNIT_CAPACITY))


                                                #LINK_PO_PRICE = #PUR_COST_FOR_NOMINATED / &
                                                        POP_LINE_DETAILS(IC_CATCHWEIGHT_AVERAGE)

                                        ELSE

                                                #LINK_PO_PRICE = #PUR_COST_FOR_NOMINATED * &
                                                        POP_LINE_DETAILS(IC_CATCHWEIGHT_AVERAGE)

                                        END_IF
                        !                 IF (#IC_PRODUCT_TYPE = PARAMETER("IC_SINGLE_UOM_CONTROL"))
                        !                       #LINK_PO_PRICE = XXXXXXXXXXXXXXXXXXX
                        !                 END_IF


                                 END_IF
                                END_IF
                                !
                                IF ((#OPERATOR > 0) &
                                AND ((#MAIN_OPT = "ENTRY") OR (#LINKS_REQUIRED = #YES)))

                                        CLEAR_BUFFER LINK_INV_PO

                                        LINK_INV_PO(COMPANY_CODE)               = #COMPANY_CODE
                                        LINK_INV_PO(DIVISION)                   = #DIVISION
                                        LINK_INV_PO(PURCHASE_INVOICE_NUMBER)    = #PURCHASE_INVOICE_NUMBER
                                        LINK_INV_PO(PURCHASE_INVOICE_LINE)      = PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE)
                                        LINK_INV_PO(PO_NUMBER)          = POP_LINE_DETAILS(PO_NUMBER)
                                        LINK_INV_PO(PO_LINE_NUMBER)     = POP_LINE_DETAILS(PO_LINE_NUMBER)
                                        LINK_INV_PO(PO_SEQUENCE)        = POP_LINE_DETAILS(SEQUENCE)
                                        LINK_INV_PO(SEQUENCE)           = #PO_ALLOC_SEQ
                                        LINK_INV_PO(ALLOCATION_DATE)    = %NOW
                                        LINK_INV_PO(SYSTEM_DATE)        = %NOW
                                        LINK_INV_PO(UNIT_PRICE)         = #LINK_UOM
                                        LINK_INV_PO(PURCHASE_COST)      = #LINK_INV_COST
                                        LINK_INV_PO(UNIT_ALLOC)         = #LINK_UOM
                                        LINK_INV_PO(QTY_ALLOCATED)      = #QTY_INVOICED
                                        LINK_INV_PO(PURCHASE_PRICE)     = #LINK_PO_PRICE

                                        ADD TO LINK_INV_PO
                                        IF (%STATUS <> %NORMAL)
                                                EXIT(%FAILURE)
                                        END_IF
                                        #PO_ALLOC_SEQ = #PO_ALLOC_SEQ + 1
                                ELSE
                                        FIND IN LINK_INV_PO &
                                                /LOCK=WRITE &
                                                /WITH=COMPANY_CODE = #COMPANY_CODE &
                                                /WITH=DIVISION=#DIVISION &
                                                /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER &
                                                /WITH=PURCHASE_INVOICE_LINE=PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE) &
                                                /WITH=PO_NUMBER=POP_LINE_DETAILS(PO_NUMBER) &
                                                /WITH=PO_LINE_NUMBER=POP_LINE_DETAILS(PO_LINE_NUMBER) &
                                                /WITH=PO_SEQUENCE=POP_LINE_DETAILS(SEQUENCE)

                                        LINK_INV_PO(PURCHASE_COST)  = #LINK_INV_COST
                                        LINK_INV_PO(QTY_ALLOCATED) =  #QTY_INVOICED
                                END_IF

                                #LINK_CONVERT = 1.0
                                IF (MATCH:LINK_PO_GRN(UNIT_ALLOC) <> #LINK_UOM)
                                ! The original link unit is different that the invoice allocation
                                ! unit was may not be in the same uom as the allocation
                                ! unit. So we must convert to the unit received.

                                        PERFORM UOM_CONVERSION &
                                                (#COMPANY_CODE, &
                                                (POP_LINES(PART_CODE)),&
                                                (POP_LINES(WAREHOUSE)), &
                                                (POP_LINE_DETAILS(IC_LOT_NUMBER)),&
                                                (1.0),&
                                                (MATCH:LINK_PO_GRN(UNIT_ALLOC)), &
                                                (#UNIT_INV), &
                                                #LINK_CONVERT,&
                                                #LINK_CONVERT)

                                END_IF

                                MATCH:LINK_PO_GRN(QTY_ALLOCATED) = MATCH:LINK_PO_GRN(QTY_ALLOCATED) &
                                + (#QTY_ALLOC * #LINK_CONVERT * #OPERATOR)

                                !Update allocation date to link record
                                MATCH:LINK_PO_GRN(ALLOCATION_DATE) = %NOW

                                !
                                ! Update QTY'S for possible other UOM records
                                ! -------------------------------------------
                                IF (GOODS_RECEIVED_LINES(IC_OTHER_INVENTORY_UNIT) = "")
                                        GOTO UPDATE_OTHER_UNIT
                                END_IF

                                IF (#LINK_UOM = GOODS_RECEIVED_LINES(IC_OTHER_INVENTORY_UNIT))
                                        GOTO UPDATE_OTHER_UNIT
                                END_IF

                        START_STREAM GRDQ_STR2 &
                                /TABLE=GOODS_RECEIVED_DETAIL_QTYS &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=DIVISION=#DIVISION &
                                /WITH=GRN_NUMBER=GOODS_RECEIVED_LINES(GRN_NUMBER) &
                                /WITH=GRN_LINE_NUMBER=GOODS_RECEIVED_LINES(GRN_LINE_NUMBER) &
                                /WITH=SEQUENCE=GOODS_RECEIVED_LINE_DETAILS(SEQUENCE) &
                                /WITH=UNIT_OF_MEASURE=GOODS_RECEIVED_LINES(IC_OTHER_INVENTORY_UNIT)

                        WHILE (1)

                        FETCH GRDQ_STR2 /FAILURE=(CONTINUE OUT)

                        IF (#OPERATOR < 0 OR #OPT = "CANCEL" OR #MAIN_OPT = "CANCEL")

                                GRDQ_STR2:GOODS_RECEIVED_DETAIL_QTYS(QTY_INVOICED) = &
                                        GRDQ_STR2:GOODS_RECEIVED_DETAIL_QTYS(QTY_INVOICED) - &
                                        #GRN_OTHER_QTY_ALLOC
                        ELSE

                                GRDQ_STR2:GOODS_RECEIVED_DETAIL_QTYS(QTY_INVOICED) = &
                                        GRDQ_STR2:GOODS_RECEIVED_DETAIL_QTYS(QTY_INVOICED) + &
                                        #GRN_OTHER_QTY_ALLOC

                        END_IF

                        END_WHILE

                        FIND IN GOODS_RECEIVED_LINE_QTYS &
                                /LOCK=WRITE &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=DIVISION=#DIVISION &
                                /WITH=GRN_NUMBER=GOODS_RECEIVED_LINES(GRN_NUMBER) &
                                /WITH=GRN_LINE_NUMBER=GOODS_RECEIVED_LINES(GRN_LINE_NUMBER) &
                                /WITH=UNIT_OF_MEASURE=GOODS_RECEIVED_LINES(IC_OTHER_INVENTORY_UNIT)

                        IF (%STATUS = %FAILURE)
                                GOTO UPDATE_OTHER_UNIT
                        END_IF

                        IF (#OPERATOR < 0 OR #OPT = "CANCEL" OR #MAIN_OPT = "CANCEL")

                                GOODS_RECEIVED_LINE_QTYS(QTY_INVOICED) = &
                                GOODS_RECEIVED_LINE_QTYS(QTY_INVOICED) - &
                                #GRN_OTHER_QTY_ALLOC

                                GOODS_RECEIVED_LINE_QTYS(QTY_ALLOCATED) = &
                                GOODS_RECEIVED_LINE_QTYS(QTY_ALLOCATED) - &
                                #GRN_OTHER_QTY_ALLOC

                        ELSE
                                GOODS_RECEIVED_LINE_QTYS(QTY_INVOICED) = &
                                GOODS_RECEIVED_LINE_QTYS(QTY_INVOICED) + &
                                #GRN_OTHER_QTY_ALLOC

                                GOODS_RECEIVED_LINE_QTYS(QTY_ALLOCATED) = &
                                GOODS_RECEIVED_LINE_QTYS(QTY_ALLOCATED) + &
                                #GRN_OTHER_QTY_ALLOC
                        END_IF
        END_BLOCK

        BEGIN_BLOCK UPDATE_OTHER_UNIT

                        IF (GOODS_RECEIVED_LINES(UNIT_REC) = #LINK_UOM)
                                GOTO UPDATE_BALANCE
                        END_IF

                        START_STREAM GRDQ_STR3 &
                                /TABLE=GOODS_RECEIVED_DETAIL_QTYS &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=DIVISION=#DIVISION &
                                /WITH=GRN_NUMBER=GOODS_RECEIVED_LINES(GRN_NUMBER) &
                                /WITH=GRN_LINE_NUMBER=GOODS_RECEIVED_LINES(GRN_LINE_NUMBER) &
                                /WITH=SEQUENCE=GOODS_RECEIVED_LINE_DETAILS(SEQUENCE) &
                                /WITH=UNIT_OF_MEASURE=GOODS_RECEIVED_LINES(UNIT_REC)

                        WHILE (1)

                        FETCH GRDQ_STR3 /FAILURE=(CONTINUE OUT)

                        IF (#OPERATOR < 0 OR #OPT = "CANCEL" OR #MAIN_OPT = "CANCEL")
                                GRDQ_STR3:GOODS_RECEIVED_DETAIL_QTYS(QTY_INVOICED) = &
                                GRDQ_STR3:GOODS_RECEIVED_DETAIL_QTYS(QTY_INVOICED) - &
                                #GRN_TRANS_QTY_ALLOC

                        ELSE
                                GRDQ_STR3:GOODS_RECEIVED_DETAIL_QTYS(QTY_INVOICED) = &
                                GRDQ_STR3:GOODS_RECEIVED_DETAIL_QTYS(QTY_INVOICED) + &
                                #GRN_TRANS_QTY_ALLOC

                        END_IF

                        END_WHILE


                        FIND IN GOODS_RECEIVED_LINE_QTYS &
                                /LOCK=WRITE &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=DIVISION=#DIVISION &
                                /WITH=GRN_NUMBER=GOODS_RECEIVED_LINES(GRN_NUMBER) &
                                /WITH=GRN_LINE_NUMBER=GOODS_RECEIVED_LINES(GRN_LINE_NUMBER) &
                                /WITH=UNIT_OF_MEASURE=GOODS_RECEIVED_LINES(UNIT_REC)
                        IF (%STATUS = %FAILURE)
                                GOTO UPDATE_BALANCE
                        END_IF

                        IF (#OPERATOR < 0 OR #OPT = "CANCEL" OR #MAIN_OPT = "CANCEL")
                                GOODS_RECEIVED_LINE_QTYS(QTY_INVOICED) = &
                                GOODS_RECEIVED_LINE_QTYS(QTY_INVOICED) - &
                                #GRN_TRANS_QTY_ALLOC

                                GOODS_RECEIVED_LINE_QTYS(QTY_ALLOCATED) = &
                                GOODS_RECEIVED_LINE_QTYS(QTY_ALLOCATED) - &
                                #GRN_TRANS_QTY_ALLOC
                        ELSE

                                GOODS_RECEIVED_LINE_QTYS(QTY_INVOICED) = &
                                GOODS_RECEIVED_LINE_QTYS(QTY_INVOICED) + &
                                #GRN_TRANS_QTY_ALLOC

                                GOODS_RECEIVED_LINE_QTYS(QTY_ALLOCATED) = &
                                GOODS_RECEIVED_LINE_QTYS(QTY_ALLOCATED) + &
                                #GRN_TRANS_QTY_ALLOC

                        END_IF
        END_BLOCK

                BEGIN_BLOCK UPDATE_BALANCE
                                #BALANCE = #BALANCE - #QTY_ALLOC
                                ! Reduce balance by the allocated qty
                END_BLOCK

        BEGIN_BLOCK END_LOOPS
                        END_WHILE

                END_WHILE

        END_BLOCK

        BEGIN_BLOCK DELETE_LINK_INV_PO
                        ! Delete all LINK_INV_PO records if Cancelling Invoice.

                        IF ((#OPT = "CANCEL") OR (#MAIN_OPT = "CANCEL"))
                                START_STREAM FIND_PO_LINK &
                                        /LOCK=WRITE &
                                        /TABLE=LINK_INV_PO &
                                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                                        /WITH=DIVISION=#DIVISION &
                                        /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER &
                                        /WITH=PURCHASE_INVOICE_LINE=PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE)

                                WHILE (1)
                                        FETCH FIND_PO_LINK /FAILURE=(CONTINUE OUT)
                                        DELETE FROM LINK_INV_PO
                                                IF (%STATUS = %FAILURE)
                                                        MESSAGE/IDENTIFIER/BELL/WAIT P_60159
                                                        EXIT(%STATUS)
                                                END_IF
                                END_WHILE
                        END_IF
        END_BLOCK

END_FORM


PROCEDURE_FORM COST_UPDATE

        ! Form called when only the invoice price is changed for a line item.
        ! Otherwise, UPDATE is called.

        BEGIN_BLOCK GET_GRN_COST
                FIND IN GOODS_RECEIVED_LINES &
                        /LOCK=WRITE &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=GRN_NUMBER=PURCHASE_INVOICE_LINES(GRN_NUMBER) &
                        /WITH=GRN_LINE_NUMBER=PURCHASE_INVOICE_LINES(GRN_LINE_NUMBER)

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_62313,PURCHASE_INVOICE_LINES(GRN_LINE_NUMBER)
                        GOTO END
                END_IF
                #GRN_COST = GOODS_RECEIVED_LINES(GRN_COST)
        END_BLOCK

        BEGIN_BLOCK TOLERANCES

                ! Reverse out tolerances from old invoice price first.

                PERFORM UPDATE_TOLERANCES ( &
                        (#QTY_INVOICED), &
                        (PURCHASE_INVOICE_LINES(OLD_PURCHASE_COST)), &
                        (#GRN_COST), &
                        "-1")

                IF (%STATUS = %FAILURE)
                        GOTO END
                END_IF

                ! If cancelling an existing invoice after a price modification,
                ! bypass updating with any new invoice price.

                IF (#OPT = "CANCEL")
                        GOTO END
                END_IF

                ! Update tolerances with new invoice price.

                PERFORM UPDATE_TOLERANCES ( &
                        (#QTY_INVOICED), &
                        (#INV_COST), &
                        (#GRN_COST), &
                        "1")
        END_BLOCK

        BEGIN_BLOCK END
        END_BLOCK

END_FORM


PROCEDURE_FORM MAINTAIN_PAYMENT_ANALYSIS


        BEGIN_BLOCK SETUP
                #ANAL_1         = PURCHASE_INVOICES(AP_PAYMENT_ANALYSIS_1)
                #ANAL_2         = PURCHASE_INVOICES(AP_PAYMENT_ANALYSIS_2)
                #ANAL_3         = PURCHASE_INVOICES(AP_PAYMENT_ANALYSIS_3)
                #ANAL_4         = PURCHASE_INVOICES(AP_PAYMENT_ANALYSIS_4)
                #ANAL_5         = PURCHASE_INVOICES(AP_PAYMENT_ANALYSIS_5)
                #PAYEE_NUMBER   = PURCHASE_INVOICES(PAYEE_NUMBER)
                #PAYMENT_METHOD = PURCHASE_INVOICES(PAYMENT_TYPE)
        END_BLOCK

        BEGIN_BLOCK MODIFY_PAYMENT_DETAILS
                PERFORM "GEMLB:LB_PAYMENT_DETAILS" &
                        ("M", &
                        (MESSAGE("P_20235")), &
                        #COMPANY_CODE, &
                        #DIVISION, &
                        #VENDOR_NUMBER, &
                        #MISC_VENDOR, &
                        "","","","", &
                        #PAYEE_NUMBER, &
                        #PAYMENT_METHOD, &
                        #ANAL_1, &
                        #ANAL_2, &
                        #ANAL_3, &
                        #ANAL_4, &
                        #ANAL_5, &
                        "","","")
        END_BLOCK

        BEGIN_BLOCK STORE_DETAIL
                PURCHASE_INVOICES(AP_PAYMENT_ANALYSIS_1)        = #ANAL_1
                PURCHASE_INVOICES(AP_PAYMENT_ANALYSIS_2)        = #ANAL_2
                PURCHASE_INVOICES(AP_PAYMENT_ANALYSIS_3)        = #ANAL_3
                PURCHASE_INVOICES(AP_PAYMENT_ANALYSIS_4)        = #ANAL_4
                PURCHASE_INVOICES(AP_PAYMENT_ANALYSIS_5)        = #ANAL_5
                PURCHASE_INVOICES(PAYEE_NUMBER)                 = #PAYEE_NUMBER
                PURCHASE_INVOICES(PAYMENT_TYPE)                 = #PAYMENT_METHOD
        END_BLOCK

END_FORM


PROCEDURE_FORM DELETE_TAX_DISCOUNT_POSTINGS (#LINE)

        BEGIN_BLOCK REMOVE
                ! Delete all records for a purchase invoice line
                ! Populate the key fields to the VT for delete function
                DELETE ALL FROM SYS_POSTINGS_CONTROL_VT
                DELETE ALL FROM SYS_POSTINGS_VT
                DELETE ALL FROM SYS_PA_POSTINGS_VT

                CLEAR_BUFFER SYS_POSTINGS_CONTROL_VT
                CLEAR_BUFFER SYS_POSTINGS_VT

                SYS_POSTINGS_CONTROL_VT(COMPANY_CODE) = #COMPANY_CODE
                SYS_POSTINGS_CONTROL_VT(DIVISION) = #DIVISION
                SYS_POSTINGS_CONTROL_VT(DOCUMENT_NUMBER) = PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)
                SYS_POSTINGS_VT(DOCUMENT_LINE) = #LINE
                SYS_POSTINGS_VT(SYS_POST_TYPE) = PARAMETER("GL_POSTING_FOR_DISCOUNT")

                ADD TO SYS_POSTINGS_CONTROL_VT
                ADD TO SYS_POSTINGS_VT

                ! Call LB_S_L_DELETE_TEMP_POSTINGS routine
                PERFORM "GEMLB:LB_S_L_DELETE_TEMP_POSTINGS"(#TABLE_NAME,#SUCCESS,#RTN_MESSAGE)

                IF (#SUCCESS = #NO)
                        ERROR/TEXT_ONLY/BELL/WAIT #RTN_MESSAGE
                        EXIT(%FAILURE)
                END_IF

        END_BLOCK
END_FORM


PROCEDURE_FORM OLD_DELETE_TAX_DISCOUNT_POSTINGS (#LINE) &
        /TABLE=PURCHASE_INVOICE_GL_POSTINGS &
        /WITH=COMPANY_CODE=#COMPANY_CODE &
        /WITH=DIVISION=#DIVISION &
        /WITH=PURCHASE_INVOICE_NUMBER=PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER) &
        /WITH=PURCHASE_INVOICE_LINE=#LINE &
        /WITH=SYS_POST_TYPE=(PARAMETER("GL_POSTING_FOR_DISCOUNT"))

        BEGIN_BLOCK REMOVE
                DELETE FROM PURCHASE_INVOICE_GL_POSTINGS
        END_BLOCK
END_FORM

PROCEDURE_FORM SETUP_TEN99_VT


                IF (TABLE_CHECK("TEN99_TRANSACTIONS_VT","")=%NORMAL)
                        DELETE TABLE TEN99_TRANSACTIONS_VT
                END_IF
                ADD TABLE TEN99_TRANSACTIONS_VT &
                        /VIRTUAL &
                        /DESCRIPTION = "Ten99 Transactions" &
                        /ADD_FIELD = TRANSACTION_TYPE &
                        /ADD_FIELD = AP_TRANSACTION_NUMBER &
                        /ADD_FIELD = TRANSACTION_LINE_NUMBER &
                        /ADD_FIELD = SEQUENCE &
                        /ADD_FIELD = SYS_TEN99_RETURN_TYPE &
                        /ADD_FIELD = SYS_TEN99_AMOUNT_TYPE &
                        /ADD_FIELD = SYS_TEN99_CURRENCY

END_FORM


PROCEDURE_FORM DELETE_EXISTING_TEN99_DETAILS &
        /LOCK=WRITE &
        /TABLE=POP_INVOICE_TEN99_DETAILS &
        /WITH=COMPANY_CODE=#COMPANY_CODE &
        /WITH=DIVISION=#DIVISION &
        /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER &
        /WITH=PURCHASE_INVOICE_LINE=PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE)


        BEGIN_BLOCK DELETE_LINES
                DELETE FROM POP_INVOICE_TEN99_DETAILS
                IF (%STATUS <> %SUCCESS)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_32106
                        EXIT(%FAILURE)
                END_IF
        END_BLOCK

END_FORM


PROCEDURE_FORM CREATE_TEN99_DETAIL_FROM_VT &
        /TABLE=TEN99_TRANSACTIONS_VT &
        /WITH=TRANSACTION_TYPE="" &
        /WITH=AP_TRANSACTION_NUMBER=#PURCHASE_INVOICE_NUMBER &
        /WITH=TRANSACTION_LINE_NUMBER=#PURCHASE_INVOICE_LINE


        BEGIN_BLOCK WRITE_RECORDS

                CLEAR_BUFFER POP_INVOICE_TEN99_DETAILS

                POP_INVOICE_TEN99_DETAILS(COMPANY_CODE)                 = #COMPANY_CODE
                POP_INVOICE_TEN99_DETAILS(DIVISION)                     = #DIVISION
                POP_INVOICE_TEN99_DETAILS(PURCHASE_INVOICE_NUMBER)      = #PURCHASE_INVOICE_NUMBER
                POP_INVOICE_TEN99_DETAILS(PURCHASE_INVOICE_LINE)        = #PURCHASE_INVOICE_LINE
                POP_INVOICE_TEN99_DETAILS(SEQUENCE)                     = TEN99_TRANSACTIONS_VT(SEQUENCE)
                POP_INVOICE_TEN99_DETAILS(SYS_TEN99_CURRENCY)           = TEN99_TRANSACTIONS_VT(SYS_TEN99_CURRENCY)

                IF (#CURRENCY_METHOD > '0')
                        IF (#CURRENCY_RATIO_INDIC = PARAMETER("MULTIPLY_RATIO_INDIC"))
                                POP_INVOICE_TEN99_DETAILS(SYS_TEN99_BASE) =     &
                                        ROUND(TEN99_TRANSACTIONS_VT(SYS_TEN99_CURRENCY)*#CURRENCY_RATE,#BASE_CURRENCY_DECIMAL)
                        ELSE
                                POP_INVOICE_TEN99_DETAILS(SYS_TEN99_BASE) =     &
                                        ROUND(TEN99_TRANSACTIONS_VT(SYS_TEN99_CURRENCY)/#CURRENCY_RATE,#BASE_CURRENCY_DECIMAL)
                        END_IF
                END_IF

                POP_INVOICE_TEN99_DETAILS(SYS_CURRENCY_CODE)            = #CURRENCY_CODE
                POP_INVOICE_TEN99_DETAILS(SYS_CURRENCY_RATE)            = #CURRENCY_RATE
                POP_INVOICE_TEN99_DETAILS(SYS_CURRENCY_RATIO_INDIC)     = #CURRENCY_RATIO_INDIC
                POP_INVOICE_TEN99_DETAILS(SYSTEM_DATE)                  = %TODAY
                POP_INVOICE_TEN99_DETAILS(USERNAME)                     = %USERNAME
                POP_INVOICE_TEN99_DETAILS(SYS_TEN99_RETURN_TYPE)        = TEN99_TRANSACTIONS_VT(SYS_TEN99_RETURN_TYPE)
                POP_INVOICE_TEN99_DETAILS(SYS_TEN99_AMOUNT_TYPE)        = TEN99_TRANSACTIONS_VT(SYS_TEN99_AMOUNT_TYPE)

                ADD TO POP_INVOICE_TEN99_DETAILS

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_72036,PARAMETER("MODULE_PO"), &
                                MESSAGE("P_00161"),AP_TRANSACTIONS(AP_TRANSACTION_NUMBER)
                END_IF
        END_BLOCK

END_FORM


PROCEDURE_FORM DELETE_PREVIOUS_TEN99_RECORDS &
        /TABLE=POP_INVOICE_TEN99_DETAILS &
        /WITH=COMPANY_CODE=#COMPANY_CODE &
        /WITH=DIVISION=#DIVISION &
        /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER &
        /WITH=PURCHASE_INVOICE_LINE=#PURCHASE_INVOICE_LINE


        BEGIN_BLOCK DELETE_RECORDS

                DELETE FROM POP_INVOICE_TEN99_DETAILS
        END_BLOCK

END_FORM


PROCEDURE_FORM LOAD_TEN99_VT &
        /TABLE=POP_INVOICE_TEN99_DETAILS &
        /WITH=COMPANY_CODE=#COMPANY_CODE &
        /WITH=DIVISION = #DIVISION &
        /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER &
        /WITH=PURCHASE_INVOICE_LINE=#PURCHASE_INVOICE_LINE


        BEGIN_BLOCK WRITE_RECORDS
                CLEAR_BUFFER TEN99_TRANSACTIONS_VT

                TEN99_TRANSACTIONS_VT(AP_TRANSACTION_NUMBER)    = #PURCHASE_INVOICE_NUMBER
                TEN99_TRANSACTIONS_VT(TRANSACTION_LINE_NUMBER)  = #PURCHASE_INVOICE_LINE
                TEN99_TRANSACTIONS_VT(TRANSACTION_TYPE)         = ""
                TEN99_TRANSACTIONS_VT(SEQUENCE)                 = POP_INVOICE_TEN99_DETAILS(SEQUENCE)
                TEN99_TRANSACTIONS_VT(SYS_TEN99_RETURN_TYPE)    = POP_INVOICE_TEN99_DETAILS(SYS_TEN99_RETURN_TYPE)
                TEN99_TRANSACTIONS_VT(SYS_TEN99_AMOUNT_TYPE)    = POP_INVOICE_TEN99_DETAILS(SYS_TEN99_AMOUNT_TYPE)
                TEN99_TRANSACTIONS_VT(SYS_TEN99_CURRENCY)       = POP_INVOICE_TEN99_DETAILS(SYS_TEN99_CURRENCY)

                ADD TO TEN99_TRANSACTIONS_VT
        END_BLOCK

END_FORM

PROCEDURE_FORM CHECK_TAXABLE


        BEGIN_BLOCK TAX_FLAG_LIBRARY

                PERFORM "GEMLB:LB_CHK_TAXABLE" ( &
                        (#COMPANY_CODE), &
                        (#DIVISION), &
                        (#VENDOR_NUMBER), &
                        (#ADDRESS_CODE), &
                        #ERROR, &
                        #DUMMY, &
                        #TAX_CODE, &
                        #SYS_TAXABLE_CODE)

                IF (%STATUS <> %NORMAL)
                        ERROR/TEXT_ONLY/WAIT/BELL #ERROR
                        EXIT (%FAILURE)
                END_IF

                IF (#SYS_TAXABLE_CODE = PARAMETER("VENDOR_TAX_NON_TAXABLE") AND #ACCRUE_IGIC = #YES)
                        #SYS_TAXABLE_CODE = PARAMETER("VENDOR_TAX_ACCRUE")
                END_IF

                FIND IN VENDORS &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=AP_DIVISION=#DIVISION &
                        /WITH=VENDOR_NUMBER=#VENDOR_NUMBER &
                        /LOCK=NONE

                #ACCRUE_IGIC = VENDORS(ACCRUE_IGIC)

        END_BLOCK

END_FORM

PROCEDURE_FORM TEN99_DETAILS

        BEGIN_BLOCK TEN99
                #TEN99_MODE = "M"

                PERFORM "GEMLB:LB_TEN99_ANALYSIS" ( &
                        #TEN99_MODE, &
                        #DEF_TEN99_FORM, &
                        #DEF_TEN99_AMT_TYPE, &
                        (#NET_VALUE), &
                        "", &
                        #CURRENCY_DECIMAL, &
                        #CURRENCY_MASK, &
                        PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_NUMBER),&
                        PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_LINE),&
                        "")
        END_BLOCK

END_FORM

PROCEDURE_FORM UPDATE_TOLERANCES (#P1, #P2, #P3, #P4)

        BEGIN_BLOCK SETUP
                #INV_QTY        = #P1
                #INV_UNIT_PRICE = #P2
                #GRN_PRICE      = #P3
                #OPERATOR       = #P4
        END_BLOCK

        BEGIN_BLOCK UPDATE_TOLERANCES
                FIND IN POP_LINES &
                        /LOCK=WRITE &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=PO_NUMBER=LINK_PO_GRN(PO_NUMBER) &
                        /WITH=PO_LINE_NUMBER=LINK_PO_GRN(PO_LINE_NUMBER)

                IF (%STATUS = %FAILURE)
                        #PO_EXISTS = 0
                ELSE
                        #PO_EXISTS = 1
                END_IF

                FIND IN VENDORS &
                        /LOCK=NONE &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=AP_DIVISION=#DIVISION &
                        /WITH=VENDOR_NUMBER=#VENDOR_NUMBER

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_00360
                        GOTO RETURN
                END_IF

                #INV_VALUE = ROUND(#INV_QTY * #INV_UNIT_PRICE,2)

                IF (#PO_EXISTS = 1)
                        #BASE_VALUE = ROUND(POP_LINES(PURCHASE_PRICE) * #INV_QTY,2)
                ELSE
                        #BASE_VALUE = ROUND(#GRN_PRICE * #INV_QTY,2)
                END_IF

                !Convert text strings to numeric for comparison
                #INV_VALUE = #INV_VALUE * 1
                #BASE_VALUE = #BASE_VALUE * 1

                IF (#INV_VALUE > #BASE_VALUE AND &
                        VENDORS(POP_I_TOLERANCE_IN_USE) = PARAMETER("LANGUAGE_YES"))

                        IF (PURCHASE_INVOICE_LINES(VENDORS_PART_CODE) <> "" )
                                FIND IN PRODUCT_MASTER_BY_VENDOR &
                                        /LOCK=WRITE &
                                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                                        /WITH=PART_CODE=#PART_CODE &
                                        /WITH=VENDOR_NUMBER=#VENDOR_NUMBER &
                                        /WITH=VENDORS_PART_CODE=PURCHASE_INVOICE_LINES(VENDORS_PART_CODE)

                                IF (%STATUS = %SUCCESS AND &
                                        PRODUCT_MASTER_BY_VENDOR(POP_I_TOLERANCE_IN_USE) = PARAMETER("LANGUAGE_YES"))

                                        IF (#CURRENCY_CODE <> PRODUCT_MASTER_BY_VENDOR(SYS_CURRENCY_CODE) AND &
                                                #CURRENCY_METHOD > '0')

                                                PERFORM CURRENCY_CONVERSION &
                                                        (#CURRENCY_CODE, &
                                                        PRODUCT_MASTER_BY_VENDOR(SYS_CURRENCY_CODE), &
                                                        (#INV_VALUE - #BASE_VALUE), &
                                                        #CONVERTED_VALUE)

                                                PRODUCT_MASTER_BY_VENDOR(POP_TOTAL_INVOICE_TOLERANCE) = &
                                                        PRODUCT_MASTER_BY_VENDOR(POP_TOTAL_INVOICE_TOLERANCE) + &
                                                        (#CONVERTED_VALUE * #OPERATOR)
                                        ELSE
                                                PRODUCT_MASTER_BY_VENDOR(POP_TOTAL_INVOICE_TOLERANCE) = &
                                                        PRODUCT_MASTER_BY_VENDOR(POP_TOTAL_INVOICE_TOLERANCE) + &
                                                        ((#INV_VALUE - #BASE_VALUE) * #OPERATOR)
                                        END_IF
                                END_IF
                                ! end tolerance in use
                        END_IF
                        ! end nonblank vendor part code

                        FIND IN VENDORS &
                                /LOCK=WRITE &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=AP_DIVISION=#DIVISION &
                                /WITH=VENDOR_NUMBER=#VENDOR_NUMBER

                        IF (%STATUS = %FAILURE)
                                MESSAGE/IDENTIFIER/BELL/WAIT P_00360
                        END_IF

                        IF (#CURRENCY_CODE <> VENDORS(SYS_CURRENCY_CODE) AND #CURRENCY_METHOD > '0')

                                PERFORM CURRENCY_CONVERSION &
                                        (#CURRENCY_CODE, &
                                        (VENDORS(SYS_CURRENCY_CODE)), &
                                        (#INV_VALUE - #BASE_VALUE), &
                                        #CONVERTED_VALUE)

                                VENDORS(POP_TOTAL_INVOICE_TOLERANCE) = VENDORS(POP_TOTAL_INVOICE_TOLERANCE) + &
                                        (#CONVERTED_VALUE * #OPERATOR)
                        ELSE
                                VENDORS(POP_TOTAL_INVOICE_TOLERANCE) = VENDORS(POP_TOTAL_INVOICE_TOLERANCE) + &
                                        ((#INV_VALUE - #BASE_VALUE) * #OPERATOR)
                        END_IF
                END_IF
        END_BLOCK

        BEGIN_BLOCK RETURN
        END_BLOCK

END_FORM


PROCEDURE_FORM UOM_CONVERSION (#IN_COMPANY_CODE, #IN_PART_CODE, &
                #IN_WAREHOUSE, #IN_LOT_NUMBER, #IN_QUANTITY, #IN_FROM_UOM, &
                #IN_TO_UOM, #OUT_FACTOR, #OUT_QUANTITY)

        BEGIN_BLOCK POPULATE_VT
                DELETE ALL FROM SYS_DO_UOM_CONV_VT

                CLEAR_BUFFER SYS_DO_UOM_CONV_VT

                SYS_DO_UOM_CONV_VT(COMPANY_CODE) = #IN_COMPANY_CODE
                SYS_DO_UOM_CONV_VT(PART_CODE) = #IN_PART_CODE
                SYS_DO_UOM_CONV_VT(IC_LOT_NUMBER) = #IN_LOT_NUMBER
                IF (#IN_LOT_NUMBER <> "")
                        SYS_DO_UOM_CONV_VT(WAREHOUSE) = #IN_WAREHOUSE
                        SYS_DO_UOM_CONV_VT(IC_CHARACTERISTIC_SOURCE) = &
                                        PARAMETER("IC_UOM_LOT_CHARACTERISTIC")
                ELSE
                        SYS_DO_UOM_CONV_VT(WAREHOUSE) = ""
                        SYS_DO_UOM_CONV_VT(IC_CHARACTERISTIC_SOURCE) = &
                                        PARAMETER("IC_UOM_LOT_CHAR_DEFAULT")
                END_IF
                SYS_DO_UOM_CONV_VT(UNIT_FROM) = #IN_FROM_UOM
                SYS_DO_UOM_CONV_VT(UNIT_TO) = #IN_TO_UOM
                SYS_DO_UOM_CONV_VT(IC_QTY_FROM) = #IN_QUANTITY

                ADD TO SYS_DO_UOM_CONV_VT

                IF (%STATUS <> %NORMAL)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_90963
                        EXIT(%FAILURE)
                END_IF
        END_BLOCK

        BEGIN_BLOCK CALL_LIBRARY_ROUTINE
                PERFORM "GEMLB:LB_C_IC_ENGINE_CONTROLLER" &
                                (PARAMETER("IC_E_UOM_CONV_NO_MESSAGE"), &
                                #UOM_ERROR_STATUS, &
                                #UOM_ERROR_MESSAGE)

                IF (#UOM_ERROR_STATUS = #NO)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_32402
                        EXIT(%FAILURE)
                END_IF
        END_BLOCK

        BEGIN_BLOCK READ_VT
                FIND IN SYS_DO_UOM_CONV_VT

                IF (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_90955
                        EXIT(%FAILURE)
                END_IF

                #OUT_FACTOR = SYS_DO_UOM_CONV_VT(UOM_CONVERSION_FACTOR)
                #OUT_QUANTITY = SYS_DO_UOM_CONV_VT(IC_QTY_TO)
        END_BLOCK

END_FORM

PROCEDURE_FORM CHECK_FOR_CHANGED_TAX_DETAILS (#LINE) &
        /TABLE=PURCHASE_INVOICE_TAX_DETAILS &
        /WITH=COMPANY_CODE=#COMPANY_CODE &
        /WITH=DIVISION=#DIVISION &
        /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER &
        /WITH=PURCHASE_INVOICE_LINE=#LINE

        BEGIN_BLOCK CHECK_LINES

                FIND IN TAX_DETAILS_VT &
                        /WITH=TAX_CODE_1 = PURCHASE_INVOICE_TAX_DETAILS(PRODUCT_TAX_CODE) &
                        /WITH=TAX_CODE_2 = PURCHASE_INVOICE_TAX_DETAILS(VENDOR_TAX_CODE) &
                        /WITH=SYS_E_TAX_VAL = PURCHASE_INVOICE_TAX_DETAILS(SYS_E_TAX_VAL) &
                        /WITH=SYS_N_TAX_VAL = PURCHASE_INVOICE_TAX_DETAILS(SYS_N_TAX_VAL) &
                        /LOCK=NONE

                IF (%STATUS <> %SUCCESS)
                        #TAX_CHANGED = #YES
                        EXIT
                END_IF

        END_BLOCK
END_FORM

PROCEDURE_FORM CALCULATE_DUE_DATE

        BEGIN_BLOCK CALC_DUE_DATE

                #PAYMENT_CODE           = CREDIT_TERMS(PAYMENT_CODE)
                #CREDIT_TERMS_CODE      = CREDIT_TERMS(CREDIT_TERMS_CODE)
                #PAYMENT_TYPE           = CREDIT_TERMS(DATE_PAYMENT_TYPE)
                #POSTING_YEAR           = PURCHASE_INVOICES(YEAR)
                #POSTING_PERIOD         = PURCHASE_INVOICES(PERIOD)
                #INVOICE_DATE           = PURCHASE_INVOICES(INVOICE_DATE)
                #POSTING_DATE           = PURCHASE_INVOICES(POSTING_DATE)

                PERFORM "GEMLB:LIB_L_DUE_DATE" &
                                (#COMPANY_CODE, &
                                 #CREDIT_TERMS_CODE, &
                                 #PAYMENT_CODE, &
                                 #PAYMENT_TYPE,&
                                 #INVOICE_DATE, &
                                 #POSTING_PERIOD, &
                                 #POSTING_YEAR,&
                                 #NBR_PERIODS, &
                                 #DUE_DATE, &
                                 #PERIOD_DUE, &
                                 #YEAR_DUE)

                IF (CREDIT_TERMS(PAYMENT_CODE) = PARAMETER("PAYMENT_CODE_PERIOD"))
                        PURCHASE_INVOICES(DUE_PERIOD) = #PERIOD_DUE
                        PURCHASE_INVOICES(DUE_YEAR)   = #YEAR_DUE
                ELSE
                        PURCHASE_INVOICES(DUE_PERIOD) = ""
                        PURCHASE_INVOICES(DUE_YEAR)   = ""
                END_IF

                PURCHASE_INVOICES(DUE_DATE) = #DUE_DATE
        END_BLOCK
END_FORM

PROCEDURE_FORM CALCULATE_CASH_DISCOUNT_DATE

        BEGIN_BLOCK CD

               FIND IN CREDIT_TERMS_DISCOUNTS &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=CREDIT_TERMS_CODE=PURCHASE_INVOICES(CREDIT_TERMS_CODE)

                IF (%STATUS = %SUCCESS)

                        PURCHASE_INVOICES(DISCOUNT_RECEIVED) = CREDIT_TERMS_DISCOUNTS(DISCOUNT_RECEIVED)

                        PURCHASE_INVOICES(DISCOUNT_DATE) = &
                                DATE(DAYS(PURCHASE_INVOICES(INVOICE_DATE)) + &
                                CREDIT_TERMS_DISCOUNTS(DAYS_ALLOWED))
                ELSE
                        PURCHASE_INVOICES(DISCOUNT_DATE)        = ""
                        PURCHASE_INVOICES(DISCOUNT_RECEIVED)    = 0
                END_IF
        END_BLOCK
END_FORM

PROCEDURE_FORM CHECK_INVOICE_POSTINGS (#LINE) &
        /SECONDARY &
        /TABLE=PURCHASE_INVOICE_GL_POSTINGS &
        /LOCK=NONE &
        /WITH=COMPANY_CODE=#COMPANY_CODE &
        /WITH=DIVISION=#DIVISION &
        /WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER  &
        /WITH=PURCHASE_INVOICE_LINE=#LINE &
        /FIRST=1

        BEGIN_BLOCK DML_1
        END_BLOCK
END_FORM


FORM ERROR_REG (#ERROR2) /ROW=22 /COL=2 /HEIGHT=2 /WIDTH=78     &
        /ATTRIBUTES=NOBORDER


        YESNO_BLOCK     PAUSE_1 /ROW=2 /COL=40 &
                /PROMPT=(#ERROR_2) &
                /BACK=(EXIT(%BACK))     &
                /EXIT=(EXIT(%BACK))     &
                /SUCCESS=(EXIT(%SUCCESS)) &
                /FAILURE=(EXIT(%FAILURE))
END_FORM


PROCEDURE_FORM CANCEL_REGISTRATION

        BEGIN_BLOCK     REVERSE_REGISTER
                IF (PURCHASE_INVOICES(REGISTRATION_NUMBER) = "") GOTO END
                FIND IN PURCHASE_REGISTER &
                        /LOCK=WRITE     &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION = #DIVISION &
                        /WITH=REGISTRATION_NUMBER=PURCHASE_INVOICES(REGISTRATION_NUMBER) &

                IF              (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_00861
                        ROLLBACK
                        EXIT(%FAILURE)
                END_IF

                FIND IN PURCHASE_REGISTER_LINES &
                        /LOCK=WRITE     &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION = #DIVISION &
                        /WITH=REGISTRATION_NUMBER=PURCHASE_INVOICES(REGISTRATION_NUMBER) &
                        /WITH=SEQUENCE = "998"

                IF              (%STATUS = %FAILURE)
                        MESSAGE/IDENTIFIER/BELL/WAIT P_00861
                        ROLLBACK
                        EXIT(%FAILURE)
                END_IF

                DELETE FROM     PURCHASE_REGISTER_LINES

                PURCHASE_REGISTER(STATUS_FLAG)                  = PARAMETER("STATUS_APPROVE")
                PURCHASE_REGISTER(AP_TRANSACTION_NUMBER)= ""
        END_BLOCK

        BEGIN_BLOCK     END
                #CHANGE_REG     = #YES
        END_BLOCK
END_FORM


PROCEDURE_FORM LOAD_REGISTER_TAX &
        /TABLE=PURCHASE_REGISTER_TAX &
        /WITH=COMPANY_CODE=#COMPANY_CODE &
        /WITH=DIVISION=#DIVISION &
        /WITH=REGISTRATION_NUMBER=#REGISTRATION_NUMBER &
        /GROUPED_BY=(COMPANY_CODE,DIVISION,REGISTRATION_NUMBER)


        BEGIN_BLOCK     WRITE_RECORDS
                CLEAR_BUFFER TAX_DETAILS_VT

                TAX_DETAILS_VT(TRAN_LINE_NBR)   = PURCHASE_REGISTER_TAX(TRANSACTION_LINE_NUMBER)
                TAX_DETAILS_VT(TAX_CODE_1)      = PURCHASE_REGISTER_TAX(PRODUCT_TAX_CODE)
                TAX_DETAILS_VT(TAX_CODE_2)      = PURCHASE_REGISTER_TAX(VENDOR_TAX_CODE)
                TAX_DETAILS_VT(TRAN_VALUE)      = PURCHASE_REGISTER_TAX(SYS_TRAN_TOTAL_CURRENCY)
                TAX_DETAILS_VT(SYS_E_TAX_VAL)   = PURCHASE_REGISTER_TAX(SYS_E_TAX_VAL)
                TAX_DETAILS_VT(SYS_N_TAX_VAL)   = PURCHASE_REGISTER_TAX(SYS_N_TAX_VAL)
                TAX_DETAILS_VT(WAREHOUSE)       = PURCHASE_REGISTER_TAX(WAREHOUSE)
                TAX_DETAILS_VT(PART_CODE)       = PURCHASE_REGISTER_TAX(PART_CODE)
                TAX_DETAILS_VT(ACCOUNT_NUMBER)  = PURCHASE_REGISTER_TAX(AP_TAX_FULL_ACCOUNT)
                TAX_DETAILS_VT(GL_SHORT_CODE)   = PURCHASE_REGISTER_TAX(AP_TAX_CODE)
                TAX_DETAILS_VT(FORMAT_CODE)     = PURCHASE_REGISTER_TAX(AP_POSTING_FORMAT)
                TAX_DETAILS_VT(COMPOSITE_TAX)   = TAX_DETAILS_VT(SYS_E_TAX_ADJ_VAL)     + TAX_DETAILS_VT(SYS_N_TAX_ADJ_VAL)
                TAX_DETAILS_VT(ACCRUE_IGIC)     = #ACCRUE_IGIC
                TAX_DETAILS_VT(SYS_TAX_ON_CASH) = #TAX_ON_CASH

                ADD     TO TAX_DETAILS_VT
        END_BLOCK
END_FORM

PROCEDURE_FORM LOAD_REGISTER_RETAINERS &
        /TABLE=POP_REGISTER_TAX_RETAINERS &
        /WITH=COMPANY_CODE=#COMPANY_CODE &
        /WITH=DIVISION=#DIVISION &
        /WITH=REGISTRATION_NUMBER=#REGISTRATION_NUMBER


        BEGIN_BLOCK     WRITE_RECORDS
                CLEAR_BUFFER TAX_RETAINERS_DETAILS_VT

                TAX_RETAINERS_DETAILS_VT(SEQUENCE) = POP_REGISTER_TAX_RETAINERS(SEQUENCE)
                TAX_RETAINERS_DETAILS_VT(SYS_TAX_RETAINERS_CODE) = POP_REGISTER_TAX_RETAINERS(SYS_TAX_RETAINERS_CODE)
                TAX_RETAINERS_DETAILS_VT(SYS_TAX_RETAINERS_PERCENT)     = POP_REGISTER_TAX_RETAINERS(SYS_TAX_RETAINERS_PERCENT)
                TAX_RETAINERS_DETAILS_VT(SYS_TRAN_TOTAL_CURRENCY) =     POP_REGISTER_TAX_RETAINERS(SYS_TRAN_TOTAL_CURRENCY)
                TAX_RETAINERS_DETAILS_VT(SYS_TAX_RETAINERS_CURRENCY) = POP_REGISTER_TAX_RETAINERS(SYS_TAX_RETAINERS_CURRENCY)
                TAX_RETAINERS_DETAILS_VT(SYS_TAX_RETAINERS_TYPE) = POP_REGISTER_TAX_RETAINERS(SYS_TAX_RETAINERS_TYPE)
                TAX_RETAINERS_DETAILS_VT(SYS_TAX_RETAINERS_ACCOUNT)     = POP_REGISTER_TAX_RETAINERS(SYS_TAX_RETAINERS_ACCOUNT)
                TAX_RETAINERS_DETAILS_VT(SYS_TAX_RETAINERS_SHORT_CODE) = POP_REGISTER_TAX_RETAINERS(SYS_TAX_RETAINERS_SHORT_CODE)

                ADD     TO TAX_RETAINERS_DETAILS_VT

                #RETAINERS_VAL = #RETAINERS_VAL + TAX_RETAINERS_DETAILS_VT(SYS_TAX_RETAINERS_CURRENCY)
                #RETAINERS_VAL_BASE = #RETAINERS_VAL_BASE + PURCHASE_INVOICE_TAX_RETAINERS(SYS_TAX_RETAINERS_BASE)
                #RETAINERS_VAL_2_BASE = #RETAINERS_VAL_BASE + PURCHASE_INVOICE_TAX_RETAINERS(SYS_TAX_RETAINERS_2_BASE)

        END_BLOCK
END_FORM


FORM ERROR_2 (#ERROR_1,#ERROR_2) /ROW=22 /COL=2 /HEIGHT=2 /WIDTH=78 &
        /ATTRIBUTES=NOBORDER


        OUTPUT_BLOCK ERROR /ROW=1 /COL=15 /LEN=45 &
                /SOURCE=(#ERROR_1) &
                /ATTRIBUTES=NONE

        YESNO_BLOCK PAUSE_1 /ROW=2 /COL=35 &
                /BACK=(GOTO ERROR) &
                /EXIT=(GOTO ERROR) &
                /PROMPT=(#ERROR_2) &
                /SUCCESS=(EXIT(%SUCCESS)) &
                /FAILURE=(EXIT(%FAILURE))
END_FORM

PROCEDURE_FORM CHANGE_CURRENCY_ON_LINES &
        /TABLE=PURCHASE_INVOICE_LINES &
        /LOCK=WRITE &
        /WITH=COMPANY_CODE=PURCHASE_INVOICES(COMPANY_CODE) &
        /WITH=DIVISION=PURCHASE_INVOICES(DIVISION) &
        /WITH=PURCHASE_INVOICE_NUMBER=PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)

        BEGIN_BLOCK CHANGE_CURRENCY
                PURCHASE_INVOICE_LINES(SYS_CURRENCY_CODE)       = PURCHASE_INVOICES(SYS_CURRENCY_CODE)
                PURCHASE_INVOICE_LINES(SYS_CURRENCY_RATE)       = PURCHASE_INVOICES(SYS_CURRENCY_RATE)
                PURCHASE_INVOICE_LINES(SYS_CURRENCY_DATE)       = PURCHASE_INVOICES(SYS_CURRENCY_DATE)
                PURCHASE_INVOICE_LINES(SYS_CURRENCY_FIXED_FLAG) = PURCHASE_INVOICES(SYS_CURRENCY_FIXED_FLAG)
                PURCHASE_INVOICE_LINES(SYS_CURRENCY_RATIO_INDIC)= PURCHASE_INVOICES(SYS_CURRENCY_RATIO_INDIC)
                PURCHASE_INVOICE_LINES(SYS_RATE_AUTHORITY)      = PURCHASE_INVOICES(SYS_RATE_AUTHORITY)
                PURCHASE_INVOICE_LINES(SYS_RATE_TYPE)           = PURCHASE_INVOICES(SYS_RATE_TYPE)
        END_BLOCK

        BEGIN_BLOCK INVOICE_LINE_VALUE
                ! Recalculate the value in base currency
                DELETE ALL FROM SYS_CURRENCY_VALUES_VT
                SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE) = PURCHASE_INVOICE_LINES(POP_INVOICE_TOTAL_CURRENCY)
                ADD TO SYS_CURRENCY_VALUES_VT
                PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
                IF (#R_STATUS <> #YES)
                        ERROR/WAIT #R_MESSAGE
                        EXIT (%FAILURE)
                END_IF
                FIND IN SYS_CURRENCY_VALUES_VT

                PURCHASE_INVOICE_LINES(POP_INVOICE_TOTAL_BASE)   = SYS_CURRENCY_VALUES_VT(BASE_VALUE)
                PURCHASE_INVOICE_LINES(POP_INVOICE_TOTAL_2_BASE) = SYS_CURRENCY_VALUES_VT(BASE_2_VALUE)

        END_BLOCK

        BEGIN_BLOCK TAX_RETAINERS
                ! Recalculate tax retainers value in base currency
                DELETE ALL FROM SYS_CURRENCY_VALUES_VT
                SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE) = PURCHASE_INVOICE_LINES(SYS_TAX_RETAINERS_CURRENCY)
                ADD TO SYS_CURRENCY_VALUES_VT
                PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
                IF (#R_STATUS <> #YES)
                        ERROR/WAIT #R_MESSAGE
                        EXIT (%FAILURE)
                END_IF
                FIND IN SYS_CURRENCY_VALUES_VT

                PURCHASE_INVOICE_LINES(SYS_TAX_RETAINERS_BASE)   = SYS_CURRENCY_VALUES_VT(BASE_VALUE)
                PURCHASE_INVOICE_LINES(SYS_TAX_RETAINERS_2_BASE) = SYS_CURRENCY_VALUES_VT(BASE_2_VALUE)

        END_BLOCK
END_FORM

PROCEDURE_FORM CHANGE_CURRENCY_ON_INVOICE_POSTINGS &
        /TABLE=PURCHASE_INVOICE_GL_POSTINGS &
        /LOCK=WRITE &
        /WITH=COMPANY_CODE=PURCHASE_INVOICES(COMPANY_CODE) &
        /WITH=DIVISION=PURCHASE_INVOICES(DIVISION) &
        /WITH=PURCHASE_INVOICE_NUMBER=PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)

        BEGIN_BLOCK CHANGE_CURRENCY
                PURCHASE_INVOICE_GL_POSTINGS(SYS_CURRENCY_CODE)         = PURCHASE_INVOICES(SYS_CURRENCY_CODE)
                PURCHASE_INVOICE_GL_POSTINGS(SYS_CURRENCY_RATE)         = PURCHASE_INVOICES(SYS_CURRENCY_RATE)
                PURCHASE_INVOICE_GL_POSTINGS(SYS_CURRENCY_RATIO_INDIC)  = PURCHASE_INVOICES(SYS_CURRENCY_RATIO_INDIC)
        END_BLOCK

        BEGIN_BLOCK GL_POSTING_CURRENCY
                ! convert gl posting currency debit value
                DELETE ALL FROM SYS_CURRENCY_VALUES_VT

                SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE)       = PURCHASE_INVOICE_GL_POSTINGS(GL_POSTING_CURRENCY_DR)
                ADD TO SYS_CURRENCY_VALUES_VT

                PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
                IF (#R_STATUS <> #YES)
                        ERROR/WAIT #R_MESSAGE
                        EXIT (%FAILURE)
                END_IF

                FIND IN SYS_CURRENCY_VALUES_VT

                PURCHASE_INVOICE_GL_POSTINGS(GL_POSTING_BASE_DR)        = SYS_CURRENCY_VALUES_VT(BASE_VALUE)
                PURCHASE_INVOICE_GL_POSTINGS(GL_POSTING_2_BASE_DR)      = SYS_CURRENCY_VALUES_VT(BASE_2_VALUE)

                !  convert credit values in base currency
                DELETE ALL FROM SYS_CURRENCY_VALUES_VT
                SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE)       = PURCHASE_INVOICE_GL_POSTINGS(GL_POSTING_CURRENCY_CR)
                ADD TO SYS_CURRENCY_VALUES_VT

                PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
                IF (#R_STATUS <> #YES)
                        ERROR/WAIT #R_MESSAGE
                        EXIT (%FAILURE)
                END_IF

                FIND IN SYS_CURRENCY_VALUES_VT

                PURCHASE_INVOICE_GL_POSTINGS(GL_POSTING_BASE_CR)        = SYS_CURRENCY_VALUES_VT(BASE_VALUE)
                PURCHASE_INVOICE_GL_POSTINGS(GL_POSTING_2_BASE_CR)      = SYS_CURRENCY_VALUES_VT(BASE_2_VALUE)

        END_BLOCK

END_FORM

PROCEDURE_FORM RECALCULATE_TAX_RETAINERS_BASE &
        /TABLE=PURCHASE_INVOICE_TAX_RETAINERS &
        /LOCK=WRITE &
        /WITH=COMPANY_CODE=PURCHASE_INVOICES(COMPANY_CODE) &
        /WITH=DIVISION=PURCHASE_INVOICES(DIVISION) &
        /WITH=PURCHASE_INVOICE_NUMBER=PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)

        BEGIN_BLOCK CHANGE_OF_RATE

        IF (PURCHASE_INVOICE_TAX_RETAINERS(SYS_TAX_RETAINERS_CURRENCY) > 0.0)
                ! Recalculate debit values in base currency
                DELETE ALL FROM SYS_CURRENCY_VALUES_VT

                SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE) = PURCHASE_INVOICE_TAX_RETAINERS(SYS_TAX_RETAINERS_CURRENCY)
                ADD TO SYS_CURRENCY_VALUES_VT

                PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
                IF (#R_STATUS <> #YES)
                        ERROR/WAIT #R_MESSAGE
                        EXIT (%FAILURE)
                END_IF

                FIND IN SYS_CURRENCY_VALUES_VT
                ! Recalculate the value in base currency
                PURCHASE_INVOICE_TAX_RETAINERS(SYS_TAX_RETAINERS_BASE)   = SYS_CURRENCY_VALUES_VT(BASE_VALUE)
                PURCHASE_INVOICE_TAX_RETAINERS(SYS_TAX_RETAINERS_2_BASE) = SYS_CURRENCY_VALUES_VT(BASE_2_VALUE)
        END_IF
        END_BLOCK
END_FORM

PROCEDURE_FORM CHECK_MODULE_IN_USE ( #I_MODULE_ID, #O_MODULE_IN_USE)

        BEGIN_BLOCK CHECK
                #O_MODULE_IN_USE = #NO

                FIND IN SOURCE_MODULES &
                        /LOCK=NONE &
                        /WITH=SOURCE_MODULE=#I_MODULE_ID

                IF (%STATUS=%NORMAL)
                        #O_MODULE_IN_USE =SOURCE_MODULES(MODULE_IN_USE)
                ELSE
                        MESSAGE/IDENTIFIER/BELL/WAIT P_76052, #I_MODULE_ID, MESSAGE("P_01730")
                END_IF
        END_BLOCK

END_FORM

PROCEDURE_FORM CHANGE_DESCRIPTION_ON_INVOICE_POSTINGS &
    /TABLE=PURCHASE_INVOICE_GL_POSTINGS &
    /LOCK=WRITE &
        /WITH=COMPANY_CODE=PURCHASE_INVOICES(COMPANY_CODE) &
        /WITH=DIVISION=PURCHASE_INVOICES(DIVISION) &
        /WITH=PURCHASE_INVOICE_NUMBER=PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER) &
    /WITH=POSTING_DESCRIPTION=#OLD_VENDOR_REF

    BEGIN_BLOCK CHANGE_CURRENCY
        PURCHASE_INVOICE_GL_POSTINGS(POSTING_DESCRIPTION) = PURCHASE_INVOICES(VENDOR_INVOICE_NUMBER)
    END_BLOCK
END_FORM

PROCEDURE_FORM INVENTORY_REVALUATION

        BEGIN_BLOCK END_ONE_ONLY
                #CURRENT_STD_COST_AT_GRN = ""
                #GRN_NUMBER = GOODS_RECEIVED_LINES(GRN_NUMBER)
!                #GRN_LINE_NUMBER = GOODS_RECEIVED_LINES(GRN_LINE_NUMBER)
!                #SEQUENCE = GOODS_RECEIVED_LINE_DETAILS(SEQUENCE)

        END_BLOCK

        BEGIN_BLOCK INVENTORY_REVALUATION_VARS
            #GRN_PART_CODE = GOODS_RECEIVED_LINES(PART_CODE)
            #GRN_WAREHOUSE = GOODS_RECEIVED_LINES(WAREHOUSE)
!           #GRN_LINE_TYPE = GOODS_RECEIVED_LINES(LINE_TYPE)
!           #GRN_UNIT_REC =  GOODS_RECEIVED_LINES(UNIT_REC)
!           #GRN_FIELD_NAME = GOODS_RECEIVED_LINE_DETAILS(FIELD_NAME)

!           #GRN_LOT_NUMBER = GOODS_RECEIVED_LINE_DETAILS(IC_LOT_NUMBER)
        END_BLOCK

    BEGIN_BLOCK ONLY_PROCESS_STD_COSTED_WHS
        IF ( (#GRN_IC_STATUS_CODE <> PARAMETER('IC_STATUS_QOH') ) AND (#GRN_IC_STATUS_CODE <> PARAMETER('IC_STATUS_QC') ) AND (#GRN_IC_STATUS_CODE <> PARAMETER('IC_STATUS_QR') ) )
            GOTO THE_END
        END_IF

        FIND IN GOODS_RECEIVED_HEADERS &
            /LOCK=NONE &
            /WITH=COMPANY_CODE=GOODS_RECEIVED_LINES(COMPANY_CODE) &
            /WITH=DIVISION=GOODS_RECEIVED_LINES(DIVISION) &
            /WITH=GRN_NUMBER=GOODS_RECEIVED_LINES(GRN_NUMBER)

        IF (%STATUS=%FAILURE)
            GOTO THE_END
        END_IF

        FIND IN WAREHOUSE_CONTROLS &
            /LOCK=NONE &
            /WITH=COMPANY_CODE = GOODS_RECEIVED_LINES(COMPANY_CODE) &
            /WITH=WAREHOUSE = #GRN_WAREHOUSE

        IF ( %STATUS <> %FAILURE )
            PERFORM 'GEMIC:IC_L_COSTING_METHOD' ((GOODS_RECEIVED_LINES(COMPANY_CODE)),(GOODS_RECEIVED_LINES(PART_CODE)),(GOODS_RECEIVED_LINES(WAREHOUSE)),#R1,#R2,#R3)
            IF(%STATUS = %SUCCESS)
                #INV_VALUATION_METHOD =  #R1
            ELSE
                MESSAGE/IDENTIFIER/BELL/WAIT #R3,(GOODS_RECEIVED_LINES(WAREHOUSE)),(GOODS_RECEIVED_LINES(PART_CODE))
                GOTO THE_END
            END_IF
        END_IF
                                    
        IF ( #INV_VALUATION_METHOD <> PARAMETER("COSTING_STD") )
            GOTO THE_END
        END_IF
!       #WH_PERIOD = WAREHOUSE_CONTROLS(PERIOD)
!       #WH_YEAR = WAREHOUSE_CONTROLS(YEAR)
    END_BLOCK

    BEGIN_BLOCK DETERMINE_IF_REVALUED

        START_STREAM LAST_CURRENT_STD_COST &
            /TABLE=IC_STD_COST_HISTORY &
            /LOCK=NONE &
            /WITH=COMPANY_CODE=GOODS_RECEIVED_LINES(COMPANY_CODE) &
            /WITH=PART_CODE = #GRN_PART_CODE &
            /WITH=WAREHOUSE = #GRN_WAREHOUSE &
            /WITH=SYSTEM_DATE <= GOODS_RECEIVED_HEADERS(SYSTEM_DATE) &
            /WITH=IC_COST_HISTORY_TYPE <> 0 &
            /SORTED_BY=(-SYSTEM_DATE)
        FETCH LAST_CURRENT_STD_COST
        IF ( %STATUS <> %SUCCESS )
            START_STREAM SEC &
			/TABLE=IC_STD_COST_HISTORY &
			/SECONDARY &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=GOODS_RECEIVED_LINES(COMPANY_CODE) &
			/WITH=PART_CODE = #GRN_PART_CODE &
			/WITH=WAREHOUSE = #GRN_WAREHOUSE &
			/WITH=SYSTEM_DATE > GOODS_RECEIVED_HEADERS(SYSTEM_DATE) &
			/WITH=IC_COST_HISTORY_TYPE <> 0 &
			/SORTED_BY=(SYSTEM_DATE)
			FETCH SEC
			IF ( %STATUS <> %SUCCESS )
				GOTO THE_END
			ELSE
				#CURRENT_STD_COST_AT_GRN = SEC:IC_STD_COST_HISTORY(CURRENT_STD_COST)
				#IC_UNIT_COST_AT_GRN = SEC:IC_STD_COST_HISTORY(IC_UNIT_COST)
			END_IF
		ELSE
			#CURRENT_STD_COST_AT_GRN = LAST_CURRENT_STD_COST:IC_STD_COST_HISTORY(CURRENT_STD_COST)
			#IC_UNIT_COST_AT_GRN = LAST_CURRENT_STD_COST:IC_STD_COST_HISTORY(IC_UNIT_COST)
		END_IF

        FIND IN PRODUCT_MASTER &
            /LOCK=NONE &
            /WITH=COMPANY_CODE=GOODS_RECEIVED_LINES(COMPANY_CODE) &
            /WITH=PART_CODE = #GRN_PART_CODE &

        FIND IN PRODUCT_WAREHOUSE &
            /LOCK=NONE &
            /WITH=COMPANY_CODE=GOODS_RECEIVED_LINES(COMPANY_CODE) &
            /WITH=PART_CODE = #GRN_PART_CODE &
            /WITH=WAREHOUSE = #GRN_WAREHOUSE
        IF ( %STATUS <> %SUCCESS )
            #CURRENT_STD_COST_AT_GRN = ""
            GOTO THE_END
        END_IF

        #CURRENT_STD_COST_NOW = PRODUCT_WAREHOUSE(STANDARD_COST)
        #IC_UNIT_COST_NOW = PRODUCT_MASTER(IC_UNIT_COST)

        IF ( #IC_UNIT_COST_AT_GRN = #IC_UNIT_COST_NOW )
            IF ( #CURRENT_STD_COST_AT_GRN = #CURRENT_STD_COST_NOW )
                #CURRENT_STD_COST_AT_GRN = ""
                GOTO THE_END
            END_IF
        ELSE
            #CURRENT_STD_COST_AT_GRN = ""
            GOTO THE_END
        END_IF

    END_BLOCK

!   BEGIN_BLOCK PROCESS_REVAL_COST
!
!       IF ( #GRN_UNIT_REC = #IC_UNIT_COST_AT_GRN )
!           #REVAL_QTY = #INV_POSTINGS_QTY
!       ELSE
!           #REVAL_QTY = #INV_POSTINGS_QTY
!       END_IF
!
!       #UNIT_COST_DIFFERENCE = #CURRENT_STD_COST_AT_GRN - #CURRENT_STD_COST_NOW
!       #POSTING_VALUE = #REVAL_QTY * #UNIT_COST_DIFFERENCE
!
!       IF ( #POSTING_VALUE = 0 )
!           GOTO THE_END
!       END_IF
!
!   END_BLOCK
!
!   BEGIN_BLOCK DETERMINE_ACCTS
!
!       IF ( (FIN.PRODUCT_WAREHOUSE(INV_REVALUATION_CODE) = "") AND (FIN.PRODUCT_WAREHOUSE(INV_REVALUATION_ACCOUNT) = "") )
!           FIND IN FIN.WAREHOUSE_CONTROLS &
!               /LOCK=NONE &
!               /WITH=COMPANY_CODE = #COMPANY_CODE &
!               /WITH=WAREHOUSE=#GRN_WAREHOUSE
!           IF ( %STATUS <> %SUCCESS )
!               GOTO THE_END
!           ELSE_IF ( (FIN.WAREHOUSE_CONTROLS(INV_REVALUATION_CODE) = "") AND (FIN.WAREHOUSE_CONTROLS(INV_REVALUATION_ACCOUNT) = "") )
!               GOTO THE_END
!           END_IF
!           #INV_REVAL_CODE = FIN.WAREHOUSE_CONTROLS(INV_REVALUATION_CODE)
!           #INV_REVAL_ACCT = FIN.WAREHOUSE_CONTROLS(INV_REVALUATION_ACCOUNT)
!       ELSE
!           #INV_REVAL_CODE = FIN.PRODUCT_WAREHOUSE(INV_REVALUATION_CODE)
!           #INV_REVAL_ACCT = FIN.PRODUCT_WAREHOUSE(INV_REVALUATION_ACCOUNT)
!       END_IF
!
!       #IC_STATUS_FIELD = #GRN_FIELD_NAME
!
!         PERFORM "GEMPOP:POP_L_GRN_GET_ACCT" (&
!           (GOODS_RECEIVED_LINES(COMPANY_CODE)),&
!             (GOODS_RECEIVED_LINES(DIVISION)),&
!             (#GRN_LINE_TYPE),&
!             (#GRN_PART_CODE),&
!             (#GRN_WAREHOUSE),&
!             (#IC_STATUS_FIELD),&
!             "",&
!             #ERR_MSG,&
!             #RECV_CODE,&
!             #PPV_FLAG,&
!             #DR_ACCOUNT,&
!             #DR_CODE,&
!             #CR_ACCOUNT,&
!             #CR_CODE)
!
!       IF (%STATUS = %FAILURE)
!           GOTO THE_END
!       END_IF
!
!       IF ( #PPV_FLAG = #YES )
!           #DR_ACCOUNT = #CR_ACCOUNT
!           #DR_CODE = #CR_CODE
!       END_IF
!       #CR_ACCOUNT = #INV_REVAL_ACCT
!       #CR_CODE = #INV_REVAL_CODE
!       IF ( #POSTING_VALUE < 0 )
!           #CR_ACCOUNT = #DR_ACCOUNT
!           #CR_CODE = #DR_CODE
!           #DR_ACCOUNT = #INV_REVAL_ACCT
!           #DR_CODE = #INV_REVAL_CODE
!       END_IF
!
!
!   END_BLOCK
!
!   BEGIN_BLOCK MAKE_REVAL_POSTING
!
!       PERFORM CREATE_POSTINGS_SET
!
!   END_BLOCK

    BEGIN_BLOCK THE_END

    END_BLOCK

END_FORM

! PROCEDURE_FORM CREATE_POSTINGS_SET
!
!   BEGIN_BLOCK CREATE_POSTINGS
!
!       IF (#POSTING_VALUE = 0) EXIT(%NORMAL)
!
!       PERFORM GLPS_SETUP
!       PERFORM GLPS_CLEARVT
!       IF (%STATUS = %FAILURE) EXIT (%FAILURE)
!
!       PERFORM GLPS_HEADER
!       IF (%STATUS = %FAILURE) EXIT (%FAILURE)
!
!       PERFORM GLPS_LINES
!       IF (%STATUS = %FAILURE) EXIT (%FAILURE)
!
!       SET/LOCAL DATABASE FIN
!       PERFORM "GEMLB:LB_S_L_POSTINGS" &
!           (#GLPS_TABLE_NAME,      &
!            #GLPS_SUCCESS,     &
!            #GLPS_RETURN_MESSAGE)
!       IF (#GLPS_SUCCESS = #NO)
!
!           ERROR/TEXT_ONLY/BELL/WAIT #GLPS_RETURN_MESSAGE
!           EXIT (%FAILURE)
!       END_IF
!       PERFORM GLPS_CLEARVT
!       IF (%STATUS = %FAILURE) EXIT (%FAILURE)
!   END_BLOCK
!
! END_FORM
!
! PROCEDURE_FORM GLPS_SETUP
!
!   BEGIN_BLOCK GLP_SETUP
!
!       #GLPS_TRANS_CURRENCY    = GOODS_RECEIVED_HEADERS(SYS_CURRENCY_CODE)
!       #GLPS_TABLE_NAME    = PARAMETER("FIN.GL_POSTINGS")
!       #GLPS_SOURCE_MODULE = PARAMETER("MODULE_PO")
!       #TTYPE = PARAMETER("FIN.TTYPE_GRNADJ")
!       #POST_REFERENCE = (#GRN_NUMBER & '-' & #GRN_LINE_NUMBER &
!                                 & '-' & #SEQUENCE & '-' & #GRN_IC_STATUS_CODE)
!       #SOURCE_REF = #GRN_PART_CODE & "-" & #GRN_LOT_NUMBER
!       #POST_DESC = MESSAGE("P_13036") & "-" & #GRN_PART_CODE
!
!       IF (#POSTING_VALUE >= 0)
!
!           #GLPS_TRANS_VALUE = #POSTING_VALUE
!       ELSE
!           #GLPS_TRANS_VALUE = #POSTING_VALUE * -1.0
!       END_IF
!   END_BLOCK
! END_FORM
!
! PROCEDURE_FORM GLPS_CLEARVT
!
!   BEGIN_BLOCK GLPS_DELETE
!
!       DELETE ALL FROM FIN.SYS_CURRENCY_CONTROL_VT
!       IF (%STATUS = %FAILURE) EXIT(%FAILURE)
!
!       DELETE ALL FROM FIN.SYS_POSTINGS_CONTROL_VT
!       IF (%STATUS = %FAILURE) EXIT(%FAILURE)
!
!       DELETE ALL FROM FIN.SYS_POSTINGS_VT
!       IF (%STATUS = %FAILURE) EXIT(%FAILURE)
!
!       DELETE ALL FROM FIN.SYS_CURRENCY_VALUES_VT
!       IF (%STATUS = %FAILURE) EXIT(%FAILURE)
!   END_BLOCK
! END_FORM
!
! PROCEDURE_FORM GLPS_HEADER
!
!   BEGIN_BLOCK GLPS_CURRENCY
!
!       CLEAR_BUFFER FIN.SYS_CURRENCY_CONTROL_VT
!
!       FIN.SYS_CURRENCY_CONTROL_VT(COMPANY_CODE)       = #COMPANY_CODE
!       FIN.SYS_CURRENCY_CONTROL_VT(DIVISION)           = #DIVISION
!       FIN.SYS_CURRENCY_CONTROL_VT(SOURCE_MODULE)      = #GLPS_SOURCE_MODULE
!       FIN.SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE)  = #GLPS_TRANS_CURRENCY
!
!       ADD TO FIN.SYS_CURRENCY_CONTROL_VT
!       IF (%STATUS = %FAILURE) EXIT (%FAILURE)
!   END_BLOCK
!
!   BEGIN_BLOCK GLPS_CONTROL
!
!       CLEAR_BUFFER FIN.SYS_POSTINGS_CONTROL_VT
!
!       FIN.SYS_POSTINGS_CONTROL_VT(COMPANY_CODE)   = #COMPANY_CODE
!       FIN.SYS_POSTINGS_CONTROL_VT(DIVISION)       = #DIVISION
!       FIN.SYS_POSTINGS_CONTROL_VT(MODULE_TRANSACTION_TYPE)= #TTYPE
!       FIN.SYS_POSTINGS_CONTROL_VT(POSTING_DATE)   = %TODAY
!       FIN.SYS_POSTINGS_CONTROL_VT(DOCUMENT_NUMBER)    = #GRN_NUMBER
!       FIN.SYS_POSTINGS_CONTROL_VT(SOURCE_REFERENCE)   = #SOURCE_REF
!       FIN.SYS_POSTINGS_CONTROL_VT(BATCH_NUMBER)   = ""
!       FIN.SYS_POSTINGS_CONTROL_VT(GL_POSTINGS_IN_BATCH)= ""
!       FIN.SYS_POSTINGS_CONTROL_VT(FIFO_DOC)       = ""
!       FIN.SYS_POSTINGS_CONTROL_VT(ACTIVATION_STATUS)  = PARAMETER("FIN.STATUS_ACTIVE")
!       FIN.SYS_POSTINGS_CONTROL_VT(JOURNAL_NUMBER) = ""
!       FIN.SYS_POSTINGS_CONTROL_VT(JOURNAL_BATCH_NUMBER)= ""
!       FIN.SYS_POSTINGS_CONTROL_VT(GL_JOURNAL_CODE)    = ""
!       FIN.SYS_POSTINGS_CONTROL_VT(GL_EFFECTIVE_DATE)  = ""
!       FIN.SYS_POSTINGS_CONTROL_VT(SUMMARIZATION_FLAG) = ""
!
!       ADD TO FIN.SYS_POSTINGS_CONTROL_VT
!       IF (%STATUS = %FAILURE) EXIT (%FAILURE)
!   END_BLOCK
! END_FORM
!
! PROCEDURE_FORM GLPS_LINES
!
!   BEGIN_BLOCK GLPS_LINE_DEBIT
!
!       CLEAR_BUFFER FIN.SYS_POSTINGS_VT
!
!       FIN.SYS_POSTINGS_VT(ACCOUNT_COMPANY_CODE)=#COMPANY_CODE
!       FIN.SYS_POSTINGS_VT(ACCOUNT_DIVISION)   =#DIVISION
!       FIN.SYS_POSTINGS_VT(COST_CENTER)    =GOODS_RECEIVED_HEADERS(COST_CENTER)
!       FIN.SYS_POSTINGS_VT(WAREHOUSE)      =#GRN_WAREHOUSE
!       FIN.SYS_POSTINGS_VT(FACTORY)        =""
!       FIN.SYS_POSTINGS_VT(JOURNAL_LINE)   =""
!       FIN.SYS_POSTINGS_VT(M_BATCH_NUMBER)     =""
!       FIN.SYS_POSTINGS_VT(DOCUMENT_LINE)  = #GRN_LINE_NUMBER
!       FIN.SYS_POSTINGS_VT(DOCUMENT_SEQUENCE)  = #SEQUENCE
!       FIN.SYS_POSTINGS_VT(SYS_POST_TYPE)  =#GLPS_SOURCE_MODULE
!       FIN.SYS_POSTINGS_VT(POSTING_REFERENCE)  =#POST_REFERENCE
!       FIN.SYS_POSTINGS_VT(POSTING_DESCRIPTION)=#POST_DESC
!       FIN.SYS_POSTINGS_VT(GL_SHORT_CODE)  =#DR_CODE
!       FIN.SYS_POSTINGS_VT(ACCOUNT_NUMBER)     =#DR_ACCOUNT
!       FIN.SYS_POSTINGS_VT(ACCOUNT_IDENT)  =PARAMETER("FIN.ACCOUNT_IDENT_ACTUAL")
!       FIN.SYS_POSTINGS_VT(PERIOD)         =#WH_PERIOD
!       FIN.SYS_POSTINGS_VT(YEAR)       =#WH_YEAR
!
!       IF (#POSTING_VALUE >= 0)
!
!           FIN.SYS_POSTINGS_VT(GL_POSTING_CURRENCY_DR) =#GLPS_TRANS_VALUE
!           FIN.SYS_POSTINGS_VT(GL_POSTING_CURRENCY_CR) =0.0
!       ELSE
!           FIN.SYS_POSTINGS_VT(GL_POSTING_CURRENCY_DR) =0.0
!           FIN.SYS_POSTINGS_VT(GL_POSTING_CURRENCY_CR) =#GLPS_TRANS_VALUE
!       END_IF
!
!       ADD TO FIN.SYS_POSTINGS_VT
!       IF (%STATUS = %FAILURE)
!
!           EXIT (%FAILURE)
!       END_IF
!   END_BLOCK
!
!   BEGIN_BLOCK GLPS_LINE_CREDIT
!
!       CLEAR_BUFFER FIN.SYS_POSTINGS_VT
!
!       FIN.SYS_POSTINGS_VT(ACCOUNT_COMPANY_CODE)=#COMPANY_CODE
!       FIN.SYS_POSTINGS_VT(ACCOUNT_DIVISION)   =#DIVISION
!       FIN.SYS_POSTINGS_VT(COST_CENTER)    =GOODS_RECEIVED_HEADERS(COST_CENTER)
!       FIN.SYS_POSTINGS_VT(WAREHOUSE)      =#GRN_WAREHOUSE
!       FIN.SYS_POSTINGS_VT(FACTORY)        =""
!       FIN.SYS_POSTINGS_VT(JOURNAL_LINE)   =""
!       FIN.SYS_POSTINGS_VT(M_BATCH_NUMBER)     =""
!       FIN.SYS_POSTINGS_VT(DOCUMENT_LINE)  =#GRN_LINE_NUMBER
!       FIN.SYS_POSTINGS_VT(DOCUMENT_SEQUENCE)  =#SEQUENCE
!       FIN.SYS_POSTINGS_VT(SYS_POST_TYPE)  =#GLPS_SOURCE_MODULE
!       FIN.SYS_POSTINGS_VT(POSTING_REFERENCE)  =#POST_REFERENCE
!       FIN.SYS_POSTINGS_VT(POSTING_DESCRIPTION)=#POST_DESC
!       FIN.SYS_POSTINGS_VT(GL_SHORT_CODE)  =#CR_CODE
!       FIN.SYS_POSTINGS_VT(ACCOUNT_NUMBER)     =#CR_ACCOUNT
!       FIN.SYS_POSTINGS_VT(ACCOUNT_IDENT)  =PARAMETER("FIN.ACCOUNT_IDENT_ACTUAL")
!       FIN.SYS_POSTINGS_VT(PERIOD)         =#WH_PERIOD
!       FIN.SYS_POSTINGS_VT(YEAR)       =#WH_YEAR
!
!       IF (#POSTING_VALUE < 0)
!
!           FIN.SYS_POSTINGS_VT(GL_POSTING_CURRENCY_DR) =#GLPS_TRANS_VALUE
!           FIN.SYS_POSTINGS_VT(GL_POSTING_CURRENCY_CR) =0.0
!       ELSE
!           FIN.SYS_POSTINGS_VT(GL_POSTING_CURRENCY_DR) =0.0
!           FIN.SYS_POSTINGS_VT(GL_POSTING_CURRENCY_CR) =#GLPS_TRANS_VALUE
!       END_IF
!
!       ADD TO FIN.SYS_POSTINGS_VT
!       IF (%STATUS = %FAILURE)
!
!           EXIT (%FAILURE)
!       END_IF
!   END_BLOCK
! END_FORM

PROCEDURE_FORM LOAD_LB_TAX_CONTROL_VT

    BEGIN_BLOCK LOAD_VT
        DELETE ALL FROM LB_TAX_CONTROL_VT

        CLEAR_BUFFER LB_TAX_CONTROL_VT

        LB_TAX_CONTROL_VT(COMPANY_CODE)         = #COMPANY_CODE
        LB_TAX_CONTROL_VT(DIVISION)         = #DIVISION
        LB_TAX_CONTROL_VT(SOURCE_MODULE)        = #PO
        LB_TAX_CONTROL_VT(PRICING_METHOD)       = #PRICING_METHOD
        LB_TAX_CONTROL_VT(TAX_BASED_ON_FLAG)        = #TAX_BASED_ON
        LB_TAX_CONTROL_VT(VENDOR_NUMBER)        = #VENDOR_NUMBER
        LB_TAX_CONTROL_VT(VENDOR_ADDRESS_CODE)      = PURCHASE_INVOICES(VENDOR_ADDRESS_CODE)
        LB_TAX_CONTROL_VT(CUSTOMER_NUMBER)      = ""
        LB_TAX_CONTROL_VT(INVOICE_ADDRESS_CODE)     = ""
        LB_TAX_CONTROL_VT(DELIVERY_ADDRESS_CODE)    = ""
        LB_TAX_CONTROL_VT(TRANSACTION_NUMBER)       = #PURCHASE_INVOICE_NUMBER
        LB_TAX_CONTROL_VT(TRANSACTION_TYPE)     = #TTYPE_IN
        LB_TAX_CONTROL_VT(PART_CODE)            = PURCHASE_INVOICE_LINES(PART_CODE)
        LB_TAX_CONTROL_VT(WAREHOUSE)            = PURCHASE_INVOICE_LINES(WAREHOUSE)
        LB_TAX_CONTROL_VT(TARGET_WAREHOUSE)     = ""
        LB_TAX_CONTROL_VT(ORDER_LINE_TYPE)      = ""
        LB_TAX_CONTROL_VT(TAX_ON_CASH)          = #TAX_ON_CASH
        LB_TAX_CONTROL_VT(AP_DEFAULT_TAX)       = #AP_DEFAULT_TAX
        LB_TAX_CONTROL_VT(ACCRUE_IGIC)          = #ACCRUE_IGIC
        LB_TAX_CONTROL_VT(SYS_CURRENCY_MASK)        = #CURRENCY_MASK
        LB_TAX_CONTROL_VT(SYS_CURRENCY_DECIMALS)    = #CURRENCY_DECIMAL

        !  Tax Type for title - if blank heading will be 'Tax Analysis,
        ! if sent as "Freight" heading will be 'Freight Tax Analysis'
        LB_TAX_CONTROL_VT(FORM_TITLE)           = ""

        !   Transaction Quantity at Price UOM
        LB_TAX_CONTROL_VT(PRICE_ORDER_QTY)  = #INVOICE_QTY

        IF ( #PRICING_METHOD = #PRICING_METHOD_INCLUSIVE )
            #TRANSACTION_TOTAL_OR_NET   = PURCHASE_INVOICE_LINES(PURCHASE_COST_INC_TAX)
        ELSE
            #TRANSACTION_TOTAL_OR_NET   = PURCHASE_INVOICE_LINES(PURCHASE_COST)
        END_IF

        ! Sales Price or Purchase Cost (the value returned from SOP or POP price lookup)
        LB_TAX_CONTROL_VT(SALES_PRICE)          = #TRANSACTION_TOTAL_OR_NET
        LB_TAX_CONTROL_VT(LINE_DISCOUNT)        = #LINE_DISCOUNT
        LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE)     = PURCHASE_INVOICE_LINES(PRODUCT_TAX_CODE)
        LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE)        = PURCHASE_INVOICE_LINES(VENDOR_TAX_CODE)

        ADD TO LB_TAX_CONTROL_VT
    END_BLOCK
END_FORM


PROCEDURE_FORM LOAD_LB_TAX_CONTROL_VT_COPY

    BEGIN_BLOCK LOAD_VT
        DELETE ALL FROM LB_TAX_CONTROL_VT

        CLEAR_BUFFER LB_TAX_CONTROL_VT

        LB_TAX_CONTROL_VT(COMPANY_CODE)         = #COMPANY_CODE
        LB_TAX_CONTROL_VT(DIVISION)         = #DIVISION
        LB_TAX_CONTROL_VT(SOURCE_MODULE)        = #PO
        LB_TAX_CONTROL_VT(PRICING_METHOD)       = #PRICING_METHOD
        LB_TAX_CONTROL_VT(TAX_BASED_ON_FLAG)        = #TAX_BASED_ON
        LB_TAX_CONTROL_VT(VENDOR_NUMBER)        = #VENDOR_NUMBER
        LB_TAX_CONTROL_VT(VENDOR_ADDRESS_CODE)      = PURCHASE_INVOICES(VENDOR_ADDRESS_CODE)
        LB_TAX_CONTROL_VT(CUSTOMER_NUMBER)      = ""
        LB_TAX_CONTROL_VT(INVOICE_ADDRESS_CODE)     = ""
        LB_TAX_CONTROL_VT(DELIVERY_ADDRESS_CODE)    = ""
        LB_TAX_CONTROL_VT(TRANSACTION_NUMBER)       = #PURCHASE_INVOICE_NUMBER
        LB_TAX_CONTROL_VT(TRANSACTION_TYPE)     = #TTYPE_IN
        LB_TAX_CONTROL_VT(PART_CODE)            = PURCHASE_INVOICE_LINES(PART_CODE)
        LB_TAX_CONTROL_VT(WAREHOUSE)            = PURCHASE_INVOICE_LINES(WAREHOUSE)
        LB_TAX_CONTROL_VT(TARGET_WAREHOUSE)     = ""
        LB_TAX_CONTROL_VT(ORDER_LINE_TYPE)      = ""
        LB_TAX_CONTROL_VT(TAX_ON_CASH)          = #TAX_ON_CASH
        LB_TAX_CONTROL_VT(AP_DEFAULT_TAX)       = #AP_DEFAULT_TAX
        LB_TAX_CONTROL_VT(ACCRUE_IGIC)          = #ACCRUE_IGIC
        LB_TAX_CONTROL_VT(SYS_CURRENCY_MASK)        = #CURRENCY_MASK
        LB_TAX_CONTROL_VT(SYS_CURRENCY_DECIMALS)    = #CURRENCY_DECIMAL

        !  Tax Type for title - if blank heading will be 'Tax Analysis,
        ! if sent as "Freight" heading will be 'Freight Tax Analysis'
        LB_TAX_CONTROL_VT(FORM_TITLE)           = ""

        !   Transaction Quantity at Price UOM
        LB_TAX_CONTROL_VT(PRICE_ORDER_QTY)  = #INVOICE_QTY

        IF ( #PRICING_METHOD = #PRICING_METHOD_INCLUSIVE )
            #TRANSACTION_TOTAL_OR_NET   = POP_LINES(PURCHASE_PRICE_INC_TAX)
        ELSE
            #TRANSACTION_TOTAL_OR_NET   = POP_LINES(PURCHASE_PRICE)
        END_IF

        ! Sales Price or Purchase Cost (the value returned from SOP or POP price lookup)
        LB_TAX_CONTROL_VT(SALES_PRICE)          = #TRANSACTION_TOTAL_OR_NET
        LB_TAX_CONTROL_VT(LINE_DISCOUNT)        = #LINE_DISCOUNT
        LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE)     = PURCHASE_INVOICE_LINES(PRODUCT_TAX_CODE)
        LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE)        = PURCHASE_INVOICE_LINES(VENDOR_TAX_CODE)

        ADD TO LB_TAX_CONTROL_VT
    END_BLOCK
END_FORM


PROCEDURE_FORM LOAD_LB_TAX_CONTROL_VT_TOLERANCE ( #AMOUNT )

    BEGIN_BLOCK LOAD_VT
        DELETE ALL FROM LB_TAX_CONTROL_VT

        CLEAR_BUFFER LB_TAX_CONTROL_VT

        LB_TAX_CONTROL_VT(COMPANY_CODE)         = #COMPANY_CODE
        LB_TAX_CONTROL_VT(DIVISION)         = #DIVISION
        LB_TAX_CONTROL_VT(SOURCE_MODULE)        = #PO
        LB_TAX_CONTROL_VT(PRICING_METHOD)       = #PRICING_METHOD
        LB_TAX_CONTROL_VT(TAX_BASED_ON_FLAG)        = #TAX_BASED_ON
        LB_TAX_CONTROL_VT(VENDOR_NUMBER)        = #VENDOR_NUMBER
        LB_TAX_CONTROL_VT(VENDOR_ADDRESS_CODE)      = PURCHASE_INVOICES(VENDOR_ADDRESS_CODE)
        LB_TAX_CONTROL_VT(CUSTOMER_NUMBER)      = ""
        LB_TAX_CONTROL_VT(INVOICE_ADDRESS_CODE)     = ""
        LB_TAX_CONTROL_VT(DELIVERY_ADDRESS_CODE)    = ""
        LB_TAX_CONTROL_VT(TRANSACTION_NUMBER)       = PURCHASE_INVOICE_LINES(PURCHASE_INVOICE_NUMBER)
        LB_TAX_CONTROL_VT(TRANSACTION_TYPE)     = #TTYPE_IN
        LB_TAX_CONTROL_VT(PART_CODE)            = PURCHASE_INVOICE_LINES(PART_CODE)
        LB_TAX_CONTROL_VT(WAREHOUSE)            = PURCHASE_INVOICE_LINES(WAREHOUSE)
        LB_TAX_CONTROL_VT(TARGET_WAREHOUSE)     = ""
        LB_TAX_CONTROL_VT(ORDER_LINE_TYPE)      = ""
        LB_TAX_CONTROL_VT(TAX_ON_CASH)          = #TAX_ON_CASH
        LB_TAX_CONTROL_VT(AP_DEFAULT_TAX)       = #AP_DEFAULT_TAX
        LB_TAX_CONTROL_VT(ACCRUE_IGIC)          = #ACCRUE_IGIC
        LB_TAX_CONTROL_VT(SYS_CURRENCY_MASK)        = #CURRENCY_MASK
        LB_TAX_CONTROL_VT(SYS_CURRENCY_DECIMALS)    = #COST_DECIMALS

        !  Tax Type for title - if blank heading will be 'Tax Analysis,
        ! if sent as "Freight" heading will be 'Freight Tax Analysis'
        LB_TAX_CONTROL_VT(FORM_TITLE)           = ""

        !   Transaction Quantity at Price UOM
        LB_TAX_CONTROL_VT(PRICE_ORDER_QTY)  = 1

        #TRANSACTION_TOTAL_OR_NET   = #AMOUNT

        ! Sales Price or Purchase Cost (the value returned from SOP or POP price lookup)
        LB_TAX_CONTROL_VT(SALES_PRICE)          = #TRANSACTION_TOTAL_OR_NET
        LB_TAX_CONTROL_VT(LINE_DISCOUNT)        = 0.0
        LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE)     = PURCHASE_INVOICE_LINES(PRODUCT_TAX_CODE)
        LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE)        = PURCHASE_INVOICE_LINES(VENDOR_TAX_CODE)

        ADD TO LB_TAX_CONTROL_VT
    END_BLOCK
END_FORM

PROCEDURE_FORM CHECK_FUND
    BEGIN_BLOCK SETUP1      
		
		FIND IN	POP_LINES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=PURCHASE_INVOICES(COMPANY_CODE) &
			/WITH=DIVISION=PURCHASE_INVOICES(DIVISION) &
			/WITH=PO_NUMBER	= PURCHASE_INVOICES(PO_NUMBER) &
			/WITH=PO_LINE_NUMBER = PURCHASE_INVOICE_LINES(PO_LINE_NUMBER) &
			
		#PO_LINE_VALUE=POP_LINES(POP_ORDER_TOTAL_CURRENCY)
		#COMMIT_VALUE =#LINE_VALUE-#PO_LINE_VALUE
		
		PERFORM SUM_POP_GL_POSTINGS
		START_STREAM PMT &
			/TABLE=POP_GL_POSTINGS &
			/LOCK=NONE &
			/SECONDARY &
			/WITH=COMPANY_CODE=POP_LINES(COMPANY_CODE) &
			/WITH=DIVISION=POP_LINES(DIVISION) &
			/WITH=PO_NUMBER=POP_LINES(PO_NUMBER) &
			/WITH=PO_LINE_NUMBER=POP_LINES(PO_LINE_NUMBER)

		#COMMIT_CALC_LINE=0
	
	WHILE(1)
		FETCH PMT /FAILURE=(CONTINUE OUT)
		
		#COMMIT_CALC_LINE=#COMMIT_CALC_LINE+1
		
        DELETE ALL FROM SYS_POSTINGS_CONTROL_VT
        DELETE ALL FROM SYS_POSTINGS_VT

        CLEAR_BUFFER SYS_POSTINGS_CONTROL_VT
        SYS_POSTINGS_CONTROL_VT(COMPANY_CODE) = PMT:POP_GL_POSTINGS(COMPANY_CODE)
        SYS_POSTINGS_CONTROL_VT(DIVISION) = PMT:POP_GL_POSTINGS(DIVISION)
        SYS_POSTINGS_CONTROL_VT(POSTING_DATE) = POP_HEADERS(POSTING_DATE)
        SYS_POSTINGS_CONTROL_VT(SOURCE_REFERENCE) = PMT:POP_GL_POSTINGS(POSTING_DESCRIPTION)
        SYS_POSTINGS_CONTROL_VT(DOCUMENT_NUMBER) = PMT:POP_GL_POSTINGS(PO_NUMBER)
        ADD TO SYS_POSTINGS_CONTROL_VT

        CLEAR_BUFFER SYS_POSTINGS_VT
        SYS_POSTINGS_VT(ACCOUNT_COMPANY_CODE) = PMT:POP_GL_POSTINGS(POSTING_COMPANY)
        SYS_POSTINGS_VT(ACCOUNT_DIVISION) = PMT:POP_GL_POSTINGS(DIVISION)
        SYS_POSTINGS_VT(POSTING_REFERENCE) = PMT:POP_GL_POSTINGS(PO_NUMBER)
        SYS_POSTINGS_VT(DOCUMENT_LINE) = PMT:POP_GL_POSTINGS(PO_LINE_NUMBER)
        SYS_POSTINGS_VT(ACCOUNT_NUMBER) = PMT:POP_GL_POSTINGS(ACCOUNT_NUMBER)
        SYS_POSTINGS_VT(PERIOD) = PMT:POP_GL_POSTINGS(POP_ENCUMB_PERIOD)
        SYS_POSTINGS_VT(YEAR) = PMT:POP_GL_POSTINGS(POP_ENCUMB_YEAR)
        ADD TO SYS_POSTINGS_VT
		
        #UPDATE_CURRENCY_CODE = PMT:POP_GL_POSTINGS(SYS_CURRENCY_CODE)
        #BASE_CURRENCY_CODE = PMT:POP_GL_POSTINGS(SYS_BASE_CURRENCY_CODE)
        !  If budgets are held in base currency, convert commit value from transaction
        ! currency to the base currency value for FUND_UPDATE routine
        IF (#BUDGETS_IN_BASE = #YES AND #UPDATE_CURRENCY_CODE <> #BASE_CURRENCY_CODE AND #COMMIT_CALC_LINE=1)

                DELETE ALL FROM SYS_CURRENCY_VALUES_VT
                CLEAR_BUFFER SYS_CURRENCY_VALUES_VT
                SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE) = #COMMIT_VALUE
                ADD TO SYS_CURRENCY_VALUES_VT

                PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (&
                        #SUCCESS,&
                        #RETURN_MESSAGE)

                FIND IN SYS_CURRENCY_VALUES_VT

                IF (#SUCCESS=#YES)
                        #COMMIT_VALUE = SYS_CURRENCY_VALUES_VT(BASE_VALUE)
                END_IF
        END_IF

		FIND IN GL_ACCOUNTS&
			/LOCK= NONE &
			/SECONDARY &
			/STREAM_NAME=VBG &
			/WITH= ACCOUNT_NUMBER = PMT:POP_GL_POSTINGS(ACCOUNT_NUMBER)
			
        PERFORM "GEMLB:GL_L_FUND_UPDATE" (&
                        ('V'), &
                        (#COMMIT_VALUE), &
                        (VBG:GL_ACCOUNTS(GL_BUDGET_CHECK_LEVEL)), &
                        (VBG:GL_ACCOUNTS(GL_BUDGET_CHECK_PERIOD)), &
                        (VBG:GL_ACCOUNTS(GL_TOLERANCE_AMOUNT)), &
                        (VBG:GL_ACCOUNTS(GL_TOLERANCE_PERCENT)), &
                        (VBG:GL_ACCOUNTS(BUDGET_SUMMARY_ACCOUNT)), &
                        (PURCHASE_INVOICES(INVOICE_DATE)), &
                        (PMT:POP_GL_POSTINGS(ACCOUNT_IDENT)), &
                        (#NO), &
                        (PARAMETER("TTYPE_IN")), &
                        (""), &
                        #R_RTN_STATUS, &
                        #R_MSG, &
                        #R3)

        IF (#R_RTN_STATUS = PARAMETER("STATUS_FAIL"))
				IF(#COMMIT_CALC_LINE=#TOTAL_COMMIT_LINES)
					ERROR/BELL/TEXT_ONLY/WAIT #R_MSG
					EXIT(%FAILURE)
				ELSE
					#COMMIT_VALUE=ROUND((#COMMIT_VALUE-#R3),1)
				END_IF
        ELSE
                ERROR/BELL/TEXT_ONLY #R_MSG
				CONTINUE OUT
        END_IF
		END_WHILE
	END_BLOCK

END_FORM

PROCEDURE_FORM SUM_POP_GL_POSTINGS &
	/LOCK = NONE &
	/TABLE = POP_GL_POSTINGS &
	/WITH=COMPANY_CODE=POP_LINES(COMPANY_CODE) &
	/WITH=DIVISION=POP_LINES(DIVISION) &
	/WITH=PO_NUMBER=POP_LINES(PO_NUMBER) &
	/WITH=PO_LINE_NUMBER=POP_LINES(PO_LINE_NUMBER) &
	/STATISTIC  = #TOTAL_COMMIT_LINES = COUNT
END_FORM

PROCEDURE_FORM CANCEL_GRN_HEADER 

    BEGIN_BLOCK UPDATE 
        FIND IN GOODS_RECEIVED_HEADERS &
            /LOCK=NONE &
            /WITH=COMPANY_CODE=#COMPANY_CODE &
            /WITH=DIVISION=#DIVISION &
            /WITH=GRN_NUMBER=#CANCEL_GRN_NUMBER

        IF (%STATUS = %FAILURE)
            MESSAGE/IDENTIFIER/BELL/WAIT P_62312,#CANCEL_GRN_NUMBER
            EXIT(%FAILURE)
        ELSE
            GOODS_RECEIVED_HEADERS(INVOICE_COPY) = #NO
        END_IF
    END_BLOCK 

END_FORM

PROCEDURE_FORM UPDATE_TAX_CODE 

        BEGIN_BLOCK UPDATE_TAX_CODE
     
            FIND IN PURCHASE_INVOICE_TAX_DETAILS &
                /LOCK=NONE &
                /WITH=COMPANY_CODE = #COMPANY_CODE &
                /WITH=DIVISION = #DIVISION &
                /WITH=PURCHASE_INVOICE_NUMBER = #PURCHASE_INVOICE_NUMBER &
                /WITH=PURCHASE_INVOICE_LINE = 0 &
                /WITH=TAX_TYPE = PARAMETER("TAX_TYPE_FREIGHT") &
                /WITH=TAX_VAL <> 0 &
                /SECONDARY &
                /STREAM_NAME=FREIGHT_TAX_CODE_LOOKUP & 
        
            IF ( %STATUS = %SUCCESS ) 
                #FREIGHT_FOUND = #YES
            END_IF
    
            FIND IN PURCHASE_INVOICE_TAX_DETAILS &
                /LOCK=NONE &
                /WITH=COMPANY_CODE = #COMPANY_CODE &
                /WITH=DIVISION = #DIVISION &
                /WITH=PURCHASE_INVOICE_NUMBER = #PURCHASE_INVOICE_NUMBER &
                /WITH=PURCHASE_INVOICE_LINE = 0 &
                /WITH=TAX_TYPE = PARAMETER("TAX_TYPE_MISC") &
                /WITH=TAX_VAL <> 0 &
                /SECONDARY &
                /STREAM_NAME=MISC_TAX_CODE_LOOKUP
        
            IF ( %STATUS = %SUCCESS )
                #MISC_FOUND = #YES  
            END_IF
        
            START_TRANSACTION

            FIND IN PURCHASE_INVOICES &
                /LOCK = WRITE &
                /WITH = COMPANY_CODE = #COMPANY_CODE &
                /WITH = DIVISION = #DIVISION &
                /WITH = PURCHASE_INVOICE_NUMBER = #PURCHASE_INVOICE_NUMBER
            
            IF ( %STATUS = %SUCCESS )
              IF ( #FREIGHT_FOUND = #YES ) 
                  PURCHASE_INVOICES(FREIGHT_TAX_CODE) = FREIGHT_TAX_CODE_LOOKUP:PURCHASE_INVOICE_TAX_DETAILS(PRODUCT_TAX_CODE)
              END_IF
              IF ( #MISC_FOUND = #YES ) 
                  PURCHASE_INVOICES(MISC_TAX_CODE) =  MISC_TAX_CODE_LOOKUP:PURCHASE_INVOICE_TAX_DETAILS(PRODUCT_TAX_CODE)
              END_IF
            END_IF   
            
            COMMIT
        
        END_BLOCK 

END_FORM 

PROCEDURE_FORM CHECK_FOR_PA_CHANGES(#P1,#P2) 
 
    BEGIN_BLOCK CHECK_CHANGES
        #NEW_PA_PROJECT_CODE    = #P1    
        #NEW_PA_WBS_NUMBER      = #P2    
        #CHG_MODE_NOCHANGE      = PARAMETER("REQ_TRANS_MODE_NOCHANGE")
        #CHG_MODE_MODIFY        = PARAMETER("REQ_TRANS_MODE_MODIFY")    
        #CHG_MODE_DELETE        = PARAMETER("REQ_TRANS_MODE_DELETE")
        #CHG_MODE_ADD           = PARAMETER("REQ_TRANS_MODE_ADD")
        #COPY_PA_REQUIRED		= #YES
            
        IF (PURCHASE_INVOICES(PA_PROJECT_CODE) <> #NEW_PA_PROJECT_CODE &
                OR PURCHASE_INVOICES(PA_WBS_NUMBER) <> #NEW_PA_WBS_NUMBER)
            IF ( PURCHASE_INVOICES(PA_PROJECT_CODE) = "" ) 
                #CHANGE_MODE = #CHG_MODE_ADD
            ELSE    
                IF ( #NEW_PA_PROJECT_CODE = "" ) 
                    #CHANGE_MODE = #CHG_MODE_DELETE
                ELSE
                    #CHANGE_MODE = #CHG_MODE_MODIFY 
                END_IF          
            END_IF  

        ELSE            
            #CHANGE_MODE = #CHG_MODE_NOCHANGE                       
        END_IF
    END_BLOCK

        BEGIN_CASE (#CHANGE_MODE)
            CASE #CHG_MODE_ADD, #CHG_MODE_MODIFY
                PERFORM DELETE_ALL_PA_POSTINGS
                PERFORM ADD_NEW_PA_POSTINGS
                PERFORM CHANGE_WBS_LINE
                
                IF ( %STATUS = %SUCCESS ) 
                    IF (#CHANGE_MODE = #CHG_MODE_ADD) 
                        MESSAGE/IDENTIFIER/BELL/WAIT P_33089
                    ELSE
                        MESSAGE/IDENTIFIER/BELL/WAIT P_33088
                    END_IF 
                END_IF
                EXIT(%STATUS)
                                 
            CASE #CHG_MODE_DELETE
                
                FIND IN PA_PURCHASE_INVOICE_GL_POSTINGS &
                    /LOCK=NONE &
                    /WITH=COMPANY_CODE=#COMPANY_CODE &
                    /WITH=DIVISION=#DIVISION &
                    /WITH=PURCHASE_INVOICE_NUMBER=PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)
                
                IF (%STATUS = %SUCCESS)
                    #PA_REQUIRED = #NO
                    
                    START_STREAM ACTUAL_GLS &
                        /TABLE=PURCHASE_INVOICE_GL_POSTINGS &
                        /LOCK=NONE &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=PURCHASE_INVOICE_NUMBER=PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER) 
                        
                    WHILE (1) 
                    FETCH ACTUAL_GLS /FAILURE=(CONTINUE OUT) 
                        
                        IF(ACTUAL_GLS:PURCHASE_INVOICE_GL_POSTINGS(ACCOUNT_NUMBER) <> "")
                            FIND IN GL_ACCOUNTS &
                                /LOCK=NONE &
                                /WITH=ACCOUNT_NUMBER=ACTUAL_GLS:PURCHASE_INVOICE_GL_POSTINGS(ACCOUNT_NUMBER)
                            
                            IF(GL_ACCOUNTS(PA_WBS_REQUIRED)=2)
                                #PA_REQUIRED = #YES
                                CONTINUE OUT            
                            END_IF
                        ELSE
                            FIND IN GL_SHORT_CODES &
                                /LOCK=NONE &
                                /WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=GL_SHORT_CODE=ACTUAL_GLS:PURCHASE_INVOICE_GL_POSTINGS(GL_SHORT_CODE)
                            
                            IF ( GL_SHORT_CODES(PATCHING_FLAG) = #NO ) 
                                FIND IN GL_ACCOUNTS &
                                    /LOCK=NONE &
                                    /WITH=ACCOUNT_NUMBER=GL_SHORT_CODES(ACCOUNT_NUMBER)
                                IF(GL_ACCOUNTS(PA_WBS_REQUIRED)=2)
                                    #PA_REQUIRED = #YES
                                    CONTINUE OUT
                                END_IF
                            ELSE
                                IF ( GL_SHORT_CODES(PA_WBS_REQUIRED) = 2 ) 
                                    #PA_REQUIRED = #YES
                                    CONTINUE OUT                                
                                END_IF          
                            END_IF 
                        END_IF  
                    END_WHILE
                    IF (#PA_REQUIRED) 
                        PERFORM CONFIRM_DELETE_PA_POSTINGS
                        IF(#DELETE_YN = #YES)
                            PERFORM DELETE_ALL_PA_POSTINGS
							IF ( %STATUS = %SUCCESS ) 
								MESSAGE/IDENTIFIER/BELL/WAIT P_33090
							END_IF 							
                        ELSE
                            EXIT(%BACK)
                        END_IF
                    ELSE
                        PERFORM DELETE_ALL_PA_POSTINGS
                        IF ( %STATUS = %SUCCESS ) 
                            MESSAGE/IDENTIFIER/BELL/WAIT P_33090
                        END_IF 
                    END_IF 
                ELSE
                    PURCHASE_INVOICES(PA_PROJECT_CODE) = ""
                    PURCHASE_INVOICES(PA_WBS_NUMBER) = ""
                END_IF
                
                !When copy pop gl postings, don't copy PA
                START_STREAM GRN_FOR_PA &
                		/TABLE=GOODS_RECEIVED_LINES &
                		/SECONDARY &
                        /LOCK=NONE &
                        /WITH=COMPANY_CODE=#COMPANY_CODE &
                        /WITH=DIVISION=#DIVISION &
                        /WITH=GRN_NUMBER AMONG #GRN_NUMBER 
                        
                WHILE(1)
                	FETCH GRN_FOR_PA /FAILURE = (CONTINUE OUT)
                
					FIND IN PA_POP_GL_POSTINGS &
						/LOCK=NONE &
						/WITH=COMPANY_CODE=#COMPANY_CODE &
						/WITH=DIVISION=#DIVISION &
						/WITH=PO_NUMBER= (GRN_FOR_PA:GOODS_RECEIVED_LINES(PO_NUMBER))
					IF (%STATUS = %SUCCESS)	
						#COPY_PA_REQUIRED = #NO
						CONTINUE OUT
					END_IF
				END_WHILE
        END_CASE 
END_FORM 

PROCEDURE_FORM DELETE_ALL_PA_POSTINGS &
    /TABLE=PA_PURCHASE_INVOICE_GL_POSTINGS &
    /WITH=COMPANY_CODE=#COMPANY_CODE &
    /WITH=DIVISION=#DIVISION &
    /WITH=PURCHASE_INVOICE_NUMBER=PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)

    BEGIN_BLOCK DEL
        DELETE FROM PA_PURCHASE_INVOICE_GL_POSTINGS
    END_BLOCK 

END_FORM 

PROCEDURE_FORM CHANGE_WBS_LINE &
        /TABLE=PURCHASE_INVOICE_LINES &
        /LOCK=WRITE &
        /WITH=COMPANY_CODE=#COMPANY_CODE &
        /WITH=DIVISION=#DIVISION &
        /WITH=PURCHASE_INVOICE_NUMBER=PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)
        
    BEGIN_BLOCK BLANK_OUT_LINE_PROJECT 
        PURCHASE_INVOICE_LINES(PA_PROJECT_CODE) = ""
        PURCHASE_INVOICE_LINES(PA_WBS_NUMBER)   = ""
    END_BLOCK  
END_FORM 

FORM CONFIRM_DELETE_PA_POSTINGS /ROW=20 /COL=2 /WIDTH=78 /HEIGHT=3 &
    /ATTRIBUTES=NOBORDER 

    YESNO_BLOCK CONF /ROW=2 /COL=60 &
        /PROMPT=MESSAGE("P_33417") & 
        /SUCCESS=(#DELETE_YN = #YES) &
        /FAILURE=(#DELETE_YN = #NO) &
        /EXIT=(EXIT(%BACK)) &
        /BACK=(EXIT(%BACK))

END_FORM

PROCEDURE_FORM ADD_NEW_PA_POSTINGS &
         /TABLE=PURCHASE_INVOICE_GL_POSTINGS &
         /LOCK=NONE &
         /WITH=COMPANY_CODE=#COMPANY_CODE &
         /WITH=DIVISION=#DIVISION &
         /WITH=PURCHASE_INVOICE_NUMBER=PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)

         BEGIN_BLOCK GET_PA_WBS_REQUIRED 

                   PERFORM 'GEMPA:PA_V_COMMON' GET_PA_WBS_REQUIRED ( &
                            (#COMPANY_CODE), &
                            (PURCHASE_INVOICE_GL_POSTINGS(GL_SHORT_CODE)), &
                            (PURCHASE_INVOICE_GL_POSTINGS(ACCOUNT_NUMBER)), &
                             "", &
                             "", &
                             "", &
                             "", &
                             #WBS_REQUIRED)

                   IF ( #WBS_REQUIRED=PARAMETER("WBS_REQUIRED_NEVER") ) 
                            GOTO NEXT
                   END_IF 
         END_BLOCK 

         BEGIN_BLOCK ADD_PA_POSTINGS
            CLEAR_BUFFER PA_PURCHASE_INVOICE_GL_POSTINGS
            PA_PURCHASE_INVOICE_GL_POSTINGS(COMPANY_CODE)            =  #COMPANY_CODE
            PA_PURCHASE_INVOICE_GL_POSTINGS(DIVISION)                =  #DIVISION       
            PA_PURCHASE_INVOICE_GL_POSTINGS(PURCHASE_INVOICE_NUMBER) =  PURCHASE_INVOICE_GL_POSTINGS(PURCHASE_INVOICE_NUMBER)       
            PA_PURCHASE_INVOICE_GL_POSTINGS(PURCHASE_INVOICE_LINE)   =  PURCHASE_INVOICE_GL_POSTINGS(PURCHASE_INVOICE_LINE)
            PA_PURCHASE_INVOICE_GL_POSTINGS(SEQUENCE)                =  PURCHASE_INVOICE_GL_POSTINGS(SEQUENCE)    
            PA_PURCHASE_INVOICE_GL_POSTINGS(PA_PROJECT_CODE)         =  #NEW_PA_PROJECT_CODE
            PA_PURCHASE_INVOICE_GL_POSTINGS(PA_WBS_NUMBER)           =  #NEW_PA_WBS_NUMBER        
            PA_PURCHASE_INVOICE_GL_POSTINGS(PA_POSTING_CURRENCY_DR)  =  PURCHASE_INVOICE_GL_POSTINGS(GL_POSTING_CURRENCY_DR)      
            PA_PURCHASE_INVOICE_GL_POSTINGS(PA_POSTING_CURRENCY_CR)  =  PURCHASE_INVOICE_GL_POSTINGS(GL_POSTING_CURRENCY_CR)      
            PA_PURCHASE_INVOICE_GL_POSTINGS(PA_POSTING_BASE_DR)      =  PURCHASE_INVOICE_GL_POSTINGS(GL_POSTING_BASE_DR)        
            PA_PURCHASE_INVOICE_GL_POSTINGS(PA_POSTING_BASE_CR)      =  PURCHASE_INVOICE_GL_POSTINGS(GL_POSTING_BASE_CR)        
            
            ADD TO PA_PURCHASE_INVOICE_GL_POSTINGS
            
            IF (%STATUS = %FAILURE)
                EXIT(%FAILURE)
            END_IF
         END_BLOCK 

         BEGIN_BLOCK NEXT 

         END_BLOCK 

END_FORM

PROCEDURE_FORM GET_PA_WBS(#P1,#P2,#P3,#P4,#P5,#P6,#R1,#R2)
    BEGIN_BLOCK DESCRIPTION
        !   INPUTS:
        ! 
        !   P1 = Company code   - required
        !   P2 = PA in use flag - required
        !   P3 = Project Code at header level - optional
        !   P4 = Project WBS number at header level - optional
        !   P5 = Project Code at line level - optional
        !   P6 = Project WBS number at line level - optional
        
        !   OUTPUTS:
        !
        !   R1 = Project/WBS in its external format
        !   R2 = project or activity description

    END_BLOCK
            
    BEGIN_BLOCK SETUP
        #COMPANY_CODE           = #P1
        #PA_IN_USE              = #P2
        #PROJECT_H              = #P3
        #WBS_H                  = #P4
        #PROJECT_L              = #P5
        #WBS_L                  = #P6
        #PROJ                   = ""
        #WBS                    = ""
        #PA_WBS_NUMBER_MASKED   = ""
        #ACTIVITY_DESCRIP       = ""    
    END_BLOCK
    
    BEGIN_BLOCK GET_PA_WBS
        IF ( #PA_IN_USE = #YES ) 
            IF ( #PROJECT_H <> "" ) 
                #PROJ = #PROJECT_H
                #WBS  = #WBS_H
            ELSE
                #PROJ = #PROJECT_L
                #WBS  = #WBS_L
            END_IF 
        END_IF
                        
        IF ( #PA_IN_USE = #YES AND #PROJ <> "" )        
            PERFORM "GEMLB:LB_FORMAT_PA_WBS_NUMBER" ( &
                        (#COMPANY_CODE), &
                        (#PROJ), &
                        (#WBS), &
                        #PA_WBS_NUMBER_MASKED, &
                        #LEVEL_1, & 
                        #LEVEL_2, & 
                        #LEVEL_3, & 
                        #LEVEL_4, & 
                        #LEVEL_5, & 
                        "", "", "", &
                        #ERROR_OCCURRED, &
                        #ERROR_MESSAGE, &
                        #ACTIVITY_DESCRIP )
            IF(#ERROR_OCCURRED)  ERROR/TEXT_ONLY/BELL #ERROR_MESSAGE
        END_IF
    END_BLOCK
    
    BEGIN_BLOCK RETURN_WBS
        #R1 = #PA_WBS_NUMBER_MASKED
        #R2 = #ACTIVITY_DESCRIP
    END_BLOCK

END_FORM

PROCEDURE_FORM STAT_PA_WBS (#R1,#R2,#R3)&
    !#R1 indicates how many different pa wbs
    !#R2,#R3 indicates what's pa wbs if only one pa wbs
    
    BEGIN_BLOCK SETUP
        #COUNT        = 0
        #PO_NUMBERS   = ""
        #R1           = ""
        #R2           = ""
        #R3           = ""
    END_BLOCK
    
    BEGIN_BLOCK COUNT_GRNS
        
        START_STREAM STAT_GRNS &
            /TABLE=GOODS_RECEIVED_HEADERS &
            /LOCK = NONE &
            /SECONDARY &
            /WITH = COMPANY_CODE = #COMPANY_CODE &
            /WITH = DIVISION = #DIVISION &
            /WITH = GRN_NUMBER AMONG #GRN_NUMBER
        WHILE (1)
            FETCH STAT_GRNS /FAILURE=(CONTINUE OUT)

            !Get PO numbers...
            IF ( STAT_GRNS:GOODS_RECEIVED_HEADERS(DEFAULT_PO_NUMBER) <> "")
                IF ( #COUNT>0 ) 
                    #PO_NUMBERS =#PO_NUMBERS & "," & STAT_GRNS:GOODS_RECEIVED_HEADERS(DEFAULT_PO_NUMBER)
                ELSE
                    #PO_NUMBERS= STAT_GRNS:GOODS_RECEIVED_HEADERS(DEFAULT_PO_NUMBER)
                 END_IF
            END_IF            
            #COUNT=#COUNT+1 
                            
        END_WHILE
        IF (#PO_NUMBERS = "") GOTO THE_END
        
    END_BLOCK
    
    BEGIN_BLOCK COUNT_PA
        START_STREAM STAT_POS &
            /TABLE=POP_HEADERS &
            /LOCK=NONE &
            /SECONDARY &
            /WITH = COMPANY_CODE = #COMPANY_CODE &
            /WITH = DIVISION = #DIVISION &
            /WITH = PO_NUMBER AMONG #PO_NUMBERS &
            /GROUPED_BY = PA_PROJECT_CODE,PA_WBS_NUMBER &
            /SORTED_BY = PA_PROJECT_CODE,PA_WBS_NUMBER &
            /STATISTIC = #PA_PTS = COUNT
            
        FETCH STAT_POS
        
        IF (#PA_PTS = 1) 
            #PA_PROJECT_CODE = POP_HEADERS(PA_PROJECT_CODE)
            #WBS_NUMBER      = POP_HEADERS(PA_WBS_NUMBER)
        END_IF

    END_BLOCK
    
    BEGIN_BLOCK THE_END
        #R1 = #PA_PTS
        #R2 = #PA_PROJECT_CODE
        #R3 = #WBS_NUMBER
    END_BLOCK
    
END_FORM 


PROCEDURE_FORM CHECK_LINE_PA_CHANGES(#P1,#P2,#P3) 
	
	BEGIN_BLOCK CHECK_CHANGES
		#NEW_PA_PROJECT_CODE = #P1	 
		#NEW_PA_WBS_NUMBER = #P2
		#PO_LINE_NUMBER = #P3
			 
		#CHG_MODE_NOCHANGE   = PARAMETER("REQ_TRANS_MODE_NOCHANGE")	 
		#CHG_MODE_MODIFY     = PARAMETER("REQ_TRANS_MODE_MODIFY")	
		#CHG_MODE_DELETE     = PARAMETER("REQ_TRANS_MODE_DELETE")
		#CHG_MODE_ADD        = PARAMETER("REQ_TRANS_MODE_ADD")
			 		
		IF (PURCHASE_INVOICE_LINES(PA_PROJECT_CODE) <> #NEW_PA_PROJECT_CODE &
				OR PURCHASE_INVOICE_LINES(PA_WBS_NUMBER) <> #NEW_PA_WBS_NUMBER)
			IF ( PURCHASE_INVOICE_LINES(PA_PROJECT_CODE) = "" ) 
				#CHANGE_MODE = #CHG_MODE_ADD
			ELSE	
				IF ( #NEW_PA_PROJECT_CODE = "" ) 
					#CHANGE_MODE = #CHG_MODE_DELETE
				ELSE
					#CHANGE_MODE = #CHG_MODE_MODIFY	
				END_IF 			
			END_IF 	

		ELSE  			
			#CHANGE_MODE = #CHG_MODE_NOCHANGE						
		END_IF
	END_BLOCK


		BEGIN_CASE (#CHANGE_MODE)
			CASE #CHG_MODE_ADD, #CHG_MODE_MODIFY
				PERFORM DELETE_LINE_PA_POSTINGS
				PERFORM ADD_LINE_PA_POSTINGS
				
				IF ( %STATUS = %SUCCESS ) 
					IF (#CHANGE_MODE = #CHG_MODE_ADD) 
						MESSAGE/IDENTIFIER/BELL/WAIT P_33089
					ELSE
						MESSAGE/IDENTIFIER/BELL/WAIT P_33088
					END_IF 
				END_IF
				EXIT(%STATUS)
								 
			CASE #CHG_MODE_DELETE
				
				FIND IN PA_PURCHASE_INVOICE_GL_POSTINGS &
					/LOCK=NONE &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=DIVISION=#DIVISION &
					/WITH=PURCHASE_INVOICE_NUMBER =(PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)) &
					/WITH=PURCHASE_INVOICE_LINE=#PO_LINE_NUMBER
					
				IF (%STATUS = %SUCCESS)
					#PA_REQUIRED = #NO
					
					START_STREAM ACTUAL_GLS &
						/TABLE=PURCHASE_INVOICE_GL_POSTINGS &
						/LOCK=NONE &
						/WITH=COMPANY_CODE=#COMPANY_CODE &
						/WITH=DIVISION=#DIVISION &
						/WITH=PURCHASE_INVOICE_NUMBER=(PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)) &
						/WITH=PURCHASE_INVOICE_LINE=#PO_LINE_NUMBER
						
					WHILE (1) 
					FETCH ACTUAL_GLS /FAILURE=(CONTINUE OUT) 
						
						IF(ACTUAL_GLS:PURCHASE_INVOICE_GL_POSTINGS(ACCOUNT_NUMBER) <> "")
							FIND IN GL_ACCOUNTS &
								/LOCK=NONE &
								/WITH=ACCOUNT_NUMBER=ACTUAL_GLS:PURCHASE_INVOICE_GL_POSTINGS(ACCOUNT_NUMBER)
							
							IF(GL_ACCOUNTS(PA_WBS_REQUIRED)=2)
								#PA_REQUIRED = #YES
								CONTINUE OUT			
							END_IF
						ELSE
							FIND IN GL_SHORT_CODES &
								/LOCK=NONE &
								/WITH=COMPANY_CODE=#COMPANY_CODE &
								/WITH=GL_SHORT_CODE=ACTUAL_GLS:PURCHASE_INVOICE_GL_POSTINGS(GL_SHORT_CODE)
							
							IF ( GL_SHORT_CODES(PATCHING_FLAG) = #NO ) 
								FIND IN GL_ACCOUNTS &
									/LOCK=NONE &
									/WITH=ACCOUNT_NUMBER=GL_SHORT_CODES(ACCOUNT_NUMBER)
								IF(GL_ACCOUNTS(PA_WBS_REQUIRED)=2)
									#PA_REQUIRED = #YES
									CONTINUE OUT
								END_IF
							ELSE
								IF ( GL_SHORT_CODES(PA_WBS_REQUIRED) = 2 ) 
									#PA_REQUIRED = #YES
									CONTINUE OUT								
								END_IF 		 	
							END_IF 
						END_IF	
					END_WHILE
					IF (#PA_REQUIRED) 
						PERFORM CONFIRM_DELETE_PA_POSTINGS
						IF(#DELETE_YN = #YES)
							PERFORM DELETE_LINE_PA_POSTINGS
							IF ( %STATUS = %SUCCESS ) 
								MESSAGE/IDENTIFIER/BELL/WAIT P_33090
							END_IF 							
						ELSE
							EXIT(%BACK)
						END_IF
					ELSE
						PERFORM DELETE_LINE_PA_POSTINGS
						IF ( %STATUS = %SUCCESS ) 
							MESSAGE/IDENTIFIER/BELL/WAIT P_33090
						END_IF 						
					END_IF 
				END_IF
		END_CASE 
END_FORM 

PROCEDURE_FORM ADD_LINE_PA_POSTINGS &
         /TABLE=PURCHASE_INVOICE_GL_POSTINGS &
         /LOCK=NONE &
         /WITH=COMPANY_CODE=#COMPANY_CODE &
         /WITH=DIVISION=#DIVISION &
         /WITH=PURCHASE_INVOICE_NUMBER=(PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)) &
		 /WITH=PURCHASE_INVOICE_LINE=#PO_LINE_NUMBER
		 
         BEGIN_BLOCK GET_PA_WBS_REQUIRED 

                   PERFORM 'GEMPA:PA_V_COMMON' GET_PA_WBS_REQUIRED ( &
                            (#COMPANY_CODE), &
                            (PURCHASE_INVOICE_GL_POSTINGS(GL_SHORT_CODE)), &
                            (PURCHASE_INVOICE_GL_POSTINGS(ACCOUNT_NUMBER)), &
                             "", &
                             "", &
                             "", &
                             "", &
                             #WBS_REQUIRED)

                   IF ( #WBS_REQUIRED=PARAMETER("WBS_REQUIRED_NEVER") ) 
                            GOTO NEXT
                   END_IF 
         END_BLOCK 

         BEGIN_BLOCK ADD_PA_POSTINGS
			CLEAR_BUFFER PA_PURCHASE_INVOICE_GL_POSTINGS
			PA_PURCHASE_INVOICE_GL_POSTINGS(COMPANY_CODE)  	 		=  #COMPANY_CODE
			PA_PURCHASE_INVOICE_GL_POSTINGS(DIVISION)      	 		=  #DIVISION       
			PA_PURCHASE_INVOICE_GL_POSTINGS(PURCHASE_INVOICE_NUMBER)=  PURCHASE_INVOICE_GL_POSTINGS(PURCHASE_INVOICE_NUMBER)       
			PA_PURCHASE_INVOICE_GL_POSTINGS(PURCHASE_INVOICE_LINE)  =  #PO_LINE_NUMBER
			PA_PURCHASE_INVOICE_GL_POSTINGS(SEQUENCE)             	=  PURCHASE_INVOICE_GL_POSTINGS(SEQUENCE)    
			PA_PURCHASE_INVOICE_GL_POSTINGS(PA_PROJECT_CODE)       	=  #NEW_PA_PROJECT_CODE
			PA_PURCHASE_INVOICE_GL_POSTINGS(PA_WBS_NUMBER)          =  #NEW_PA_WBS_NUMBER        
			PA_PURCHASE_INVOICE_GL_POSTINGS(PA_POSTING_CURRENCY_DR) =  PURCHASE_INVOICE_GL_POSTINGS(GL_POSTING_CURRENCY_DR)      
			PA_PURCHASE_INVOICE_GL_POSTINGS(PA_POSTING_CURRENCY_CR) =  PURCHASE_INVOICE_GL_POSTINGS(GL_POSTING_CURRENCY_CR)      
			PA_PURCHASE_INVOICE_GL_POSTINGS(PA_POSTING_BASE_DR)     =  PURCHASE_INVOICE_GL_POSTINGS(GL_POSTING_BASE_DR)        
			PA_PURCHASE_INVOICE_GL_POSTINGS(PA_POSTING_BASE_CR)     =  PURCHASE_INVOICE_GL_POSTINGS(GL_POSTING_BASE_CR)        
			
			ADD TO PA_PURCHASE_INVOICE_GL_POSTINGS
			
			IF (%STATUS = %FAILURE)
				EXIT(%FAILURE)
			END_IF
         END_BLOCK 

         BEGIN_BLOCK NEXT 

         END_BLOCK 

END_FORM

PROCEDURE_FORM DELETE_LINE_PA_POSTINGS &
	/TABLE=PA_PURCHASE_INVOICE_GL_POSTINGS &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION=#DIVISION &
	/WITH=PURCHASE_INVOICE_NUMBER=(PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)) &
	/WITH=PURCHASE_INVOICE_LINE=#PO_LINE_NUMBER
	
	BEGIN_BLOCK DEL
		DELETE FROM PA_PURCHASE_INVOICE_GL_POSTINGS
	END_BLOCK 

END_FORM 

PROCEDURE_FORM CHECK_FOR_INVALID_PA_PROJECTS &
	/TABLE = PA_PURCHASE_INVOICE_GL_POSTINGS &
	/LOCK = NONE &
	/SECONDARY &
	/STREAM_NAME = CHKPA &
	/WITH = COMPANY_CODE = #COMPANY_CODE &
	/WITH = DIVISION = #DIVISION &
	/WITH = PURCHASE_INVOICE_NUMBER = (PURCHASE_INVOICES(PURCHASE_INVOICE_NUMBER)) 
	
	BEGIN_BLOCK CHECK_PA_PROJECTS
		IF (#CHKPA_PROJECT = (CHKPA:PA_PURCHASE_INVOICE_GL_POSTINGS(PA_PROJECT_CODE)))
			GOTO NEXT
		END_IF
			#CHKPA_PROJECT = (CHKPA:PA_PURCHASE_INVOICE_GL_POSTINGS(PA_PROJECT_CODE))
			PERFORM "GEMPA:PA_V_COMMON" PA_WBS_UPDATE_VALIDATION ( &
						#COMPANY_CODE, & 
						(#CHKPA_PROJECT), &
						(CHKPA:PA_PURCHASE_INVOICE_GL_POSTINGS(PA_WBS_NUMBER)), &
						(PURCHASE_INVOICES(POSTING_DATE)),   &
						(PURCHASE_INVOICES(PERIOD)) ,        &
						(PURCHASE_INVOICES(YEAR)) ,#YES, &
						"O",(PARAMETER("CALL_MODE_W")),"","","", &
						#R_STATUS)
						
						IF ( #R_STATUS = 1 ) 
			    				#PA_PROJECT_INVALID = 1
			    				MESSAGE/IDENTIFIER/BELL/WAIT P_33073, #CHKPA_PROJECT
						END_IF		
	END_BLOCK
	
	BEGIN_BLOCK NEXT
	END_BLOCK
END_FORM

PROCEDURE_FORM CHECK_FOR_MISSING_PA_POSTINGS &
	/TABLE=PURCHASE_INVOICE_GL_POSTINGS &
	/LOCK=NONE &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION=#DIVISION &
	/WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER
	
	BEGIN_BLOCK CHECK_PA_REQUIRED 

		#ACC_PA_REQUIRED = #NO
		IF(PURCHASE_INVOICE_GL_POSTINGS(ACCOUNT_NUMBER) <> "")
			FIND IN GL_ACCOUNTS &
				/LOCK=NONE &
				/WITH=ACCOUNT_NUMBER=PURCHASE_INVOICE_GL_POSTINGS(ACCOUNT_NUMBER)
			
			IF(GL_ACCOUNTS(PA_WBS_REQUIRED)=2)
				#ACC_PA_REQUIRED = #YES
			END_IF
		ELSE
			FIND IN GL_SHORT_CODES &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=GL_SHORT_CODE=PURCHASE_INVOICE_GL_POSTINGS(GL_SHORT_CODE)
			
			IF ( GL_SHORT_CODES(PATCHING_FLAG) = #NO ) 
				FIND IN GL_ACCOUNTS &
					/LOCK=NONE &
					/WITH=ACCOUNT_NUMBER=GL_SHORT_CODES(ACCOUNT_NUMBER)
				IF(GL_ACCOUNTS(PA_WBS_REQUIRED)=2)
					#ACC_PA_REQUIRED = #YES
				END_IF
			ELSE
				IF(GL_SHORT_CODES(PA_WBS_REQUIRED)=2) 
					#ACC_PA_REQUIRED = #YES
				END_IF 		 	
			END_IF 
		END_IF	
	
	END_BLOCK

	BEGIN_BLOCK CHECK_PA_POSTING
		IF ( #ACC_PA_REQUIRED = #YES ) 
			FIND IN PA_PURCHASE_INVOICE_GL_POSTINGS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=PURCHASE_INVOICE_NUMBER=#PURCHASE_INVOICE_NUMBER &
				/WITH=PURCHASE_INVOICE_LINE=PURCHASE_INVOICE_GL_POSTINGS(PURCHASE_INVOICE_LINE) &
				/WITH=SEQUENCE=PURCHASE_INVOICE_GL_POSTINGS(SEQUENCE)
			
			IF ( %STATUS <> %SUCCESS ) 
				#PA_POSTING_MISSING  = #YES
				EXIT(%STATUS)					
			END_IF	
		END_IF  
	
	END_BLOCK 

END_FORM 

PROCEDURE_FORM PROCESS_CTRL(#P_ACT_CODE, #P_REQ_ACTION, #P_INVOICE_NUM)

	BEGIN_BLOCK PROC
	
		START_TRANSACTION
	
		#PROCESS_KEY = #COMPANY_CODE & '/' & #DIVISION & '/' & #P_INVOICE_NUM
		
		PERFORM "GEMLB:LB_L_PROCESS_CONTROLS" LB_L_PROCESS_CONTROLS &
	 					(#COMPANY_CODE, &
	 					(#P_ACT_CODE), &
						(#P_REQ_ACTION), &
						(#FUNCTION_ID), &
	 					(#PROCESS_KEY), &
						(#ID),"", &
	 					#ERROR_OCCURRED, #ERROR_MESSAGE)
	 
	 	IF (%STATUS = %FAILURE OR #ERROR_OCCURRED)
		
	 		ERROR /TEXT_ONLY/WAIT #ERROR_MESSAGE
	 		EXIT (%FAILURE)
	 	END_IF

		COMMIT
	END_BLOCK
END_FORM
