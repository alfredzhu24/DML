!Changelog
!Change 001 - Booked date = SYS_RECOMMENDED_DATE
!Change 002 - Added PART_DESC_2 to part code selection
!Change 003 - Minor/balance component specification selection (menu, etc)
!Change 004 - Shipping date = required date = delivery date
!Change 005 - If the part code isn't a finished good (e.g. >=300000), then make the order line reference be required
!Change 006 - Suppress the requirement that freight be enabled in order to specify shipping terms
!Change 007 - Display spec code 
!Change 008 - Set a flag to determine if the cylinder for an order line is being shipped
!Change 009 - If no Part Master by Cust then default to the Voltaix Spec
!Change 010 - Sort order
!Change 011 - Copy over spec detail to sales order line
!Change 012 - Allow order line reference to be entered in the "easy" entry form
!Change 013 - Allow customer contacts to be set via a list of values from VOL_CUSTOMER_CONTACTS table
!Change 014 - Form and supporting code to display specification limits
!Change 015 - Allow single-value text characteristics
!Change 016 - Pop up a warning box instead of an error message when the customer PO is duplicated
!Change 017 - SYS_RECOMMENDED_DATE is 1-1-2099 by default
!Change 018 - Add support for new 3rd party collect freight shipping terms
!Change 019 - converted Line_Ref from input box to LOV using ORDER_LINE_NUMBER (WG)
!Change 020 - Fixed bug that won't allow WH change in delivery if there is a Despatch for the line (ross has sent issue to development)
!3/26/2013 - EMM fixed bug with Change 013
!*****************************************************************************
!SPR Number: 368358                                                 
!Description: Credit hold being set when order is modified                                      
!Fixed in version: 6.4SP3  
!Retrofitted to version: 6.3SP2       
!Module Code: SOP       
!Facility ID: SOP_T_001       
!Program: SOP_T_ORDER_MAINTENANCE.DML                   
!Fix Sequence: Program 6 of 8          
!Metadata: YES            
!Prerequisite: N/A                      
!***************************************************************************** 


TITLE SOP_T_001, "Sales Order Entry & Maintenance"

FORM MAIN (#P1) /ROW=3 /COL=2 /HEIGHT=21 /WIDTH=78 &
	 /TITLE=(MESSAGE("P_50141"))

	BEGIN_BLOCK DOCUMENTATION
            !       =====================================================
            !
            !
            !       (c) Copyright 1988-2009 CDC Software
            !       All Rights Reserved
            !
            !       This program is the proprietary and confidential information
            !       of CDC software and may be used and disclosed only
            !       as authorized in a license agreement authorizing and
            !       controlling such use and disclosure
            !
            !       =====================================================
	END_BLOCK

	BEGIN_BLOCK COMPANY_SETUP
		SET/LOCAL EXIT FORM EXITFORM

		START_TRANSACTION
		#ID          = PARAMETER("FACILITY_ID")
		#FUNCTION_ID = MESSAGE("P_33844")

		#COMPANY_CODE	   	= PARAMETER("USER_COMPANY_CODE")
		#SECURITY_ACTIVE	= PARAMETER("COMPANY_SECURITY_ACTIVE")
		#USER_ID		= PARAMETER("USER_ID")
		#NO			= PARAMETER("LANGUAGE_NO")
		#YES		    	= PARAMETER("LANGUAGE_YES")
		#SO_LINE_TYPE_STOCK	= PARAMETER("LINE_TYPE_STOCK")
		#SO_LINE_TYPE_NONSTOCK  = PARAMETER("LINE_TYPE_NONSTOCK")
		#DISCOUNT_BREAK_AMOUNT  = PARAMETER("DISCOUNT_BREAK_AMOUNT")
		#CURRENCY_LEN	   	= PARAMETER("SYS_CURRENCY_LENGTH")
		#ORDER_CYCLE		= #P1
		#IC_STATUS_CODE		= PARAMETER("IC_STATUS_QOH")
		#IC_MOVEMENT_CODE	= PARAMETER("INV_MOVE_SOENTRY")
		#CURRENCY_OVERRIDE	= PARAMETER("CURRENCY_OVERRIDE_ALWAYS")
		#DUE_CODE		= PARAMETER("SYS_DUE_DATE")
		#SOP_ORDER_CYCLE_C	= PARAMETER("SOP_ORDER_CYCLE_C")
		#RECALC_PRICE_ON_MODIFY = PARAMETER("RECALC_PRICE_ON_MODIFY")

		#METHOD_DESPATCH	= PARAMETER("DATE_METHOD_DESPATCH")
		#METHOD_RECEIPT	 	= PARAMETER("DATE_METHOD_RECEIPT")
		#DEFAULT_AR_DIVISION	= PARAMETER("TM_USER_AR_DIVISION")
		#AR_CONTRACT_KEY_DEFAULT = PARAMETER("SOP_AR_CONTRACT_KEY_DEFAULT")
		#UPDATE_FREIGHT_DETAILS = #NO
		#SALES_PRICE_MASK	= FIELD_O_MASK(SALES_PRICE)
		#JAPAN_LEGAL_POSTING	= PARAMETER("JAPAN_LEGAL_POSTING")
		#TRUE = 1
!		#FALSE = 0
		#TAX_INCLUSIVE = PARAMETER("PRICING_METHOD_INCLUSIVE")
		#TAX_EXCLUSIVE = PARAMETER("PRICING_METHOD_EXCLUSIVE")
		
		#SOE_BY_PART = PARAMETER("SOE_BY_PART_CODE")
		#SOE_BY_BOTH = PARAMETER("SOE_BY_BOTH")
		#SOE_BY_CPC = PARAMETER("SOE_BY_CPC")

		IF (#ORDER_CYCLE = "") #ORDER_CYCLE = (PARAMETER("SOP_ORDER_CYCLE_B"))

		FIND IN COMPANY_CONTROLS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE

		IF (%STATUS=%FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00139
			ROLLBACK
			EXIT(%FAILURE)
		END_IF

		#ATP_IN_USE_FOR_COMPANY = COMPANY_CONTROLS(ATP_IN_USE)
		#EC_REPORT_TYPE	 = ""
		#COMPANY_EC_REPORT_TYPE = ""
		#EDI_ACTIVE_FLAG	= COMPANY_CONTROLS(SYS_EDI_ACTIVE_FLAG)
		#CO_TAX_ON_CASH		= COMPANY_CONTROLS(SYS_TAX_ON_CASH)
		#LEGAL_POSTING_CODE	= COMPANY_CONTROLS(SYS_LEGAL_POSTING_CODE)

		IF ( COMPANY_CONTROLS(PRICING_METHOD_STATE) = PARAMETER('PRICING_METHOD_OPTIONAL') )
			#PRICING_METHOD_OPTIONAL = #YES
		ELSE
			#PRICING_METHOD_OPTIONAL = #NO
		END_IF

		IF (COMPANY_CONTROLS(SYS_EC_STATS_REQUIRED) = #YES)
			IF (COMPANY_CONTROLS(SYS_ECSL_REQD) = #YES)
				IF (COMPANY_CONTROLS(SYS_SSD_SALES_REQD) = #YES)
					#COMPANY_EC_REPORT_TYPE = "B"
				ELSE
					#COMPANY_EC_REPORT_TYPE = "E"
				END_IF
			END_IF

			#EC_REPORT_TYPE = #COMPANY_EC_REPORT_TYPE
		END_IF

		IF (#SECURITY_ACTIVE = #YES)
			FIND IN SECURITY_TRAN_TYPES_VT &
				/WITH=SOURCE_MODULE=(PARAMETER("MODULE_SO")) &
				/WITH=SECURITY_TRANSACTION_TYPE=(PARAMETER("TTYPE_SO"))

			IF (%STATUS = %FAILURE  OR &
				SECURITY_TRAN_TYPES_VT(CREATE_TRANSACTIONS) <> #YES)
				MESSAGE/IDENTIFIER/BELL/WAIT P_00897,PARAMETER("TTYPE_SO")
				ROLLBACK
				EXIT(%FAILURE)
			ELSE
				#TRANSACTION_MAX	= SECURITY_TRAN_TYPES_VT(MAXIMUM_VALUE)
				#CURRENCY_OVERRIDE		   = SECURITY_TRAN_TYPES_VT(SYS_CURRENCY_OVERRIDE)
			END_IF
		END_IF

			! Security. Get a string of all accessible Warehouses.
			!
		PERFORM "GEMLB:LB_SECURITY_CODE_ACCESS" &
			((PARAMETER("MODULE_SO")), &
			 PARAMETER("ACCESS_TYPE_WAREHOUSE"), &
			 #ACCESSIBLE_WAREHOUSES)

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_10638
			EXIT (%FAILURE)
		END_IF

		IF (#ACCESSIBLE_WAREHOUSES = "##NONE##")
			MESSAGE/IDENTIFIER/BELL/WAIT P_10639,PARAMETER("MODULE_SO")
				EXIT (%FAILURE)
		END_IF

		FIND IN SOURCE_MODULES &
			/LOCK=NONE &
			/WITH=SOURCE_MODULE = PARAMETER("MODULE_TP") &
			/WITH=MODULE_IN_USE = #YES
		IF (%STATUS = %FAILURE)
			#SYS_TP_IN_USE = #NO
		ELSE
			#SYS_TP_IN_USE = #YES
		END_IF

		FIND IN SOURCE_MODULES &
			/LOCK=NONE &
			/WITH=SOURCE_MODULE = PARAMETER("MODULE_TM") &
			/WITH=MODULE_IN_USE = #YES

		IF (%STATUS = %FAILURE)
			#SYS_TM_IN_USE = #NO
		ELSE
			#SYS_TM_IN_USE = #YES

			FIND IN TM_CONTROLS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE = #COMPANY_CODE

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_93381
				EXIT(%FAILURE)
			END_IF

			#TM_FREIGHT_ALLOC_BASIS = TM_CONTROLS(TM_PRODUCT_FREIGHT_ALLOC)
			IF (#TM_FREIGHT_ALLOC_BASIS = "")
				MESSAGE/IDENTIFIER/BELL/WAIT P_93382
				EXIT(%FAILURE)
			END_IF
		END_IF

		#DEFAULT_DATE_MASK = PARAMETER("DEFAULT_DATE_MASK")
		FIND IN SYS_COUNTRIES &
			/LOCK=NONE &
			/WITH=SYS_COUNTRY = COMPANY_CONTROLS(SYS_COUNTRY)

		IF (%STATUS <> %FAILURE)
			#COUNTRY_DATE_MASK = LTRIM(TRIM(COMPRESS_ALL(SYS_COUNTRIES(SYS_DATE_MASK))))
			IF (LEN(#COUNTRY_DATE_MASK) > 1)
				#DEFAULT_DATE_MASK = SYS_COUNTRIES(SYS_DATE_MASK)
			END_IF
		END_IF

		! Default #OPT to blank as prep for a potential of
		! MODIFY_HEADER being selected in Order Totals.
		#OPT = ""

		! Prepare to show the requested date prompt on the header screen.
		FIND IN AR_CONTROLS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=DIVISION = #DEFAULT_AR_DIVISION

		IF (%STATUS = %SUCCESS)
			#SOP_REQUIRED_DATE_METHOD = AR_CONTROLS(SOP_REQUIRED_DATE_METHOD)
			IF (#SOP_REQUIRED_DATE_METHOD = #METHOD_RECEIPT)
				#REQUESTED_DATE_PROMPT = FIELD_PROMPT(SYS_DELIVERY_DATE)
			ELSE
				#REQUESTED_DATE_PROMPT = FIELD_PROMPT(SYS_SHIPPING_DATE)
			END_IF
		ELSE
			#SOP_REQUIRED_DATE_METHOD = #METHOD_DESPATCH
			#REQUESTED_DATE_PROMPT = FIELD_PROMPT(SYS_SHIPPING_DATE)
		END_IF

		COMMIT

		PERFORM ADD_VIRTUAL_TABLE
		PERFORM SETUP_CURRENCY_VT
		DELETE ALL FROM IC_DEMAND_SUPPLY_VT
		DELETE ALL FROM RS_SYS_MESSAGES
	END_BLOCK

	MENU_BLOCK MENU_1 /ROW=7 /COL=26 &
			/SOURCE=(MESSAGE("P_00255")) &
			/BACK=(GOTO END) &
			/EXIT=(GOTO END) &
			/EXIT_FORWARD=(GOTO END) &
			/ITEM=(MESSAGE("P_00255")),(MESSAGE("P_54037")),(PERFORM PRE_ENTRY) &
			/ITEM=(MESSAGE("P_00405")),(MESSAGE("P_54053")),(PERFORM PRE_MODIFY) &
			/ITEM=(MESSAGE("P_00113")),(MESSAGE("P_54028")),(PERFORM PRE_COPY) &
			/ITEM=(MESSAGE("P_54075")),(MESSAGE("P_54031")),(PERFORM PRE_TEMPLATE) &
			/ITEM=(MESSAGE("P_00257")),(MESSAGE("P_00263")),(GOTO END)

	BEGIN_BLOCK END

		PERFORM "GEMSOP:SOP_L_DELETE_VIRTUAL_TABLES"

		COMMIT

		START_TRANSACTION

		PERFORM "GEMLB:LB_S_L_UPDATE_DEMAND_SUPPLY"

		COMMIT

		FIND IN RS_SYS_MESSAGES &
			/LOCK=NONE &
			/WITH=RS_MESSAGE_SEVERITY=1

		IF (%STATUS = %SUCCESS)
			! Processing completed successfully with errors
			MESSAGE/IDENTIFIER/BELL P_13309
			PERFORM "GEMLB:LB_L_DISPLAY_MESSAGES" (3,#YES)
		ELSE
			FIND IN RS_SYS_MESSAGES &
				/LOCK=NONE &
				/WITH=RS_MESSAGE_SEVERITY=2

			IF (%STATUS = %SUCCESS)
				! Processing completed successfully with warnings
				MESSAGE/IDENTIFIER/BELL P_33381
				PERFORM "GEMLB:LB_L_DISPLAY_MESSAGES" (3,#YES)
			END_IF
		END_IF

		DELETE ALL FROM IC_DEMAND_SUPPLY_VT
		DELETE ALL FROM RS_SYS_MESSAGES

		COMMIT

	END_BLOCK

END_FORM


PROCEDURE_FORM EXITFORM
	
	BEGIN_BLOCK EXITFORM 
		
		START_TRANSACTION
		#ID          = PARAMETER("FACILITY_ID")
		#FUNCTION_ID = MESSAGE("P_33844")
		#PROCESS_KEY = #COMPANY_CODE & "/" & #DIVISION & "/" & #ORDER_NUMBER
		
		PERFORM "GEMLB:LB_L_PROCESS_CONTROLS" LB_L_PROCESS_CONTROLS &
					(#COMPANY_CODE, &
					 ("DELETE"), 0, &
					 (#FUNCTION_ID), &
					 (#PROCESS_KEY), &
					 (#ID), &
					 "", &
					 #ERROR_OCCURRED, #ERROR_MESSAGE )
		IF(%STATUS = %FAILURE OR #ERROR_OCCURRED)
			ERROR/TEXT_ONLY/WAIT #ERROR_MESSAGE
			EXIT(%FAILURE)
		END_IF 	
		
		FIND IN SALES_ORDER_HEADERS &
			/LOCK=WRITE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=DIVISION = #DIVISION &
			/WITH=ORDER_NUMBER = #ORDER_NUMBER
			
		SALES_ORDER_HEADERS(STATUS_FLAG) = ""
		
		COMMIT		

		START_TRANSACTION

		PERFORM "GEMLB:LB_S_L_UPDATE_DEMAND_SUPPLY"

		COMMIT

		FIND IN RS_SYS_MESSAGES &
			/LOCK=NONE &
			/WITH=RS_MESSAGE_SEVERITY=1

		IF (%STATUS = %SUCCESS)
			! Processing completed successfully with errors
			MESSAGE/IDENTIFIER/BELL P_13309
			PERFORM "GEMLB:LB_L_DISPLAY_MESSAGES" (3,#YES)
		ELSE
			FIND IN RS_SYS_MESSAGES &
				/LOCK=NONE &
				/WITH=RS_MESSAGE_SEVERITY=2

			IF (%STATUS = %SUCCESS)
				! Processing completed successfully with warnings
				MESSAGE/IDENTIFIER/BELL P_33381
				PERFORM "GEMLB:LB_L_DISPLAY_MESSAGES" (3,#YES)
			END_IF
		END_IF

		DELETE ALL FROM IC_DEMAND_SUPPLY_VT
		DELETE ALL FROM RS_SYS_MESSAGES

		COMMIT

	END_BLOCK

END_FORM 


PROCEDURE_FORM PRE_ENTRY
	! /USE_IF is not checked on a MENU_BLOCK once the menu is being executed.
	! This form is an intermediary to handle the MODIFY_HEADER option from Order Totals.
	BEGIN_BLOCK CHECK_FOR_MODIFY_HEADER

		DELETE ALL FROM IC_DEMAND_SUPPLY_VT
		DELETE ALL FROM RS_SYS_MESSAGES

		PERFORM ENTRY
		IF (%STATUS = %SUCCESS)
			START_TRANSACTION

			PERFORM "GEMLB:LB_S_L_UPDATE_DEMAND_SUPPLY"

			COMMIT

			FIND IN RS_SYS_MESSAGES &
				/LOCK=NONE &
				/WITH=RS_MESSAGE_SEVERITY=1

			IF (%STATUS = %SUCCESS)
				! Processing completed successfully with errors
				MESSAGE/IDENTIFIER/BELL P_13309
				PERFORM "GEMLB:LB_L_DISPLAY_MESSAGES" (3,#YES)
			ELSE
				FIND IN RS_SYS_MESSAGES &
					/LOCK=NONE &
					/WITH=RS_MESSAGE_SEVERITY=2

				IF (%STATUS = %SUCCESS)
					! Processing completed successfully with warnings
					MESSAGE/IDENTIFIER/BELL P_33381
					PERFORM "GEMLB:LB_L_DISPLAY_MESSAGES" (3,#YES)
				END_IF
			END_IF

			DELETE ALL FROM IC_DEMAND_SUPPLY_VT
			DELETE ALL FROM RS_SYS_MESSAGES

			COMMIT

			IF (#OPT = "HEADER")
				PERFORM PRE_MODIFY
			ELSE
				! Exit and re-enter ENTRY to clear /REMAIN forms
				GOTO CHECK_FOR_MODIFY_HEADER
			END_IF
		END_IF
	END_BLOCK
END_FORM


PROCEDURE_FORM PRE_MODIFY
	! /USE_IF is not checked on a MENU_BLOCK once the menu is being executed.
	! This form is an intermediary to handle the MODIFY_HEADER option from Order Totals.
	BEGIN_BLOCK CHECK_FOR_MODIFY_HEADER

		DELETE ALL FROM IC_DEMAND_SUPPLY_VT
		DELETE ALL FROM RS_SYS_MESSAGES

		PERFORM MODIFY

		START_TRANSACTION

		PERFORM "GEMLB:LB_S_L_UPDATE_DEMAND_SUPPLY"

		COMMIT

		FIND IN RS_SYS_MESSAGES &
			/LOCK=NONE &
			/WITH=RS_MESSAGE_SEVERITY=1

		IF (%STATUS = %SUCCESS)
			! Processing completed successfully with errors
			MESSAGE/IDENTIFIER/BELL P_13309
			PERFORM "GEMLB:LB_L_DISPLAY_MESSAGES" (3,#YES)
		ELSE
			FIND IN RS_SYS_MESSAGES &
				/LOCK=NONE &
				/WITH=RS_MESSAGE_SEVERITY=2

			IF (%STATUS = %SUCCESS)
				! Processing completed successfully with warnings
				MESSAGE/IDENTIFIER/BELL P_33381
				PERFORM "GEMLB:LB_L_DISPLAY_MESSAGES" (3,#YES)
			END_IF
		END_IF

		DELETE ALL FROM IC_DEMAND_SUPPLY_VT
		DELETE ALL FROM RS_SYS_MESSAGES

		COMMIT

		IF (#OPT = "HEADER")
			GOTO CHECK_FOR_MODIFY_HEADER
		END_IF

	END_BLOCK

END_FORM


PROCEDURE_FORM PRE_COPY
	! /USE_IF is not checked on a MENU_BLOCK once the menu is being executed.
	! This form is an intermediary to handle the MODIFY_HEADER option from Order Totals.
	BEGIN_BLOCK CHECK_FOR_MODIFY_HEADER

		DELETE ALL FROM IC_DEMAND_SUPPLY_VT
		DELETE ALL FROM RS_SYS_MESSAGES

		#COPY_REACH_CHECK_FALG = #YES

		PERFORM COPY

		START_TRANSACTION

		PERFORM "GEMLB:LB_S_L_UPDATE_DEMAND_SUPPLY"

		COMMIT

		FIND IN RS_SYS_MESSAGES &
			/LOCK=NONE &
			/WITH=RS_MESSAGE_SEVERITY=1

		IF (%STATUS = %SUCCESS)
			! Processing completed successfully with errors
			MESSAGE/IDENTIFIER/BELL P_13309
			PERFORM "GEMLB:LB_L_DISPLAY_MESSAGES" (3,#YES)
		ELSE
			FIND IN RS_SYS_MESSAGES &
				/LOCK=NONE &
				/WITH=RS_MESSAGE_SEVERITY=2

			IF (%STATUS = %SUCCESS)
				! Processing completed successfully with warnings
				MESSAGE/IDENTIFIER/BELL P_33381
				PERFORM "GEMLB:LB_L_DISPLAY_MESSAGES" (3,#YES)
			END_IF
		END_IF

		DELETE ALL FROM IC_DEMAND_SUPPLY_VT
		DELETE ALL FROM RS_SYS_MESSAGES

		COMMIT

		IF (#OPT = "HEADER")
			PERFORM PRE_MODIFY
		END_IF

	END_BLOCK

END_FORM


PROCEDURE_FORM PRE_TEMPLATE

	BEGIN_BLOCK CHECK_FOR_MODIFY_HEADER

		DELETE ALL FROM IC_DEMAND_SUPPLY_VT
		DELETE ALL FROM RS_SYS_MESSAGES

		PERFORM TEMPLATE

		START_TRANSACTION

		PERFORM "GEMLB:LB_S_L_UPDATE_DEMAND_SUPPLY"

		COMMIT

		FIND IN RS_SYS_MESSAGES &
			/LOCK=NONE &
			/WITH=RS_MESSAGE_SEVERITY=1

		IF (%STATUS = %SUCCESS)
			! Processing completed successfully with errors
			MESSAGE/IDENTIFIER/BELL P_13309
			PERFORM "GEMLB:LB_L_DISPLAY_MESSAGES" (3,#YES)
		ELSE
			FIND IN RS_SYS_MESSAGES &
				/LOCK=NONE &
				/WITH=RS_MESSAGE_SEVERITY=2

			IF (%STATUS = %SUCCESS)
				! Processing completed successfully with warnings
				MESSAGE/IDENTIFIER/BELL P_33381
				PERFORM "GEMLB:LB_L_DISPLAY_MESSAGES" (3,#YES)
			END_IF
		END_IF

		DELETE ALL FROM IC_DEMAND_SUPPLY_VT
		DELETE ALL FROM RS_SYS_MESSAGES

		COMMIT

	END_BLOCK

END_FORM


FORM ENTRY /ROW=3 /COL=2 /HEIGHT=21 /WIDTH=78 &
	/TITLE=(MESSAGE("P_50131"))

	BEGIN_BLOCK SETUP
		#FIRST_TIME = "TRUE"
		#MAIN_OPT = "ENTRY"
		#EDIT_MODE = ""		
		#DELIVERY_ADDRESS_CODE=""
		#NEW_DELIVERY_ADDRESS=""
		#CUSTOMER_NUMBER=""
		#NEW_CUST=""
		#NEW_DIV=""
		#DIVISION=""
		#DIVISION_NAME=""
		#COPY_REACH_CHECK_FALG = #NO

		START_TRANSACTION

        CLEAR_BUFFER SECURITY_PERIOD_ACCESS_VT

		CLEAR_BUFFER SALES_ORDER_HEADERS

		SALES_ORDER_HEADERS(COMPANY_CODE) = #COMPANY_CODE
		SALES_ORDER_HEADERS(ORDER_CYCLE)  = #ORDER_CYCLE

		SALES_ORDER_TYPES(COMPANY_CODE) = #COMPANY_CODE

		DELETE ALL FROM SALES_MISC_ADJUSTMENTS_VT
	END_BLOCK

	BEGIN_BLOCK SETUP_2
		#ORDER_NUMBER	= ""
		#CURRENCY_DATE	= ""
		#CURRENCY_RATE	= ""
		#CURRENCY_CODE	= ""
		#CURRENCY_RATIO_INDIC	  = ""
		#CURRENCY_FIXED	= ""
		#CURRENCY_DESC	= ""
		#RATE_AUTHORITY = ""
		#RATE_TYPE	= ""

		#DESC		= ""
		#CUSTOMER_REFERENCE = ""
		#ALREADY_WARN		= #NO
		#ALREADY_CREDIT_HOLD	= #NO

		SALES_ORDER_HEADERS(SYS_CURRENCY_CODE)  = ""
		SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE) = ""
		
		#HEADER_FINAL_ADDRESS_CODE = ""
		#HEADER_COUNTRY_CODE       = ""
		#HEADER_STATE_PROVINCE     = ""
		#HEADER_CITY               = ""

		! Displays prompt for requested date field
		DISPLAY DEFAULTS
	END_BLOCK

	BEGIN_BLOCK CHECK_DIVISION_CHANGE
		IF (#NEW_DIV <> "")
			SALES_ORDER_HEADERS(DIVISION) = #NEW_DIV
			#NEW_DIV = ""

			OUTPUT_BLOCK NEW_DIV_REDISPLAY /ROW=2 /COL=15 &
				/PROMPT=(FIELD_PROMPT(DIVISION)) &
				/SOURCE=SALES_ORDER_HEADERS(DIVISION)

			GOTO EXTRACT_DIVISION
		END_IF
	END_BLOCK

	INPUT_BLOCK DIVISION /ROW=2 /COL=15 &
			/PROMPT=(FIELD_PROMPT(DIVISION)) &
			/SOURCE=(#DEFAULT_AR_DIVISION) &
			/TARGET=SALES_ORDER_HEADERS(DIVISION) &
			/LOV=SECURITY_PERIOD_ACCESS_VT(SYS_ACCESS_CODE,CODE_DESCRIPTION) &
			/LOV_WITH=SYS_ACCESS_TYPE=(PARAMETER("ACCESS_TYPE_DIVISION")) &
			/LOV_WITH=SOURCE_MODULE=(PARAMETER("MODULE_SO")) &
			/LOV_WITH=SYS_ALLOW_ACCESS=#YES

	BEGIN_BLOCK EXTRACT_DIVISION
		IF ((#DIVISION <> "") &
		AND (SALES_ORDER_HEADERS(DIVISION) <> #DIVISION))
			#DIVISION = ""
			DISPLAY CLEAN
			#FIRST_TIME = "TRUE"

			OUTPUT_BLOCK BLANK_CUSTOMER /ROW=3 /COL=15 &
				/PROMPT=(FIELD_SHORT_PROMPT(CUSTOMER_NUMBER)) &
				/SOURCE= " "

			PERFORM CLEAR_ADDRESS

			#NEW_DIV = SALES_ORDER_HEADERS(DIVISION)
			ROLLBACK
			GOTO SETUP
		END_IF

		FIND IN AR_CONTROLS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=DIVISION = SALES_ORDER_HEADERS(DIVISION)

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00354
			GOTO DIVISION
		END_IF

		FIND IN SECURITY_PERIOD_ACCESS_VT &
			/WITH=SYS_ACCESS_TYPE=(PARAMETER("ACCESS_TYPE_DIVISION")) &
			/WITH=SYS_ACCESS_CODE=SALES_ORDER_HEADERS(DIVISION) &
			/WITH=SOURCE_MODULE=(PARAMETER("MODULE_SO")) &

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00447
			GOTO DIVISION
		END_IF

		IF (SECURITY_PERIOD_ACCESS_VT(SYS_ALLOW_ACCESS) <> #YES)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00756
			GOTO DIVISION
		END_IF

		IF (AR_CONTROLS(SOP_ACTIVE)<>#YES)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00243
			EXIT
		END_IF

		! Record the Division Name before it's overwritten by the GL_ELEMENT
		! retrieved from the TM find below.
		#DIVISION_NAME = SECURITY_PERIOD_ACCESS_VT(CODE_DESCRIPTION)

		IF (#SYS_TM_IN_USE = #YES)
			FIND IN SECURITY_PERIOD_ACCESS_VT &
				/WITH=SYS_ACCESS_TYPE=(PARAMETER("ACCESS_TYPE_DIVISION")) &
				/WITH=SYS_ACCESS_CODE=SALES_ORDER_HEADERS(DIVISION) &
				/WITH=SOURCE_MODULE=(PARAMETER("MODULE_TM")) &

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_93383
				#SYS_TM_IN_USE = #NO
				GOTO SETUP_DIV_VARS
			END_IF

			IF (SECURITY_PERIOD_ACCESS_VT(SYS_ALLOW_ACCESS) <> #YES)
				MESSAGE/IDENTIFIER/BELL/WAIT P_93384
				#SYS_TM_IN_USE = #NO
				GOTO SETUP_DIV_VARS
			END_IF

		END_IF
	END_BLOCK

	BEGIN_BLOCK SETUP_DIV_VARS
		#DIVISION		  	= SALES_ORDER_HEADERS(DIVISION)
		#CONTRACT_PRICES	= AR_CONTROLS(CONTRACT_PRICES_IN_USE)
		#PROMOTION_PRICES	  = AR_CONTROLS(PROMOTION_PRICES_IN_USE)
		#CONTRACT_OVERRIDE	  = AR_CONTROLS(CONTRACT_PRICES_OVERRIDE)
		#PROMOTION_OVERRIDE		= AR_CONTROLS(PROMOTION_PRICE_OVERRIDE)
		#PRICE_OVERRIDE	 	= AR_CONTROLS(SALES_PRICE_OVERRIDE)
		#PROM_OVER_CONTRACTS		 = AR_CONTROLS(PROMOTION_OVERRIDE_CONTRACTS)
		#LD_OVERRIDE		   	= AR_CONTROLS(LINE_DISCOUNT_OVERRIDE)
		#LD_INV	 		= AR_CONTROLS(LINE_DISCOUNT_INV_FLAG)
		#LD_CUS	 		= AR_CONTROLS(LINE_DISCOUNT_CUST_FLAG)
		#LD_BREAK				= AR_CONTROLS(LINE_DISCOUNT_BREAK_ON)
		#LD_CALC		= AR_CONTROLS(LINE_DISCOUNT_CALC_FLAG)
		#LD_IN_USE			 	= AR_CONTROLS(LINE_DISCOUNT_IN_USE)
		#OD_IN_USE			 	= AR_CONTROLS(ORDER_DISCOUNT_IN_USE)
		#OD_BREAK		= AR_CONTROLS(ORDER_DISCOUNT_BREAK_ON)
		#OD_CALC		= AR_CONTROLS(ORDER_DISCOUNT_CALC_FLAG)
		#TAX_FLAG				= AR_CONTROLS(TAX_BASED_ON)
		#FREIGHT_TAXABLE	= AR_CONTROLS(FREIGHT_TAXABLE)
		#MISC_TAXABLE	   	= AR_CONTROLS(MISCELLANEOUS_TAXABLE)
		#DIV_TAX_ON_CASH	= AR_CONTROLS(SYS_TAX_ON_CASH)
		#DEF_FREIGHT_TAX_CODE	= AR_CONTROLS(DEF_FREIGHT_TAX_CODE)
		#DEF_MISC_TAX_CODE	  = AR_CONTROLS(DEF_MISC_TAX_CODE)
		#DEF_PART_TAX_CODE	  = AR_CONTROLS(DEF_PRODUCT_TAX_CODE)
		#DEF_CUST_TAX_CODE	  = AR_CONTROLS(DEF_CUSTOMER_TAX_CODE)
		#PHYSICAL_IN_USE	= AR_CONTROLS(PHYSICAL_UNITS_IN_USE)
		#DEF_WEIGHT_UNIT	= AR_CONTROLS(DEFAULT_WEIGHT_UNIT)
		#DEF_VOLUME_UNIT	= AR_CONTROLS(DEFAULT_VOLUME_UNIT)
		#BASE_CURRENCY_CODE		= AR_CONTROLS(SYS_CURRENCY_CODE)
		#CURRENCY_METHOD	= AR_CONTROLS(SYS_CURRENCY_METHOD)
		#DATE_CODE			 	= AR_CONTROLS(SYS_DATE_CODE)
		#PERMIT_RESERVATION		= AR_CONTROLS(PERMIT_RESERVATION)
		#ATP_AT_ORDER_ENTRY		= AR_CONTROLS(ATP_AT_ORDER_ENTRY)
		#IC_ATP_SELECTION_METHOD	= AR_CONTROLS(IC_ATP_SELECTION_METHOD)
		#SOP_REQUIRED_DATE_METHOD	= AR_CONTROLS(SOP_REQUIRED_DATE_METHOD)
		#SOP_LEAD_TIME			= AR_CONTROLS(SALES_ORDER_LEAD_TIME)
		IF ( #SYS_TP_IN_USE = #YES )
			#TP_PROMOTIONS_IN_USE		= AR_CONTROLS(TP_PROMOTIONS_IN_USE)
		ELSE
			#TP_PROMOTIONS_IN_USE		= #NO
		END_IF
		#LD_AVAILABLE		 		= AR_CONTROLS(LINE_DISCOUNT_IN_USE)

		#MANDATORY_CUSTOMER_PO          = AR_CONTROLS(SOP_CUSTOMER_PO_REQUIRED)
		IF (AR_CONTROLS(SOP_CUSTOMER_PO_REQUIRED) = "")
			#MANDATORY_CUSTOMER_PO = 0
		END_IF

		#AR_FREIGHT_IN_USE	= AR_CONTROLS(SOP_AR_FREIGHT_IN_USE)
		IF (AR_CONTROLS(SOP_AR_FREIGHT_IN_USE) = "")
			#AR_FREIGHT_IN_USE = #NO
		END_IF

		#DIV_ALLOWS_FREIGHT_OVERRIDE	= AR_CONTROLS(SOP_ALLOW_FREIGHT_OVERRIDE)
		#DIV_LINE_DISC_FREIGHT_INC	= AR_CONTROLS(SOP_LINE_DISC_FREIGHT_INCLUSIVE)

		#OLD_DELIVERY_ADDRESS_CODE = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)

		IF (#ATP_IN_USE_FOR_COMPANY <> #YES)
			#ATP_AT_ORDER_ENTRY = #NO
		END_IF

		IF (#COMPANY_EC_REPORT_TYPE <> "")
			PERFORM GET_HOME_STATE
			IF (%STATUS = %FAILURE) EXIT
		END_IF

		DISPLAY DEFAULTS

	END_BLOCK

	OUTPUT_BLOCK DIVISION_DESC /ROW=2 /COL=18 &
			/SOURCE=(#DIVISION_NAME) &
			/USING=AR_CONTROLS(DIVISION_NAME)

	BEGIN_BLOCK CHECK_CUSTOMER_CHANGE
		IF (#NEW_CUST <> "")
			SALES_ORDER_HEADERS(CUSTOMER_NUMBER) = #NEW_CUST
			#NEW_CUST = ""
			GOTO FIND_CUSTOMER
		END_IF
	END_BLOCK

	INPUT_BLOCK CUSTOMER_NUMBER /ROW=3 /COL=15 &
			/PROMPT=(FIELD_SHORT_PROMPT(CUSTOMER_NUMBER)) &
			/TARGET=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/LOV=CUSTOMERS(CUSTOMER_NUMBER,CUSTOMER_NAME) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=DIVISION=#DIVISION &
			/LOV_WITH=ACTIVATION_STATUS = (PARAMETER("STATUS_ACTIVE")) &
			/USER_KEY18=(PERFORM "GEMSOP:SOP_I_CUSTOMERS")

	BEGIN_BLOCK FIND_CUSTOMER
		IF ((#CUSTOMER_NUMBER <> "") &
		AND (SALES_ORDER_HEADERS(CUSTOMER_NUMBER) <> #CUSTOMER_NUMBER))

			DISPLAY CLEAN
			#FIRST_TIME = "TRUE"
			#NEW_CUST = SALES_ORDER_HEADERS(CUSTOMER_NUMBER)
			#NEW_DIV= SALES_ORDER_HEADERS(DIVISION)
			#CUSTOMER_NUMBER = ""

			OUTPUT_BLOCK DIVISION_REDISPLAY /ROW=2 /COL=15 &
				/PROMPT=(FIELD_PROMPT(DIVISION)) &
				/SOURCE=SALES_ORDER_HEADERS(DIVISION)

			PERFORM CLEAR_ADDRESS
			ROLLBACK
			GOTO SETUP
		END_IF

		FIND IN CUSTOMERS &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/LOCK=NONE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00350
			GOTO CUSTOMER_NUMBER
		END_IF
		IF (CUSTOMERS(ACTIVATION_STATUS)=(PARAMETER("STATUS_DELETE")))
			MESSAGE/IDENTIFIER/BELL/WAIT P_22091
			GOTO CUSTOMER_NUMBER
		END_IF

		IF (CUSTOMERS(ACTIVATION_STATUS) <> (PARAMETER("STATUS_ACTIVE")))
			MESSAGE/IDENTIFIER/BELL/WAIT P_02200
			GOTO CUSTOMER_NUMBER
		END_IF																	

		IF (CUSTOMERS(STOP_CODE) <> "")
			FIND IN STOP_CODES &
				/LOCK=NONE &
				/WITH=STOP_CODE=CUSTOMERS(STOP_CODE)

			MESSAGE/IDENTIFIER/BELL/WAIT P_00881,CUSTOMERS(STOP_CODE),STOP_CODES(CODE_DESCRIPTION)
			GOTO CUSTOMER_NUMBER
		END_IF

		IF ( CUSTOMERS(TP_DISABLE_PROMOTIONS) = #YES )
			#LD_IN_USE = #LD_AVAILABLE
			#TP_PROMOTIONS_IN_USE = #NO
			#TP_PROMOTIONS_AVAILABLE = #NO
		END_IF
		IF ( #TP_PROMOTIONS_IN_USE = #YES )
			#LD_IN_USE = #NO
			#TP_PROMOTIONS_AVAILABLE = #YES
		ELSE
			#TP_PROMOTIONS_IN_USE = #NO
			#TP_PROMOTIONS_AVAILABLE = #NO
		END_IF
		SALES_ORDER_HEADERS(TP_PROMOTIONS_IN_USE) = #TP_PROMOTIONS_IN_USE

		#LD_CUST_GROUP		= CUSTOMERS(LINE_DISCOUNT_GROUP)
		#OD_CUST_GROUP		= CUSTOMERS(ORDER_DISCOUNT_GROUP)
		#PRICE_CODE		= CUSTOMERS(PRICE_CODE)
		#ADDR_PRICE_CODE	= CUSTOMERS(PRICE_CODE)
		#CUST_PRICE_CODE	= CUSTOMERS(PRICE_CODE)
		#CUSTOMER_NUMBER	= SALES_ORDER_HEADERS(CUSTOMER_NUMBER)
		#CUSTOMER_NAME		= CUSTOMERS(CUSTOMER_NAME)
		#CUST_PERMIT_RESERVATION	= CUSTOMERS(PERMIT_RESERVATION)
		#AUTO_RESERVE		= CUSTOMERS(AUTO_RESERVE)
		#ALLOW_ORDER_CLOSE	= CUSTOMERS(SOP_ALLOW_ORDER_CLOSE)
		#CUST_FREIGHT_CONTRACT	= CUSTOMERS(SYS_FREIGHT_CONTRACT_NUMBER)
		#CUST_FREIGHT_MODE	= CUSTOMERS(SYS_FREIGHT_MODE)
		#CUST_SALESPERSON   = CUSTOMERS(SALESPERSON_CODE)
		#CUST_BROKER        = CUSTOMERS(BROKER_CODE)

		IF (SALES_ORDER_HEADERS(SALES_ORDER_TYPE) = "")
			SALES_ORDER_HEADERS(SALES_ORDER_TYPE) = CUSTOMERS(SALES_ORDER_TYPE)
		END_IF

		IF (SALES_ORDER_HEADERS(SYS_CURRENCY_CODE)="")
			#DEFAULT_CURRENCY_CODE = CUSTOMERS(SYS_CURRENCY_CODE)
		END_IF

		FIND IN SYS_COUNTRIES &
				/LOCK=NONE &
				/WITH=SYS_COUNTRY=CUSTOMERS(SYS_COUNTRY)

		#PHONE_MASK=SYS_COUNTRIES(SYS_PHONE_MASK)
	END_BLOCK

	OUTPUT_BLOCK CUSTOMER_REDISPLAY /ROW=3 /COL=15 &
		/PROMPT=(FIELD_SHORT_PROMPT(CUSTOMER_NUMBER))&
		/SOURCE=SALES_ORDER_HEADERS(CUSTOMER_NUMBER)

	OUTPUT_BLOCK CUSTOMER_NAME /ROW=3 /COL=25 &
			/SOURCE=(CUSTOMERS(CUSTOMER_NAME))

	BEGIN_BLOCK CPANEL	 
		PERFORM HEADER_CPANEL ("ADD",(#DIVISION),(#CUSTOMER_NUMBER),"")
	END_BLOCK


	!Change 013
	BEGIN_BLOCK LOOKUP_CONTACTS
		FIND IN VOL_CUSTOMER_CONTACTS &
			/WITH=CUSTOMER_CONTACT=SALES_ORDER_HEADERS(CUSTOMER_CONTACT) &
			/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/WITH=CONTACT_TYPE="Sales"
	END_BLOCK
	!End Change 013

	 
	BEGIN_BLOCK CREDIT_CHECK
		! At this point the credit limit check should determine whether or not
		! the customer is within his limits before further entry

		SALES_ORDER_HEADERS(CREDIT_STATUS_CODE)=""

		#OLD_BASE_TOTAL = 0
		PERFORM "GEMLB:SOP_L_CREDIT_LIMITS" &
				(#COMPANY_CODE, &
				 #DIVISION, &
				 #CUSTOMER_NUMBER, &
				 0, &
				 (PARAMETER("SOP_STAGE_ORDER")), &
				 (#OLD_BASE_TOTAL), &
				 (#EDIT_MODE), &
				  #NO,	&
				  "", &
				  "", &
				  #ACTION, &
				  #MAN_AUTO, &
				  #CREDIT_STATUS_CODE, &
				  #MESSAGE, &
				  "")

		IF (%STATUS = %FAILURE)
			ROLLBACK
			EXIT (%FAILURE)
		END_IF

		IF (#ACTION = (PARAMETER("CREDIT_OK"))) GOTO DEFAULT_SETUP

		IF (#ACTION = (PARAMETER("CREDIT_REJECT")))
			ERROR (#MESSAGE)
			EXIT(%FAILURE)
		END_IF

		IF (#ACTION = (PARAMETER("CREDIT_HOLD")))
			ERROR (#MESSAGE)
			SALES_ORDER_HEADERS(CREDIT_STATUS_CODE)=#CREDIT_STATUS_CODE

			IF (#MAN_AUTO = (PARAMETER("AM_FLAG_M")))
				PERFORM CREDIT_STATUS_CODE
				SALES_ORDER_HEADERS(CREDIT_STATUS_CODE)=#CREDIT_STATUS_CODE
				GOTO CREDIT_HOLD_STATUS
			ELSE
				GOTO CREDIT_HOLD_STATUS
			END_IF
		END_IF

		IF (#ACTION = (PARAMETER("CREDIT_WARN")))
			ERROR (#MESSAGE)
			GOTO DEFAULT_SETUP
		END_IF

		GOTO DEFAULT_SETUP
	END_BLOCK

	BEGIN_BLOCK CREDIT_HOLD_STATUS
		OUTPUT_BLOCK /ROW=17 /COL=28 &
			/PROMPT=(FIELD_PROMPT(CREDIT_STATUS_CODE)) &
			/SOURCE=(SALES_ORDER_HEADERS(CREDIT_STATUS_CODE))

		FIND IN CREDIT_HOLD_STATUS_CODES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=CREDIT_STATUS_CODE = SALES_ORDER_HEADERS(CREDIT_STATUS_CODE)

		IF (%STATUS=%FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_52251
			PERFORM CREDIT_STATUS_CODE
			SALES_ORDER_HEADERS(CREDIT_STATUS_CODE)=#CREDIT_STATUS_CODE
			GOTO CREDIT_HOLD_STATUS
		END_IF
	END_BLOCK

	OUTPUT_BLOCK HOLD_STATUS_DESC /ROW=17 /COL=35 &
			/SOURCE=(CREDIT_HOLD_STATUS_CODES(DESCRIPTION))

	BEGIN_BLOCK DEFAULT_SETUP
		PERFORM "GEMSOP:SOP_S_L_CONTROL_MAINTENANCE" HEADER_CHECK_CUSTOMER (#COMPANY_CODE, &
																			#DIVISION, &
																			(SALES_ORDER_HEADERS(CUSTOMER_NUMBER)),"","", &
																			#RESTRICT_CUSTOMER_FLAG,"")
		IF ( #RESTRICT_CUSTOMER_FLAG = #YES ) 
			#PARAMETER_CUST = TRIM(SALES_ORDER_HEADERS(CUSTOMER_NUMBER)) & "," & TRIM(#DIVISION)
			MESSAGE/IDENTIFIER/BELL/WAIT P_37168,#PARAMETER_CUST
		END_IF
	     
		 IF (#FIRST_TIME = "TRUE")
		SALES_ORDER_HEADERS(STATUS_FLAG)	= #NO
			! This flag will be reset once the order has been fully
			! entered, thus preventing this order being picked or
			! despatched prematurely.
			!
		SALES_ORDER_HEADERS(USERNAME)		= %USERNAME
		SALES_ORDER_HEADERS(SYSTEM_DATE)	= %NOW
		SALES_ORDER_HEADERS(ORDER_DATE)		= %TODAY
		!Change 017 - DBM - Default delivery date is 1-1-2099
		!SALES_ORDER_HEADERS(SYS_REQUESTED_DATE)	= DATE(DAYS((%TODAY)) + #SOP_LEAD_TIME)
		SALES_ORDER_HEADERS(SYS_REQUESTED_DATE)	= "1-JAN-2099"
		!Change 017 End
		SALES_ORDER_HEADERS(SYS_SHIPPING_DATE)	= %TODAY
		SALES_ORDER_HEADERS(SYS_DELIVERY_DATE)	= %TODAY
		SALES_ORDER_HEADERS(REQUIRED_DATE)	  = SALES_ORDER_HEADERS(SYS_SHIPPING_DATE)
		SALES_ORDER_HEADERS(HOLD_STATUS_CODE)	  = ""

		SALES_ORDER_HEADERS(MP_INVOICE_CUSTOMER)	= CUSTOMERS(MP_INVOICE_CUSTOMER)
		SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE) = CUSTOMERS(DEFAULT_ADDR)
		SALES_ORDER_HEADERS(MP_SHIPPING_CUSTOMER)	= CUSTOMERS(MP_SHIPPING_CUSTOMER)
		SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE) = CUSTOMERS(DEFAULT_DELIVERY_ADDR_CODE)
		SALES_ORDER_HEADERS(AR_DRAFT_PAYMENT_TYPE) = CUSTOMERS(AR_DRAFT_PAYMENT_TYPE)
		SALES_ORDER_HEADERS(SOP_PRINT_CONF_FLAG) = CUSTOMERS(SOP_PRINT_CONF_FLAG)

		IF ((#AR_FREIGHT_IN_USE = #YES) OR (#SYS_TM_IN_USE = #YES))
			SALES_ORDER_HEADERS(SOP_SHIPPING_TERMS_CODE) = CUSTOMERS(SOP_SHIPPING_TERMS_CODE)
		ELSE
			SALES_ORDER_HEADERS(SOP_SHIPPING_TERMS_CODE) = ""
		END_IF

		IF (SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)="")
			SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)=SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)
		END_IF

		IF ((#PHYSICAL_IN_USE=#YES) &
		OR  (#COMPANY_EC_REPORT_TYPE <> "") &
		OR  (#SYS_TM_IN_USE = #YES) &
		OR  (#AR_FREIGHT_IN_USE = #YES))
			SALES_ORDER_HEADERS(WEIGHT_UOM)=#DEF_WEIGHT_UNIT
			SALES_ORDER_HEADERS(VOLUME_UOM)=#DEF_VOLUME_UNIT
		END_IF

		SALES_ORDER_HEADERS(SYS_CURRENCY_CODE) = ""
		SALES_ORDER_HEADERS(SYS_PRINT_PART_DETAIL) = #NO
		SALES_ORDER_HEADERS(SOP_DESTINATION_WAREHOUSE) = ""
	     END_IF
	END_BLOCK

	BEGIN_BLOCK CUSTOMER_PO
	! Customer PO and Customer Reference are synonymous

		INPUT_BLOCK CUSTOMER_REF_1 /ROW=4 /COL=15 &
			/TARGET=SALES_ORDER_HEADERS(CUSTOMER_REFERENCE) &
			/PROMPT=(MESSAGE("P_13029")) &
			/USE_IF=(#MANDATORY_CUSTOMER_PO = 0)

		INPUT_BLOCK CUSTOMER_REF_2 /ROW=4 /COL=15 &
			/TARGET=#CUSTOMER_REFERENCE &
			/SOURCE=SALES_ORDER_HEADERS(CUSTOMER_REFERENCE) &
			/PROMPT=(MESSAGE("P_13029")) &
			/USING=SALES_ORDER_HEADERS(CUSTOMER_REFERENCE),REQUIRED &
			/USE_IF=(#MANDATORY_CUSTOMER_PO > 0)

		IF (#MANDATORY_CUSTOMER_PO = 0) GOTO DELIVERY_ADDRESS_CODE

		PERFORM CUSTOMER_PO_CHECK ((#MANDATORY_CUSTOMER_PO), (#CUSTOMER_REFERENCE), "", #R_PASS)
		IF (#R_PASS = #YES)
			SALES_ORDER_HEADERS(CUSTOMER_REFERENCE) = #CUSTOMER_REFERENCE
		ELSE
			GOTO CUSTOMER_REF_2
		END_IF
	END_BLOCK
	
	BEGIN_BLOCK CHECK_ADDRESS_CHANGE
		IF (#NEW_DELIVERY_ADDRESS <> "")
			SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE) = #NEW_DELIVERY_ADDRESS
			#NEW_DELIVERY_ADDRESS = ""
			GOTO DISPLAY_ADDRESS
		END_IF
	END_BLOCK

	INPUT_BLOCK DELIVERY_ADDRESS_CODE /ROW=6 /COL=15 &
			/TARGET=SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE) &
			/PROMPT=(MESSAGE("P_00318")) &
			/USING=REQUIRED &
			/LOV=CUSTOMER_ADDRESSES(ADDRESS_CODE,CUSTOMER_NAME,SYS_POSTAL_CODE) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=DIVISION=#DIVISION &
			/LOV_WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/LOV_WITH=ACTIVATION_STATUS = (PARAMETER("STATUS_ACTIVE")) &
			/USER_KEY1=(PERFORM "GEMSYS:SYS_M_ADD_CUSTOMER_ADDRESSES" &
					(#DIVISION,#CUSTOMER_NUMBER,SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE),#TAX_FLAG))


	BEGIN_BLOCK DISPLAY_ADDRESS
		IF ((#DELIVERY_ADDRESS_CODE <> "") &
		AND (SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE) <> #DELIVERY_ADDRESS_CODE))
			
			#FIRST_TIME = "TRUE"
			#NEW_CUST = SALES_ORDER_HEADERS(CUSTOMER_NUMBER)
			#NEW_DIV= SALES_ORDER_HEADERS(DIVISION)
			#NEW_DELIVERY_ADDRESS = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
			#DELIVERY_ADDRESS_CODE = ""

		END_IF
		
		#DELIVERY_ADDRESS_CODE = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)

		PERFORM VALIDATE_ADDRESS ((SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)),#HEADER_DELIVERY_ADDR_FLAG)
		IF ((%STATUS = %FAILURE) OR (%STATUS = %EMPTY))
			GOTO DELIVERY_ADDRESS_CODE
		END_IF

		IF ( #HEADER_DELIVERY_ADDR_FLAG = #YES ) 
			SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE) = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
			#HEADER_FINAL_ADDRESS_CODE              = SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE)
		END_IF 
		
		FIND IN CUSTOMER_ADDRESSES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/WITH=ADDRESS_CODE=SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
			
		IF ( %STATUS = %SUCCESS AND CUSTOMER_ADDRESSES(SYS_FINAL_DESTINATION) = "1" ) 
			#HEADER_COUNTRY_CODE = CUSTOMER_ADDRESSES(SYS_COUNTRY)
			#HEADER_CITY         = CUSTOMER_ADDRESSES(SYS_CITY)
			IF ( CUSTOMER_ADDRESSES(SYS_STATE) <> "" ) 
				#HEADER_STATE_PROVINCE = CUSTOMER_ADDRESSES(SYS_STATE)
			ELSE
				#HEADER_STATE_PROVINCE = CUSTOMER_ADDRESSES(SYS_PROVINCE)
			END_IF
		ELSE
			IF ( #OLD_DELIVERY_ADDRESS_CODE <> "" AND #OLD_DELIVERY_ADDRESS_CODE <> SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE) ) 
				MESSAGE/IDENTIFIER/BELL P_37119
			END_IF		
		END_IF
		
		#OLD_DELIVERY_ADDRESS_CODE = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)

		FIND IN SYS_COUNTRIES &
				/LOCK=NONE &
				/WITH=SYS_COUNTRY=CUSTOMER_ADDRESSES(SYS_COUNTRY)

		PERFORM "GEMLB:LB_ADDRESSES" (&
			"D", &
			(SYS_COUNTRIES(SYS_COUNTRY)), &
			"CUSTOMER_ADDRESSES", &
			"9", &
			"7", &
			MESSAGE("P_82258"), &
			"", &
			"", &
			"", &
			"", &
			#R1, &
			#R2, &
			#R3, &
			#R4, &
			#R5)

        PERFORM "GEMLB:LB_L_GET_PRICING_METHOD" ( &
					(#COMPANY_CODE), &
					(PARAMETER("MODULE_SO")), &
					(#DIVISION), &
					(SALES_ORDER_HEADERS(CUSTOMER_NUMBER)), &
					(""), &
					(SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)), &
					#ERROR_OCCURRED, &
					#ERROR_MESSAGE, &
					#PRICING_METHOD )

		IF ( #ERROR_OCCURRED )
			ERROR/TEXT_ONLY/BELL #ERROR_MESSAGE
			GOTO DELIVERY_ADDRESS_CODE
		END_IF

		SALES_ORDER_HEADERS(PRICING_METHOD) = #PRICING_METHOD
		PERFORM SET_PRICING_METHOD_PROMPTS

	END_BLOCK

	OUTPUT_BLOCK FINAL_ADDRESS_CODE_O /ROW=10 /COL=66 /LEN=10 &
		/SOURCE=SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE) &
		/PROMPT=FIELD_SHORT_PROMPT(FINAL_ADDRESS_CODE)

	OUTPUT_BLOCK FINAL_ADDRESS_CITY_O3 /ROW=11 /COL=66 /LEN=12 &
		/SOURCE=#HEADER_CITY &
		/PROMPT=MESSAGE("P_85010")	

	OUTPUT_BLOCK FINAL_ADDRESS_STATE_PROV_O3 /ROW=12 /COL=66 /LEN=12 &
		/SOURCE=#HEADER_STATE_PROVINCE &
		/PROMPT=MESSAGE("P_37127")
		
	OUTPUT_BLOCK FINAL_ADDRESS_COUNTRY_O3 /ROW=13 /COL=66 /LEN=12 &
		/SOURCE=#HEADER_COUNTRY_CODE &
		/PROMPT=FIELD_PROMPT(COUNTRY_CODE)   

	BEGIN_BLOCK FINAL_ADDRESS 
		IF ( #HEADER_DELIVERY_ADDR_FLAG = #YES ) 
			GOTO FINAL_ADDRESS_STATE_PROV_O1
		END_IF
		
		INPUT_BLOCK FINAL_ADDRESS_CODE_I /ROW=10 /COL=66 /LEN=10 &
			/TARGET=SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE) &
			/PROMPT=FIELD_SHORT_PROMPT(FINAL_ADDRESS_CODE) &
			/USING=REQUIRED &
			/LOV=CUSTOMER_ADDRESSES(ADDRESS_CODE,CUSTOMER_NAME,SYS_POSTAL_CODE) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=DIVISION=#DIVISION &
			/LOV_WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/LOV_WITH=ACTIVATION_STATUS = (PARAMETER("STATUS_ACTIVE")) &
			/LOV_WITH=SYS_FINAL_DESTINATION = "1" &
			/USER_KEY1=(PERFORM "GEMSYS:SYS_M_ADD_CUSTOMER_ADDRESSES" &
					(#DIVISION,#CUSTOMER_NUMBER,SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE),#TAX_FLAG))
			
		PERFORM VALIDATE_ADDRESS ((SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE)),#HEADER_FINAL_ADDR_FLAG)
		
		IF ( #HEADER_FINAL_ADDR_FLAG <> #YES ) 
			MESSAGE/IDENTIFIER/BELL P_37116
			GOTO FINAL_ADDRESS_CODE_I
		ELSE
			#HEADER_FINAL_ADDRESS_CODE = SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE)
			FIND IN CUSTOMER_ADDRESSES &
				/LOCK=NONE &
				/SECONDARY &
				/STREAM_NAME=CU1 &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
				/WITH=ADDRESS_CODE=SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE)
			
			#HEADER_COUNTRY_CODE = CU1:CUSTOMER_ADDRESSES(SYS_COUNTRY)
			#HEADER_CITY         = CU1:CUSTOMER_ADDRESSES(SYS_CITY)
			IF ( CU1:CUSTOMER_ADDRESSES(SYS_STATE) <> "" ) 
				#HEADER_STATE_PROVINCE = CU1:CUSTOMER_ADDRESSES(SYS_STATE)
			ELSE
				#HEADER_STATE_PROVINCE = CU1:CUSTOMER_ADDRESSES(SYS_PROVINCE)
			END_IF
				
		END_IF   
	END_BLOCK 

	OUTPUT_BLOCK FINAL_CITY_O1 /ROW=11 /COL=66 /LEN=12 &
		/SOURCE=#HEADER_CITY &
		/PROMPT=MESSAGE("P_85010")
		
	OUTPUT_BLOCK FINAL_ADDRESS_STATE_PROV_O1 /ROW=12 /COL=66 /LEN=12 &
		/SOURCE=#HEADER_STATE_PROVINCE &
		/PROMPT=MESSAGE("P_37127")
		
	OUTPUT_BLOCK FINAL_ADDRESS_COUNTRY_O1 /ROW=13 /COL=66 /LEN=12 &
		/SOURCE=#HEADER_COUNTRY_CODE &
		/PROMPT=FIELD_PROMPT(COUNTRY_CODE)

	INPUT_BLOCK INVOICE_ADDRESS_CODE /ROW=13 /COL=15 &
			/TARGET=SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE) &
			/PROMPT=(MESSAGE("P_12241")) &
			/USING=REQUIRED &
			/LOV=CUSTOMER_ADDRESSES(ADDRESS_CODE,CUSTOMER_NAME,SYS_POSTAL_CODE) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=DIVISION=#DIVISION &
			/LOV_WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/LOV_WITH=ACTIVATION_STATUS = (PARAMETER("STATUS_ACTIVE")) &
			/USER_KEY1=(PERFORM "GEMSYS:SYS_M_ADD_CUSTOMER_ADDRESSES" &
					(#DIVISION,#CUSTOMER_NUMBER,SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE),#TAX_FLAG))


	BEGIN_BLOCK CHECK_INVOICE_ADDRESS
		PERFORM VALIDATE_ADDRESS ((SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)))
		IF ((%STATUS = %FAILURE) OR (%STATUS = %EMPTY))
			GOTO INVOICE_ADDRESS_CODE
		END_IF

		! Reastablish streams
		FIND IN CUSTOMER_ADDRESSES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/WITH=ADDRESS_CODE=SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)

		FIND IN SYS_COUNTRIES &
				/LOCK=NONE &
				/WITH=SYS_COUNTRY=CUSTOMERS(SYS_COUNTRY)

	END_BLOCK

	INPUT_BLOCK SALES_ORDER_TYPE /ROW=3 /COL=70 &
			/OPTIONS=DOMAIN_LOCK_NONE &
			/DOMAIN=SALES_ORDER_TYPES &
			/PROMPT=(FIELD_PROMPT(SALES_ORDER_TYPE)) &
			/TARGET=SALES_ORDER_HEADERS(SALES_ORDER_TYPE) &
			/LOV=SALES_ORDER_TYPES(SALES_ORDER_TYPE,CODE_DESCRIPTION) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE

	BEGIN_BLOCK /DISPLAY_ONLY REQUIRED_DATE_METHOD
		IF (#SOP_REQUIRED_DATE_METHOD = "")
			IF (#DIVISION <> "")
				FIND IN AR_CONTROLS &
					/LOCK=NONE &
					/WITH=COMPANY_CODE = #COMPANY_CODE &
					/WITH=DIVISION = #DIVISION

				#SOP_REQUIRED_DATE_METHOD = AR_CONTROLS(SOP_REQUIRED_DATE_METHOD)
			ELSE_IF (#DEFAULT_AR_DIVISION <> "")
				FIND IN AR_CONTROLS &
					/LOCK=NONE &
					/WITH=COMPANY_CODE = #COMPANY_CODE &
					/WITH=DIVISION = #DEFAULT_AR_DIVISION

				#SOP_REQUIRED_DATE_METHOD = AR_CONTROLS(SOP_REQUIRED_DATE_METHOD)
			ELSE
				#SOP_REQUIRED_DATE_METHOD = #METHOD_DESPATCH
			END_IF
		END_IF

		IF (#SOP_REQUIRED_DATE_METHOD = #METHOD_RECEIPT)
			#REQUESTED_DATE_PROMPT = FIELD_PROMPT(SYS_DELIVERY_DATE)
		ELSE
			#REQUESTED_DATE_PROMPT = FIELD_PROMPT(SYS_SHIPPING_DATE)
		END_IF
		! The Required Date Method decides what type of date the Requested Shipping Date
		! is to be.  If the method value is "D" for despatch/shipping, then the Requested
		! Shipping Date is the date the order is to be shipped to the customer.  If "R"
		! for receive/delivery, the Requested Shipping Date is the date the order is to
		! received at the customer's delivery address.
	END_BLOCK

	BEGIN_BLOCK MAINTAIN_REQUESTED_DATE
		! Requested Date Prompt for the INPUT_BLOCK below
		OUTPUT_BLOCK REQUESTED_DATE_PROMPT /ROW=5 /COL=51 &
			/PROMPT="" &
			/ATTRIBUTES=NONE &
			/SOURCE=#REQUESTED_DATE_PROMPT &
			/OUTPUT_MASK="!-@@@@@@@@@@@@@"

		INPUT_BLOCK REQUESTED_DATE /ROW=5 /COL=66 &
			/PROMPT="" &
			!Change 017 - Requested date = 1/1/2099 by default
			/SOURCE_IF=(SALES_ORDER_HEADERS(SYS_REQUESTED_DATE)=""),"1-JAN-2099" &
			/SOURCE_IF=(SALES_ORDER_HEADERS(SYS_REQUESTED_DATE)<>""),SALES_ORDER_HEADERS(SYS_REQUESTED_DATE) &
			!Change 017 End
			/TARGET=SALES_ORDER_HEADERS(SYS_REQUESTED_DATE) &
			/INPUT_MASK=(#DEFAULT_DATE_MASK)
	END_BLOCK

	INPUT_BLOCK ORDER_DATE /ROW=6 /COL=66 &
		/PROMPT=(FIELD_PROMPT(ORDER_DATE)) &
		/TARGET=SALES_ORDER_HEADERS(ORDER_DATE) &
		/INPUT_MASK=(#DEFAULT_DATE_MASK)

	IF ( SALES_ORDER_HEADERS(ORDER_DATE) = "" )
		SALES_ORDER_HEADERS(ORDER_DATE) = %TODAY
		GOTO ORDER_DATE
	END_IF

	BEGIN_BLOCK DATE_CALCULATIONS
		PERFORM DATE_CALCULATIONS
	END_BLOCK

	INPUT_BLOCK CUSTOMER_CONTACT /ROW=7 /COL=57 &
			/PROMPT=(FIELD_PROMPT(CUSTOMER_CONTACT)) &
!Change 013
			!/TARGET=SALES_ORDER_HEADERS(CUSTOMER_CONTACT)
			/TARGET=SALES_ORDER_HEADERS(CUSTOMER_CONTACT) &
			/LOV=VOL_CUSTOMER_CONTACTS(CUSTOMER_CONTACT,CUSTOMER_NUMBER,PHONE) &
			/LOV_WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) & 
			/LOV_WITH=CONTACT_TYPE="Sales"

	BEGIN_BLOCK RELOOKUP_CONTACTS
		FIND IN VOL_CUSTOMER_CONTACTS &
			/WITH=CUSTOMER_CONTACT=SALES_ORDER_HEADERS(CUSTOMER_CONTACT) &
			/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/WITH=CONTACT_TYPE="Sales"

		IF (%STATUS<>%SUCCESS AND SALES_ORDER_HEADERS(CUSTOMER_CONTACT)<>"") 
			PERFORM "GEMSOP:SOPC_M_VOL_CUSTOMER_CONTACTS" ADD (SALES_ORDER_HEADERS(CUSTOMER_NUMBER),SALES_ORDER_HEADERS(CUSTOMER_CONTACT),"Sales")

			!Look again
			FIND IN VOL_CUSTOMER_CONTACTS &
				/WITH=CUSTOMER_CONTACT=SALES_ORDER_HEADERS(CUSTOMER_CONTACT) &
				/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
				/WITH=CONTACT_TYPE="Sales"

		END_IF

		!If the status is %FAILURE, they backed out of the "Add new Contact" form. They need to either enter a valid contact right away, create a valid contact, or enter no contact at all.
		IF (%STATUS=%FAILURE AND SALES_ORDER_HEADERS(CUSTOMER_CONTACT)<>"") 
			ERROR /TEXT_ONLY "You must enter a valid customer contact or leave this field blank to continue."
			GOTO CUSTOMER_CONTACT
		END_IF
			
		IF ((VOL_CUSTOMER_CONTACTS(PHONE)="" OR VOL_CUSTOMER_CONTACTS(EMAIL)="") AND SALES_ORDER_HEADERS(CUSTOMER_CONTACT)<>"")
			PERFORM ASK_UPDATE_CONTACT(SALES_ORDER_HEADERS(CUSTOMER_NUMBER),SALES_ORDER_HEADERS(CUSTOMER_CONTACT))
			FIND IN VOL_CUSTOMER_CONTACTS &
				/WITH=CUSTOMER_CONTACT=SALES_ORDER_HEADERS(CUSTOMER_CONTACT) &
				/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
				/WITH=CONTACT_TYPE="Sales"
		END_IF

		DISPLAY DEFAULTS
	END_BLOCK
!Change 013 End
	

	OUTPUT_BLOCK PHONE /ROW=8 /COL=57 /LEN=21 &
			/PROMPT=(FIELD_PROMPT(PHONE)) &
			!Change 013 - Use customer contact phone # if a contact is chosen
			!/SOURCE=(CUSTOMERS(PHONE)) &
			/SOURCE_IF=(VOL_CUSTOMER_CONTACTS(PHONE)=""),CUSTOMERS(PHONE) &
			/SOURCE_IF=(VOL_CUSTOMER_CONTACTS(PHONE)<>""),VOL_CUSTOMER_CONTACTS(PHONE) &
			!Change 013 End			
			/OUTPUT_MASK=(#PHONE_MASK)

	!Change 013
	OUTPUT_BLOCK EMAIL /ROW=9 /COL=57 &
			/PROMPT=(FIELD_PROMPT(EMAIL)) &
			/SOURCE=VOL_CUSTOMER_CONTACTS(EMAIL) & 
			/USING=VOL_CUSTOMER_CONTACTS(EMAIL)
	!Change 013 End

	BEGIN_BLOCK COST_CENTER
		INPUT_BLOCK  /ROW=15 /COL=28 &
			/PROMPT=(FIELD_PROMPT(COST_CENTER)) &
			/TARGET=SALES_ORDER_HEADERS(COST_CENTER) &
			/LOV=COST_CENTERS(COST_CENTER,DESCRIPTION) &
			/LOV_SORTED_BY=(COST_CENTER) &
 			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=SOURCE_MODULE=(PARAMETER("LOCAL_SOURCE_MODULE"))

		IF (SALES_ORDER_HEADERS(COST_CENTER) <> "")
			FIND IN COST_CENTERS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=SOURCE_MODULE=(PARAMETER("LOCAL_SOURCE_MODULE")) &
				/WITH=COST_CENTER=SALES_ORDER_HEADERS(COST_CENTER)

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_00347
				GOTO COST_CENTER
			END_IF

			#DESC = COST_CENTERS(DESCRIPTION)
		ELSE
			#DESC = ""
		END_IF
	END_BLOCK

	OUTPUT_BLOCK COST_CENTER_DESC /ROW=15 /COL=32 &
			/SOURCE=(#DESC) &
			/USING=COST_CENTERS(DESCRIPTION)

	OUTPUT_BLOCK PRICING_METHOD /ROW=16 /COL=32 &
		/PROMPT=FIELD_PROMPT(PRICING_METHOD) &
		/SOURCE=(SALES_ORDER_HEADERS(PRICING_METHOD)) &
		/USE_IF=(#PRICING_METHOD_OPTIONAL=#YES)

	OUTPUT_BLOCK PRICING_METHOD_DESC /ROW=16 /COL=34 &
		/ATTRIBUTES=NONE &
		/SOURCE=(#PRICING_METHOD_DESC) &
		/USE_IF=(#PRICING_METHOD_OPTIONAL=#YES)

	BEGIN_BLOCK CURRENCY
		IF (#DEFAULT_CURRENCY_CODE = "")  #DEFAULT_CURRENCY_CODE = #BASE_CURRENCY_CODE

		IF (#DATE_CODE = #DUE_CODE)
			#EFFECTIVE_DATE = SALES_ORDER_HEADERS(SYS_SHIPPING_DATE)
		ELSE
			#EFFECTIVE_DATE = SALES_ORDER_HEADERS(ORDER_DATE)
		END_IF

		DELETE ALL FROM SYS_CURRENCY_CONTROL_VT
		CLEAR_BUFFER SYS_CURRENCY_CONTROL_VT

		SYS_CURRENCY_CONTROL_VT(COMPANY_CODE)			= #COMPANY_CODE
		SYS_CURRENCY_CONTROL_VT(DIVISION)			= #DIVISION
		SYS_CURRENCY_CONTROL_VT(SOURCE_MODULE)			= PARAMETER("MODULE_SO")
		SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE)	= #DEFAULT_CURRENCY_CODE
		SYS_CURRENCY_CONTROL_VT(TRANSACTION_DATE)		= #EFFECTIVE_DATE
		SYS_CURRENCY_CONTROL_VT(CODE_RATE_INPUT_FLAG)		= "C"
		SYS_CURRENCY_CONTROL_VT(RATE_OVERRIDE)			= #NO

		ADD TO SYS_CURRENCY_CONTROL_VT

		PERFORM "GEMLB:LB_C_CURRENCY_RATES" ( #CURRENCY_OVERRIDE, #R_STATUS, #R_MESSAGE)
		IF (%STATUS = %EXIT OR %STATUS = %BACK) GOTO COST_CENTER
		IF (#R_STATUS <> #YES)
			ERROR/WAIT #R_MESSAGE
			EXIT (%FAILURE)
		END_IF

		FIND IN SYS_CURRENCY_CONTROL_VT

		SALES_ORDER_HEADERS(SYS_CURRENCY_CODE)       = SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE)
		SALES_ORDER_HEADERS(SYS_CURRENCY_RATE)       = SYS_CURRENCY_CONTROL_VT(FIRST_CURRENCY_RATE)

		SALES_ORDER_HEADERS(SYS_CURRENCY_DATE) = SYS_CURRENCY_CONTROL_VT(CURRENCY_DATE)

		SALES_ORDER_HEADERS(SYS_CURRENCY_FIXED_FLAG) = SYS_CURRENCY_CONTROL_VT(FIXED_RATE_INDIC)
		SALES_ORDER_HEADERS(SYS_CURRENCY_RATIO_INDIC)= SYS_CURRENCY_CONTROL_VT(CURR_RATIO_INDIC)
		SALES_ORDER_HEADERS(SYS_RATE_AUTHORITY)      = SYS_CURRENCY_CONTROL_VT(RATE_AUTHORITY)
		SALES_ORDER_HEADERS(SYS_RATE_TYPE)			= SYS_CURRENCY_CONTROL_VT(RATE_TYPE)
		SALES_ORDER_HEADERS(SYS_BASE_CURRENCY)       = SYS_CURRENCY_CONTROL_VT(BASE_CURRENCY_CODE)
		IF (SYS_CURRENCY_CONTROL_VT(STORE_BASE_2) = #YES)
			SALES_ORDER_HEADERS(SYS_CURRENCY_2_RATE) = SYS_CURRENCY_CONTROL_VT(SECOND_CURRENCY_RATE)
			SALES_ORDER_HEADERS(SYS_CURRENCY_2_RATIO_INDIC) = SYS_CURRENCY_CONTROL_VT(SYS_CURRENCY_2_RATIO_INDIC)
		END_IF
		#CURRENCY_CODE	= SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE)
		#CURRENCY_DESC	= SYS_CURRENCY_CONTROL_VT(CURRENCY_CODE_DESCRIPTION)
		#CURRENCY_RATE	= SYS_CURRENCY_CONTROL_VT(FIRST_CURRENCY_RATE)
		#DEFAULT_CURRENCY_CODE = #CURRENCY_CODE
		#EFFECTIVE_DATE = #CURRENCY_DATE
		#CURRENCY_MASK	= SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_MASK)
		#CURRENCY_DECIMAL	= SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_DECIMALS)
		#BASE_2_CURRENCY_CODE	= SYS_CURRENCY_CONTROL_VT(BASE_2_CURRENCY_CODE)

		PERFORM SAVE_SYS_CURRENCY_CONTROL_VT
	END_BLOCK

	OUTPUT_BLOCK SYS_CURRENCY_CODE /ROW=19 /COL=23 &
			/PROMPT=(FIELD_PROMPT(SYS_CURRENCY_CODE)) &
			/SOURCE=(#CURRENCY_CODE) &
			/USING=SALES_ORDER_HEADERS(SYS_CURRENCY_CODE) &
			/ATTRIBUTES=BOLD

	OUTPUT_BLOCK CURRENCY_DESC /ROW=19 /COL=30 &
			/SOURCE=(#CURRENCY_DESC) &
			/USING=SYS_CURRENCY_CODES(SYS_CURRENCY_SHORT_DESC) &
			/ATTRIBUTES=BOLD

	OUTPUT_BLOCK CURRENCY_RATE /ROW=20 /COL=23 &
			/PROMPT=(MESSAGE("P_00562")) &
			/SOURCE=(#CURRENCY_RATE) &
			/USING=SYS_CURRENCY_RATES(SYS_CURRENCY_RATE) &
			/ATTRIBUTES=BOLD &
			/USE_IF=(#CURRENCY_METHOD <> "0")

	BEGIN_BLOCK LOAD_CODES_FROM_ADDRESSES
		#DEF_EC_TRANSACTION_TYPE = ""
		#DEF_EC_MODE_TRANSPORT   = ""
		#DEF_EC_DELIVERY_TERMS   = ""
		#DEF_EC_REPORT_TYPE		 = ""
		#DEF_EC_STAT_FACTOR		 = ""

		IF (SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE) <> "")
			#ADDRESS_CODE = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)

			IF (#FIRST_TIME = "TRUE")
				PERFORM LOAD_CODES_FROM_ADDRESSES

				IF (CUSTOMER_ADDRESSES(PRICE_CODE) <> "")
					#ADDR_PRICE_CODE = CUSTOMER_ADDRESSES(PRICE_CODE)
					#PRICE_CODE      = CUSTOMER_ADDRESSES(PRICE_CODE)
				ELSE
					#ADDR_PRICE_CODE = #CUST_PRICE_CODE
					#PRICE_CODE      = #CUST_PRICE_CODE
				END_IF

				SALES_ORDER_HEADERS(DELIVERY_INSTRUCTIONS)	= CUSTOMER_ADDRESSES(DELIVERY_INSTRUCTIONS)
				SALES_ORDER_HEADERS(SHIP_METHOD)		= CUSTOMER_ADDRESSES(SHIP_METHOD)

				SALES_ORDER_HEADERS(SYS_FREIGHT_MODE) = ""
				SALES_ORDER_HEADERS(SYS_FREIGHT_CONTRACT_NUMBER) = ""
				IF (#AR_FREIGHT_IN_USE = #YES)
					SALES_ORDER_HEADERS(SYS_FREIGHT_CONTRACT_NUMBER) = #CUST_FREIGHT_CONTRACT
					IF (CUSTOMER_ADDRESSES(SYS_FREIGHT_CONTRACT_NUMBER) <> "")
						SALES_ORDER_HEADERS(SYS_FREIGHT_CONTRACT_NUMBER) = CUSTOMER_ADDRESSES(SYS_FREIGHT_CONTRACT_NUMBER)
					END_IF
				END_IF
				IF ((#AR_FREIGHT_IN_USE = #YES) &
				OR (#SYS_TM_IN_USE = #YES))
					SALES_ORDER_HEADERS(SYS_FREIGHT_MODE) = #CUST_FREIGHT_MODE
					IF (CUSTOMER_ADDRESSES(SYS_FREIGHT_MODE) <> "")
						SALES_ORDER_HEADERS(SYS_FREIGHT_MODE) = CUSTOMER_ADDRESSES(SYS_FREIGHT_MODE)
					END_IF
				END_IF

				#DEF_BOD_CODE = CUSTOMER_ADDRESSES(SYS_BOD_CODE)
				#DEF_ORDER_COUNTRY = CUSTOMER_ADDRESSES(SYS_COUNTRY)
				#DEF_ORDER_DIST_ZONE = CUSTOMER_ADDRESSES(SYS_DISTRIBUTION_ZONE)

				PERFORM GET_DIST_ZONE_DETAILS ( &
					#DEF_ORDER_COUNTRY, &
					#DEF_ORDER_DIST_ZONE)

				IF (%STATUS = %FAILURE)
					IF ((#SYS_TM_IN_USE = #YES) OR (#AR_FREIGHT_IN_USE = #YES))
						MESSAGE/IDENTIFIER/BELL/WAIT P_93564
						IF (#SYS_TM_IN_USE = #YES)
							! Can't use TM for this delivery address
							MESSAGE/IDENTIFIER/BELL/WAIT P_93567
						ELSE
							! Can't use AR freight for this delivery address
							MESSAGE/IDENTIFIER/BELL/WAIT P_93569
						END_IF
					END_IF
				ELSE
					IF ((#DEF_BOD_CODE = "") AND (#ADDR_DIST_BOD_CODE <> ""))
						! only if the Customer Addresses BOD code is blank and
						! the distribution zone bill of distribution is non-blank
						! use the distribution zone BOD code as the default BOD
						! code for the order.
						#DEF_BOD_CODE = #ADDR_DIST_BOD_CODE
					END_IF
				END_IF

				#DEF_CUST_PAYS_FREIGHT = #NO
				IF ((#AR_FREIGHT_IN_USE = #YES) OR (#SYS_TM_IN_USE = #YES))
					IF (SALES_ORDER_HEADERS(SOP_SHIPPING_TERMS_CODE) <> "")
						FIND IN SOP_SHIPPING_TERMS &
							/LOCK=NONE &
							/WITH=COMPANY_CODE = #COMPANY_CODE &
							/WITH=SOP_SHIPPING_TERMS_CODE = SALES_ORDER_HEADERS(SOP_SHIPPING_TERMS_CODE)

						IF (%STATUS <> %FAILURE)
							#DEF_CUST_PAYS_FREIGHT = SOP_SHIPPING_TERMS(SOP_FREIGHT_INCLUSIVE)
						END_IF
					END_IF
				END_IF
				! end AR Freight or TM in use
			END_IF

			IF (CUSTOMER_ADDRESSES(PRICE_CODE) <> "")
				#PRICE_CODE	     = CUSTOMER_ADDRESSES(PRICE_CODE)
				#ADDR_PRICE_CODE = CUSTOMER_ADDRESSES(PRICE_CODE)
			END_IF

			IF ((#FIRST_TIME = "TRUE") AND (#AR_FREIGHT_IN_USE = #YES))
				! do this assignment after price code has been
				! stored.
				IF (#PRICE_CODE <> "")
					FIND IN PRICE_CODES &
						/LOCK=NONE &
						/WITH=COMPANY_CODE = #COMPANY_CODE  &
						/WITH=DIVISION = #DIVISION &
						/WITH=PRICE_CODE = #PRICE_CODE

					IF (%STATUS <> %FAILURE)
						#DEF_PRICE_FREIGHT_INCLUSIVE = PRICE_CODES(SOP_FREIGHT_INCLUSIVE)
						#DEF_PRICE_CODE_DESCRIPTION = PRICE_CODES(DESCRIPTION)
					END_IF
					IF (#DEF_PRICE_FREIGHT_INCLUSIVE = "")
						#DEF_PRICE_FREIGHT_INCLUSIVE = #NO
					END_IF
				END_IF
			END_IF
			! end First Time and AR Freight in use

			IF (#COMPANY_EC_REPORT_TYPE <> "")
				PERFORM GET_CUSTOMER_STATE
				IF (%STATUS = %FAILURE) EXIT (%FAILURE)

				IF (#EC_REPORT_TYPE <> "")
					#DEF_EC_TRANSACTION_TYPE = CUSTOMER_ADDRESSES(SYS_EC_TRANSACTION_TYPE)
					#DEF_EC_MODE_TRANSPORT = CUSTOMER_ADDRESSES(SYS_EC_MODE_OF_TRANSPORT)
					#DEF_EC_DELIVERY_TERMS = CUSTOMER_ADDRESSES(SYS_EC_DELIVERY_TERMS)
					#DEF_EC_REPORT_TYPE = #EC_REPORT_TYPE
					#DEF_EC_STAT_FACTOR = CUSTOMER_ADDRESSES(SYS_EC_FACTOR)
				END_IF
			END_IF

			GOTO LOAD_CUSTOMER_DEFAULTS
		END_IF

		IF (SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE) <> "")
			#ADDRESS_CODE = SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)
			PERFORM LOAD_CODES_FROM_ADDRESSES
		END_IF

	END_BLOCK

	BEGIN_BLOCK LOAD_CUSTOMER_DEFAULTS

		SALES_ORDER_HEADERS(CREDIT_TERMS_CODE) = CUSTOMERS(CREDIT_TERMS_CODE)
!Comment out the following lines issue#368358-1
!		#ORIG_ORDER_VALUE = SALES_ORDER_HEADERS(TOTAL_ORDER_VALUE)
!		#ORIG_ORDER_VALUE_BASE = SALES_ORDER_HEADERS(SOP_ORDER_VALUE_BASE)
!End of comment out

	END_BLOCK

	BEGIN_BLOCK EXEC_MENU_1
	     #FIRST_TIME = "FALSE"
	     #ENTER_HEADER_COMMENTS = #NO
	     MENU_BLOCK MENU_1 /ROW=12 /COL=45 &
			/SOURCE=(MESSAGE("P_00110")) /NOREPEAT &
			/ITEM=(MESSAGE("P_00110")),(MESSAGE("P_54038")),(GOTO GET_TRANSACTION_TYPE) &
			/ITEM=(MESSAGE("P_00016")),(MESSAGE("P_24086")),(GOTO DEFAULT_ADDRESSES) &
			/ITEM=(MESSAGE("P_92864")),(MESSAGE("P_37117")),(GOTO FINAL_ADDRESSES) &
			/ITEM=(MESSAGE("P_00107")),(MESSAGE("P_50093")),(PERFORM ORDER_ANALYSIS_CODES) &
			/ITEM=(MESSAGE("P_24164")),(MESSAGE("P_54056")),(PERFORM ORDER_NOTES) &
			/ITEM=(MESSAGE("P_00192")),(MESSAGE("P_91501")),(GOTO MAINTAIN_REQUESTED_DATE) &
			/ITEM=(MESSAGE("P_91149")),(MESSAGE("P_51143")),(PERFORM MODIFY_PAYMENT_TYPE) &
			/ITEM=(MESSAGE("P_00108")),(MESSAGE("P_93536")),(GOTO ENTER_COMMENTS) &
			/ITEM=(MESSAGE("P_00323")),(MESSAGE("P_00057")),(GOTO DIVISION) &
			/ITEM=(MESSAGE("P_00551")),(MESSAGE("P_54008")),(EXIT)
	END_BLOCK

	BEGIN_BLOCK DISPLAY_CHANGES
		PERFORM SET_PRICING_METHOD_PROMPTS
		DISPLAY DEFAULTS
		GOTO EXEC_MENU_1
	END_BLOCK

	BEGIN_BLOCK ENTER_COMMENTS
		#ENTER_HEADER_COMMENTS = #YES
	END_BLOCK

	BEGIN_BLOCK GET_TRANSACTION_TYPE
		FIND IN TT:SOP_TRANSACTION_TYPES &
			/SECONDARY &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=TRANSACTION_TYPE=(PARAMETER("MODULE_SO")) &
			/LOCK=NONE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00277
			EXIT
		END_IF

		#MANUAL = TT:SOP_TRANSACTION_TYPES(MANUAL_NUMBER)
	END_BLOCK

	BEGIN_BLOCK AUTO_NUMBER
		IF (#MANUAL <> #YES)
			FIND IN SOP_TRANSACTION_TYPES &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=TRANSACTION_TYPE=(PARAMETER("MODULE_SO")) &
				/LOCK=WRITE

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_00277
				EXIT(%FAILURE)
			END_IF

			#ORDER_NUMBER = SOP_TRANSACTION_TYPES(TRANSACTION_NUMBER)

			SOP_TRANSACTION_TYPES(TRANSACTION_NUMBER) = SOP_TRANSACTION_TYPES(TRANSACTION_NUMBER) + 1
!Comment out the following line issue#368358-2
!			#OLD_TOTAL_ORDER_VALUE = 0
!End of comment out
			#OLD_BASE_TOTAL = 0

			FIND IN AA:SALES_ORDER_HEADERS &
				/SECONDARY &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=ORDER_NUMBER=#ORDER_NUMBER

			IF (%STATUS = %SUCCESS)
				MESSAGE/IDENTIFIER/BELL P_02334
				EXIT(%FAILURE)
			END_IF

			! Need to check EDI reject tables if EDI active to ensure
			! a duplicate order number is not being generated.

			IF (#EDI_ACTIVE_FLAG = PARAMETER("LANGUAGE_YES"))

				FIND IN SOP_EDI_INBOUND_REJECT_HEADER &
					/LOCK=NONE &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=DIVISION=#DIVISION &
					/WITH=ORDER_NUMBER=#ORDER_NUMBER

				IF (%STATUS = %SUCCESS)
					MESSAGE/IDENTIFIER/BELL P_02334
					EXIT(%FAILURE)
				END_IF
			END_IF

		OUTPUT_BLOCK		 /ROW=2 /COL=69 &
			/PROMPT=(FIELD_PROMPT(ORDER_NUMBER)) &
			/SOURCE=(#ORDER_NUMBER) &
			/USING=SALES_ORDER_HEADERS(ORDER_NUMBER)
	END_BLOCK

	BEGIN_BLOCK MANUAL_ORDER_NUMBER
		ELSE

		INPUT_BLOCK  /ROW=2 /COL=69 /NEW /PROTECT &
			/PROMPT=(FIELD_PROMPT(ORDER_NUMBER)) &
			/TARGET=#ORDER_NUMBER &
			/USING=SALES_ORDER_HEADERS(ORDER_NUMBER),REQUIRED &
			/LOV=SALES_ORDER_HEADERS(ORDER_NUMBER,CUSTOMER_NUMBER,ORDER_DATE) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=DIVISION=#DIVISION &
			/LOV_WITH=SOP_DESTINATION_WAREHOUSE="" &
			/LOV_SECONDARY

			FIND IN AA:SALES_ORDER_HEADERS &
				/SECONDARY &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=ORDER_NUMBER=#ORDER_NUMBER

			IF (%STATUS = %SUCCESS)
				MESSAGE/IDENTIFIER/BELL P_52287
				GOTO AUTO_NUMBER
			END_IF

		END_IF
		SALES_ORDER_HEADERS(ORDER_NUMBER)=#ORDER_NUMBER
	END_BLOCK

	BEGIN_BLOCK SETUP_VARIABLES
		#LOCATION		= SALES_ORDER_HEADERS(LOCATION)
		#BROKER_CODE	= SALES_ORDER_HEADERS(BROKER_CODE)
		#SALESPERSON_CODE	= SALES_ORDER_HEADERS(SALESPERSON_CODE)
		#SALES_COMMISSION_CODE	= SALES_ORDER_HEADERS(SALES_COMMISSION_CODE)
		#SA_GROUP		= SALES_ORDER_HEADERS(SALES_ANALYSIS_GROUP)
		#SYS_SHIPPING_DATE	= SALES_ORDER_HEADERS(SYS_SHIPPING_DATE)
		#SYS_REQUESTED_DATE	= SALES_ORDER_HEADERS(SYS_REQUESTED_DATE)
		#SYS_DELIVERY_DATE	= SALES_ORDER_HEADERS(SYS_DELIVERY_DATE)
		#REQUIRED_DATE		= SALES_ORDER_HEADERS(REQUIRED_DATE)
		#ORDER_DATE		= SALES_ORDER_HEADERS(ORDER_DATE)
		#DEF_DELIVERY_ADDRESS	= SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
		#DEF_DELIVERY_INST	= SALES_ORDER_HEADERS(DELIVERY_INSTRUCTIONS)
		#DEF_SHIP_METHOD	= SALES_ORDER_HEADERS(SHIP_METHOD)
		#DEF_COST_CENTER	= SALES_ORDER_HEADERS(COST_CENTER)
		#ORDER_TYPE		= SALES_ORDER_HEADERS(SALES_ORDER_TYPE)
		#PRINT_CONF_FLAG	= SALES_ORDER_HEADERS(SOP_PRINT_CONF_FLAG)

		#DEF_FREIGHT_CONTRACT	= SALES_ORDER_HEADERS(SYS_FREIGHT_CONTRACT_NUMBER)
		#DEF_FREIGHT_MODE	= SALES_ORDER_HEADERS(SYS_FREIGHT_MODE)
		#DEF_SHIP_TERMS		= SALES_ORDER_HEADERS(SOP_SHIPPING_TERMS_CODE)

		IF (#DATE_CODE = #DUE_CODE)
			#EFFECTIVE_DATE = SALES_ORDER_HEADERS(SYS_SHIPPING_DATE)
		ELSE
			#EFFECTIVE_DATE = SALES_ORDER_HEADERS(ORDER_DATE)
		END_IF

		#CUSTOMER_REFERENCE	= SALES_ORDER_HEADERS(CUSTOMER_REFERENCE)

		#TOTAL_ORDER_WEIGHT		= 0
		#TOTAL_ORDER_VOLUME		= 0
		#TOTAL_WEIGHT_UOM	  = ""
		#TOTAL_VOLUME_UOM	  = ""
		#TOTAL_LINE_DISCOUNT		 = 0
		#TOTAL_LINE_TAX		= 0
		#GRAND_TOTAL		= 0
	END_BLOCK

	BEGIN_BLOCK LINES

		IF ( #TP_PROMOTIONS_IN_USE = #YES )
			PERFORM LOAD_CUSTOMER_PROMOTIONS
			IF (%STATUS = %FAILURE) EXIT (%FAILURE)
		END_IF

		ADD TO SALES_ORDER_HEADERS
		IF (%STATUS = %FAILURE)  EXIT(%FAILURE)
		
		#PROCESS_KEY = #COMPANY_CODE & "/" & #DIVISION & "/" & #ORDER_NUMBER
		PERFORM "GEMLB:LB_L_PROCESS_CONTROLS" LB_L_PROCESS_CONTROLS &
					(#COMPANY_CODE, &
					 ("ADD"), 2, &
					 (#FUNCTION_ID), &
					 (#PROCESS_KEY), &
					 (#ID), &
					 "", &
					 #ERROR_OCCURRED, #ERROR_MESSAGE )
		IF(%STATUS = %FAILURE OR #ERROR_OCCURRED)
			ERROR/TEXT_ONLY/WAIT #ERROR_MESSAGE
			EXIT(%FAILURE)
		END_IF
		
		COMMIT

		IF (#ENTER_HEADER_COMMENTS = #YES)
			PERFORM ORDER_HEADER_COMMENTS
		END_IF

		PERFORM CLEAR_ADDRESS
		PERFORM HEADER_REPRINT
		COMMIT
		
		!executing workflow funtions
		PERFORM WORKFLOW_CREDIT_CHECK

		IF (#OPT="DESPATCH")
			PERFORM PRODUCE_DESPATCH_NOTE
			PERFORM ADD_VIRTUAL_TABLE
		END_IF

		IF (#OPT = "HEADER")
			! MODIFY_HEADER option selected in Order Totals
			EXIT (%SUCCESS)
		END_IF

		IF (#PRINT_CONF_FLAG = #YES)
			PERFORM PRODUCE_ORDER_PRINT
			PERFORM ADD_VIRTUAL_TABLE
		END_IF

		! Exit and return to ENTRY Form to clear /REMAIN forms
		EXIT (%SUCCESS)
	END_BLOCK

	BEGIN_BLOCK DEFAULT_ADDRESSES
		#OLD_DELIVERY_ADDRESS = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)

		PERFORM DEFAULT_ADDRESSES

		#DEF_DELIVERY_INST	  = SALES_ORDER_HEADERS(DELIVERY_INSTRUCTIONS)
		#DEF_SHIP_METHOD	= SALES_ORDER_HEADERS(SHIP_METHOD)

		GOTO REDISPLAY_DEFAULT_ADDRESSES_1
	END_BLOCK


	BEGIN_BLOCK FINAL_ADDRESSES 
		PERFORM FINAL_ADDRESSES
	END_BLOCK 

	BEGIN_BLOCK REDISPLAY_DEFAULT_ADDRESSES_1

		OUTPUT_BLOCK /ROW=6 /COL=15 &
			/SOURCE=(SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE))

		FIND IN CUSTOMER_ADDRESSES &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/WITH=ADDRESS_CODE=SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)

		FIND IN SYS_COUNTRIES &
			/LOCK=NONE &
			/WITH=SYS_COUNTRY=CUSTOMER_ADDRESSES(SYS_COUNTRY)
			
		PERFORM "GEMLB:LB_ADDRESSES" (&
			"D", &
			(SYS_COUNTRIES(SYS_COUNTRY)), &
			"CUSTOMER_ADDRESSES", &
			"9", &
			"7", &
			MESSAGE("P_82258"), &
			"", &
			"", &
			"", &
			"", &
			#R1, &
			#R2, &
			#R3, &
			#R4, &
			#R5)

		OUTPUT_BLOCK FINAL_ADDRESS_CODE_O1 /ROW=10 /COL=66 /LEN=10 &
			/SOURCE=SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE) &
			/PROMPT=FIELD_SHORT_PROMPT(FINAL_ADDRESS_CODE)

		OUTPUT_BLOCK FINAL_CITY_O2 /ROW=11 /COL=66 /LEN=12 &
			/SOURCE=#HEADER_CITY &
			/PROMPT=MESSAGE("P_85010")
				
		OUTPUT_BLOCK FINAL_ADDRESS_STATE_PROV_O2 /ROW=12 /COL=66 /LEN=12 &
			/SOURCE=#HEADER_STATE_PROVINCE &
			/PROMPT=MESSAGE("P_37127")
		
		OUTPUT_BLOCK FINAL_ADDRESS_COUNTRY_O2 /ROW=13 /COL=66 /LEN=12 &
			/SOURCE=#HEADER_COUNTRY_CODE &
			/PROMPT=FIELD_PROMPT(COUNTRY_CODE) 

		OUTPUT_BLOCK /ROW=13 /COL=15 &
			/SOURCE=(SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)) 

		GOTO EXEC_MENU_1
	END_BLOCK

END_FORM


FORM MODIFY /ROW=3 /COL=2 /HEIGHT=21 /WIDTH=78 &
	/TITLE=(MESSAGE("P_56130"))

	BEGIN_BLOCK SETUP

		START_TRANSACTION

		CLEAR_BUFFER SECURITY_PERIOD_ACCESS_VT

		IF (#OPT <> "HEADER")
			CLEAR_BUFFER SALES_ORDER_HEADERS
			#ORDER_NUMBER = ""
		END_IF

		SALES_ORDER_TYPES(COMPANY_CODE) = #COMPANY_CODE

		#MAIN_OPT = "MODIFY"
		#EDIT_MODE = "MODIFY"
		#SPLIT_ORDER = ''
		#DIVISION = #DEFAULT_AR_DIVISION
		#CUSTOMER_REFERENCE = ""
		#ALREADY_WARN		= #NO
		#ALREADY_CREDIT_HOLD	= #NO
		#COPY_REACH_CHECK_FALG  = #NO

		! Displays Requested Date prompt
		DISPLAY DEFAULTS
	END_BLOCK

	INPUT_BLOCK DIVISION /ROW=2 /COL=15 &
			/PROMPT=(FIELD_PROMPT(DIVISION)) &
			/TARGET=SALES_ORDER_HEADERS(DIVISION) &
			/SOURCE=(#DIVISION) &
			/LOV=SECURITY_PERIOD_ACCESS_VT(SYS_ACCESS_CODE,CODE_DESCRIPTION) &
			/LOV_WITH=SYS_ACCESS_TYPE=(PARAMETER("ACCESS_TYPE_DIVISION")) &
			/LOV_WITH=SOURCE_MODULE=(PARAMETER("MODULE_SO")) &
			/LOV_WITH=SYS_ALLOW_ACCESS=#YES &
			/USE_IF=(#OPT <> "HEADER")

	! Here because MODIFY_HEADER selected in Order Totals
	OUTPUT_BLOCK DIVISION_OT /ROW=2 /COL=15 &
			/PROMPT=(FIELD_PROMPT(DIVISION)) &
			/SOURCE=SALES_ORDER_HEADERS(DIVISION) &
			/USE_IF=(#OPT = "HEADER")

	BEGIN_BLOCK EXTRACT_DIVISION
		FIND IN AR_CONTROLS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=DIVISION = SALES_ORDER_HEADERS(DIVISION)

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00354
			#OPT = ""
			GOTO DIVISION
		END_IF

		FIND IN SECURITY_PERIOD_ACCESS_VT &
			/WITH=SYS_ACCESS_TYPE=(PARAMETER("ACCESS_TYPE_DIVISION")) &
			/WITH=SYS_ACCESS_CODE=SALES_ORDER_HEADERS(DIVISION) &
			/WITH=SOURCE_MODULE=(PARAMETER("MODULE_SO")) &

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00447
			#OPT = ""
			GOTO DIVISION
		END_IF

		IF (SECURITY_PERIOD_ACCESS_VT(SYS_ALLOW_ACCESS) <> #YES)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00756
			#OPT = ""
			GOTO DIVISION
		END_IF

		IF (AR_CONTROLS(SOP_ACTIVE)<>#YES)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00243
			#OPT = ""
			EXIT
		END_IF
		
		#DIVISION		= SALES_ORDER_HEADERS(DIVISION)
		#CONTRACT_PRICES	= AR_CONTROLS(CONTRACT_PRICES_IN_USE)
		#PROMOTION_PRICES	  = AR_CONTROLS(PROMOTION_PRICES_IN_USE)
		#CONTRACT_OVERRIDE	  = AR_CONTROLS(CONTRACT_PRICES_OVERRIDE)
		#PROMOTION_OVERRIDE		= AR_CONTROLS(PROMOTION_PRICE_OVERRIDE)
		#PRICE_OVERRIDE		= AR_CONTROLS(SALES_PRICE_OVERRIDE)
		#PROM_OVER_CONTRACTS	= AR_CONTROLS(PROMOTION_OVERRIDE_CONTRACTS)
		#LD_OVERRIDE		= AR_CONTROLS(LINE_DISCOUNT_OVERRIDE)
		#LD_INV			= AR_CONTROLS(LINE_DISCOUNT_INV_FLAG)
		#LD_CUS			= AR_CONTROLS(LINE_DISCOUNT_CUST_FLAG)
		#LD_BREAK		= AR_CONTROLS(LINE_DISCOUNT_BREAK_ON)
		#LD_CALC		= AR_CONTROLS(LINE_DISCOUNT_CALC_FLAG)
		#LD_IN_USE		= AR_CONTROLS(LINE_DISCOUNT_IN_USE)
		#OD_IN_USE		= AR_CONTROLS(ORDER_DISCOUNT_IN_USE)
		#OD_BREAK		= AR_CONTROLS(ORDER_DISCOUNT_BREAK_ON)
		#OD_CALC		= AR_CONTROLS(ORDER_DISCOUNT_CALC_FLAG)
		#TAX_FLAG		= AR_CONTROLS(TAX_BASED_ON)
		#FREIGHT_TAXABLE	= AR_CONTROLS(FREIGHT_TAXABLE)
		#MISC_TAXABLE		= AR_CONTROLS(MISCELLANEOUS_TAXABLE)
		#DIV_TAX_ON_CASH	= AR_CONTROLS(SYS_TAX_ON_CASH)
		#DEF_FREIGHT_TAX_CODE	= AR_CONTROLS(DEF_FREIGHT_TAX_CODE)
		#DEF_MISC_TAX_CODE	  = AR_CONTROLS(DEF_MISC_TAX_CODE)
		#DEF_PART_TAX_CODE	  = AR_CONTROLS(DEF_PRODUCT_TAX_CODE)
		#DEF_CUST_TAX_CODE	  = AR_CONTROLS(DEF_CUSTOMER_TAX_CODE)
		#PHYSICAL_IN_USE	= AR_CONTROLS(PHYSICAL_UNITS_IN_USE)
		#DEF_WEIGHT_UNIT	= AR_CONTROLS(DEFAULT_WEIGHT_UNIT)
		#DEF_VOLUME_UNIT	= AR_CONTROLS(DEFAULT_VOLUME_UNIT)
		#BASE_CURRENCY_CODE		= AR_CONTROLS(SYS_CURRENCY_CODE)
		#CURRENCY_METHOD	= AR_CONTROLS(SYS_CURRENCY_METHOD)
		#PERMIT_RESERVATION		= AR_CONTROLS(PERMIT_RESERVATION)
		#DATE_CODE		= AR_CONTROLS(SYS_DATE_CODE)
		#ATP_AT_ORDER_ENTRY		= AR_CONTROLS(ATP_AT_ORDER_ENTRY)
		#IC_ATP_SELECTION_METHOD	= AR_CONTROLS(IC_ATP_SELECTION_METHOD)
		#SOP_REQUIRED_DATE_METHOD	= AR_CONTROLS(SOP_REQUIRED_DATE_METHOD)
		#SOP_LEAD_TIME			= AR_CONTROLS(SALES_ORDER_LEAD_TIME)
		#LD_AVAILABLE		 	= AR_CONTROLS(LINE_DISCOUNT_IN_USE)
		#TP_PROMOTIONS_AVAILABLE = AR_CONTROLS(TP_PROMOTIONS_IN_USE)

		#MANDATORY_CUSTOMER_PO		= AR_CONTROLS(SOP_CUSTOMER_PO_REQUIRED)
		IF (AR_CONTROLS(SOP_CUSTOMER_PO_REQUIRED) = "")
			#MANDATORY_CUSTOMER_PO = 0
		END_IF

		#AR_FREIGHT_IN_USE	= AR_CONTROLS(SOP_AR_FREIGHT_IN_USE)
		IF (AR_CONTROLS(SOP_AR_FREIGHT_IN_USE) = "")
			#AR_FREIGHT_IN_USE = #NO
		END_IF

		#DIV_ALLOWS_FREIGHT_OVERRIDE	= AR_CONTROLS(SOP_ALLOW_FREIGHT_OVERRIDE)
		#DIV_LINE_DISC_FREIGHT_INC	= AR_CONTROLS(SOP_LINE_DISC_FREIGHT_INCLUSIVE)

		IF (#ATP_IN_USE_FOR_COMPANY <> #YES)
			#ATP_AT_ORDER_ENTRY = #NO
		END_IF

		IF (#COMPANY_EC_REPORT_TYPE <> "")
			PERFORM GET_HOME_STATE
			IF (%STATUS = %FAILURE) EXIT
		END_IF

		DISPLAY DEFAULTS
	END_BLOCK

	OUTPUT_BLOCK DIVISION_DESC /ROW=2 /COL=18 &
			/SOURCE=(SECURITY_PERIOD_ACCESS_VT(CODE_DESCRIPTION))

	INPUT_BLOCK ORDER_NUMBER /ROW=2 /COL=69 &
			/PROMPT=(FIELD_PROMPT(ORDER_NUMBER)) &
			/TARGET=#ORDER_NUMBER &
			/USING=SALES_ORDER_HEADERS(ORDER_NUMBER) &
			/LOV=SALES_ORDER_HEADERS(ORDER_NUMBER,CUSTOMER_NUMBER,ORDER_DATE) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=DIVISION=#DIVISION &
			/LOV_WITH=ORDER_CYCLE=#ORDER_CYCLE &
			/LOV_WITH=SOP_DESTINATION_WAREHOUSE="" &
			/USE_IF=(#OPT <> "HEADER")

	! Here because MODIFY_HEADER selected in Order Totals
	OUTPUT_BLOCK ORDER_NUMBER_OT /ROW=2 /COL=69 &
			/PROMPT=(FIELD_PROMPT(ORDER_NUMBER)) &
			/SOURCE=#ORDER_NUMBER &
			/USING=SALES_ORDER_HEADERS(ORDER_NUMBER) &
			/USE_IF=(#OPT = "HEADER")

	BEGIN_BLOCK DEFAULTS
		
		#PROCESS_KEY = #COMPANY_CODE & "/" & #DIVISION & "/" & #ORDER_NUMBER
		PERFORM "GEMLB:LB_L_PROCESS_CONTROLS" LB_L_PROCESS_CONTROLS &
					(#COMPANY_CODE, &
					 ("CHECK"), 2, &
					 (#FUNCTION_ID), &
					 (#PROCESS_KEY), &
					 (#ID), &
					 "", &
					 #ERROR_OCCURRED, #ERROR_MESSAGE )
					 
		IF(%STATUS = %FAILURE OR #ERROR_OCCURRED)
			ERROR/TEXT_ONLY/WAIT #ERROR_MESSAGE
			ROLLBACK
			DISPLAY CLEAN
			#OPT=""
			GOTO SETUP
		ELSE
			COMMIT	
				
			FIND IN SALES_ORDER_HEADERS &
				/LOCK=WRITE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=ORDER_NUMBER=#ORDER_NUMBER &
				/WITH=SOP_DESTINATION_WAREHOUSE=""

			IF (%STATUS <> %SUCCESS)
				ROLLBACK
				MESSAGE/IDENTIFIER/BELL/WAIT P_52288
				#OPT = ""
				GOTO ORDER_NUMBER
			END_IF

			IF (SALES_ORDER_HEADERS(ORDER_CYCLE) <> #ORDER_CYCLE)
				ROLLBACK
				MESSAGE/IDENTIFIER/BELL/WAIT P_52350,SALES_ORDER_HEADERS(ORDER_CYCLE),#ORDER_CYCLE
				#OPT = ""
				GOTO ORDER_NUMBER
			END_IF

			IF (SALES_ORDER_HEADERS(STATUS_FLAG) <> "")
				MESSAGE/IDENTIFIER/BELL/WAIT P_56102
				ROLLBACK
				DISPLAY CLEAN
				#OPT = ""
				GOTO SETUP
			END_IF
			
			PERFORM "GEMLB:LB_L_PROCESS_CONTROLS" LB_L_PROCESS_CONTROLS &
						(#COMPANY_CODE, &
						 ("ADD"), 2, &
						 (#FUNCTION_ID), &
						 (#PROCESS_KEY), &
						 (#ID), &
						 "", &
						 #ERROR_OCCURRED, #ERROR_MESSAGE )
			
			IF(%STATUS = %FAILURE OR #ERROR_OCCURRED)
				ERROR/TEXT_ONLY/WAIT #ERROR_MESSAGE
				EXIT(%FAILURE)
			END_IF
			
			SALES_ORDER_HEADERS(STATUS_FLAG) = #NO
			COMMIT
		
			FIND IN SALES_ORDER_HEADERS &
				/LOCK=WRITE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=ORDER_NUMBER=#ORDER_NUMBER &
				/WITH=SOP_DESTINATION_WAREHOUSE=""

		END_IF

		! store the currency trans to base info
		DELETE ALL FROM SYS_CURRENCY_CONTROL_VT
		CLEAR_BUFFER SYS_CURRENCY_CONTROL_VT

		SYS_CURRENCY_CONTROL_VT(COMPANY_CODE)	= #COMPANY_CODE
		SYS_CURRENCY_CONTROL_VT(DIVISION)	= #DIVISION
		SYS_CURRENCY_CONTROL_VT(SOURCE_MODULE)	= PARAMETER("MODULE_SO")
		SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE)	= SALES_ORDER_HEADERS(SYS_CURRENCY_CODE)
		SYS_CURRENCY_CONTROL_VT(TRANSACTION_DATE)	= SALES_ORDER_HEADERS(SYS_CURRENCY_DATE)
		SYS_CURRENCY_CONTROL_VT(RATE_AUTHORITY)	= SALES_ORDER_HEADERS(SYS_RATE_AUTHORITY)
		SYS_CURRENCY_CONTROL_VT(RATE_TYPE)	= SALES_ORDER_HEADERS(SYS_RATE_TYPE)
		SYS_CURRENCY_CONTROL_VT(FIRST_CURRENCY_RATE)	= SALES_ORDER_HEADERS(SYS_CURRENCY_RATE)
		SYS_CURRENCY_CONTROL_VT(RATE_OVERRIDE)	= #YES
		SYS_CURRENCY_CONTROL_VT(CODE_RATE_INPUT_FLAG)	= #MODE
		SYS_CURRENCY_CONTROL_VT(FIXED_RATE_INDIC)	= SALES_ORDER_HEADERS(SYS_CURRENCY_FIXED_FLAG)
		SYS_CURRENCY_CONTROL_VT(CURR_RATIO_INDIC)	= SALES_ORDER_HEADERS(SYS_CURRENCY_RATIO_INDIC)

		ADD TO SYS_CURRENCY_CONTROL_VT

		PERFORM "GEMLB:LB_S_L_CURRENCY_RATES" ( #R_STATUS, #R_MESSAGE)
		IF (#R_STATUS <> #YES)
			ERROR/WAIT #R_MESSAGE
			#OPT = ""
			EXIT (%FAILURE)
		END_IF

		FIND IN SYS_CURRENCY_CONTROL_VT

		#BASE_2_CURRENCY_CODE	= SYS_CURRENCY_CONTROL_VT(BASE_2_CURRENCY_CODE)

		PERFORM SAVE_SYS_CURRENCY_CONTROL_VT

		#PRICING_METHOD = SALES_ORDER_HEADERS(PRICING_METHOD)
		!
		PERFORM SET_PRICING_METHOD_PROMPTS

	END_BLOCK

	! EDI Document ID number from flat file
	OUTPUT_BLOCK SYS_DOCUMENT_ID /ROW=7 /COL=57 &
			/PROMPT=(FIELD_SHORT_PROMPT(SYS_DOCUMENT_ID)) &
			/SOURCE=(SALES_ORDER_HEADERS(SYS_DOCUMENT_ID)) &
			/USE_IF=(#EDI_ACTIVE_FLAG=#YES)

	BEGIN_BLOCK FIND_CUSTOMER
		FIND IN CUSTOMERS &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/LOCK=NONE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_22151
			#OPT = ""
			EXIT
		END_IF

		FIND IN SALES_ORDER_LINES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE= #COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=ORDER_NUMBER=#ORDER_NUMBER &
			/WITH=STATUS_FLAG<>PARAMETER("STATUS_UPDATE")

		IF ( %STATUS = %SUCCESS )
			#ORDER_LINES_EXIST = #YES
		ELSE
			#ORDER_LINES_EXIST = #NO
		END_IF

		IF ( SALES_ORDER_HEADERS(TP_PROMOTIONS_IN_USE) = "" )
			#TP_PROMOTIONS_IN_USE = #NO
			SALES_ORDER_HEADERS(TP_PROMOTIONS_IN_USE) = #NO
		ELSE
			#TP_PROMOTIONS_IN_USE = SALES_ORDER_HEADERS(TP_PROMOTIONS_IN_USE)
		END_IF
		IF ( #TP_PROMOTIONS_IN_USE = #YES &
		AND  CUSTOMERS(TP_DISABLE_PROMOTIONS) = #YES )
			! Only change flag if no lines exist
			IF ( #ORDER_LINES_EXIST = #NO )
				#LD_IN_USE = #LD_AVAILABLE
				#TP_PROMOTIONS_IN_USE = #NO
				#TP_PROMOTIONS_AVAILABLE = #NO
				SALES_ORDER_HEADERS(TP_PROMOTIONS_IN_USE) = #NO
			END_IF
		END_IF
		!
		IF ( #TP_PROMOTIONS_IN_USE = #YES ) #LD_IN_USE = #NO

		#CUST_FREIGHT_CONTRACT	= CUSTOMERS(SYS_FREIGHT_CONTRACT_NUMBER)
		#CUST_FREIGHT_MODE	= CUSTOMERS(SYS_FREIGHT_MODE)

		#LD_CUST_GROUP     = CUSTOMERS(LINE_DISCOUNT_GROUP)
		#OD_CUST_GROUP     = CUSTOMERS(ORDER_DISCOUNT_GROUP)
		#PRICE_CODE			   = CUSTOMERS(PRICE_CODE)
		#ADDR_PRICE_CODE	 = CUSTOMERS(PRICE_CODE)
		#CUST_PRICE_CODE	 = CUSTOMERS(PRICE_CODE)
		#CUSTOMER_NAME     = CUSTOMERS(CUSTOMER_NAME)
		#CUST_PERMIT_RESERVATION = CUSTOMERS(PERMIT_RESERVATION)
		#AUTO_RESERVE	      = CUSTOMERS(AUTO_RESERVE)
		#ALLOW_ORDER_CLOSE 	= CUSTOMERS(SOP_ALLOW_ORDER_CLOSE)
		#CUST_SALESPERSON   = CUSTOMERS(SALESPERSON_CODE)
		#CUST_BROKER        = CUSTOMERS(BROKER_CODE)

		#CUSTOMER_NUMBER = SALES_ORDER_HEADERS(CUSTOMER_NUMBER)
		#ORDER_NUMBER	     = SALES_ORDER_HEADERS(ORDER_NUMBER)
		#ORDER_DATE	= SALES_ORDER_HEADERS(ORDER_DATE)
		#PRICING_METHOD = SALES_ORDER_HEADERS(PRICING_METHOD)
		#CURRENCY_CODE   = SALES_ORDER_HEADERS(SYS_CURRENCY_CODE)
		#CURRENCY_RATE   = SALES_ORDER_HEADERS(SYS_CURRENCY_RATE)
		#CURRENCY_DATE   = SALES_ORDER_HEADERS(SYS_CURRENCY_DATE)
		#RATE_AUTHORITY  = SALES_ORDER_HEADERS(SYS_RATE_AUTHORITY)
		#RATE_TYPE	 = SALES_ORDER_HEADERS(SYS_RATE_TYPE)
		#CURRENCY_RATIO_INDIC= SALES_ORDER_HEADERS(SYS_CURRENCY_RATIO_INDIC)
		#CURRENCY_FIXED  = SALES_ORDER_HEADERS(SYS_CURRENCY_FIXED_FLAG)

		#EFFECTIVE_DATE  = #CURRENCY_DATE
!Comment out the following line issue#368358-3
!		#ORIG_ORDER_VALUE = SALES_ORDER_HEADERS(TOTAL_ORDER_VALUE)
!		#ORIG_ORDER_VALUE_BASE = SALES_ORDER_HEADERS(SOP_ORDER_VALUE_BASE)
!End of comment out

		FIND IN SYS_COUNTRIES &
				/LOCK=NONE &
				/WITH=SYS_COUNTRY=CUSTOMERS(SYS_COUNTRY)

		#PHONE_MASK=SYS_COUNTRIES(SYS_PHONE_MASK)

		FIND IN SYS_CURRENCY_CODES &
			/LOCK=NONE &
			/WITH=SYS_CURRENCY_CODE = #CURRENCY_CODE

		#CURRENCY_MASK = SYS_CURRENCY_CODES(SYS_CURRENCY_MASK)
		#CURRENCY_DECIMAL=SYS_CURRENCY_CODES(SYS_CURRENCY_DECIMALS)

		PERFORM SPLIT_ORDER_CHECK

		DISPLAY DEFAULTS
	END_BLOCK

	!Change 013
	BEGIN_BLOCK LOOKUP_CONTACTS
		FIND IN VOL_CUSTOMER_CONTACTS &
			/WITH=CUSTOMER_CONTACT=SALES_ORDER_HEADERS(CUSTOMER_CONTACT) &
			/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/WITH=CONTACT_TYPE="Sales"

	DISPLAY DEFAULTS
	END_BLOCK
	!Change 013 End

	OUTPUT_BLOCK CUSTOMER_NUMBER /ROW=3 /COL=15 &
			/PROMPT=(FIELD_SHORT_PROMPT(CUSTOMER_NUMBER)) &
			/SOURCE=(SALES_ORDER_HEADERS(CUSTOMER_NUMBER))

	OUTPUT_BLOCK CUSTOMER_NAME /ROW=3 /COL=25 &
			/SOURCE=(CUSTOMERS(CUSTOMER_NAME))

	BEGIN_BLOCK CPANEL 
		PERFORM HEADER_CPANEL ("MODIFY",(#DIVISION),(#CUSTOMER_NUMBER),"")
	END_BLOCK

	BEGIN_BLOCK DISPLAY_ADDRESS
		FIND IN CUSTOMER_ADDRESSES &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/WITH=ADDRESS_CODE=SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)

		FIND IN SYS_COUNTRIES &
			/LOCK=NONE &
			/WITH=SYS_COUNTRY=CUSTOMER_ADDRESSES(SYS_COUNTRY)
			
		PERFORM "GEMLB:LB_ADDRESSES" (&
			"D", &
			(SYS_COUNTRIES(SYS_COUNTRY)), &
			"CUSTOMER_ADDRESSES", &
			"9", &
			"7", &
			MESSAGE("P_82258"), &
			"", &
			"", &
			"", &
			"", &
			#R1, &
			#R2, &
			#R3, &
			#R4, &
			#R5)

		GOTO LOAD_CODES_FROM_ADDRESSES
	END_BLOCK

	BEGIN_BLOCK CUSTOMER_PO
	! Customer PO and Customer Reference are synonymous

		INPUT_BLOCK CUSTOMER_REF_1 /ROW=4 /COL=15 &
			/TARGET=SALES_ORDER_HEADERS(CUSTOMER_REFERENCE) &
			/PROMPT=(MESSAGE("P_13029")) &
			/USE_IF=(#MANDATORY_CUSTOMER_PO = 0)

		INPUT_BLOCK CUSTOMER_REF_2 /ROW=4 /COL=15 &
			/TARGET=#CUSTOMER_REFERENCE &
			/SOURCE=SALES_ORDER_HEADERS(CUSTOMER_REFERENCE) &
			/PROMPT=(MESSAGE("P_13029")) &
			/USING=SALES_ORDER_HEADERS(CUSTOMER_REFERENCE),REQUIRED &
			/USE_IF=(#MANDATORY_CUSTOMER_PO > 0)

		IF (#MANDATORY_CUSTOMER_PO = 0) GOTO SPLIT_ORDER

		IF (#CUSTOMER_REFERENCE = SALES_ORDER_HEADERS(CUSTOMER_REFERENCE)) GOTO SPLIT_ORDER

		PERFORM CUSTOMER_PO_CHECK ((#MANDATORY_CUSTOMER_PO), (#CUSTOMER_REFERENCE), &
						(#ORDER_NUMBER), #R_PASS)
		IF (#R_PASS = #YES)
			SALES_ORDER_HEADERS(CUSTOMER_REFERENCE) = #CUSTOMER_REFERENCE
		ELSE
			GOTO CUSTOMER_REF_2
		END_IF

	END_BLOCK

	BEGIN_BLOCK SPLIT_ORDER
		! EDI split order for one document ID number / Cust PO Numb
		PERFORM SPLIT_ORDER_CHECK

		! Displays next to Customer PO number
		OUTPUT_BLOCK		 /ROW=4 /COL=35 /LEN=1 &
			/SOURCE=(#SPLIT_ORDER) &
			/ATTRIBUTES=NONE
	END_BLOCK

	INPUT_BLOCK DELIVERY_ADDRESS_CODE /ROW=6 /COL=15 &
			/TARGET=SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE) &
			/PROMPT=(MESSAGE("P_00318")) &
			/USING=REQUIRED &
			/LOV=CUSTOMER_ADDRESSES(ADDRESS_CODE,CUSTOMER_NAME,SYS_POSTAL_CODE) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=DIVISION=#DIVISION &
			/LOV_WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/LOV_WITH=ACTIVATION_STATUS = (PARAMETER("STATUS_ACTIVE")) &
			/USER_KEY1=(PERFORM "GEMSYS:SYS_M_ADD_CUSTOMER_ADDRESSES" &
					(#DIVISION,#CUSTOMER_NUMBER,SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE),#TAX_FLAG))

	BEGIN_BLOCK REDISPLAY_ADDRESS
		PERFORM VALIDATE_ADDRESS ((SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)),#HEADER_DELIVERY_ADDR_FLAG)
		IF ((%STATUS = %FAILURE) OR (%STATUS = %EMPTY))
			GOTO DELIVERY_ADDRESS_CODE
		END_IF

		FIND IN CUSTOMER_ADDRESSES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/WITH=ADDRESS_CODE=SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
			
		IF ( CUSTOMER_ADDRESSES(SYS_FINAL_DESTINATION) <> "1" AND #OLD_DELIVERY_ADDRESS_CODE <> SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE) ) 
			MESSAGE/IDENTIFIER/BELL P_37119
			#OLD_DELIVERY_ADDRESS_CODE = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
		END_IF 

		IF ( CUSTOMER_ADDRESSES(SYS_FINAL_DESTINATION) = "1" ) 
			#HEADER_DELIVERY_ADDR_FLAG = #YES
			SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE) = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
			
			#HEADER_COUNTRY_CODE   = CUSTOMER_ADDRESSES(SYS_COUNTRY)
			#HEADER_CITY           = CUSTOMER_ADDRESSES(SYS_CITY)
		
			IF ( CUSTOMER_ADDRESSES(SYS_STATE) <> "" ) 
				#HEADER_STATE_PROVINCE = CUSTOMER_ADDRESSES(SYS_STATE)
			ELSE
				#HEADER_STATE_PROVINCE = CUSTOMER_ADDRESSES(SYS_PROVINCE)
			END_IF			
		ELSE
			#HEADER_DELIVERY_ADDR_FLAG = #NO	
		END_IF 

		FIND IN SYS_COUNTRIES &
			/LOCK=NONE &
			/WITH=SYS_COUNTRY=CUSTOMER_ADDRESSES(SYS_COUNTRY)

		PERFORM "GEMLB:LB_ADDRESSES" (&
			"D", &
			(SYS_COUNTRIES(SYS_COUNTRY)), &
			"CUSTOMER_ADDRESSES", &
			"9", &
			"7", &
			MESSAGE("P_82258"), &
			"", &
			"", &
			"", &
			"", &
			#R1, &
			#R2, &
			#R3, &
			#R4, &
			#R5)

        PERFORM "GEMLB:LB_L_GET_PRICING_METHOD" ( &
					(#COMPANY_CODE), &
					(PARAMETER("MODULE_SO")), &
					(#DIVISION), &
					(SALES_ORDER_HEADERS(CUSTOMER_NUMBER)), &
					(""), &
					(SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)), &
					#ERROR_OCCURRED, &
					#ERROR_MESSAGE, &
					#TEST_PRICING_METHOD )

		IF ( #ERROR_OCCURRED )
			ERROR/TEXT_ONLY/BELL #ERROR_MESSAGE
			GOTO DELIVERY_ADDRESS_CODE
		END_IF

		IF ( #TEST_PRICING_METHOD <> #PRICING_METHOD )
			! Only change flag if no lines exist
			IF ( #ORDER_LINES_EXIST = #NO )
				#PRICING_METHOD = #TEST_PRICING_METHOD
				SALES_ORDER_HEADERS(PRICING_METHOD) = #PRICING_METHOD
			ELSE
				! Cannot change Pricing Method if Transaction Lines exist
				MESSAGE/IDENTIFIER/BELL/WAIT P_23207
			END_IF
		END_IF

		PERFORM SET_PRICING_METHOD_PROMPTS

	END_BLOCK

	BEGIN_BLOCK /DISPLAY_ONLY FINAL_ADDRESS_DIS 
		OUTPUT_BLOCK FINAL_ADDRESS_CODE_O /ROW=10 /COL=66 /LEN=10 &
			/SOURCE=SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE) &
			/PROMPT=FIELD_SHORT_PROMPT(FINAL_ADDRESS_CODE)
			
		FIND IN CUSTOMER_ADDRESSES &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
				/WITH=ADDRESS_CODE=SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE)
			
		#HEADER_COUNTRY_CODE   = CUSTOMER_ADDRESSES(SYS_COUNTRY)
		#HEADER_CITY           = CUSTOMER_ADDRESSES(SYS_CITY)
		
		IF ( CUSTOMER_ADDRESSES(SYS_STATE) <> "" ) 
			#HEADER_STATE_PROVINCE = CUSTOMER_ADDRESSES(SYS_STATE)
		ELSE
			#HEADER_STATE_PROVINCE = CUSTOMER_ADDRESSES(SYS_PROVINCE)
		END_IF

		OUTPUT_BLOCK FINAL_CITY_O /ROW=11 /COL=66 /LEN = 12 &
			/SOURCE=#HEADER_CITY &
			/PROMPT=MESSAGE("P_85010")

		OUTPUT_BLOCK FINAL_ADDRESS_STATE_PROV_O /ROW=12 /COL=66 /LEN = 12 &
			/SOURCE=#HEADER_STATE_PROVINCE &
			/PROMPT=MESSAGE("P_37127")
		
		OUTPUT_BLOCK FINAL_ADDRESS_COUNTRY_O /ROW=13 /COL=66 /LEN=12 &
			/SOURCE=#HEADER_COUNTRY_CODE &
			/PROMPT=FIELD_PROMPT(COUNTRY_CODE)	
	END_BLOCK	

	BEGIN_BLOCK FINAL_ADDRESS_DIS_01 
		OUTPUT_BLOCK FINAL_ADDRESS_CODE_O01 /ROW=10 /COL=66 /LEN=10 &
			/SOURCE=SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE) &
			/PROMPT=FIELD_SHORT_PROMPT(FINAL_ADDRESS_CODE)

		OUTPUT_BLOCK FINAL_CITY_O01 /ROW=11 /COL=66 /LEN = 12 &
			/SOURCE=#HEADER_CITY &
			/PROMPT=MESSAGE("P_85010")

		OUTPUT_BLOCK FINAL_ADDRESS_STATE_PROV_O01 /ROW=12 /COL=66 /LEN = 12 &
			/SOURCE=#HEADER_STATE_PROVINCE &
			/PROMPT=MESSAGE("P_37127")
		
		OUTPUT_BLOCK FINAL_ADDRESS_COUNTRY_O01 /ROW=13 /COL=66 /LEN=12 &
			/SOURCE=#HEADER_COUNTRY_CODE &
			/PROMPT=FIELD_PROMPT(COUNTRY_CODE)	
	END_BLOCK

	BEGIN_BLOCK FINAL_ADDRESS 			  
		
		IF ( #HEADER_DELIVERY_ADDR_FLAG = #YES ) 
			GOTO INVOICE_ADDRESS_CODE
		END_IF 
		
		INPUT_BLOCK FINAL_ADDRESS_CODE_I /ROW=10 /COL=66 /LEN=10 &
			/TARGET=SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE) &
			/PROMPT=FIELD_SHORT_PROMPT(FINAL_ADDRESS_CODE) &
			/USING=REQUIRED &
			/LOV=CUSTOMER_ADDRESSES(ADDRESS_CODE,CUSTOMER_NAME,SYS_POSTAL_CODE) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=DIVISION=#DIVISION &
			/LOV_WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/LOV_WITH=ACTIVATION_STATUS = (PARAMETER("STATUS_ACTIVE")) &
			/LOV_WITH=SYS_FINAL_DESTINATION = "1" &
			/USER_KEY1=(PERFORM "GEMSYS:SYS_M_ADD_CUSTOMER_ADDRESSES" &
					(#DIVISION,#CUSTOMER_NUMBER,SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE),#TAX_FLAG))
			
		PERFORM VALIDATE_ADDRESS ((SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE)),#HEADER_FINAL_ADDR_FLAG)
		
		IF ( %STATUS = %FAILURE OR %STATUS = %EMPTY ) 
			GOTO FINAL_ADDRESS_CODE_I
		END_IF 
		
		IF ( #HEADER_FINAL_ADDR_FLAG <> #YES ) 
			MESSAGE/IDENTIFIER/BELL P_37116
			GOTO FINAL_ADDRESS_CODE_I
		ELSE
			#HEADER_FINAL_ADDRESS_CODE = SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE)
			FIND IN CUSTOMER_ADDRESSES &
				/LOCK=NONE &
				/SECONDARY &
				/STREAM_NAME=CU2 &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
				/WITH=ADDRESS_CODE=SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE)
			
			#HEADER_COUNTRY_CODE   = CU2:CUSTOMER_ADDRESSES(SYS_COUNTRY)
			#HEADER_CITY           = CU2:CUSTOMER_ADDRESSES(SYS_CITY)
		
			IF ( CU2:CUSTOMER_ADDRESSES(SYS_STATE) <> "" ) 
				#HEADER_STATE_PROVINCE = CU2:CUSTOMER_ADDRESSES(SYS_STATE)
			ELSE
				#HEADER_STATE_PROVINCE = CU2:CUSTOMER_ADDRESSES(SYS_PROVINCE)
			END_IF		
		END_IF

		OUTPUT_BLOCK FINAL_CITY_O1 /ROW=11 /COL=66 /LEN = 12 &
				/SOURCE=#HEADER_CITY &
				/PROMPT=MESSAGE("P_85010")

		OUTPUT_BLOCK FINAL_ADDRESS_STATE_PROV_O1 /ROW=12 /COL=66 /LEN = 12 &
				/SOURCE=#HEADER_STATE_PROVINCE &
				/PROMPT=MESSAGE("P_37127")
		
		OUTPUT_BLOCK FINAL_ADDRESS_COUNTRY_O1 /ROW=13 /COL=66 /LEN=12 &
				/SOURCE=#HEADER_COUNTRY_CODE &
				/PROMPT=FIELD_PROMPT(COUNTRY_CODE)
						
	END_BLOCK

	INPUT_BLOCK INVOICE_ADDRESS_CODE /ROW=13 /COL=15 &
		/TARGET=SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE) &
		/PROMPT=(MESSAGE("P_12241")) &
		/USING=REQUIRED &
		/LOV=CUSTOMER_ADDRESSES(ADDRESS_CODE,CUSTOMER_NAME,SYS_POSTAL_CODE) &
		/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
		/LOV_WITH=DIVISION=#DIVISION &
		/LOV_WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
		/LOV_WITH=ACTIVATION_STATUS = (PARAMETER("STATUS_ACTIVE")) &
		/USER_KEY1=(PERFORM "GEMSYS:SYS_M_ADD_CUSTOMER_ADDRESSES" &
				(#DIVISION,#CUSTOMER_NUMBER,SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE),#TAX_FLAG))

	BEGIN_BLOCK CHECK_INVOICE_ADDRESS
		PERFORM VALIDATE_ADDRESS ((SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)))
		IF ((%STATUS = %FAILURE) OR (%STATUS = %EMPTY))
			GOTO INVOICE_ADDRESS_CODE
		END_IF

		! Reastablish streams
		FIND IN CUSTOMER_ADDRESSES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/WITH=ADDRESS_CODE=SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)

		FIND IN SYS_COUNTRIES &
				/LOCK=NONE &
				/WITH=SYS_COUNTRY=CUSTOMERS(SYS_COUNTRY)
	END_BLOCK

	INPUT_BLOCK SALES_ORDER_TYPE /ROW=3 /COL=70 &
			/OPTIONS=DOMAIN_LOCK_NONE &
			/DOMAIN=SALES_ORDER_TYPES &
			/PROMPT=(FIELD_PROMPT(SALES_ORDER_TYPE)) &
			/TARGET=SALES_ORDER_HEADERS(SALES_ORDER_TYPE) &
			/LOV=SALES_ORDER_TYPES(SALES_ORDER_TYPE,CODE_DESCRIPTION) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE

	BEGIN_BLOCK /DISPLAY_ONLY REQUIRED_DATE_METHOD
		IF (#SOP_REQUIRED_DATE_METHOD = "")
			IF (#DIVISION <> "")
				FIND IN AR_CONTROLS &
					/LOCK=NONE &
					/WITH=COMPANY_CODE = #COMPANY_CODE &
					/WITH=DIVISION = #DIVISION

				#SOP_REQUIRED_DATE_METHOD = AR_CONTROLS(SOP_REQUIRED_DATE_METHOD)
			ELSE_IF (#DEFAULT_AR_DIVISION <> "")
				FIND IN AR_CONTROLS &
					/LOCK=NONE &
					/WITH=COMPANY_CODE = #COMPANY_CODE &
					/WITH=DIVISION = #DEFAULT_AR_DIVISION

				#SOP_REQUIRED_DATE_METHOD = AR_CONTROLS(SOP_REQUIRED_DATE_METHOD)
			ELSE
				#SOP_REQUIRED_DATE_METHOD = PARAMETER("DATE_METHOD_DESPATCH")
			END_IF
		END_IF

		IF (#SOP_REQUIRED_DATE_METHOD = #METHOD_RECEIPT)
			#REQUESTED_DATE_PROMPT = FIELD_PROMPT(SYS_DELIVERY_DATE)
		ELSE
			#REQUESTED_DATE_PROMPT = FIELD_PROMPT(SYS_SHIPPING_DATE)
		END_IF
		! The Required Date Method decides what type of date the Requested Shipping Date
		! is to be.  If the method value is "D" for despatch/shipping, then the Requested
		! Shipping Date is the date the order is to be shipped to the customer.  If "R"
		! for receive/delivery, the Requested Shipping Date is the date the order is to
		! received at the customer's delivery address.
	END_BLOCK

	BEGIN_BLOCK MAINTAIN_REQUESTED_DATE
		! Requested Date Prompt for the INPUT_BLOCK below
		OUTPUT_BLOCK REQUESTED_DATE_PROMPT /ROW=5 /COL=51 &
			/PROMPT="" &
			/ATTRIBUTES=NONE &
			/SOURCE=#REQUESTED_DATE_PROMPT &
			/OUTPUT_MASK="!-@@@@@@@@@@@@@"

		INPUT_BLOCK REQUESTED_DATE /ROW=5 /COL=66 &
			/PROMPT="" &
			!Change 017 - Requested date = 1/1/2099 by default
			/SOURCE_IF=(SALES_ORDER_HEADERS(SYS_REQUESTED_DATE)=""),"1-JAN-2099" &
			/SOURCE_IF=(SALES_ORDER_HEADERS(SYS_REQUESTED_DATE)<>""),SALES_ORDER_HEADERS(SYS_REQUESTED_DATE) &
			!Change 017 End
			/TARGET=SALES_ORDER_HEADERS(SYS_REQUESTED_DATE) &
			/INPUT_MASK=(#DEFAULT_DATE_MASK)

	END_BLOCK

	INPUT_BLOCK ORDER_DATE /ROW=6 /COL=66 &
		/PROMPT=(FIELD_PROMPT(ORDER_DATE)) &
		/TARGET=SALES_ORDER_HEADERS(ORDER_DATE) &
		/INPUT_MASK=(#DEFAULT_DATE_MASK)

	IF ( SALES_ORDER_HEADERS(ORDER_DATE) = "" )
		SALES_ORDER_HEADERS(ORDER_DATE) = %TODAY
		GOTO ORDER_DATE
	END_IF

	BEGIN_BLOCK DATE_CALCULATIONS
		PERFORM DATE_CALCULATIONS
	END_BLOCK

	INPUT_BLOCK CUSTOMER_CONTACT /ROW=7 /COL=57 &
			/PROMPT=(FIELD_PROMPT(CUSTOMER_CONTACT)) &
			!Change 013
			!/TARGET=SALES_ORDER_HEADERS(CUSTOMER_CONTACT)
			/TARGET=SALES_ORDER_HEADERS(CUSTOMER_CONTACT) &
			/LOV=VOL_CUSTOMER_CONTACTS(CUSTOMER_CONTACT,CUSTOMER_NUMBER,PHONE) &
			/LOV_WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) & 
			/LOV_WITH=CONTACT_TYPE="Sales" &

	BEGIN_BLOCK RELOOKUP_CONTACTS
		FIND IN VOL_CUSTOMER_CONTACTS &
			/WITH=CUSTOMER_CONTACT=SALES_ORDER_HEADERS(CUSTOMER_CONTACT) &
			/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/WITH=CONTACT_TYPE="Sales"

		IF (%STATUS<>%SUCCESS AND SALES_ORDER_HEADERS(CUSTOMER_CONTACT)<>"") 
			PERFORM "GEMSOP:SOPC_M_VOL_CUSTOMER_CONTACTS" ADD (SALES_ORDER_HEADERS(CUSTOMER_NUMBER),SALES_ORDER_HEADERS(CUSTOMER_CONTACT),"Sales")

			!Look again
			FIND IN VOL_CUSTOMER_CONTACTS &
				/WITH=CUSTOMER_CONTACT=SALES_ORDER_HEADERS(CUSTOMER_CONTACT) &
				/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
				/WITH=CONTACT_TYPE="Sales"
		END_IF

		!If the status is %FAILURE, they backed out of the "Add new Contact" form. They need to either enter a valid contact right away, create a valid contact, or enter no contact at all.
		IF (%STATUS=%FAILURE AND SALES_ORDER_HEADERS(CUSTOMER_CONTACT)<>"") 
			ERROR /TEXT_ONLY "You must enter a valid customer contact or leave this field blank to continue."
			GOTO CUSTOMER_CONTACT
		END_IF

		IF ((VOL_CUSTOMER_CONTACTS(PHONE)="" OR VOL_CUSTOMER_CONTACTS(EMAIL)="") AND SALES_ORDER_HEADERS(CUSTOMER_CONTACT)<>"")
			PERFORM ASK_UPDATE_CONTACT(SALES_ORDER_HEADERS(CUSTOMER_NUMBER),SALES_ORDER_HEADERS(CUSTOMER_CONTACT))
			FIND IN VOL_CUSTOMER_CONTACTS &
				/WITH=CUSTOMER_CONTACT=SALES_ORDER_HEADERS(CUSTOMER_CONTACT) &
				/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
				/WITH=CONTACT_TYPE="Sales"
		END_IF

		DISPLAY DEFAULTS
	END_BLOCK
!Change 013 End


	OUTPUT_BLOCK PHONE /ROW=8 /COL=57 /LEN=21 &
			/PROMPT=(FIELD_PROMPT(PHONE)) &
			!Change 013 - Use customer contact phone # if a contact is chosen
			!/SOURCE=(CUSTOMERS(PHONE)) &
			/SOURCE_IF=(VOL_CUSTOMER_CONTACTS(PHONE)=""),CUSTOMERS(PHONE) &
			/SOURCE_IF=(VOL_CUSTOMER_CONTACTS(PHONE)<>""),VOL_CUSTOMER_CONTACTS(PHONE) &
			!Change 013 End
			/OUTPUT_MASK=(#PHONE_MASK)

	!Change 013
	OUTPUT_BLOCK EMAIL /ROW=9 /COL=57 &
			/PROMPT=(FIELD_PROMPT(EMAIL)) &
			/SOURCE=VOL_CUSTOMER_CONTACTS(EMAIL) &
			/USING=VOL_CUSTOMER_CONTACTS(EMAIL)
	!Change 013 End

	INPUT_BLOCK COST_CENTER /ROW=15 /COL=28 &
			/PROMPT=(FIELD_PROMPT(COST_CENTER)) &
			/TARGET=SALES_ORDER_HEADERS(COST_CENTER) &
			/LOV=COST_CENTERS(COST_CENTER,DESCRIPTION) &
			/LOV_SORTED_BY=(COST_CENTER) &
 			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=SOURCE_MODULE=(PARAMETER("LOCAL_SOURCE_MODULE"))

	BEGIN_BLOCK COST_CENTER_DESC
		IF (SALES_ORDER_HEADERS(COST_CENTER)<>"")

			FIND IN COST_CENTERS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=SOURCE_MODULE=(PARAMETER("LOCAL_SOURCE_MODULE")) &
				/WITH=COST_CENTER=SALES_ORDER_HEADERS(COST_CENTER)

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_00347
				GOTO COST_CENTER
			END_IF

			#DESC = COST_CENTERS(DESCRIPTION)
		ELSE
			#DESC = ""
		END_IF

		OUTPUT_BLOCK		 /ROW=15 /COL=32 &
			/SOURCE=(#DESC) &
			/USING=COST_CENTERS(DESCRIPTION)
	END_BLOCK

	BEGIN_BLOCK /DISPLAY_ONLY COST_CENTER_DESC_DISP
		FIND IN COST_CENTERS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=SOURCE_MODULE=(PARAMETER("LOCAL_SOURCE_MODULE")) &
			/WITH=COST_CENTER=SALES_ORDER_HEADERS(COST_CENTER)

		OUTPUT_BLOCK		 /ROW=15 /COL=32 &
			/SOURCE=(COST_CENTERS(DESCRIPTION))
	END_BLOCK

	OUTPUT_BLOCK PRICING_METHOD /ROW=16 /COL=32 &
		/PROMPT=FIELD_PROMPT(PRICING_METHOD) &
		/SOURCE=(SALES_ORDER_HEADERS(PRICING_METHOD)) &
		/USE_IF=(#PRICING_METHOD_OPTIONAL=#YES)

	OUTPUT_BLOCK PRICING_METHOD_DESC /ROW=16 /COL=34 &
		/ATTRIBUTES=NONE &
		/SOURCE=(#PRICING_METHOD_DESC) &
		/USE_IF=(#PRICING_METHOD_OPTIONAL=#YES)

	OUTPUT_BLOCK CREDIT_STATUS_CODE /ROW=17 /COL=28 &
			/PROMPT=(FIELD_PROMPT(CREDIT_STATUS_CODE)) &
			/SOURCE=(SALES_ORDER_HEADERS(CREDIT_STATUS_CODE))

	BEGIN_BLOCK  /DISPLAY_ONLY CREDIT_HOLD_STATUS
		FIND IN CREDIT_HOLD_STATUS_CODES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=CREDIT_STATUS_CODE = SALES_ORDER_HEADERS(CREDIT_STATUS_CODE)
	END_BLOCK

	OUTPUT_BLOCK HOLD_STATUS_DESC /ROW=17 /COL=35 &
			/SOURCE=(CREDIT_HOLD_STATUS_CODES(DESCRIPTION))

	BEGIN_BLOCK CURRENCY
		PERFORM CHECK_FOR_QTY_PROCESSED

		IF (#QTY_PROCESSED = 0)
			#MODE = "B"
		ELSE
			MESSAGE/IDENTIFIER/BELL/WAIT P_01264
			#MODE = "R"
		END_IF

		#DEFAULT_CURRENCY_CODE = SALES_ORDER_HEADERS(SYS_CURRENCY_CODE)
		! restore the current trans/base currency info
		PERFORM RESTOR_SYS_CURRENCY_CONTROL_VT
		! Allow modification of the currency code
		SYS_CURRENCY_CONTROL_VT(CODE_RATE_INPUT_FLAG) = "C"
		SYS_CURRENCY_CONTROL_VT(RATE_OVERRIDE) = #NO

		! allow input of currency infor for trans/base
		PERFORM "GEMLB:LB_C_CURRENCY_RATES" ( #CURRENCY_OVERRIDE, #R_STATUS, #R_MESSAGE)
		IF (%STATUS = %EXIT OR %STATUS = %BACK) GOTO COST_CENTER
		IF (#R_STATUS <> #YES)
			ERROR/WAIT #R_MESSAGE
			EXIT (%FAILURE)
		END_IF
		FIND IN SYS_CURRENCY_CONTROL_VT
		SALES_ORDER_HEADERS(SYS_CURRENCY_CODE)  = SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE)
		SALES_ORDER_HEADERS(SYS_CURRENCY_RATE)  =  &
			SYS_CURRENCY_CONTROL_VT(FIRST_CURRENCY_RATE)
		SALES_ORDER_HEADERS(SYS_CURRENCY_DATE)  = SYS_CURRENCY_CONTROL_VT(CURRENCY_DATE)
		SALES_ORDER_HEADERS(SYS_CURRENCY_FIXED_FLAG)	= SYS_CURRENCY_CONTROL_VT(FIXED_RATE_INDIC)
		SALES_ORDER_HEADERS(SYS_CURRENCY_RATIO_INDIC)	= SYS_CURRENCY_CONTROL_VT(CURR_RATIO_INDIC)
		SALES_ORDER_HEADERS(SYS_RATE_AUTHORITY)	= SYS_CURRENCY_CONTROL_VT(RATE_AUTHORITY)
		SALES_ORDER_HEADERS(SYS_RATE_TYPE)	= SYS_CURRENCY_CONTROL_VT(RATE_TYPE)


		IF (SYS_CURRENCY_CONTROL_VT(STORE_BASE_2) = #YES)
			SALES_ORDER_HEADERS(SYS_CURRENCY_2_RATE) = SYS_CURRENCY_CONTROL_VT(SECOND_CURRENCY_RATE)
			SALES_ORDER_HEADERS(SYS_CURRENCY_2_RATIO_INDIC) = SYS_CURRENCY_CONTROL_VT(SYS_CURRENCY_2_RATIO_INDIC)
		END_IF
		#CURRENCY_CODE	= SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE)
		#RATE_AUTHORITY	= SYS_CURRENCY_CONTROL_VT(RATE_AUTHORITY)
		#RATE_TYPE	= SYS_CURRENCY_CONTROL_VT(RATE_TYPE)
		#CURRENCY_RATE	= SYS_CURRENCY_CONTROL_VT(FIRST_CURRENCY_RATE)
		#CURRENCY_RATIO_INDIC	= SYS_CURRENCY_CONTROL_VT(CURR_RATIO_INDIC)
		#CURRENCY_FIXED	= SYS_CURRENCY_CONTROL_VT(FIXED_RATE_INDIC)
		#CURRENCY_MASK	= SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_MASK)
		#CURRENCY_DESC	= SYS_CURRENCY_CONTROL_VT(CURRENCY_CODE_DESCRIPTION)
		#CURRENCY_DECIMAL	= SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_DECIMALS)
		#CURRENCY_DATE	= SYS_CURRENCY_CONTROL_VT(TRANSACTION_DATE)

		PERFORM SAVE_SYS_CURRENCY_CONTROL_VT
		PERFORM CHANGE_CURRENCY_ON_LINES
		
		! Recalculate SALES_ORDER_HEADERS(SOP_ORDER_TOTAL_BASE), CUSTOMERS(OS_ORDER_VALUE)
		IF ( #CURRENCY_METHOD > "0" ) 
		    PERFORM UPDATE_ORDER_VALUE_BASE
		END_IF 
		
	END_BLOCK

	OUTPUT_BLOCK SHOW_CURRENCY /ROW=19 /COL=23 &
			/DOMAIN=SYS_CURRENCY_CODES &
			/PROMPT=(FIELD_PROMPT(SYS_CURRENCY_CODE)) &
			/SOURCE=(SALES_ORDER_HEADERS(SYS_CURRENCY_CODE))

	OUTPUT_BLOCK CURRENCY_DESC /ROW=19 /COL=30 &
			/SOURCE=(SYS_CURRENCY_CODES(SYS_CURRENCY_SHORT_DESC))

	OUTPUT_BLOCK CURRENCY_RATE /ROW=20 /COL=23 &
			/PROMPT=(MESSAGE("P_00562")) &
			/SOURCE=(SALES_ORDER_HEADERS(SYS_CURRENCY_RATE)) &
			/ATTRIBUTES=BOLD &
			/USE_IF=(#CURRENCY_METHOD <> "0")

	BEGIN_BLOCK LOAD_CODES_FROM_ADDRESSES
		! Finished redisplaying screen for MODIFY_HEADER
		! selected in Order Totals.
		#OPT = ""
		
		#ADDRESS_CODE		= SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
		#OLD_DELIVERY_ADDRESS_CODE = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
		#HEADER_FINAL_ADDRESS_CODE = SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE)
		#LOCATION		= SALES_ORDER_HEADERS(LOCATION)
		#BROKER_CODE	= SALES_ORDER_HEADERS(BROKER_CODE)
		#SALESPERSON_CODE	= SALES_ORDER_HEADERS(SALESPERSON_CODE)
		#SALES_COMMISSION_CODE	= SALES_ORDER_HEADERS(SALES_COMMISSION_CODE)
		#SA_GROUP		= SALES_ORDER_HEADERS(SALES_ANALYSIS_GROUP)
		#REQUIRED_DATE		= SALES_ORDER_HEADERS(REQUIRED_DATE)
		#ORDER_DATE		= SALES_ORDER_HEADERS(ORDER_DATE)
		#DEF_DELIVERY_ADDRESS	= SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
		#DEF_DELIVERY_INST	  = SALES_ORDER_HEADERS(DELIVERY_INSTRUCTIONS)
		#DEF_SHIP_METHOD	= SALES_ORDER_HEADERS(SHIP_METHOD)
		#DEF_COST_CENTER	= SALES_ORDER_HEADERS(COST_CENTER)
		#ORDER_TYPE		= SALES_ORDER_HEADERS(SALES_ORDER_TYPE)
		#PRINT_CONF_FLAG	= SALES_ORDER_HEADERS(SOP_PRINT_CONF_FLAG)

		#PRICING_METHOD = SALES_ORDER_HEADERS(PRICING_METHOD)
		#DEF_FREIGHT_CONTRACT	= SALES_ORDER_HEADERS(SYS_FREIGHT_CONTRACT_NUMBER)
		#DEF_FREIGHT_MODE	= SALES_ORDER_HEADERS(SYS_FREIGHT_MODE)
		#DEF_SHIP_TERMS		= SALES_ORDER_HEADERS(SOP_SHIPPING_TERMS_CODE)

		PERFORM LOAD_CODES_FROM_ADDRESSES

		IF (%STATUS=%FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_52166
		ELSE

			#DEF_BOD_CODE	= CUSTOMER_ADDRESSES(SYS_BOD_CODE)
			#DEF_ORDER_COUNTRY = CUSTOMER_ADDRESSES(SYS_COUNTRY)
			#DEF_ORDER_DIST_ZONE = CUSTOMER_ADDRESSES(SYS_DISTRIBUTION_ZONE)

			PERFORM GET_DIST_ZONE_DETAILS (#DEF_ORDER_COUNTRY, #DEF_ORDER_DIST_ZONE)
			IF ((#DEF_BOD_CODE = "") AND (#ADDR_DIST_BOD_CODE <> ""))
				#DEF_BOD_CODE = #ADDR_DIST_BOD_CODE
			END_IF

			#DEF_CUST_PAYS_FREIGHT = #NO
			IF ((#AR_FREIGHT_IN_USE = #YES) OR (#SYS_TM_IN_USE = #YES))
				IF (SALES_ORDER_HEADERS(SOP_SHIPPING_TERMS_CODE) <> "")
					FIND IN SOP_SHIPPING_TERMS &
						/LOCK=NONE &
						/WITH=COMPANY_CODE = #COMPANY_CODE &
						/WITH=SOP_SHIPPING_TERMS_CODE = SALES_ORDER_HEADERS(SOP_SHIPPING_TERMS_CODE)

					IF (%STATUS <> %FAILURE)
						#DEF_CUST_PAYS_FREIGHT = SOP_SHIPPING_TERMS(SOP_FREIGHT_INCLUSIVE)
					END_IF
				END_IF
			END_IF

			IF (CUSTOMER_ADDRESSES(PRICE_CODE) <> "")
				#ADDR_PRICE_CODE = CUSTOMER_ADDRESSES(PRICE_CODE)
				#PRICE_CODE      = CUSTOMER_ADDRESSES(PRICE_CODE)
			ELSE
				#ADDR_PRICE_CODE = #CUST_PRICE_CODE
				#PRICE_CODE      = #CUST_PRICE_CODE
			END_IF

			IF (#AR_FREIGHT_IN_USE = #YES)
				IF (#ADDR_PRICE_CODE <> "")
					FIND IN PRICE_CODES &
						/LOCK=NONE &
						/WITH=COMPANY_CODE = #COMPANY_CODE  &
						/WITH=DIVISION = #DIVISION &
						/WITH=PRICE_CODE = #PRICE_CODE

					IF (%STATUS <> %FAILURE)
						#DEF_PRICE_FREIGHT_INCLUSIVE = PRICE_CODES(SOP_FREIGHT_INCLUSIVE)
						#DEF_PRICE_CODE_DESCRIPTION = PRICE_CODES(DESCRIPTION)
					END_IF
					IF (#DEF_PRICE_FREIGHT_INCLUSIVE = "")
						#DEF_PRICE_FREIGHT_INCLUSIVE = #NO
					END_IF
				END_IF
			END_IF

			IF (#COMPANY_EC_REPORT_TYPE <> "")
				PERFORM GET_CUSTOMER_STATE
				IF (%STATUS = %FAILURE) EXIT (%FAILURE)

				IF (#EC_REPORT_TYPE <> "")
					#DEF_EC_TRANSACTION_TYPE = CUSTOMER_ADDRESSES(SYS_EC_TRANSACTION_TYPE)
					#DEF_EC_MODE_TRANSPORT = CUSTOMER_ADDRESSES(SYS_EC_MODE_OF_TRANSPORT)
					#DEF_EC_DELIVERY_TERMS = CUSTOMER_ADDRESSES(SYS_EC_DELIVERY_TERMS)
					#DEF_EC_REPORT_TYPE = #EC_REPORT_TYPE
					#DEF_EC_STAT_FACTOR = CUSTOMER_ADDRESSES(SYS_EC_FACTOR)
				END_IF
			END_IF

		END_IF

	END_BLOCK

	BEGIN_BLOCK EDI_NOTES
		#FLAG_EDI=0
		PERFORM FIND_SYS_DOC_ID

		IF (#FLAG_EDI=1)
			MENU_BLOCK MENU_EDI /ROW=11 /COL=45 &
			/SOURCE=(MESSAGE("P_00110")) /NOREPEAT &
			/BACK=(GOTO MENU_EDI) &
			/EXIT=(GOTO MENU_EDI) &
			/ITEM=(MESSAGE("P_00110")),(MESSAGE("P_54049")),(GOTO LINES) &
			/ITEM=(MESSAGE("P_00016")),(MESSAGE("P_24086")),(GOTO DEFAULT_ADDRESSES) &
			/ITEM=(MESSAGE("P_92864")),(MESSAGE("P_37117")),(GOTO FINAL_ADDRESSES) &
			/ITEM=(MESSAGE("P_00107")),(MESSAGE("P_50093")),(PERFORM ORDER_ANALYSIS_CODES) &
			/ITEM=(MESSAGE("P_71086")),(MESSAGE("P_71083")),(PERFORM EDI_NOTES) &
			/ITEM=(MESSAGE("P_00192")),(MESSAGE("P_91501")),(GOTO MAINTAIN_REQUESTED_DATE) &
			/ITEM=(MESSAGE("P_91149")),(MESSAGE("P_51143")),(PERFORM MODIFY_PAYMENT_TYPE) &
			/ITEM=(MESSAGE("P_00323")),(MESSAGE("P_00057")),(GOTO CUSTOMER_PO) &
			/ITEM=(MESSAGE("P_00108")),(MESSAGE("P_93536")),(PERFORM ORDER_HEADER_COMMENTS) &
			/ITEM_IF=(#ALLOW_ORDER_CLOSE = #YES),(MESSAGE("P_03219")), &
				(MESSAGE("PC_CLOSE") & " " & MESSAGE("P_00469")),(GOTO CLOSE_ORDERS) &
			/ITEM=(MESSAGE("P_00430")),(MESSAGE("P_54054")),(GOTO DUMMY)

			GOTO MENU_EDI
		END_IF
	END_BLOCK

	MENU_BLOCK MENU_1 /ROW=11 /COL=45 &
			/SOURCE=(MESSAGE("P_00110")) /NOREPEAT &
			/BACK=(GOTO MENU_1) &
			/EXIT=(GOTO MENU_1) &
			/ITEM=(MESSAGE("P_00110")),(MESSAGE("P_54049")),(GOTO LINES) &
			/ITEM=(MESSAGE("P_00016")),(MESSAGE("P_24086")),(GOTO DEFAULT_ADDRESSES) &
			/ITEM=(MESSAGE("P_92864")),(MESSAGE("P_37117")),(GOTO FINAL_ADDRESSES) &
			/ITEM=(MESSAGE("P_00107")),(MESSAGE("P_50093")),(PERFORM ORDER_ANALYSIS_CODES) &
			/ITEM=(MESSAGE("P_24164")),(MESSAGE("P_54056")),(PERFORM ORDER_NOTES) &
			/ITEM=(MESSAGE("P_00192")),(MESSAGE("P_91501")),(GOTO MAINTAIN_REQUESTED_DATE) &
			/ITEM=(MESSAGE("P_91149")),(MESSAGE("P_51143")),(PERFORM MODIFY_PAYMENT_TYPE) &
			/ITEM=(MESSAGE("P_00323")),(MESSAGE("P_00057")),(GOTO CUSTOMER_PO) &
			/ITEM=(MESSAGE("P_00108")),(MESSAGE("P_93536")),(PERFORM ORDER_HEADER_COMMENTS) &
			/ITEM_IF=(#ALLOW_ORDER_CLOSE = #YES),(MESSAGE("P_03219")), &
				(MESSAGE("PC_CLOSE") & " " & MESSAGE("P_00469")),(GOTO CLOSE_ORDERS) &
			/ITEM=(MESSAGE("P_00430")),(MESSAGE("P_54054")),(GOTO DUMMY)

	BEGIN_BLOCK DISPLAY_CHANGES
		PERFORM SET_PRICING_METHOD_PROMPTS
		DISPLAY DEFAULTS
		GOTO MENU_1
	END_BLOCK

	BEGIN_BLOCK CLOSE_ORDERS
		COMMIT

		#EXISTING_NO_CLOSED_LINE = #NO
		
		PERFORM CHECK_EXISTING_NO_CLOSED_LINE
		
		IF ( #EXISTING_NO_CLOSED_LINE = #NO ) 
			MESSAGE/IDENTIFIER/BELL P_89937
			GOTO MENU_1
		END_IF

		PERFORM CLOSE_ORDER
		
		!executing workflow funtions
		IF (#R_CLOSE_STATUS = %SUCCESS)
			PERFORM "GEMLB:LB_L_SALESORDER_EVENTS" MANUAL_CLOSE (#COMPANY_CODE, #DIVISION,#ORDER_NUMBER, #CUSTOMER_NUMBER, #SALESPERSON_CODE, #ORDER_DATE, #GRAND_TOTAL, #CURRENCY_CODE)
		END_IF
		
		START_TRANSACTION
		FIND IN SALES_ORDER_HEADERS &
			/LOCK=WRITE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=ORDER_NUMBER=#ORDER_NUMBER &
			/WITH=SOP_DESTINATION_WAREHOUSE=""
		GOTO MENU_1
	END_BLOCK

	BEGIN_BLOCK TRANSPORT
		COMMIT

		PERFORM EDIT_TRANSPORT_REQS

		FIND IN SALES_ORDER_HEADERS &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=ORDER_NUMBER=#ORDER_NUMBER

		GOTO EDI_NOTES
	END_BLOCK

	BEGIN_BLOCK LINES

		PERFORM LOAD_ADJUSTMENTS
		IF ( #TP_PROMOTIONS_IN_USE = #YES )
			PERFORM LOAD_CUSTOMER_PROMOTIONS
			IF (%STATUS = %FAILURE) EXIT (%FAILURE)
		END_IF

!Comment out the following line issue#368358-4
!		#OLD_TOTAL_ORDER_VALUE = SALES_ORDER_HEADERS(TOTAL_ORDER_VALUE)
!End of comment out 
		#TOTAL_ORDER_WEIGHT = SALES_ORDER_HEADERS(WEIGHT)
		#TOTAL_ORDER_VOLUME = SALES_ORDER_HEADERS(VOLUME)
		#TOTAL_WEIGHT_UOM = SALES_ORDER_HEADERS(WEIGHT_UOM)
		#TOTAL_VOLUME_UOM = SALES_ORDER_HEADERS(VOLUME_UOM)
		#TOTAL_LINE_DISCOUNT = SALES_ORDER_HEADERS(LINE_DISCOUNT)
		#TOTAL_LINE_TAX = SALES_ORDER_HEADERS(LINE_TAX)
		#GRAND_TOTAL = SALES_ORDER_HEADERS(SOP_ORDER_TOTAL_CURRENCY)+#TOTAL_LINE_TAX &
				- #TOTAL_LINE_DISCOUNT

		IF (#CURRENCY_METHOD <> 0)
			#OLD_BASE_TOTAL = SALES_ORDER_HEADERS(SOP_ORDER_TOTAL_BASE)
		ELSE
			#OLD_BASE_TOTAL = SALES_ORDER_HEADERS(SOP_ORDER_TOTAL_CURRENCY)
		END_IF

		#SYS_REQUESTED_DATE = SALES_ORDER_HEADERS(SYS_REQUESTED_DATE)
		#CUSTOMER_REFERENCE = SALES_ORDER_HEADERS(CUSTOMER_REFERENCE)

		SALES_ORDER_HEADERS(STATUS_FLAG) = #NO
		
		FIND IN UNITS_OF_MEASURE &
			/LOCK=NONE &
			/WITH=UNIT_OF_MEASURE=#TOTAL_VOLUME_UOM

		IF (%STATUS = %SUCCESS)
			#TOTAL_UOM_MASK = UNITS_OF_MEASURE(IC_QUANTITY_MASK)
		ELSE
			#TOTAL_UOM_MASK = ""
		END_IF
		
		FIND IN UNITS_OF_MEASURE &
			/LOCK=NONE &
			/WITH=UNIT_OF_MEASURE=#TOTAL_WEIGHT_UOM
			
		IF (%STATUS = %SUCCESS)
			#TOTAL_WEIGHT_MASK = UNITS_OF_MEASURE(IC_QUANTITY_MASK)
		ELSE
			#TOTAL_WEIGHT_MASK = ""
		END_IF
		
		COMMIT
		PERFORM HEADER_REPRINT

	END_BLOCK

	BEGIN_BLOCK DUMMY
		COMMIT
		!executing workflow funtions
	    PERFORM WORKFLOW_CREDIT_CHECK
		
		START_TRANSACTION
		FIND IN SALES_ORDER_HEADERS &
			/LOCK=WRITE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=ORDER_NUMBER=#ORDER_NUMBER

		SALES_ORDER_HEADERS(STATUS_FLAG) = ""
		
		PERFORM "GEMLB:LB_L_PROCESS_CONTROLS" LB_L_PROCESS_CONTROLS &
					(#COMPANY_CODE, &
					 ("DELETE"), 0, &
					 (#FUNCTION_ID), &
					 (#PROCESS_KEY), &
					 (#ID), &
					 "", &
					 #ERROR_OCCURRED, #ERROR_MESSAGE )
		
		IF(%STATUS = %FAILURE OR #ERROR_OCCURRED)
			ERROR/TEXT_ONLY/WAIT #ERROR_MESSAGE
			EXIT(%FAILURE)
		END_IF
		
		COMMIT

		IF (#OPT="DESPATCH")
			PERFORM PRODUCE_DESPATCH_NOTE
		END_IF

		IF (#OPT = "HEADER")
			! MODIFY_HEADER option selected in Order Totals
			! Exit and return to Modify form to clear /REMAIN windows
			EXIT (%SUCCESS)
		END_IF

		IF (#PRINT_CONF_FLAG = #YES)
			PERFORM PRODUCE_ORDER_PRINT
		END_IF

		GOTO FINISH
	END_BLOCK

	BEGIN_BLOCK DEFAULT_ADDRESSES
		#OLD_DELIVERY_ADDRESS = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)

		PERFORM DEFAULT_ADDRESSES

		#DEF_DELIVERY_ADDRESS = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
		#SALESPERSON_CODE	  = SALES_ORDER_HEADERS(SALESPERSON_CODE)
		#BROKER_CODE	= SALES_ORDER_HEADERS(BROKER_CODE)

		#DEF_DELIVERY_INST	= SALES_ORDER_HEADERS(DELIVERY_INSTRUCTIONS)
		#DEF_SHIP_METHOD	= SALES_ORDER_HEADERS(SHIP_METHOD)

		GOTO REDISPLAY_DEFAULT_ADDRESSES_1
	END_BLOCK

	BEGIN_BLOCK FINAL_ADDRESSES 
		PERFORM FINAL_ADDRESSES
	END_BLOCK

	BEGIN_BLOCK REDISPLAY_DEFAULT_ADDRESSES_1
		OUTPUT_BLOCK		 /ROW=6 /COL=15 &
			/SOURCE=(SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE))

		FIND IN CUSTOMER_ADDRESSES &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/WITH=ADDRESS_CODE=SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)

		FIND IN SYS_COUNTRIES &
			/LOCK=NONE &
			/WITH=SYS_COUNTRY=CUSTOMER_ADDRESSES(SYS_COUNTRY)
			
		PERFORM "GEMLB:LB_ADDRESSES" (&
			"D", &
			(SYS_COUNTRIES(SYS_COUNTRY)), &
			"CUSTOMER_ADDRESSES", &
			"9", &
			"7", &
			MESSAGE("P_82258"), &
			"", &
			"", &
			"", &
			"", &
			#R1, &
			#R2, &
			#R3, &
			#R4, &
			#R5)

		OUTPUT_BLOCK FINAL_ADDRESS_CODE_O1 /ROW=10 /COL=66 /LEN=10 &
			/SOURCE=SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE) &
			/PROMPT=FIELD_SHORT_PROMPT(FINAL_ADDRESS_CODE)
				
		OUTPUT_BLOCK FINAL_CITY_O2 /ROW=11 /COL=66 /LEN=12 &
			/SOURCE=#HEADER_CITY &
			/PROMPT=MESSAGE("P_85010")

		OUTPUT_BLOCK FINAL_ADDRESS_STATE_PROV_O2 /ROW=12 /COL=66 /LEN=12 &
			/SOURCE=#HEADER_STATE_PROVINCE &
			/PROMPT=MESSAGE("P_37127")
		
		OUTPUT_BLOCK FINAL_ADDRESS_COUNTRY_O2 /ROW=13 /COL=66 /LEN=12 &
			/SOURCE=#HEADER_COUNTRY_CODE &
			/PROMPT=FIELD_PROMPT(COUNTRY_CODE)

		OUTPUT_BLOCK		 /ROW=13 /COL=15 &
			/SOURCE=(SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE))

		OUTPUT_BLOCK  /ROW=16 /COL=32 &
			/PROMPT=FIELD_PROMPT(PRICING_METHOD) &
			/SOURCE=(SALES_ORDER_HEADERS(PRICING_METHOD)) &
			/USE_IF=(#PRICING_METHOD_OPTIONAL=#YES)

		OUTPUT_BLOCK  /ROW=16 /COL=34 &
			/ATTRIBUTES=NONE &
			/SOURCE=(#PRICING_METHOD_DESC) &
			/USE_IF=(#PRICING_METHOD_OPTIONAL=#YES)

		GOTO MENU_1
	END_BLOCK

	BEGIN_BLOCK FINISH
	END_BLOCK

END_FORM


PROCEDURE_FORM FIND_SYS_DOC_ID &
	/TABLE=SOP_ORDER_NOTES &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION=#DIVISION &
	/WITH=ORDER_NUMBER=#ORDER_NUMBER

	BEGIN_BLOCK ID
		#SYS_EDI_SENDER_ID	  =SOP_ORDER_NOTES(SYS_EDI_SENDER_ID)
		#SYS_DOCUMENT_ID	=SOP_ORDER_NOTES(SYS_DOCUMENT_ID)
		#NOTE_REFERENCE_CODE		 =SOP_ORDER_NOTES(NOTE_REFERENCE_CODE)

		#FLAG_EDI=1
	END_BLOCK
END_FORM

FORM EDI_NOTES /ROW=8 /COL=2 /HEIGHT=16 /WIDTH=78 &
	/TITLE=(MESSAGE("P_71085"))

	OUTPUT_BLOCK NOTE_REFER_CODE /ROW=2 /COL=35 &
			/PROMPT=(FIELD_PROMPT(NOTE_REFERENCE_CODE)) &
			/SOURCE=#NOTE_REFERENCE_CODE


	OUTPUT_BLOCK SENDER_ID /ROW=3 /COL=35 &
			/PROMPT=(FIELD_PROMPT(SYS_EDI_SENDER_ID)) &
			/SOURCE=#SYS_EDI_SENDER_ID

	OUTPUT_BLOCK DOCUMENT_ID /ROW=4 /COL=35 &
			/PROMPT=(FIELD_PROMPT(SYS_DOCUMENT_ID)) &
			/SOURCE=#SYS_DOCUMENT_ID

	BEGIN_BLOCK NOTES
		PERFORM DISPLAY_NOTES
	END_BLOCK


END_FORM

TABLE_FORM DISPLAY_NOTES  /ROW=14 /COL=25 /HEIGHT=9 /WIDTH=22 &
	/TABLE=SOP_ORDER_NOTES &
	/READ_ONLY &
	/ROW_HEIGHT=5 &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION=#DIVISION &
	/WITH=SYS_DOCUMENT_ID=#SYS_DOCUMENT_ID &
	/WITH=SYS_EDI_SENDER_ID=#SYS_EDI_SENDER_ID &
	/WITH=NOTE_REFERENCE_CODE=#NOTE_REFERENCE_CODE

	OUTPUT_BLOCK NOTE_DESCRIPTION /ROW=1 /COL=2 /LEN=20 /HEIGHT=5 &
		/SOURCE=SOP_ORDER_NOTES(NOTE_DESCRIPTION) &
		/HEADING=FIELD_PROMPT(NOTE_DESCRIPTION)

END_FORM

FORM COPY /ROW=3 /COL=2 /HEIGHT=21 /WIDTH=78 &
	/TITLE=(MESSAGE("P_54028"))

	BEGIN_BLOCK SETUP
		SALES_ORDER_HEADERS(COMPANY_CODE)=#COMPANY_CODE
	END_BLOCK

	BEGIN_BLOCK DELETE_MISC_VT
		DELETE ALL FROM SALES_MISC_ADJUSTMENTS_VT
	END_BLOCK

	INPUT_BLOCK DIVISION /ROW=2 /COL=28 &
			/PROMPT=(FIELD_PROMPT(DIVISION)) &
			/TARGET=SALES_ORDER_HEADERS(DIVISION) &
			/SOURCE=(#DEFAULT_AR_DIVISION) &
			/LOV=SECURITY_PERIOD_ACCESS_VT(SYS_ACCESS_CODE,CODE_DESCRIPTION) &
			/LOV_WITH=SYS_ACCESS_TYPE=(PARAMETER("ACCESS_TYPE_DIVISION")) &
			/LOV_WITH=SOURCE_MODULE=(PARAMETER("MODULE_SO")) &
			/LOV_WITH=SYS_ALLOW_ACCESS=#YES

	BEGIN_BLOCK EXTRACT_DIVISION
		FIND IN AR_CONTROLS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=DIVISION = SALES_ORDER_HEADERS(DIVISION)

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00354
			GOTO DIVISION
		END_IF

		FIND IN SECURITY_PERIOD_ACCESS_VT &
			/WITH=SYS_ACCESS_TYPE=(PARAMETER("ACCESS_TYPE_DIVISION")) &
			/WITH=SYS_ACCESS_CODE=SALES_ORDER_HEADERS(DIVISION) &
			/WITH=SOURCE_MODULE=(PARAMETER("MODULE_SO")) &

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00447
			GOTO DIVISION
		END_IF

		IF (SECURITY_PERIOD_ACCESS_VT(SYS_ALLOW_ACCESS) <> #YES)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00756
			GOTO DIVISION
		END_IF

		IF (AR_CONTROLS(SOP_ACTIVE)<>#YES)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00243
			EXIT
		END_IF

		#DIVISION				= SALES_ORDER_HEADERS(DIVISION)
		#CONTRACT_PRICES		= AR_CONTROLS(CONTRACT_PRICES_IN_USE)
		#PROMOTION_PRICES		= AR_CONTROLS(PROMOTION_PRICES_IN_USE)
		#CONTRACT_OVERRIDE	  	= AR_CONTROLS(CONTRACT_PRICES_OVERRIDE)
		#PROMOTION_OVERRIDE		= AR_CONTROLS(PROMOTION_PRICE_OVERRIDE)
		#PRICE_OVERRIDE			= AR_CONTROLS(SALES_PRICE_OVERRIDE)
		#PROM_OVER_CONTRACTS	= AR_CONTROLS(PROMOTION_OVERRIDE_CONTRACTS)
		IF ( #SYS_TP_IN_USE = #YES )
			#TP_PROMOTIONS_IN_USE		= AR_CONTROLS(TP_PROMOTIONS_IN_USE)
		ELSE
			#TP_PROMOTIONS_IN_USE		= #NO
		END_IF
		#LD_OVERRIDE		= AR_CONTROLS(LINE_DISCOUNT_OVERRIDE)
		#LD_INV			= AR_CONTROLS(LINE_DISCOUNT_INV_FLAG)
		#LD_CUS			= AR_CONTROLS(LINE_DISCOUNT_CUST_FLAG)
		#LD_BREAK		= AR_CONTROLS(LINE_DISCOUNT_BREAK_ON)
		#LD_CALC		= AR_CONTROLS(LINE_DISCOUNT_CALC_FLAG)
		#LD_IN_USE		= AR_CONTROLS(LINE_DISCOUNT_IN_USE)
		#OD_IN_USE		= AR_CONTROLS(ORDER_DISCOUNT_IN_USE)
		#OD_BREAK		= AR_CONTROLS(ORDER_DISCOUNT_BREAK_ON)
		#OD_CALC		= AR_CONTROLS(ORDER_DISCOUNT_CALC_FLAG)
		#TAX_FLAG		= AR_CONTROLS(TAX_BASED_ON)
		#FREIGHT_TAXABLE	= AR_CONTROLS(FREIGHT_TAXABLE)
		#MISC_TAXABLE		= AR_CONTROLS(MISCELLANEOUS_TAXABLE)
		#DIV_TAX_ON_CASH	= AR_CONTROLS(SYS_TAX_ON_CASH)
		#DEF_FREIGHT_TAX_CODE	   = AR_CONTROLS(DEF_FREIGHT_TAX_CODE)
		#DEF_MISC_TAX_CODE	  = AR_CONTROLS(DEF_MISC_TAX_CODE)
		#DEF_PART_TAX_CODE	  = AR_CONTROLS(DEF_PRODUCT_TAX_CODE)
		#DEF_CUST_TAX_CODE	  = AR_CONTROLS(DEF_CUSTOMER_TAX_CODE)
		#PHYSICAL_IN_USE	= AR_CONTROLS(PHYSICAL_UNITS_IN_USE)
		#DEF_WEIGHT_UNIT	= AR_CONTROLS(DEFAULT_WEIGHT_UNIT)
		#DEF_VOLUME_UNIT	= AR_CONTROLS(DEFAULT_VOLUME_UNIT)
		#DIVISION_NAME		= AR_CONTROLS(DIVISION_NAME)
		#BASE_CURRENCY_CODE		= AR_CONTROLS(SYS_CURRENCY_CODE)
		#CURRENCY_METHOD		= AR_CONTROLS(SYS_CURRENCY_METHOD)
		#PERMIT_RESERVATION		= AR_CONTROLS(PERMIT_RESERVATION)
		#DATE_CODE			= AR_CONTROLS(SYS_DATE_CODE)
		#ATP_AT_ORDER_ENTRY		= AR_CONTROLS(ATP_AT_ORDER_ENTRY)
		#IC_ATP_SELECTION_METHOD	= AR_CONTROLS(IC_ATP_SELECTION_METHOD)
		#SOP_REQUIRED_DATE_METHOD	= AR_CONTROLS(SOP_REQUIRED_DATE_METHOD)
		#SOP_LEAD_TIME			= AR_CONTROLS(SALES_ORDER_LEAD_TIME)

		#MANDATORY_CUSTOMER_PO		= AR_CONTROLS(SOP_CUSTOMER_PO_REQUIRED)
		IF (AR_CONTROLS(SOP_CUSTOMER_PO_REQUIRED) = "")
			#MANDATORY_CUSTOMER_PO = 0
		END_IF

		#AR_FREIGHT_IN_USE	= AR_CONTROLS(SOP_AR_FREIGHT_IN_USE)
		IF (AR_CONTROLS(SOP_AR_FREIGHT_IN_USE) = "")
			#AR_FREIGHT_IN_USE = #NO
		END_IF

		#DIV_ALLOWS_FREIGHT_OVERRIDE	= AR_CONTROLS(SOP_ALLOW_FREIGHT_OVERRIDE)
		#DIV_LINE_DISC_FREIGHT_INC	= AR_CONTROLS(SOP_LINE_DISC_FREIGHT_INCLUSIVE)

		IF (#ATP_IN_USE_FOR_COMPANY <> #YES)
			#ATP_AT_ORDER_ENTRY = #NO
		END_IF

		IF (#COMPANY_EC_REPORT_TYPE <> "")
			PERFORM GET_HOME_STATE
			IF (%STATUS = %FAILURE) EXIT
		END_IF
	END_BLOCK

	OUTPUT_BLOCK DIVISION_DESC /ROW=2 /COL=31 &
			/SOURCE=(SECURITY_PERIOD_ACCESS_VT(CODE_DESCRIPTION))

	BEGIN_BLOCK GET_BASE_CURRENCY
		#BASE_ROW = 5
		#BASE_COL = 12

		IF (#CURRENCY_METHOD <> 0)
			PERFORM SHOW_BASE_CURRENCY
		ELSE
			PERFORM BLANK_BASE_CURRENCY
		END_IF
	END_BLOCK

	INPUT_BLOCK ORDER_NUMBER /ROW=4 /COL=28 &
			/DOMAIN=SALES_ORDER_HEADERS &
			/PROMPT=(MESSAGE("P_5ORDER_NUMBER_1")) &
			/TARGET=SALES_ORDER_HEADERS(ORDER_NUMBER) &
			/LOV=SALES_ORDER_HEADERS(ORDER_NUMBER,CUSTOMER_NUMBER,ORDER_DATE,CUSTOMER_REFERENCE) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=DIVISION=#DIVISION &
			/LOV_WITH=SOP_DESTINATION_WAREHOUSE=""

	OUTPUT_BLOCK ORDER_DATE /ROW=4 /COL=55 &
			/PROMPT=(FIELD_PROMPT(ORDER_DATE)) &
			/SOURCE=(SALES_ORDER_HEADERS(ORDER_DATE))

	OUTPUT_BLOCK CUSTOMER /ROW=6 /COL=28 &
			/PROMPT=(FIELD_SHORT_PROMPT(CUSTOMER_NUMBER)) &
			/SOURCE=(SALES_ORDER_HEADERS(CUSTOMER_NUMBER))

	BEGIN_BLOCK FIND_CUSTOMER
		FIND IN CUSTOMERS &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/LOCK=NONE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_22151
			EXIT
		END_IF

		IF (CUSTOMERS(STOP_CODE) <> "")
			FIND IN STOP_CODES &
				/LOCK=NONE &
				/WITH=STOP_CODE=CUSTOMERS(STOP_CODE)

			MESSAGE/IDENTIFIER/BELL/WAIT P_00881,CUSTOMERS(STOP_CODE),STOP_CODES(CODE_DESCRIPTION)
			GOTO ORDER_NUMBER
		END_IF

		#CUST_PERMIT_RESERVATION=CUSTOMERS(PERMIT_RESERVATION)
		#AUTO_RESERVE=CUSTOMERS(AUTO_RESERVE)

		FIND IN SYS_COUNTRIES &
			/LOCK=NONE &
			/WITH=SYS_COUNTRY=CUSTOMERS(SYS_COUNTRY)

		#PHONE_MASK = SYS_COUNTRIES(SYS_PHONE_MASK)

		#ORIGINAL_CUSTOMER = SALES_ORDER_HEADERS(CUSTOMER_NUMBER)
	END_BLOCK

	OUTPUT_BLOCK CUSTOMER_NAME /ROW=7 /COL=28 &
			/SOURCE=(CUSTOMERS(CUSTOMER_NAME))

	BEGIN_BLOCK CPANEL 
		PERFORM HEADER_CPANEL ("COPY",(#DIVISION),(SALES_ORDER_HEADERS(CUSTOMER_NUMBER)),(SALES_ORDER_HEADERS(ORDER_NUMBER)))
	END_BLOCK

	BEGIN_BLOCK DISPLAY_ADDRESS
		PERFORM "GEMLB:LB_ADDRESSES" (&
			"D", &
			(SYS_COUNTRIES(SYS_COUNTRY)), &
			"CUSTOMERS", &
			"10", &
			"20", &
			MESSAGE("P_82258"), &
			"", &
			"", &
			"", &
			"", &
			#R1, &
			#R2, &
			#R3, &
			#R4, &
			#R5)
	END_BLOCK

	YESNO_BLOCK CONFIRM /ROW=17 /COL=28 &
			/PROMPT=(MESSAGE("P_59019")) &
			/FAILURE=(GOTO ORDER_NUMBER)

	BEGIN_BLOCK COPY
		MESSAGE/IDENTIFIER P_72013

		#ORDER_NUMBER_COPY = SALES_ORDER_HEADERS(ORDER_NUMBER)
		COMMIT

		PERFORM COPY_EXTRACT
		PERFORM ENTRY_FROM_COPY
	END_BLOCK

END_FORM


FORM SHOW_BASE_CURRENCY /ROW=(#BASE_ROW) /COL=(#BASE_COL) /HEIGHT=1 /WIDTH=43 &
	/REMAIN &
	/ATTRIBUTES=NOBORDER


	BEGIN_BLOCK SETUP
		FIND IN SYS_CURRENCY_CODES &
			/LOCK=NONE &
			/WITH=SYS_CURRENCY_CODE=#BASE_CURRENCY_CODE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_82400
			EXIT (%FAILURE)
		END_IF
	END_BLOCK

	OUTPUT_BLOCK BASE_CURRENCY /ROW=1 /COL=18 &
			/PROMPT=(FIELD_PROMPT(SALES_ORDER_HEADERS,SYS_BASE_CURRENCY)) &
			/SOURCE=(SYS_CURRENCY_CODES(SYS_CURRENCY_CODE))

	OUTPUT_BLOCK BASE_CURRENCY_DESC /ROW=1 /COL=25 &
			/SOURCE=(SYS_CURRENCY_CODES(SYS_CURRENCY_SHORT_DESC))

END_FORM


FORM BLANK_BASE_CURRENCY /ROW=5 /COL=2 /HEIGHT=1 /WIDTH=43 &
	/REMAIN &
	/ATTRIBUTES=NOBORDER


	OUTPUT_BLOCK BLOCK_1 /ROW=1 /COL=2 /LEN=42 &
			/SOURCE=("") &
			/ATTRIBUTES=NONE

END_FORM


PROCEDURE_FORM COPY_CHECK &
	/TABLE = SALES_ORDER_LINES &
	/LOCK=NONE &
	/WITH= COMPANY_CODE = #COMPANY_CODE &
	/WITH = DIVISION = #DIVISION &
	/WITH = ORDER_NUMBER = #ORDER_NUMBER


	BEGIN_BLOCK CHECK

		FIND IN SALES_ORDER_LINE_QTYS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION = #DIVISION &
			/WITH=ORDER_NUMBER=#ORDER_NUMBER &
			/WITH = ORDER_LINE_NUMBER = SALES_ORDER_LINES(ORDER_LINE_NUMBER) &
			/WITH = UNIT_OF_MEASURE = SALES_ORDER_LINES(UNIT_SALES)
		IF (%STATUS <> %SUCCESS)
			EXIT(%FAILURE)
		END_IF
	END_BLOCK

END_FORM


PROCEDURE_FORM COPY_EXTRACT


	BEGIN_BLOCK GET_ORDER_AGAIN
		FIND IN AA:SALES_ORDER_HEADERS &
			/SECONDARY &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=ORDER_NUMBER=#ORDER_NUMBER_COPY &
			/LOCK=NONE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_52213
			EXIT
		END_IF

		CLEAR_BUFFER SALES_ORDER_HEADERS

		#BROKER_CODE						= AA:SALES_ORDER_HEADERS(BROKER_CODE)
		#SALESPERSON_CODE					 = AA:SALES_ORDER_HEADERS(SALESPERSON_CODE)
		#SALES_COMMISSION_CODE			 = AA:SALES_ORDER_HEADERS(SALES_COMMISSION_CODE)

		SALES_ORDER_HEADERS(COMPANY_CODE)		= AA:SALES_ORDER_HEADERS(COMPANY_CODE)
		SALES_ORDER_HEADERS(DIVISION)			= AA:SALES_ORDER_HEADERS(DIVISION)
		SALES_ORDER_HEADERS(SALES_ORDER_TYPE)		= AA:SALES_ORDER_HEADERS(SALES_ORDER_TYPE)
		SALES_ORDER_HEADERS(ORDER_CYCLE)		= #ORDER_CYCLE
		SALES_ORDER_HEADERS(CUSTOMER_NUMBER)		= AA:SALES_ORDER_HEADERS(CUSTOMER_NUMBER)
		SALES_ORDER_HEADERS(PRICING_METHOD)		= AA:SALES_ORDER_HEADERS(PRICING_METHOD)
		SALES_ORDER_HEADERS(FREIGHT)			= AA:SALES_ORDER_HEADERS(FREIGHT)
		SALES_ORDER_HEADERS(MISCELLANEOUS)		= AA:SALES_ORDER_HEADERS(MISCELLANEOUS)
		SALES_ORDER_HEADERS(CREDIT_STATUS_CODE)		= ""
		SALES_ORDER_HEADERS(SYS_CURRENCY_CODE)		= AA:SALES_ORDER_HEADERS(SYS_CURRENCY_CODE)
		SALES_ORDER_HEADERS(SYS_CURRENCY_RATE)		= AA:SALES_ORDER_HEADERS(SYS_CURRENCY_RATE)
		SALES_ORDER_HEADERS(SYS_CURRENCY_DATE)		= AA:SALES_ORDER_HEADERS(SYS_CURRENCY_DATE)
		SALES_ORDER_HEADERS(SYS_CURRENCY_2_RATE)	= AA:SALES_ORDER_HEADERS(SYS_CURRENCY_2_RATE)
		SALES_ORDER_HEADERS(SYS_CURRENCY_DATE)		= AA:SALES_ORDER_HEADERS(SYS_CURRENCY_DATE)
		SALES_ORDER_HEADERS(SYS_BASE_CURRENCY)		= AA:SALES_ORDER_HEADERS(SYS_BASE_CURRENCY)
		SALES_ORDER_HEADERS(SYS_RATE_TYPE)		= AA:SALES_ORDER_HEADERS(SYS_RATE_TYPE)
		SALES_ORDER_HEADERS(SYS_RATE_2_TYPE)		= AA:SALES_ORDER_HEADERS(SYS_RATE_2_TYPE)
		SALES_ORDER_HEADERS(SYS_RATE_AUTHORITY)		= AA:SALES_ORDER_HEADERS(SYS_RATE_AUTHORITY)
		SALES_ORDER_HEADERS(SYS_RATE_2_AUTHORITY)	= AA:SALES_ORDER_HEADERS(SYS_RATE_2_AUTHORITY)
		SALES_ORDER_HEADERS(SYS_CURRENCY_RATIO_INDIC)	  = AA:SALES_ORDER_HEADERS(SYS_CURRENCY_RATIO_INDIC)
		SALES_ORDER_HEADERS(SYS_CURRENCY_2_RATIO_INDIC)	= AA:SALES_ORDER_HEADERS(SYS_CURRENCY_2_RATIO_INDIC)
		SALES_ORDER_HEADERS(SYS_CURRENCY_FIXED_FLAG)		 = AA:SALES_ORDER_HEADERS(SYS_CURRENCY_FIXED_FLAG)
		SALES_ORDER_HEADERS(SYS_CURRENCY_2_FIXED_FLAG)	= AA:SALES_ORDER_HEADERS(SYS_CURRENCY_2_FIXED_FLAG)
		SALES_ORDER_HEADERS(CUSTOMER_CONTACT)		= AA:SALES_ORDER_HEADERS(CUSTOMER_CONTACT)
		SALES_ORDER_HEADERS(COST_CENTER)		= AA:SALES_ORDER_HEADERS(COST_CENTER)
		SALES_ORDER_HEADERS(SYS_PRINT_PART_DETAIL)	  = AA:SALES_ORDER_HEADERS(SYS_PRINT_PART_DETAIL)
		SALES_ORDER_HEADERS(DELIVERY_INSTRUCTIONS)	  = AA:SALES_ORDER_HEADERS(DELIVERY_INSTRUCTIONS)
		SALES_ORDER_HEADERS(SHIP_METHOD)		= AA:SALES_ORDER_HEADERS(SHIP_METHOD)
		SALES_ORDER_HEADERS(MP_INVOICE_CUSTOMER)	= AA:SALES_ORDER_HEADERS(MP_INVOICE_CUSTOMER)
		SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)	  = AA:SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)
		SALES_ORDER_HEADERS(MP_SHIPPING_CUSTOMER)	= AA:SALES_ORDER_HEADERS(MP_SHIPPING_CUSTOMER)
		SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)	= AA:SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
		SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE)	    = AA:SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE)
		SALES_ORDER_HEADERS(AR_DRAFT_PAYMENT_TYPE)	= AA:SALES_ORDER_HEADERS(AR_DRAFT_PAYMENT_TYPE)
		SALES_ORDER_HEADERS(SOP_SHIPPING_TERMS_CODE)	= AA:SALES_ORDER_HEADERS(SOP_SHIPPING_TERMS_CODE)
		SALES_ORDER_HEADERS(NOTES)			= AA:SALES_ORDER_HEADERS(NOTES)
		SALES_ORDER_HEADERS(SOP_DESTINATION_WAREHOUSE)	= ""
		SALES_ORDER_HEADERS(SOP_PRINT_CONF_FLAG)	= AA:SALES_ORDER_HEADERS(SOP_PRINT_CONF_FLAG)
		SALES_ORDER_HEADERS(SYS_FREIGHT_CONTRACT_NUMBER)	= AA:SALES_ORDER_HEADERS(SYS_FREIGHT_CONTRACT_NUMBER)
		SALES_ORDER_HEADERS(SYS_FREIGHT_MODE)		= AA:SALES_ORDER_HEADERS(SYS_FREIGHT_MODE)
		!Change 018
		SALES_ORDER_HEADERS(VOL_3RD_PARTY_FREIGHT_BILL) = AA:SALES_ORDER_HEADERS(VOL_3RD_PARTY_FREIGHT_BILL)
		!Change 018 End
		
		#HEADER_FINAL_ADDRESS_CODE              = SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE)
		
		! store the currency trans to base info
		DELETE ALL FROM SYS_CURRENCY_CONTROL_VT
		CLEAR_BUFFER SYS_CURRENCY_CONTROL_VT

		SYS_CURRENCY_CONTROL_VT(COMPANY_CODE)	= #COMPANY_CODE
		SYS_CURRENCY_CONTROL_VT(DIVISION)	= #DIVISION
		SYS_CURRENCY_CONTROL_VT(SOURCE_MODULE)	= PARAMETER("MODULE_SO")
		SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE)	= SALES_ORDER_HEADERS(SYS_CURRENCY_CODE)
		SYS_CURRENCY_CONTROL_VT(TRANSACTION_DATE)	= SALES_ORDER_HEADERS(SYS_CURRENCY_DATE)
		SYS_CURRENCY_CONTROL_VT(RATE_AUTHORITY)	= SALES_ORDER_HEADERS(SYS_RATE_AUTHORITY)
		SYS_CURRENCY_CONTROL_VT(RATE_TYPE)	= SALES_ORDER_HEADERS(SYS_RATE_TYPE)
		SYS_CURRENCY_CONTROL_VT(FIRST_CURRENCY_RATE)	= SALES_ORDER_HEADERS(SYS_CURRENCY_RATE)
		SYS_CURRENCY_CONTROL_VT(RATE_OVERRIDE)	= #YES
		SYS_CURRENCY_CONTROL_VT(CODE_RATE_INPUT_FLAG)	= #MODE
		SYS_CURRENCY_CONTROL_VT(FIXED_RATE_INDIC)	= SALES_ORDER_HEADERS(SYS_CURRENCY_FIXED_FLAG)
		SYS_CURRENCY_CONTROL_VT(CURR_RATIO_INDIC)	= SALES_ORDER_HEADERS(SYS_CURRENCY_RATIO_INDIC)
		ADD TO SYS_CURRENCY_CONTROL_VT
		PERFORM SAVE_SYS_CURRENCY_CONTROL_VT
	END_BLOCK

END_FORM


FORM ENTRY_FROM_COPY /ROW=3 /COL=2 /HEIGHT=21 /WIDTH=78 &
	/TITLE=(MESSAGE("P_50131"))

	BEGIN_BLOCK BLOCK_1
		#COPIED_CUSTOMER = SALES_ORDER_HEADERS(CUSTOMER_NUMBER)
		SALES_ORDER_TYPES(COMPANY_CODE) = #COMPANY_CODE

		#CUSTOMER_REFERENCE = ""

		! Displays Requested Date prompt.
		DISPLAY DEFAULTS
	END_BLOCK

	OUTPUT_BLOCK DIVISION /ROW=2 /COL=15 &
			/PROMPT=(FIELD_PROMPT(DIVISION)) &
			/SOURCE=(SALES_ORDER_HEADERS(DIVISION))

	OUTPUT_BLOCK DIVISION_DESC /ROW=2 /COL=18 &
			/SOURCE=(#DIVISION_NAME) &
			/USING=AR_CONTROLS(DIVISION_NAME)

	INPUT_BLOCK CUSTOMER_NUMBER /ROW=3 /COL=15 &
			/PROMPT=(FIELD_SHORT_PROMPT(CUSTOMER_NUMBER)) &
			/TARGET=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/LOV=CUSTOMERS(CUSTOMER_NUMBER,CUSTOMER_NAME) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=DIVISION=#DIVISION &
			/LOV_WITH=ACTIVATION_STATUS = (PARAMETER("STATUS_ACTIVE"))

	BEGIN_BLOCK FIND_CUSTOMER
		FIND IN CUSTOMERS &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/LOCK=NONE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00350
			GOTO CUSTOMER_NUMBER
		END_IF

		IF (CUSTOMERS(ACTIVATION_STATUS)=(PARAMETER("STATUS_DELETE")))
			MESSAGE/IDENTIFIER/BELL/WAIT P_22091
			GOTO CUSTOMER_NUMBER
		END_IF

		IF (CUSTOMERS(ACTIVATION_STATUS) <> (PARAMETER("STATUS_ACTIVE")))
			MESSAGE/IDENTIFIER/BELL/WAIT P_02200
			GOTO CUSTOMER_NUMBER
		END_IF

		IF ( CUSTOMERS(TP_DISABLE_PROMOTIONS) = #YES )
			#LD_IN_USE = #LD_AVAILABLE
			#TP_PROMOTIONS_IN_USE = #NO
			#TP_PROMOTIONS_AVAILABLE = #NO
		END_IF
		IF ( #TP_PROMOTIONS_IN_USE = #YES )
			#LD_IN_USE = #NO
			#TP_PROMOTIONS_AVAILABLE = #YES
		ELSE
			#TP_PROMOTIONS_IN_USE = #NO
			#TP_PROMOTIONS_AVAILABLE = #NO
		END_IF

		SALES_ORDER_HEADERS(TP_PROMOTIONS_IN_USE) = #TP_PROMOTIONS_IN_USE
		#LD_CUST_GROUP		= CUSTOMERS(LINE_DISCOUNT_GROUP)
		#OD_CUST_GROUP		= CUSTOMERS(ORDER_DISCOUNT_GROUP)
		#PRICE_CODE		= CUSTOMERS(PRICE_CODE)
		#ADDR_PRICE_CODE	= CUSTOMERS(PRICE_CODE)
		#CUST_PRICE_CODE	= CUSTOMERS(PRICE_CODE)
		#CUSTOMER_NAME		= CUSTOMERS(CUSTOMER_NAME)
		#CUST_PERMIT_RESERVATION = CUSTOMERS(PERMIT_RESERVATION)
		#AUTO_RESERVE		= CUSTOMERS(AUTO_RESERVE)
		#ALLOW_ORDER_CLOSE	= CUSTOMERS(SOP_ALLOW_ORDER_CLOSE)
		#CUST_FREIGHT_CONTRACT	= CUSTOMERS(SYS_FREIGHT_CONTRACT_NUMBER)
		#CUST_FREIGHT_MODE	= CUSTOMERS(SYS_FREIGHT_MODE)
		#CUST_SALESPERSON   = CUSTOMERS(SALESPERSON_CODE)
		#CUST_BROKER        = CUSTOMERS(BROKER_CODE)

		#CUSTOMER_NUMBER = SALES_ORDER_HEADERS(CUSTOMER_NUMBER)
		#PRICING_METHOD = SALES_ORDER_HEADERS(PRICING_METHOD)

		PERFORM SET_PRICING_METHOD_PROMPTS

		FIND IN SYS_COUNTRIES &
			/LOCK=NONE &
			/WITH=SYS_COUNTRY=CUSTOMERS(SYS_COUNTRY)

		#PHONE_MASK=SYS_COUNTRIES(SYS_PHONE_MASK)

	END_BLOCK

	BEGIN_BLOCK CPANEL 
		PERFORM HEADER_CPANEL ("ENTRY_FROM_COPY",(#DIVISION),(#CUSTOMER_NUMBER),"")
	END_BLOCK

	OUTPUT_BLOCK CUSTOMER_NAME /ROW=3 /COL=25 &
			/SOURCE=(CUSTOMERS(CUSTOMER_NAME))

	!Change 013
	BEGIN_BLOCK LOOKUP_CONTACTS
		FIND IN VOL_CUSTOMER_CONTACTS &
			/WITH=CUSTOMER_CONTACT=SALES_ORDER_HEADERS(CUSTOMER_CONTACT) &
			/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/WITH=CONTACT_TYPE="Sales"
	END_BLOCK

	DISPLAY DEFAULTS
	!Change 013 End

	BEGIN_BLOCK CREDIT_CHECK
		! At this point the credit limit check should determine whether or not
		! the customer is within his limits before further entry

		SALES_ORDER_HEADERS(CREDIT_STATUS_CODE)=""

		PERFORM "GEMLB:SOP_L_CREDIT_LIMITS" &
				(#COMPANY_CODE, &
				 #DIVISION, &
				 #CUSTOMER_NUMBER, &
				 0, &
				 (PARAMETER("SOP_STAGE_ORDER")), &
				 (#OLD_BASE_TOTAL), &
				 (#EDIT_MODE), &
				 #NO, &
				 "", &
				 "", &
				 #ACTION, &
				 #MAN_AUTO, &
				 #CREDIT_STATUS_CODE, &
				 #MESSAGE, &
				 "")

		IF (%STATUS = %FAILURE)
			EXIT (%FAILURE)
		END_IF

		IF (#ACTION = (PARAMETER("CREDIT_OK"))) GOTO DEFAULT_SETUP

		IF (#ACTION = (PARAMETER("CREDIT_REJECT")))
			ERROR (#MESSAGE)
			EXIT(%FAILURE)
		END_IF

		IF (#ACTION = (PARAMETER("CREDIT_HOLD")))
			IF (NOT #ALREADY_CREDIT_HOLD)
				ERROR (#MESSAGE)
				#ALREADY_CREDIT_HOLD = #YES
			END_IF
			SALES_ORDER_HEADERS(CREDIT_STATUS_CODE)=#CREDIT_STATUS_CODE

			IF (#MAN_AUTO = (PARAMETER("AM_FLAG_M")))
				PERFORM CREDIT_STATUS_CODE
				SALES_ORDER_HEADERS(CREDIT_STATUS_CODE)=#CREDIT_STATUS_CODE
				GOTO CREDIT_HOLD_STATUS
			ELSE
				GOTO CREDIT_HOLD_STATUS
			END_IF
		END_IF

		IF (#ACTION = (PARAMETER("CREDIT_WARN")))
			IF (NOT #ALREADY_WARN)
				ERROR (#MESSAGE)
				#ALREADY_WARN = #YES
			END_IF
			GOTO DEFAULT_SETUP
		END_IF

		GOTO DEFAULT_SETUP
	END_BLOCK

	BEGIN_BLOCK CREDIT_HOLD_STATUS
		OUTPUT_BLOCK		 /ROW=17 /COL=28 &
			/PROMPT=(FIELD_PROMPT(CREDIT_STATUS_CODE)) &
			/SOURCE=(SALES_ORDER_HEADERS(CREDIT_STATUS_CODE))

		FIND IN CREDIT_HOLD_STATUS_CODES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=CREDIT_STATUS_CODE = SALES_ORDER_HEADERS(CREDIT_STATUS_CODE)

		IF (%STATUS=%FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_52251
			PERFORM CREDIT_STATUS_CODE
			SALES_ORDER_HEADERS(CREDIT_STATUS_CODE)=#CREDIT_STATUS_CODE
			GOTO CREDIT_HOLD_STATUS
		END_IF
	END_BLOCK

	OUTPUT_BLOCK HOLD_STATUS_DESC /ROW=17 /COL=35 &
			/SOURCE=(CREDIT_HOLD_STATUS_CODES(DESCRIPTION))

	BEGIN_BLOCK DEFAULT_SETUP
		PERFORM "GEMSOP:SOP_S_L_CONTROL_MAINTENANCE" HEADER_CHECK_CUSTOMER (#COMPANY_CODE, &
																			(SALES_ORDER_HEADERS(DIVISION)), &
																			(SALES_ORDER_HEADERS(CUSTOMER_NUMBER)),"","", &
																			#RESTRICT_CUSTOMER_FLAG,"")
		IF ( #RESTRICT_CUSTOMER_FLAG = #YES ) 
			#PARAMETER_CUST = TRIM(SALES_ORDER_HEADERS(CUSTOMER_NUMBER)) & "," & TRIM(SALES_ORDER_HEADERS(DIVISION))
			MESSAGE/IDENTIFIER/BELL/WAIT P_37168,#PARAMETER_CUST
		END_IF

		SALES_ORDER_HEADERS(ORDER_DATE)	 = %TODAY
		#ORDER_DATE			     = %TODAY
		SALES_ORDER_HEADERS(STATUS_FLAG)	= #NO
		SALES_ORDER_HEADERS(REQUIRED_DATE)	  = %TODAY

		IF (SALES_ORDER_HEADERS(SYS_REQUESTED_DATE) = "")
			!Change 017 
			!SALES_ORDER_HEADERS(SYS_REQUESTED_DATE) = DATE(DAYS((%TODAY)) + #SOP_LEAD_TIME)
			SALES_ORDER_HEADERS(SYS_REQUESTED_DATE) = "1-JAN-2099"
			!Change 017 End
		END_IF

		IF (SALES_ORDER_HEADERS(CUSTOMER_NUMBER) <> #COPIED_CUSTOMER)
			SALES_ORDER_HEADERS(MP_INVOICE_CUSTOMER)	= CUSTOMERS(MP_INVOICE_CUSTOMER)
			SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)   = CUSTOMERS(DEFAULT_ADDR)
			SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE)     = CUSTOMERS(DEFAULT_ADDR)
			SALES_ORDER_HEADERS(MP_SHIPPING_CUSTOMER)	= CUSTOMERS(MP_SHIPPING_CUSTOMER)
			SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)  = CUSTOMERS(DEFAULT_DELIVERY_ADDR_CODE)
			SALES_ORDER_HEADERS(AR_DRAFT_PAYMENT_TYPE)  = CUSTOMERS(AR_DRAFT_PAYMENT_TYPE)
			SALES_ORDER_HEADERS(SOP_PRINT_CONF_FLAG)    = CUSTOMERS(SOP_PRINT_CONF_FLAG)

			IF ((#AR_FREIGHT_IN_USE = #YES) OR (#SYS_TM_IN_USE = #YES))
				SALES_ORDER_HEADERS(SOP_SHIPPING_TERMS_CODE) = CUSTOMERS(SOP_SHIPPING_TERMS_CODE)
			ELSE
				SALES_ORDER_HEADERS(SOP_SHIPPING_TERMS_CODE) = ""
			END_IF
		END_IF

		IF (SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)="")
			SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)=SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)
			SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE)   =SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)
		END_IF

		IF ((#PHYSICAL_IN_USE=#YES) &
		OR  (#COMPANY_EC_REPORT_TYPE <> "") &
		OR  (#SYS_TM_IN_USE = #YES) &
		OR  (#AR_FREIGHT_IN_USE = #YES))
			SALES_ORDER_HEADERS(WEIGHT_UOM)=#DEF_WEIGHT_UNIT
			SALES_ORDER_HEADERS(VOLUME_UOM)=#DEF_VOLUME_UNIT
		END_IF
	END_BLOCK

	BEGIN_BLOCK CUSTOMER_PO
	! Customer PO and Customer Reference are synonymous

		INPUT_BLOCK CUSTOMER_REF_1 /ROW=4 /COL=15 &
			/PROMPT=(MESSAGE("P_13029")) &
			/TARGET=SALES_ORDER_HEADERS(CUSTOMER_REFERENCE) &
			/USE_IF=(#MANDATORY_CUSTOMER_PO = 0)

		INPUT_BLOCK CUSTOMER_REF_2 /ROW=4 /COL=15 &
			/TARGET=#CUSTOMER_REFERENCE &
			/SOURCE=SALES_ORDER_HEADERS(CUSTOMER_REFERENCE) &
			/PROMPT=(MESSAGE("P_13029")) &
			/USING=SALES_ORDER_HEADERS(CUSTOMER_REFERENCE),REQUIRED &
			/USE_IF=(#MANDATORY_CUSTOMER_PO > 0)

		IF (#MANDATORY_CUSTOMER_PO = 0) GOTO DELIVERY_ADDRESS_CODE

		PERFORM CUSTOMER_PO_CHECK ((#MANDATORY_CUSTOMER_PO), (#CUSTOMER_REFERENCE), "", #R_PASS)
		IF (#R_PASS = #YES)
			SALES_ORDER_HEADERS(CUSTOMER_REFERENCE) = #CUSTOMER_REFERENCE
		ELSE
			GOTO CUSTOMER_REF_2
		END_IF
	END_BLOCK

	BEGIN_BLOCK /DISPLAY_ONLY FINAL_ADDRESS_CODE_SHOW1 
		OUTPUT_BLOCK FINAL_ADDRESS_CODE_O2 /ROW=10 /COL=66 /LEN = 10 &
			/SOURCE=SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE) &
			/PROMPT=FIELD_SHORT_PROMPT(FINAL_ADDRESS_CODE)
			
		FIND IN CUSTOMER_ADDRESSES &
				/LOCK=NONE &
				/SECONDARY &
				/STREAM_NAME=CU3 &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
				/WITH=ADDRESS_CODE=SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE)
			
		#HEADER_COUNTRY_CODE = CU3:CUSTOMER_ADDRESSES(SYS_COUNTRY)
		#HEADER_CITY         = CU3:CUSTOMER_ADDRESSES(SYS_CITY)
		IF ( CU3:CUSTOMER_ADDRESSES(SYS_STATE) <> "" ) 
			#HEADER_STATE_PROVINCE = CU3:CUSTOMER_ADDRESSES(SYS_STATE)
		ELSE
			#HEADER_STATE_PROVINCE = CU3:CUSTOMER_ADDRESSES(SYS_PROVINCE)
		END_IF

		OUTPUT_BLOCK FINAL_CITY_O2 /ROW=11 /COL=66 /LEN=12 &
			/SOURCE=#HEADER_CITY &
			/PROMPT=MESSAGE("P_85010")

		OUTPUT_BLOCK FINAL_ADDRESS_STATE_PROV_O2 /ROW=12 /COL=66 /LEN=12 &
			/SOURCE=#HEADER_STATE_PROVINCE &
			/PROMPT=MESSAGE("P_37127")
		
		OUTPUT_BLOCK FINAL_ADDRESS_COUNTRY_O2 /ROW=13 /COL=66 /LEN=12 &
			/SOURCE=#HEADER_COUNTRY_CODE &
			/PROMPT=FIELD_PROMPT(COUNTRY_CODE)

	END_BLOCK 

	BEGIN_BLOCK FINAL_ADDRESS_CODE_SHOW2 
		OUTPUT_BLOCK FINAL_ADDRESS_CODE_O5 /ROW=10 /COL=66 /LEN = 10 &
			/SOURCE=SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE) &
			/PROMPT=FIELD_SHORT_PROMPT(FINAL_ADDRESS_CODE)
			
		FIND IN CUSTOMER_ADDRESSES &
				/LOCK=NONE &
				/SECONDARY &
				/STREAM_NAME=CU4 &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
				/WITH=ADDRESS_CODE=SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE)
			
		#HEADER_COUNTRY_CODE = CU4:CUSTOMER_ADDRESSES(SYS_COUNTRY)
		#HEADER_CITY         = CU4:CUSTOMER_ADDRESSES(SYS_CITY)
		IF ( CU4:CUSTOMER_ADDRESSES(SYS_STATE) <> "" ) 
			#HEADER_STATE_PROVINCE = CU4:CUSTOMER_ADDRESSES(SYS_STATE)
		ELSE
			#HEADER_STATE_PROVINCE = CU4:CUSTOMER_ADDRESSES(SYS_PROVINCE)
		END_IF

		OUTPUT_BLOCK FINAL_CITY_O5 /ROW=11 /COL=66 /LEN=12 &
			/SOURCE=#HEADER_CITY &
			/PROMPT=MESSAGE("P_85010")

		OUTPUT_BLOCK FINAL_ADDRESS_STATE_PROV_O5 /ROW=12 /COL=66 /LEN=12 &
			/SOURCE=#HEADER_STATE_PROVINCE &
			/PROMPT=MESSAGE("P_37127")
		
		OUTPUT_BLOCK FINAL_ADDRESS_COUNTRY_O5 /ROW=13 /COL=66 /LEN=12 &
			/SOURCE=#HEADER_COUNTRY_CODE &
			/PROMPT=FIELD_PROMPT(COUNTRY_CODE)
			
	END_BLOCK

	INPUT_BLOCK DELIVERY_ADDRESS_CODE /ROW=6 /COL=15 &
		/TARGET=SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE) &
		/PROMPT=(MESSAGE("P_00318")) &
		/USING=REQUIRED &
		/LOV=CUSTOMER_ADDRESSES(ADDRESS_CODE,CUSTOMER_NAME,SYS_POSTAL_CODE) &
		/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
		/LOV_WITH=DIVISION=#DIVISION &
		/LOV_WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
		/LOV_WITH=ACTIVATION_STATUS = (PARAMETER("STATUS_ACTIVE")) &
		/USER_KEY1=(PERFORM "GEMSYS:SYS_M_ADD_CUSTOMER_ADDRESSES" &
				(#DIVISION,#CUSTOMER_NUMBER,SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE),#TAX_FLAG))

	BEGIN_BLOCK DISPLAY_ADDRESS
		PERFORM VALIDATE_ADDRESS ((SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)),#HEADER_DELIVERY_ADDR_FLAG)
		IF ((%STATUS = %FAILURE) OR (%STATUS = %EMPTY))
			GOTO DELIVERY_ADDRESS_CODE
		END_IF 

		IF ( #HEADER_DELIVERY_ADDR_FLAG = #YES ) 
			SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE) = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)	
		END_IF 

		FIND IN CUSTOMER_ADDRESSES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/WITH=ADDRESS_CODE=SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)

		FIND IN SYS_COUNTRIES &
			/LOCK=NONE &
			/WITH=SYS_COUNTRY=CUSTOMER_ADDRESSES(SYS_COUNTRY)

		PERFORM "GEMLB:LB_ADDRESSES" (&
			"D", &
			(SYS_COUNTRIES(SYS_COUNTRY)), &
			"CUSTOMER_ADDRESSES", &
			"9", &
			"7", &
			MESSAGE("P_82258"), &
			"", &
			"", &
			"", &
			"", &
			#R1, &
			#R2, &
			#R3, &
			#R4, &
			#R5)
	END_BLOCK

	BEGIN_BLOCK FINAL_ADDRESS_CODE 
		OUTPUT_BLOCK FINAL_ADDRESS_CODE_O3 /ROW=10 /COL=66 /LEN = 10 &
			/SOURCE=SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE) &
			/PROMPT=FIELD_SHORT_PROMPT(FINAL_ADDRESS_CODE)
									
		OUTPUT_BLOCK FINAL_CITY_O3 /ROW=11 /COL=66 /LEN=12 &
			/SOURCE=#HEADER_CITY &
			/PROMPT=MESSAGE("P_85010")

		OUTPUT_BLOCK FINAL_ADDRESS_STATE_PROV_O3 /ROW=12 /COL=66 /LEN=12 &
			/SOURCE=#HEADER_STATE_PROVINCE &
			/PROMPT=MESSAGE("P_37127")
		
		OUTPUT_BLOCK FINAL_ADDRESS_COUNTRY_O3 /ROW=13 /COL=66 /LEN=12 &
			/SOURCE=#HEADER_COUNTRY_CODE &
			/PROMPT=FIELD_PROMPT(COUNTRY_CODE)
			
		IF ( #HEADER_DELIVERY_ADDR_FLAG = #YES ) 
			GOTO INVOICE_ADDRESS_CODE
		ELSE
			INPUT_BLOCK FINAL_ADDRESS_CODE_I /ROW=10 /COL=66 /LEN=10 &
				/TARGET=SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE) &
				/PROMPT=FIELD_SHORT_PROMPT(FINAL_ADDRESS_CODE) &
				/USING=REQUIRED &
				/LOV=CUSTOMER_ADDRESSES(ADDRESS_CODE,CUSTOMER_NAME,SYS_POSTAL_CODE) &
				/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
				/LOV_WITH=DIVISION=#DIVISION &
				/LOV_WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
				/LOV_WITH=ACTIVATION_STATUS = (PARAMETER("STATUS_ACTIVE")) &
				/LOV_WITH=SYS_FINAL_DESTINATION = "1" &
				/USER_KEY1=(PERFORM "GEMSYS:SYS_M_ADD_CUSTOMER_ADDRESSES" &
					(#DIVISION,#CUSTOMER_NUMBER,SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE),#TAX_FLAG))
			
			PERFORM VALIDATE_ADDRESS ((SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE)),#HEADER_FINAL_ADDR_FLAG)
		
			IF ( #HEADER_FINAL_ADDR_FLAG <> #YES ) 
				MESSAGE/IDENTIFIER/BELL P_37116
				GOTO FINAL_ADDRESS_CODE_I
			ELSE
				FIND IN CUSTOMER_ADDRESSES &
					/LOCK=NONE &
					/SECONDARY &
					/STREAM_NAME=CU5 &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=DIVISION=#DIVISION &
					/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
					/WITH=ADDRESS_CODE=SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE)
			
				#HEADER_COUNTRY_CODE = CU5:CUSTOMER_ADDRESSES(SYS_COUNTRY)
				#HEADER_CITY         = CU5:CUSTOMER_ADDRESSES(SYS_CITY)
				IF ( CU5:CUSTOMER_ADDRESSES(SYS_STATE) <> "" ) 
					#HEADER_STATE_PROVINCE = CU5:CUSTOMER_ADDRESSES(SYS_STATE)
				ELSE
					#HEADER_STATE_PROVINCE = CU5:CUSTOMER_ADDRESSES(SYS_PROVINCE)
				END_IF		
			END_IF

			OUTPUT_BLOCK FINAL_CITY_O4 /ROW=11 /COL=66 /LEN=12 &
				/SOURCE=#HEADER_CITY &
				/PROMPT=MESSAGE("P_85010")

			OUTPUT_BLOCK FINAL_ADDRESS_STATE_PROV_O4 /ROW=12 /COL=66 /LEN=12 &
				/SOURCE=#HEADER_STATE_PROVINCE &
				/PROMPT=MESSAGE("P_37127")
		
			OUTPUT_BLOCK FINAL_ADDRESS_COUNTRY_O4 /ROW=13 /COL=66 /LEN=12 &
				/SOURCE=#HEADER_COUNTRY_CODE &
				/PROMPT=FIELD_PROMPT(COUNTRY_CODE)
		END_IF
		
		#HEADER_FINAL_ADDRESS_CODE = SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE)
		 
	END_BLOCK

	INPUT_BLOCK INVOICE_ADDRESS_CODE /ROW=13 /COL=15 &
		/TARGET=SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE) &
		/PROMPT=(MESSAGE("P_12241")) &
		/USING=REQUIRED &
		/LOV=CUSTOMER_ADDRESSES(ADDRESS_CODE,CUSTOMER_NAME,SYS_POSTAL_CODE) &
		/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
		/LOV_WITH=DIVISION=#DIVISION &
		/LOV_WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
		/LOV_WITH=ACTIVATION_STATUS = (PARAMETER("STATUS_ACTIVE")) &
		/USER_KEY1=(PERFORM "GEMSYS:SYS_M_ADD_CUSTOMER_ADDRESSES" &
				(#DIVISION,#CUSTOMER_NUMBER,SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE),#TAX_FLAG))

	BEGIN_BLOCK CHECK_INVOICE_ADDRESS
		PERFORM VALIDATE_ADDRESS ((SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)))
		IF ((%STATUS = %FAILURE) OR (%STATUS = %EMPTY))
			GOTO INVOICE_ADDRESS_CODE
		END_IF

		! Reastablish streams
		FIND IN CUSTOMER_ADDRESSES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/WITH=ADDRESS_CODE=SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)

		FIND IN SYS_COUNTRIES &
			/LOCK=NONE &
			/WITH=SYS_COUNTRY=CUSTOMERS(SYS_COUNTRY)
	END_BLOCK

	INPUT_BLOCK SALES_ORDER_TYPE /ROW=3 /COL=70 &
			/OPTIONS=DOMAIN_LOCK_NONE &
			/DOMAIN=SALES_ORDER_TYPES &
			/PROMPT=(FIELD_PROMPT(SALES_ORDER_TYPE)) &
			/TARGET=SALES_ORDER_HEADERS(SALES_ORDER_TYPE) &
			/LOV=SALES_ORDER_TYPES(SALES_ORDER_TYPE,CODE_DESCRIPTION) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE

	BEGIN_BLOCK /DISPLAY_ONLY REQUIRED_DATE_METHOD
		IF (#SOP_REQUIRED_DATE_METHOD = "")
			IF (#DIVISION <> "")
				FIND IN AR_CONTROLS &
					/LOCK=NONE &
					/WITH=COMPANY_CODE = #COMPANY_CODE &
					/WITH=DIVISION = #DIVISION

				#SOP_REQUIRED_DATE_METHOD = AR_CONTROLS(SOP_REQUIRED_DATE_METHOD)
			ELSE_IF (#DEFAULT_AR_DIVISION <> "")
				FIND IN AR_CONTROLS &
					/LOCK=NONE &
					/WITH=COMPANY_CODE = #COMPANY_CODE &
					/WITH=DIVISION = #DEFAULT_AR_DIVISION

				#SOP_REQUIRED_DATE_METHOD = AR_CONTROLS(SOP_REQUIRED_DATE_METHOD)
			ELSE
				#SOP_REQUIRED_DATE_METHOD = PARAMETER("DATE_METHOD_DESPATCH")
			END_IF
		END_IF

		IF (#SOP_REQUIRED_DATE_METHOD = #METHOD_RECEIPT)
			#REQUESTED_DATE_PROMPT = FIELD_PROMPT(SYS_DELIVERY_DATE)
		ELSE
			#REQUESTED_DATE_PROMPT = FIELD_PROMPT(SYS_SHIPPING_DATE)
		END_IF
		! The Required Date Method decides what type of date the Requested Shipping Date
		! is to be.  If the method value is "D" for despatch/shipping, then the Requested
		! Shipping Date is the date the order is to be shipped to the customer.  If "R"
		! for receive/delivery, the Requested Shipping Date is the date the order is to
		! received at the customer's delivery address.
	END_BLOCK

	BEGIN_BLOCK MAINTAIN_REQUESTED_DATE
		! Requested Date Prompt for the INPUT_BLOCK below
		OUTPUT_BLOCK REQUESTED_DATE_PROMPT /ROW=5 /COL=51 &
			/PROMPT="" &
			/ATTRIBUTES=NONE &
			/SOURCE=#REQUESTED_DATE_PROMPT &
			/OUTPUT_MASK="!-@@@@@@@@@@@@@"

		INPUT_BLOCK REQUESTED_DATE /ROW=5 /COL=66 &
			/PROMPT="" &
			!Change 017 - Requested date = 1/1/2099 by default
			/SOURCE_IF=(SALES_ORDER_HEADERS(SYS_REQUESTED_DATE)=""),"1-JAN-2099" &
			/SOURCE_IF=(SALES_ORDER_HEADERS(SYS_REQUESTED_DATE)<>""),SALES_ORDER_HEADERS(SYS_REQUESTED_DATE) &
			!Change 017 End
			/TARGET=SALES_ORDER_HEADERS(SYS_REQUESTED_DATE) &
			/INPUT_MASK=(#DEFAULT_DATE_MASK)

	END_BLOCK

	INPUT_BLOCK ORDER_DATE /ROW=6 /COL=66 &
			/PROMPT=(FIELD_PROMPT(ORDER_DATE)) &
			/TARGET=SALES_ORDER_HEADERS(ORDER_DATE) &
			/INPUT_MASK=(#DEFAULT_DATE_MASK)

	BEGIN_BLOCK DATE_CALCULATIONS
		PERFORM DATE_CALCULATIONS
	END_BLOCK

	INPUT_BLOCK CUSTOMER_CONTACT /ROW=7 /COL=57 &
			/PROMPT=(FIELD_PROMPT(CUSTOMER_CONTACT)) &
!Change 013			
			!/TARGET=SALES_ORDER_HEADERS(CUSTOMER_CONTACT)
			/TARGET=SALES_ORDER_HEADERS(CUSTOMER_CONTACT) &
			/LOV=VOL_CUSTOMER_CONTACTS(CUSTOMER_CONTACT,CUSTOMER_NUMBER,PHONE) &
			/LOV_WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) & 
			/LOV_WITH=CONTACT_TYPE="Sales"

	BEGIN_BLOCK RELOOKUP_CONTACTS
		FIND IN VOL_CUSTOMER_CONTACTS &
			/WITH=CUSTOMER_CONTACT=SALES_ORDER_HEADERS(CUSTOMER_CONTACT) &
			/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/WITH=CONTACT_TYPE="Sales"

		IF (%STATUS<>%SUCCESS AND SALES_ORDER_HEADERS(CUSTOMER_CONTACT)<>"") 
			PERFORM "GEMSOP:SOPC_M_VOL_CUSTOMER_CONTACTS" ADD (SALES_ORDER_HEADERS(CUSTOMER_NUMBER),SALES_ORDER_HEADERS(CUSTOMER_CONTACT),"Sales")

			!Look again
			FIND IN VOL_CUSTOMER_CONTACTS &
				/WITH=CUSTOMER_CONTACT=SALES_ORDER_HEADERS(CUSTOMER_CONTACT) &
				/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
				/WITH=CONTACT_TYPE="Sales"
		END_IF

		!If the status is %FAILURE, they backed out of the "Add new Contact" form. They need to either enter a valid contact right away, create a valid contact, or enter no contact at all.
		IF (%STATUS=%FAILURE AND SALES_ORDER_HEADERS(CUSTOMER_CONTACT)<>"") 
			ERROR /TEXT_ONLY "You must enter a valid customer contact or leave this field blank to continue."
			GOTO CUSTOMER_CONTACT
		END_IF

		IF ((VOL_CUSTOMER_CONTACTS(PHONE)="" OR VOL_CUSTOMER_CONTACTS(EMAIL)="") AND SALES_ORDER_HEADERS(CUSTOMER_CONTACT)<>"")
			PERFORM ASK_UPDATE_CONTACT(SALES_ORDER_HEADERS(CUSTOMER_NUMBER),SALES_ORDER_HEADERS(CUSTOMER_CONTACT))
			FIND IN VOL_CUSTOMER_CONTACTS &
				/WITH=CUSTOMER_CONTACT=SALES_ORDER_HEADERS(CUSTOMER_CONTACT) &
				/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
				/WITH=CONTACT_TYPE="Sales"
		END_IF

		DISPLAY DEFAULTS
	END_BLOCK
!Change 013 End


	OUTPUT_BLOCK PHONE /ROW=8 /COL=57 /LEN=21 &
			/PROMPT=(FIELD_PROMPT(PHONE)) &
			!Change 013 - Use customer contact phone # if a contact is chosen
			!/SOURCE=(CUSTOMERS(PHONE)) &
			/SOURCE_IF=(VOL_CUSTOMER_CONTACTS(PHONE)=""),CUSTOMERS(PHONE) &
			/SOURCE_IF=(VOL_CUSTOMER_CONTACTS(PHONE)<>""),VOL_CUSTOMER_CONTACTS(PHONE) &
			!Change 013 End
			/OUTPUT_MASK=(#PHONE_MASK)

	!Change 013
	OUTPUT_BLOCK EMAIL /ROW=9 /COL=57 &
			/PROMPT=(FIELD_PROMPT(EMAIL)) &
			/SOURCE=VOL_CUSTOMER_CONTACTS(EMAIL) &
			/USING=VOL_CUSTOMER_CONTACTS(EMAIL)
	!Change 013 End

	INPUT_BLOCK COST_CENTER /ROW=15 /COL=28 &
			/PROMPT=(FIELD_PROMPT(COST_CENTER)) &
			/TARGET=SALES_ORDER_HEADERS(COST_CENTER) &
			/LOV=COST_CENTERS(COST_CENTER,DESCRIPTION) &
			/LOV_SORTED_BY=(COST_CENTER) &
 			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=SOURCE_MODULE=(PARAMETER("LOCAL_SOURCE_MODULE"))

	BEGIN_BLOCK COST_CENTER_DESC
		IF (SALES_ORDER_HEADERS(COST_CENTER) <> "")
			FIND IN COST_CENTERS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=SOURCE_MODULE=(PARAMETER("LOCAL_SOURCE_MODULE")) &
				/WITH=COST_CENTER=SALES_ORDER_HEADERS(COST_CENTER)

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_00347
				GOTO COST_CENTER
			END_IF

			#DESC = COST_CENTERS(DESCRIPTION)
		ELSE
			#DESC = ""
		END_IF

		OUTPUT_BLOCK		 /ROW=15 /COL=32 &
			/SOURCE=(#DESC) &
			/USING=COST_CENTERS(DESCRIPTION)
	END_BLOCK

	OUTPUT_BLOCK PRICING_METHOD /ROW=18 /COL=23 &
		/PROMPT=FIELD_PROMPT(PRICING_METHOD) &
		/SOURCE=(SALES_ORDER_HEADERS(PRICING_METHOD)) &
		/USE_IF=(#PRICING_METHOD_OPTIONAL=#YES)

	OUTPUT_BLOCK PRICING_METHOD_DESC /ROW=18 /COL=25 &
		/ATTRIBUTES=NONE &
		/SOURCE=(#PRICING_METHOD_DESC) &
		/USE_IF=(#PRICING_METHOD_OPTIONAL=#YES)

	BEGIN_BLOCK CURRENCY_CODE
		IF (#DATE_CODE = #DUE_CODE)
			#EFFECTIVE_DATE = SALES_ORDER_HEADERS(SYS_SHIPPING_DATE)
		ELSE
			#EFFECTIVE_DATE = SALES_ORDER_HEADERS(ORDER_DATE)
		END_IF

		DELETE ALL FROM SYS_CURRENCY_CONTROL_VT
		CLEAR_BUFFER SYS_CURRENCY_CONTROL_VT

		SYS_CURRENCY_CONTROL_VT(COMPANY_CODE)	= #COMPANY_CODE
		SYS_CURRENCY_CONTROL_VT(DIVISION)	= #DIVISION
		SYS_CURRENCY_CONTROL_VT(SOURCE_MODULE)	= PARAMETER("MODULE_SO")
		SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE)	= SALES_ORDER_HEADERS(SYS_CURRENCY_CODE)
		SYS_CURRENCY_CONTROL_VT(TRANSACTION_DATE)	= #EFFECTIVE_DATE
		SYS_CURRENCY_CONTROL_VT(RATE_AUTHORITY)	= SALES_ORDER_HEADERS(SYS_RATE_AUTHORITY)
		SYS_CURRENCY_CONTROL_VT(RATE_TYPE)	= SALES_ORDER_HEADERS(SYS_RATE_TYPE)
		SYS_CURRENCY_CONTROL_VT(CODE_RATE_INPUT_FLAG)	= "B"

		ADD TO SYS_CURRENCY_CONTROL_VT

		PERFORM "GEMLB:LB_C_CURRENCY_RATES" ( #CURRENCY_OVERRIDE, #R_STATUS, #R_MESSAGE)
		IF (%STATUS = %EXIT OR %STATUS = %BACK) GOTO COST_CENTER
		IF (#R_STATUS <> #YES)
			ERROR/WAIT #R_MESSAGE
			EXIT (%FAILURE)
		END_IF

		FIND IN SYS_CURRENCY_CONTROL_VT

		SALES_ORDER_HEADERS(SYS_CURRENCY_CODE)  = SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE)
		SALES_ORDER_HEADERS(SYS_CURRENCY_RATE)  = SYS_CURRENCY_CONTROL_VT(TRANSACTION_RATE)
		SALES_ORDER_HEADERS(SYS_CURRENCY_DATE)  = SYS_CURRENCY_CONTROL_VT(CURRENCY_DATE)
		SALES_ORDER_HEADERS(SYS_CURRENCY_FIXED_FLAG)	= SYS_CURRENCY_CONTROL_VT(FIXED_RATE_INDIC)
		SALES_ORDER_HEADERS(SYS_CURRENCY_RATIO_INDIC)	= SYS_CURRENCY_CONTROL_VT(CURR_RATIO_INDIC)
		SALES_ORDER_HEADERS(SYS_RATE_AUTHORITY)	= SYS_CURRENCY_CONTROL_VT(RATE_AUTHORITY)
		SALES_ORDER_HEADERS(SYS_RATE_TYPE)	= SYS_CURRENCY_CONTROL_VT(RATE_TYPE)
		IF (SYS_CURRENCY_CONTROL_VT(STORE_BASE_2) = #YES)
			SALES_ORDER_HEADERS(SYS_CURRENCY_2_RATE) = SYS_CURRENCY_CONTROL_VT(SECOND_CURRENCY_RATE)
			SALES_ORDER_HEADERS(SYS_CURRENCY_2_RATIO_INDIC) = SYS_CURRENCY_CONTROL_VT(SYS_CURRENCY_2_RATIO_INDIC)
		END_IF

		PERFORM SAVE_SYS_CURRENCY_CONTROL_VT

		#CURRENCY_CODE	= SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE)
		#RATE_AUTHORITY	= SYS_CURRENCY_CONTROL_VT(RATE_AUTHORITY)
		#RATE_TYPE	= SYS_CURRENCY_CONTROL_VT(RATE_TYPE)
		#CURRENCY_RATE	= SYS_CURRENCY_CONTROL_VT(TRANSACTION_RATE)
		#CURRENCY_RATIO_INDIC	= SYS_CURRENCY_CONTROL_VT(CURR_RATIO_INDIC)
		#CURRENCY_FIXED	= SYS_CURRENCY_CONTROL_VT(FIXED_RATE_INDIC)
		#CURRENCY_MASK	= SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_MASK)
		#CURRENCY_DESC	= SYS_CURRENCY_CONTROL_VT(CURRENCY_CODE_DESCRIPTION)
		#CURRENCY_DECIMAL	= SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_DECIMALS)
		#CURRENCY_DATE	= SYS_CURRENCY_CONTROL_VT(TRANSACTION_DATE)
		#BASE_2_CURRENCY_CODE	= SYS_CURRENCY_CONTROL_VT(BASE_2_CURRENCY_CODE)

		OUTPUT_BLOCK		 /ROW=19 /COL=23 &
			/DOMAIN=SYS_CURRENCY_CODES &
			/PROMPT=(FIELD_PROMPT(SYS_CURRENCY_CODE)) &
			/SOURCE=(SALES_ORDER_HEADERS(SYS_CURRENCY_CODE))
	END_BLOCK

	OUTPUT_BLOCK CURRENCY_DESC /ROW=19 /COL=30 &
			/SOURCE=#CURRENCY_DESC

	OUTPUT_BLOCK CURRENCY_RATE /ROW=20 /COL=23 &
			/PROMPT=(MESSAGE("P_00562")) &
			/SOURCE=(#CURRENCY_RATE) &
			/USING=SYS_CURRENCY_RATES(SYS_CURRENCY_RATE) &
			/ATTRIBUTES=BOLD &
			/USE_IF=(#CURRENCY_METHOD <> "0")

	BEGIN_BLOCK LOAD_CODES_FROM_ADDRESSES
		IF (SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE) <> "")
			#ADDRESS_CODE = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)

			PERFORM LOAD_CODES_FROM_ADDRESSES

			IF (CUSTOMER_ADDRESSES(PRICE_CODE) <> "")
				#ADDR_PRICE_CODE = CUSTOMER_ADDRESSES(PRICE_CODE)
				#PRICE_CODE	     = CUSTOMER_ADDRESSES(PRICE_CODE)
			ELSE
				#ADDR_PRICE_CODE = #CUST_PRICE_CODE
				#PRICE_CODE	     = #CUST_PRICE_CODE
			END_IF

			IF (SALES_ORDER_HEADERS(DELIVERY_INSTRUCTIONS) = "")
				SALES_ORDER_HEADERS(DELIVERY_INSTRUCTIONS)	= CUSTOMER_ADDRESSES(DELIVERY_INSTRUCTIONS)
			END_IF
			IF (SALES_ORDER_HEADERS(SHIP_METHOD) = "")
				SALES_ORDER_HEADERS(SHIP_METHOD)		= CUSTOMER_ADDRESSES(SHIP_METHOD)
			END_IF


			IF (SALES_ORDER_HEADERS(SYS_FREIGHT_CONTRACT_NUMBER) = "")
				IF (#AR_FREIGHT_IN_USE = #YES)
					SALES_ORDER_HEADERS(SYS_FREIGHT_CONTRACT_NUMBER) = #CUST_FREIGHT_CONTRACT
					IF (CUSTOMER_ADDRESSES(SYS_FREIGHT_CONTRACT_NUMBER) <> "")
						SALES_ORDER_HEADERS(SYS_FREIGHT_CONTRACT_NUMBER) &
									= CUSTOMER_ADDRESSES(SYS_FREIGHT_CONTRACT_NUMBER)
					END_IF
				END_IF
			END_IF

			IF (SALES_ORDER_HEADERS(SYS_FREIGHT_MODE) = "")
				IF (#AR_FREIGHT_IN_USE = #YES)
					SALES_ORDER_HEADERS(SYS_FREIGHT_CONTRACT_NUMBER) = #CUST_FREIGHT_CONTRACT
					IF (CUSTOMER_ADDRESSES(SYS_FREIGHT_CONTRACT_NUMBER) <> "")
						SALES_ORDER_HEADERS(SYS_FREIGHT_CONTRACT_NUMBER) &
									= CUSTOMER_ADDRESSES(SYS_FREIGHT_CONTRACT_NUMBER)
					END_IF
				END_IF
			END_IF

			#DEF_BOD_CODE	= CUSTOMER_ADDRESSES(SYS_BOD_CODE)
			#DEF_ORDER_COUNTRY = CUSTOMER_ADDRESSES(SYS_COUNTRY)
			#DEF_ORDER_DIST_ZONE = CUSTOMER_ADDRESSES(SYS_DISTRIBUTION_ZONE)

			PERFORM GET_DIST_ZONE_DETAILS ( &
					#DEF_ORDER_COUNTRY, &
					#DEF_ORDER_DIST_ZONE)

			IF (%STATUS = %FAILURE)
				IF ((#SYS_TM_IN_USE = #YES) OR (#AR_FREIGHT_IN_USE = #YES))
					MESSAGE/IDENTIFIER/BELL/WAIT P_93564
					IF (#SYS_TM_IN_USE = #YES)
						! Can't use TM for this delivery address
						MESSAGE/IDENTIFIER/BELL/WAIT P_93567
					ELSE
						! Can't use AR freight for this delivery address
						MESSAGE/IDENTIFIER/BELL/WAIT P_93569
					END_IF
				END_IF
			ELSE
				IF ((#DEF_BOD_CODE = "") AND (#ADDR_DIST_BOD_CODE <> ""))
					! only if the Customer Addresses BOD code is blank and
					! the distribution zone bill of distribution is non-blank
					! use the distribution zone BOD code as the default BOD
					! code for the order.
					#DEF_BOD_CODE = #ADDR_DIST_BOD_CODE
				END_IF
			END_IF

			IF (#COMPANY_EC_REPORT_TYPE <> "")
				PERFORM GET_CUSTOMER_STATE
				IF (%STATUS = %FAILURE) EXIT (%FAILURE)

				IF (#EC_REPORT_TYPE <> "")
					#DEF_EC_TRANSACTION_TYPE = CUSTOMER_ADDRESSES(SYS_EC_TRANSACTION_TYPE)
					#DEF_EC_MODE_TRANSPORT = CUSTOMER_ADDRESSES(SYS_EC_MODE_OF_TRANSPORT)
					#DEF_EC_DELIVERY_TERMS = CUSTOMER_ADDRESSES(SYS_EC_DELIVERY_TERMS)
					#DEF_EC_REPORT_TYPE = #EC_REPORT_TYPE
					#DEF_EC_STAT_FACTOR = CUSTOMER_ADDRESSES(SYS_EC_FACTOR)
				END_IF
			END_IF

			GOTO LOAD_CUSTOMER_DEFAULTS
		END_IF

		IF (SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE) <> "")
			#ADDRESS_CODE = SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)
			PERFORM LOAD_CODES_FROM_ADDRESSES
			GOTO LOAD_CUSTOMER_DEFAULTS
		END_IF
	END_BLOCK

	BEGIN_BLOCK LOAD_CUSTOMER_DEFAULTS
!		SALES_ORDER_HEADERS(PRICING_METHOD) = #PRICING_METHOD
		SALES_ORDER_HEADERS(CREDIT_TERMS_CODE) = CUSTOMERS(CREDIT_TERMS_CODE)
	END_BLOCK

	BEGIN_BLOCK LOAD_HEADER_CODES
		SALES_ORDER_HEADERS(BROKER_CODE) = #BROKER_CODE
		SALES_ORDER_HEADERS(SALESPERSON_CODE) = #SALESPERSON_CODE
		SALES_ORDER_HEADERS(SALES_COMMISSION_CODE) = #SALES_COMMISSION_CODE
	END_BLOCK

	MENU_BLOCK MENU_1 /ROW=12 /COL=45 &
			/SOURCE=(MESSAGE("P_00110")) &
			/ITEM=(MESSAGE("P_00110")),(MESSAGE("P_54038")),(GOTO GET_TRANSACTION_TYPE) &
			/ITEM=(MESSAGE("P_00016")),(MESSAGE("P_24086")),(GOTO DEFAULT_ADDRESSES) &
			/ITEM=(MESSAGE("P_92864")),(MESSAGE("P_37117")),(GOTO FINAL_ADDRESSES) &
			/ITEM=(MESSAGE("P_00107")),(MESSAGE("P_50093")),(GOTO ORDER_ANALYSIS_CODES) &
			/ITEM=(MESSAGE("P_24164")),(MESSAGE("P_54056")),(PERFORM ORDER_NOTES) &
			/ITEM=(MESSAGE("P_00192")),(MESSAGE("P_91501")),(GOTO MAINTAIN_REQUESTED_DATE) &
			/ITEM=(MESSAGE("P_91149")),(MESSAGE("P_51143")),(PERFORM MODIFY_PAYMENT_TYPE) &
			/ITEM=(MESSAGE("P_00323")),(MESSAGE("P_00057")),(GOTO DIVISION) &
			/ITEM=(MESSAGE("P_00108")),(MESSAGE("P_93536")),(GOTO ENTER_COMMENTS) &
			/ITEM=(MESSAGE("P_00551")),(MESSAGE("P_54008")),(EXIT)

	BEGIN_BLOCK ORDER_ANALYSIS_CODES
		PERFORM ORDER_ANALYSIS_CODES
		DISPLAY DEFAULTS
		GOTO MENU_1
	END_BLOCK
	
	BEGIN_BLOCK ENTER_COMMENTS
		#ENTER_HEADER_COMMENTS = #YES
	END_BLOCK

	BEGIN_BLOCK GET_TRANSACTION_TYPE
		FIND IN TT:SOP_TRANSACTION_TYPES &
			/SECONDARY &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=TRANSACTION_TYPE=(PARAMETER("MODULE_SO")) &
			/LOCK=NONE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00277
			EXIT
		END_IF

		#MANUAL = TT:SOP_TRANSACTION_TYPES(MANUAL_NUMBER)
	END_BLOCK

	BEGIN_BLOCK AUTO_NUMBER
		IF (#MANUAL <> #YES)

			FIND IN SOP_TRANSACTION_TYPES &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=TRANSACTION_TYPE=(PARAMETER("MODULE_SO")) &
				/LOCK=WRITE

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_00277
				EXIT(%FAILURE)
			END_IF

			#ORDER_NUMBER = SOP_TRANSACTION_TYPES(TRANSACTION_NUMBER)

			FIND IN AA:SALES_ORDER_HEADERS &
				/SECONDARY &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=ORDER_NUMBER=#ORDER_NUMBER

			IF (%STATUS = %SUCCESS)
				MESSAGE/IDENTIFIER/BELL P_02334
				EXIT(%FAILURE)
			END_IF

			! Need to check EDI reject tables if EDI active to ensure
			! a duplicate order number is not being generated.

			IF (#EDI_ACTIVE_FLAG = PARAMETER("LANGUAGE_YES"))

				FIND IN SOP_EDI_INBOUND_REJECT_HEADER &
					/LOCK=NONE &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=DIVISION=#DIVISION &
					/WITH=ORDER_NUMBER=#ORDER_NUMBER

				IF (%STATUS = %SUCCESS)
					MESSAGE/IDENTIFIER/BELL P_02334
					EXIT(%FAILURE)
				END_IF
			END_IF

			SALES_ORDER_HEADERS(ORDER_NUMBER)=#ORDER_NUMBER
!Comment out the following line issue#368358-5
!			#OLD_TOTAL_ORDER_VALUE = 0
!End of comment out
			#OLD_BASE_TOTAL = 0

		OUTPUT_BLOCK		 /ROW=2 /COL=69 &
			/PROMPT=(FIELD_PROMPT(ORDER_NUMBER)) &
			/SOURCE=(#ORDER_NUMBER) &
			/USING=SALES_ORDER_HEADERS(ORDER_NUMBER)
	END_BLOCK

	BEGIN_BLOCK MANUAL_ORDER_NUMBER
		ELSE

		INPUT_BLOCK  /ROW=2 /COL=69 /NEW /PROTECT &
			/PROMPT=(FIELD_PROMPT(ORDER_NUMBER)) &
			/TARGET=#ORDER_NUMBER &
			/USING=SALES_ORDER_HEADERS(ORDER_NUMBER),REQUIRED &
			/LOV=SALES_ORDER_HEADERS(ORDER_NUMBER,CUSTOMER_NUMBER,ORDER_DATE) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=DIVISION=#DIVISION &
			/LOV_WITH=SOP_DESTINATION_WAREHOUSE="" &
			/LOV_SECONDARY

			FIND IN AA:SALES_ORDER_HEADERS &
				/SECONDARY &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=ORDER_NUMBER=#ORDER_NUMBER

			IF (%STATUS = %SUCCESS)
				MESSAGE/IDENTIFIER/BELL P_52287
				GOTO AUTO_NUMBER
			END_IF

			SALES_ORDER_HEADERS(ORDER_NUMBER) = #ORDER_NUMBER

		END_IF

		SOP_TRANSACTION_TYPES(TRANSACTION_NUMBER) = SOP_TRANSACTION_TYPES(TRANSACTION_NUMBER) + 1
	END_BLOCK

	BEGIN_BLOCK SETUP_VARIABLES
		#LOCATION			= SALES_ORDER_HEADERS(LOCATION)
		#BROKER_CODE		= SALES_ORDER_HEADERS(BROKER_CODE)
		#SALESPERSON_CODE	= SALES_ORDER_HEADERS(SALESPERSON_CODE)
		#SALES_COMMISSION_CODE  = SALES_ORDER_HEADERS(SALES_COMMISSION_CODE)
		#SA_GROUP		= SALES_ORDER_HEADERS(SALES_ANALYSIS_GROUP)
		#REQUIRED_DATE		= SALES_ORDER_HEADERS(REQUIRED_DATE)
		#SYS_REQUESTED_DATE	= SALES_ORDER_HEADERS(SYS_REQUESTED_DATE)
		#ORDER_DATE		= SALES_ORDER_HEADERS(ORDER_DATE)
		#DEF_DELIVERY_ADDRESS	  = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
		#DEF_FINAL_ADDRESS_CODE = SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE)
		#DEF_DELIVERY_INST	= SALES_ORDER_HEADERS(DELIVERY_INSTRUCTIONS)
		#DEF_SHIP_METHOD	= SALES_ORDER_HEADERS(SHIP_METHOD)
		#DEF_COST_CENTER	= SALES_ORDER_HEADERS(COST_CENTER)
		#ORDER_TYPE		= SALES_ORDER_HEADERS(SALES_ORDER_TYPE)
		#PRINT_CONF_FLAG	= SALES_ORDER_HEADERS(SOP_PRINT_CONF_FLAG)

		#DEF_FREIGHT_CONTRACT	= SALES_ORDER_HEADERS(SYS_FREIGHT_CONTRACT_NUMBER)
		#DEF_FREIGHT_MODE	= SALES_ORDER_HEADERS(SYS_FREIGHT_MODE)
		#DEF_SHIP_TERMS = SALES_ORDER_HEADERS(SOP_SHIPPING_TERMS_CODE)
		! Don't set a default shipping terms. This will force a
		! read of sop_shipping_terms to set the #def_cust_pays_freight
		! flag correctly.
		#DEF_SHIP_TERMS		= ""

		IF (#DATE_CODE = #DUE_CODE)
			#EFFECTIVE_DATE = SALES_ORDER_HEADERS(SYS_SHIPPING_DATE)
		ELSE
			#EFFECTIVE_DATE = SALES_ORDER_HEADERS(ORDER_DATE)
		END_IF

		#CUSTOMER_REFERENCE 	= SALES_ORDER_HEADERS(CUSTOMER_REFERENCE)

		#TOTAL_ORDER_WEIGHT		= 0
		#TOTAL_ORDER_VOLUME		= 0
		#TOTAL_WEIGHT_UOM	  = ""
		#TOTAL_VOLUME_UOM	  = ""
		#TOTAL_LINE_DISCOUNT		 = 0
		#TOTAL_LINE_TAX	 = 0
		#GRAND_TOTAL		   = 0
		#OLD_BASE_TOTAL 	= 0
	END_BLOCK

	BEGIN_BLOCK LINES

		IF ( #TP_PROMOTIONS_IN_USE = #YES )
			PERFORM LOAD_CUSTOMER_PROMOTIONS
			IF (%STATUS = %FAILURE) EXIT (%FAILURE)
		END_IF

		ADD TO SALES_ORDER_HEADERS
		IF (%STATUS = %FAILURE)  EXIT(%FAILURE)

		PERFORM COPY_HEADER_COMMENTS

		#PROCESS_KEY = #COMPANY_CODE & "/" & #DIVISION & "/" & #ORDER_NUMBER
		PERFORM "GEMLB:LB_L_PROCESS_CONTROLS" LB_L_PROCESS_CONTROLS &
					(#COMPANY_CODE, &
					 ("ADD"), 2, &
					 (#FUNCTION_ID), &
					 (#PROCESS_KEY), &
					 (#ID), &
					 "", &
					 #ERROR_OCCURRED, #ERROR_MESSAGE )
		
		IF(%STATUS = %FAILURE OR #ERROR_OCCURRED)
			ERROR/TEXT_ONLY/WAIT #ERROR_MESSAGE
			EXIT(%FAILURE)
		END_IF

		COMMIT
		
		IF (#ENTER_HEADER_COMMENTS = #YES)
			PERFORM ORDER_HEADER_COMMENTS
		END_IF

		#MAIN_OPT = "COPY"

		START_TRANSACTION

		#LINE_EC_REPORT_TYPE = #DEF_EC_REPORT_TYPE
		PERFORM COPY_LINES

		PERFORM COPY_LINE_COMMENTS

		COMMIT

		PERFORM HEADER_REPRINT
		
		!executing workflow funtions
		PERFORM WORKFLOW_CREDIT_CHECK
		
		! #OPT value assigned in HEADER_REPRINT
		IF (#OPT = "DESPATCH")
			PERFORM PRODUCE_DESPATCH_NOTE
		END_IF

		IF (#OPT = "HEADER")
			! MODIFY_HEADER selected in Order Totals
			EXIT (%SUCCESS)
		END_IF

		IF (#PRINT_CONF_FLAG = #YES)
			PERFORM PRODUCE_ORDER_PRINT
		END_IF

		GOTO FINISH

	END_BLOCK

	BEGIN_BLOCK DEFAULT_ADDRESSES
		#OLD_DELIVERY_ADDRESS = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
		PERFORM DEFAULT_ADDRESSES

		#DEF_DELIVERY_ADDRESS = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
		#DEF_FINAL_ADDRESS_CODE = SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE)
		#BROKER_CODE		= SALES_ORDER_HEADERS(BROKER_CODE)
		#SALESPERSON_CODE	= SALES_ORDER_HEADERS(SALESPERSON_CODE)

		#DEF_DELIVERY_INST	= SALES_ORDER_HEADERS(DELIVERY_INSTRUCTIONS)
		#DEF_SHIP_METHOD	= SALES_ORDER_HEADERS(SHIP_METHOD)

		GOTO REDISPLAY_DEFAULT_ADDRESSES_1
	END_BLOCK

	BEGIN_BLOCK FINAL_ADDRESSES 
		PERFORM FINAL_ADDRESSES
	END_BLOCK

	BEGIN_BLOCK REDISPLAY_DEFAULT_ADDRESSES_1
		OUTPUT_BLOCK		 /ROW=6 /COL=15 &
			/PROMPT=(MESSAGE("P_00318")) &
			/SOURCE=(SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE))

		FIND IN CUSTOMER_ADDRESSES &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/WITH=ADDRESS_CODE=SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)

		FIND IN SYS_COUNTRIES &
			/LOCK=NONE &
			/WITH=SYS_COUNTRY=CUSTOMER_ADDRESSES(SYS_COUNTRY)
			
		PERFORM "GEMLB:LB_ADDRESSES" (&
			"D", &
			(SYS_COUNTRIES(SYS_COUNTRY)), &
			"CUSTOMER_ADDRESSES", &
			"9", &
			"7", &
			MESSAGE("P_82258"), &
			"", &
			"", &
			"", &
			"", &
			#R1, &
			#R2, &
			#R3, &
			#R4, &
			#R5)

		OUTPUT_BLOCK FINAL_ADDRESS_CODE_O1 /ROW=10 /COL=66 /LEN=10 &
			/SOURCE=SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE) &
			/PROMPT=FIELD_SHORT_PROMPT(FINAL_ADDRESS_CODE)
				
		OUTPUT_BLOCK FINAL_CITY_O1 /ROW=11 /COL=66 /LEN=12 &
			/SOURCE=#HEADER_CITY &
			/PROMPT=MESSAGE("P_85010")

		OUTPUT_BLOCK FINAL_ADDRESS_STATE_PROV_O1 /ROW=12 /COL=66 /LEN=12 &
			/SOURCE=#HEADER_STATE_PROVINCE &
			/PROMPT=MESSAGE("P_37127")
		
		OUTPUT_BLOCK FINAL_ADDRESS_COUNTRY_O1 /ROW=13 /COL=66 /LEN=12 &
			/SOURCE=#HEADER_COUNTRY_CODE &
			/PROMPT=FIELD_PROMPT(COUNTRY_CODE)

		OUTPUT_BLOCK		 /ROW=13 /COL=15 &
			/PROMPT=(MESSAGE("P_12241")) &
			/SOURCE=(SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE))		

		GOTO MENU_1
	END_BLOCK

	BEGIN_BLOCK FINISH
	END_BLOCK

END_FORM


PROCEDURE_FORM COPY_LINES

	BEGIN_BLOCK EXTRACT_LINES
		PERFORM "GEMSOP:SOP_T_COPY_ORDER_LINES" &
				(#COMPANY_CODE, &
				 #DIVISION, &
				 #ORDER_NUMBER_COPY, &
				 #ORDER_NUMBER, &
				 #DEF_DELIVERY_ADDRESS, &
				 #LOCATION, &
				 #SALESPERSON_CODE, &
				 #SALES_COMMISSION_CODE, &
				 #SA_GROUP, &
				 #CUSTOMER_NUMBER, &
				 #ORDER_CYCLE, &
				 #LINE_EC_REPORT_TYPE, &
				 #DEF_EC_TRANSACTION_TYPE, &
				 #DEF_EC_MODE_TRANSPORT, &
				 #DEF_EC_DELIVERY_TERMS, &
				 #ORIGINAL_CUSTOMER, &
				 #CURRENCY_CODE, &
				 #CURRENCY_RATE, &
				 #CURRENCY_DATE, &
				 #CURRENCY_FIXED, &
				 #CURRENCY_RATIO_INDIC, &
				 #RATE_AUTHORITY, &
				 #RATE_TYPE, &
				 #DEF_FINAL_ADDRESS_CODE)
	END_BLOCK

	BEGIN_BLOCK LOT_LIMITS
		PERFORM COPY_LOT_LIMITS
	END_BLOCK

END_FORM


FORM TEMPLATE /ROW=3 /COL=2 /HEIGHT=21 /WIDTH=78 &
	/TITLE=(MESSAGE("P_54031"))


	BEGIN_BLOCK SETUP
		START_TRANSACTION
	        CLEAR_BUFFER SECURITY_PERIOD_ACCESS_VT
		DISPLAY DEFAULTS
	END_BLOCK

	INPUT_BLOCK DIVISION /ROW=2 /COL=28 &
			/PROMPT=(FIELD_PROMPT(DIVISION)) &
			/TARGET=SALES_TEMPLATE_HEADERS(DIVISION) &
			/LOV=SECURITY_PERIOD_ACCESS_VT(SYS_ACCESS_CODE,CODE_DESCRIPTION) &
			/LOV_WITH=SYS_ACCESS_TYPE=(PARAMETER("ACCESS_TYPE_DIVISION")) &
			/LOV_WITH=SOURCE_MODULE=(PARAMETER("MODULE_SO")) &
			/LOV_WITH=SYS_ALLOW_ACCESS=#YES

	BEGIN_BLOCK EXTRACT_DIVISION
		FIND IN AR_CONTROLS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=DIVISION = SALES_TEMPLATE_HEADERS(DIVISION)

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00354
			GOTO DIVISION
		END_IF

		FIND IN SECURITY_PERIOD_ACCESS_VT &
			/WITH=SYS_ACCESS_TYPE=(PARAMETER("ACCESS_TYPE_DIVISION")) &
			/WITH=SYS_ACCESS_CODE=SALES_TEMPLATE_HEADERS(DIVISION) &
			/WITH=SOURCE_MODULE=(PARAMETER("MODULE_SO")) &

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00447
			GOTO DIVISION
		END_IF

		IF (SECURITY_PERIOD_ACCESS_VT(SYS_ALLOW_ACCESS) <> #YES)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00756
			GOTO DIVISION
		END_IF

		IF (AR_CONTROLS(SOP_ACTIVE)<>#YES)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00243
			EXIT
		END_IF

		#DIVISION			= SALES_TEMPLATE_HEADERS(DIVISION)
		#BASE_CURRENCY_CODE		= AR_CONTROLS(SYS_CURRENCY_CODE)
		#CURRENCY_METHOD	= AR_CONTROLS(SYS_CURRENCY_METHOD)
		#CONTRACT_PRICES	= AR_CONTROLS(CONTRACT_PRICES_IN_USE)
		#PROMOTION_PRICES	  = AR_CONTROLS(PROMOTION_PRICES_IN_USE)
		#CONTRACT_OVERRIDE	  = AR_CONTROLS(CONTRACT_PRICES_OVERRIDE)
		#PROMOTION_OVERRIDE		= AR_CONTROLS(PROMOTION_PRICE_OVERRIDE)
		#PRICE_OVERRIDE	 = AR_CONTROLS(SALES_PRICE_OVERRIDE)
		#PROM_OVER_CONTRACTS		 = AR_CONTROLS(PROMOTION_OVERRIDE_CONTRACTS)
		#LD_OVERRIDE		   = AR_CONTROLS(LINE_DISCOUNT_OVERRIDE)
		#LD_INV	 = AR_CONTROLS(LINE_DISCOUNT_INV_FLAG)
		#LD_CUS	 = AR_CONTROLS(LINE_DISCOUNT_CUST_FLAG)
		#LD_BREAK			= AR_CONTROLS(LINE_DISCOUNT_BREAK_ON)
		#LD_CALC		= AR_CONTROLS(LINE_DISCOUNT_CALC_FLAG)
		#LD_IN_USE			 = AR_CONTROLS(LINE_DISCOUNT_IN_USE)
		#OD_IN_USE			 = AR_CONTROLS(ORDER_DISCOUNT_IN_USE)
		#OD_BREAK		= AR_CONTROLS(ORDER_DISCOUNT_BREAK_ON)
		#OD_CALC		= AR_CONTROLS(ORDER_DISCOUNT_CALC_FLAG)
		#TAX_FLAG			= AR_CONTROLS(TAX_BASED_ON)
		#FREIGHT_TAXABLE	= AR_CONTROLS(FREIGHT_TAXABLE)
		#MISC_TAXABLE	   = AR_CONTROLS(MISCELLANEOUS_TAXABLE)
		#DIV_TAX_ON_CASH	= AR_CONTROLS(SYS_TAX_ON_CASH)
		#DEF_FREIGHT_TAX_CODE	   = AR_CONTROLS(DEF_FREIGHT_TAX_CODE)
		#DEF_MISC_TAX_CODE	  = AR_CONTROLS(DEF_MISC_TAX_CODE)
		#DEF_PART_TAX_CODE	  = AR_CONTROLS(DEF_PRODUCT_TAX_CODE)
		#DEF_CUST_TAX_CODE	  = AR_CONTROLS(DEF_CUSTOMER_TAX_CODE)
		#PHYSICAL_IN_USE	= AR_CONTROLS(PHYSICAL_UNITS_IN_USE)
		#DEF_WEIGHT_UNIT	= AR_CONTROLS(DEFAULT_WEIGHT_UNIT)
		#DEF_VOLUME_UNIT	= AR_CONTROLS(DEFAULT_VOLUME_UNIT)
		#DIVISION_NAME	  = AR_CONTROLS(DIVISION_NAME)
		#PERMIT_RESERVATION		= AR_CONTROLS(PERMIT_RESERVATION)
		#ATP_AT_ORDER_ENTRY		= AR_CONTROLS(ATP_AT_ORDER_ENTRY)
		#IC_ATP_SELECTION_METHOD	= AR_CONTROLS(IC_ATP_SELECTION_METHOD)
		#SOP_REQUIRED_DATE_METHOD	  = AR_CONTROLS(SOP_REQUIRED_DATE_METHOD)

		#MANDATORY_CUSTOMER_PO		= AR_CONTROLS(SOP_CUSTOMER_PO_REQUIRED)
		IF (AR_CONTROLS(SOP_CUSTOMER_PO_REQUIRED) = "")
			#MANDATORY_CUSTOMER_PO = 0
		END_IF

		#SOP_LEAD_TIME = AR_CONTROLS(SALES_ORDER_LEAD_TIME)
		#SYS_REQUESTED_DATE = DATE(DAYS((%TODAY)) + #SOP_LEAD_TIME)

		#AR_FREIGHT_IN_USE	= AR_CONTROLS(SOP_AR_FREIGHT_IN_USE)
		IF (AR_CONTROLS(SOP_AR_FREIGHT_IN_USE) = "")
			#AR_FREIGHT_IN_USE = #NO
		END_IF

		#DIV_ALLOWS_FREIGHT_OVERRIDE	= AR_CONTROLS(SOP_ALLOW_FREIGHT_OVERRIDE)
		#DIV_LINE_DISC_FREIGHT_INC	= AR_CONTROLS(SOP_LINE_DISC_FREIGHT_INCLUSIVE)

		IF (#ATP_IN_USE_FOR_COMPANY <> #YES)
			#ATP_AT_ORDER_ENTRY = #NO
		END_IF

		DISPLAY DEFAULTS
	END_BLOCK

	OUTPUT_BLOCK DIVISION_DESC /ROW=2 /COL=32 &
			/SOURCE=(SECURITY_PERIOD_ACCESS_VT(CODE_DESCRIPTION))

	BEGIN_BLOCK GET_BASE_CURRENCY
		#BASE_ROW = 5
		#BASE_COL = 12

		IF (#CURRENCY_METHOD <> 0)
			PERFORM SHOW_BASE_CURRENCY
		ELSE
			PERFORM BLANK_BASE_CURRENCY
		END_IF
	END_BLOCK

	INPUT_BLOCK TEMPLATE_CODE /ROW=4 /COL=28 &
			/PROMPT=(FIELD_PROMPT(TEMPLATE_CODE)) &
			/TARGET=#TEMPLATE_CODE &
			/USING=SALES_TEMPLATE_HEADERS(TEMPLATE_CODE) &
			/LOV=SALES_TEMPLATE_HEADERS(TEMPLATE_CODE,DESCRIPTION) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=DIVISION=SALES_TEMPLATE_HEADERS(DIVISION)

	BEGIN_BLOCK FIND_TEMPLATE

		FIND IN SALES_TEMPLATE_HEADERS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE =#COMPANY_CODE &
			/WITH=DIVISION = SALES_TEMPLATE_HEADERS(DIVISION) &
			/WITH=TEMPLATE_CODE=#TEMPLATE_CODE

		IF (%STATUS=%FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_52252
			GOTO TEMPLATE_CODE
		END_IF
	END_BLOCK

	BEGIN_BLOCK CHECK_REACH_FOR_TEMPLATE 
		PERFORM CHECK_REACH_FOR_TEMPLATE (#COMPANY_CODE,(SALES_TEMPLATE_HEADERS(DIVISION)),#TEMPLATE_CODE,"",#CHECK_REACH_FLAG)
		
		IF ( #CHECK_REACH_FLAG = #NO ) 
			GOTO TEMPLATE_CODE		
		END_IF 
	END_BLOCK 

	OUTPUT_BLOCK DESC /ROW=4 /COL=39 &
			/SOURCE=(SALES_TEMPLATE_HEADERS(DESCRIPTION))

	OUTPUT_BLOCK CUSTOMER /ROW=6 /COL=28 &
			/PROMPT=(FIELD_SHORT_PROMPT(CUSTOMER_NUMBER)) &
			/SOURCE=(SALES_TEMPLATE_HEADERS(CUSTOMER_NUMBER))

	OUTPUT_BLOCK SALES_ORDER_TYPE /ROW=6 /COL=62 &
			/PROMPT=(FIELD_PROMPT(SALES_ORDER_TYPE)) &
			/SOURCE=(SALES_TEMPLATE_HEADERS(SALES_ORDER_TYPE))

	BEGIN_BLOCK FIND_CUSTOMER

		FIND IN CUSTOMERS &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=SALES_TEMPLATE_HEADERS(CUSTOMER_NUMBER) &
			/LOCK=NONE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_22151
			EXIT
		END_IF

		#CUSTOMER_NUMBER=SALES_TEMPLATE_HEADERS(CUSTOMER_NUMBER)
		#CUST_PERMIT_RESERVATION=CUSTOMERS(PERMIT_RESERVATION)
		#AUTO_RESERVE=CUSTOMERS(AUTO_RESERVE)

		FIND IN SYS_COUNTRIES &
			/LOCK=NONE &
			/WITH=SYS_COUNTRY=CUSTOMERS(SYS_COUNTRY)

		#PHONE_MASK=SYS_COUNTRIES(SYS_PHONE_MASK)
	END_BLOCK

	BEGIN_BLOCK CPANEL 
		PERFORM HEADER_CPANEL ("TEMPLATE",(#DIVISION),(#CUSTOMER_NUMBER),"")
	END_BLOCK

	OUTPUT_BLOCK CUSTOMER_NAME /ROW=7 /COL=28 &
			/SOURCE=(CUSTOMERS(CUSTOMER_NAME))

	BEGIN_BLOCK DISPLAY_ADDRESS

		PERFORM "GEMLB:LB_ADDRESSES" (&
			"D", &
			(SYS_COUNTRIES(SYS_COUNTRY)), &
			"CUSTOMERS", &
			"10", &
			"20", &
			MESSAGE("P_82258"), &
			"", &
			"", &
			"", &
			"", &
			#R1, &
			#R2, &
			#R3, &
			#R4, &
			#R5)
	END_BLOCK

	BEGIN_BLOCK VALIDATE_DEFAULT_INVOICE_ADDRESS
		FIND IN CUSTOMER_ADDRESSES &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=SALES_TEMPLATE_HEADERS(CUSTOMER_NUMBER) &
			/WITH=ADDRESS_CODE=SALES_TEMPLATE_HEADERS(INVOICE_ADDRESS_CODE)

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_62067
			MESSAGE/IDENTIFIER/BELL/WAIT P_54051
			GOTO TEMPLATE_CODE
		END_IF

		IF (CUSTOMER_ADDRESSES(ACTIVATION_STATUS) <> (PARAMETER("STATUS_ACTIVE")))
			MESSAGE/IDENTIFIER/BELL/WAIT P_62067
			MESSAGE/IDENTIFIER/BELL/WAIT P_54051
			GOTO TEMPLATE_CODE
		END_IF

	END_BLOCK

	BEGIN_BLOCK VALIDATE_DEFAULT_DELIVERY_ADDRESS
		FIND IN CUSTOMER_ADDRESSES &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=SALES_TEMPLATE_HEADERS(CUSTOMER_NUMBER) &
			/WITH=ADDRESS_CODE=SALES_TEMPLATE_HEADERS(DELIVERY_ADDRESS_CODE)

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_62066
			MESSAGE/IDENTIFIER/BELL/WAIT P_54051
			GOTO TEMPLATE_CODE
		END_IF

		IF (CUSTOMER_ADDRESSES(ACTIVATION_STATUS) <> (PARAMETER("STATUS_ACTIVE")))
			MESSAGE/IDENTIFIER/BELL/WAIT P_62066
			MESSAGE/IDENTIFIER/BELL/WAIT P_54051
			GOTO TEMPLATE_CODE
		END_IF
	END_BLOCK

	BEGIN_BLOCK CREDIT_CHECK
		PERFORM "GEMSOP:SOP_S_L_CONTROL_MAINTENANCE" HEADER_CHECK_CUSTOMER (#COMPANY_CODE, &
																			#DIVISION, &
																			(SALES_TEMPLATE_HEADERS(CUSTOMER_NUMBER)),"","", &
																			#RESTRICT_CUSTOMER_FLAG,"")
		IF ( #RESTRICT_CUSTOMER_FLAG = #YES ) 
			#PARAMETER_CUST = TRIM(SALES_TEMPLATE_HEADERS(CUSTOMER_NUMBER)) & "," & TRIM(#DIVISION)
			MESSAGE/IDENTIFIER/BELL/WAIT P_37168,#PARAMETER_CUST
		END_IF

		! At this point the credit limit check should determine whether or not
		! the customer is within his limits before further entry

		SALES_ORDER_HEADERS(CREDIT_STATUS_CODE)=""

		PERFORM "GEMLB:SOP_L_CREDIT_LIMITS" &
				(#COMPANY_CODE, &
				 #DIVISION, &
				 #CUSTOMER_NUMBER, &
				 0, &
				 (PARAMETER("SOP_STAGE_ORDER")), &
				 (#OLD_BASE_TOTAL), &
				 (#EDIT_MODE), &
				 #NO,	&
				 "", &
				 "", &
				 #ACTION, &
				 #MAN_AUTO, &
				 #CREDIT_STATUS_CODE, &
				 #MESSAGE, &
				 "")

		IF (%STATUS = %FAILURE)
			ROLLBACK
			EXIT (%FAILURE)
		END_IF

		IF (#ACTION = (PARAMETER("CREDIT_OK"))) GOTO ORDER_DATE

		IF (#ACTION = (PARAMETER("CREDIT_REJECT")))
			ERROR (#MESSAGE)
			GOTO TEMPLATE_CODE
		END_IF

		IF (#ACTION = (PARAMETER("CREDIT_HOLD")))
			ERROR (#MESSAGE)
			SALES_ORDER_HEADERS(CREDIT_STATUS_CODE)=#CREDIT_STATUS_CODE

			IF (#MAN_AUTO = (PARAMETER("AM_FLAG_M")))
				PERFORM CREDIT_STATUS_CODE
				GOTO CREDIT_HOLD_STATUS
				SALES_ORDER_HEADERS(CREDIT_STATUS_CODE)=#CREDIT_STATUS_CODE
			ELSE
				GOTO CREDIT_HOLD_STATUS
			END_IF
		END_IF

		IF (#ACTION = (PARAMETER("CREDIT_WARN")))
			ERROR (#MESSAGE)
			GOTO ORDER_DATE
		END_IF

		GOTO ORDER_DATE
	END_BLOCK

	BEGIN_BLOCK CREDIT_HOLD_STATUS
		OUTPUT_BLOCK		 /ROW=16 /COL=23 &
			/PROMPT=(FIELD_PROMPT(CREDIT_STATUS_CODE)) &
			/SOURCE=(SALES_ORDER_HEADERS(CREDIT_STATUS_CODE))

		FIND IN CREDIT_HOLD_STATUS_CODES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=CREDIT_STATUS_CODE = SALES_ORDER_HEADERS(CREDIT_STATUS_CODE)

		IF (%STATUS=%FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_52251
			PERFORM CREDIT_STATUS_CODE
			SALES_ORDER_HEADERS(CREDIT_STATUS_CODE)=#CREDIT_STATUS_CODE
			GOTO CREDIT_HOLD_STATUS
		END_IF
	END_BLOCK

	OUTPUT_BLOCK HOLD_STATUS_DESC /ROW=16 /COL=30 &
			/SOURCE=(CREDIT_HOLD_STATUS_CODES(DESCRIPTION))

	INPUT_BLOCK ORDER_DATE /ROW=13 /COL=20 &
			/PROMPT=(FIELD_PROMPT(ORDER_DATE)) &
			/SOURCE=(%TODAY) &
			/TARGET=#ORDER_DATE &
			/USING=SALES_ORDER_HEADERS(ORDER_DATE),REQUIRED &
			/INPUT_MASK=(#DEFAULT_DATE_MASK)

	BEGIN_BLOCK /DISPLAY_ONLY REQUIRED_DATE_METHOD
		IF (#SOP_REQUIRED_DATE_METHOD = "")
			IF (#DIVISION <> "")
				FIND IN AR_CONTROLS &
					/LOCK=NONE &
					/WITH=COMPANY_CODE = #COMPANY_CODE &
					/WITH=DIVISION = #DIVISION

				#SOP_REQUIRED_DATE_METHOD = AR_CONTROLS(SOP_REQUIRED_DATE_METHOD)
			ELSE_IF (#DEFAULT_AR_DIVISION <> "")
				FIND IN AR_CONTROLS &
					/LOCK=NONE &
					/WITH=COMPANY_CODE = #COMPANY_CODE &
					/WITH=DIVISION = #DEFAULT_AR_DIVISION

				#SOP_REQUIRED_DATE_METHOD = AR_CONTROLS(SOP_REQUIRED_DATE_METHOD)
			ELSE
				#SOP_REQUIRED_DATE_METHOD = #METHOD_DESPATCH
			END_IF
		END_IF

		IF (#SOP_REQUIRED_DATE_METHOD = #METHOD_RECEIPT)
			#REQUESTED_DATE_PROMPT = FIELD_PROMPT(SYS_DELIVERY_DATE)
		ELSE
			#REQUESTED_DATE_PROMPT = FIELD_PROMPT(SYS_SHIPPING_DATE)
		END_IF
		! The Required Date Method decides what type of date the Requested Shipping Date
		! is to be.  If the method value is "D" for despatch/shipping, then the Requested
		! Shipping Date is the date the order is to be shipped to the customer.  If "R"
		! for receive/delivery, the Requested Shipping Date is the date the order is to
		! received at the customer's delivery address.
	END_BLOCK

	BEGIN_BLOCK MAINTAIN_REQUESTED_DATE
		! Requested Date Prompt for the INPUT_BLOCK below
		OUTPUT_BLOCK REQUESTED_DATE_PROMPT /ROW=14 /COL=5 &
			/PROMPT="" &
			/ATTRIBUTES=NONE &
			/SOURCE=#REQUESTED_DATE_PROMPT &
			/OUTPUT_MASK="!-@@@@@@@@@@@@@"

		INPUT_BLOCK REQUESTED_DATE /ROW=14 /COL=20 &
			/PROMPT="" &
			/TARGET=#SYS_REQUESTED_DATE &
			/USING=SALES_ORDER_HEADERS(SYS_REQUESTED_DATE) &
			/INPUT_MASK=(#DEFAULT_DATE_MASK)
	END_BLOCK

	BEGIN_BLOCK DATE_CALCULATIONS
		IF (#SOP_REQUIRED_DATE_METHOD = #METHOD_DESPATCH)
			#TEMPLATE_SHIPPING_DATE = #SYS_REQUESTED_DATE
			#SYS_DELIVERY_DATE = %TODAY
		ELSE
			#SYS_DELIVERY_DATE = #SYS_REQUESTED_DATE
			#TEMPLATE_SHIPPING_DATE = %TODAY
		END_IF
	END_BLOCK

	BEGIN_BLOCK CUSTOMER_PO
	! Customer PO and Customer Reference are synonymous

		INPUT_BLOCK PO_NOT_REQUIRED /ROW=13 /COL=50 &
			/TARGET=#CUSTOMER_REFERENCE &
			/SOURCE=SALES_TEMPLATE_HEADERS(CUSTOMER_REFERENCE) &
			/PROMPT=(MESSAGE("P_13029")) &
			/USING=SALES_ORDER_HEADERS(CUSTOMER_REFERENCE) &
			/USE_IF=(#MANDATORY_CUSTOMER_PO = 0)

		INPUT_BLOCK PO_REQUIRED /ROW=13 /COL=50 &
			/TARGET=#CUSTOMER_REFERENCE &
			/SOURCE=SALES_TEMPLATE_HEADERS(CUSTOMER_REFERENCE) &
			/PROMPT=(MESSAGE("P_13029")) &
			/USING=SALES_ORDER_HEADERS(CUSTOMER_REFERENCE),REQUIRED &
			/USE_IF=(#MANDATORY_CUSTOMER_PO > 0)

		IF (#MANDATORY_CUSTOMER_PO = 0) GOTO CONFIRM

		PERFORM CUSTOMER_PO_CHECK ((#MANDATORY_CUSTOMER_PO), (#CUSTOMER_REFERENCE), "", #R_PASS)
		IF (#R_PASS = #YES)
			GOTO CONFIRM
		ELSE
			GOTO PO_REQUIRED
		END_IF
	END_BLOCK

	YESNO_BLOCK CONFIRM /ROW=18 /COL=28 &
			/PROMPT=(MESSAGE("P_59027")) &
			/FAILURE=(GOTO TEMPLATE_CODE)

	BEGIN_BLOCK GET_TRANSACTION_TYPE

		FIND IN TT:SOP_TRANSACTION_TYPES &
			/SECONDARY &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=TRANSACTION_TYPE=(PARAMETER("MODULE_SO")) &
			/LOCK=NONE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00277
			EXIT
		END_IF

		#MANUAL = TT:SOP_TRANSACTION_TYPES(MANUAL_NUMBER)
	END_BLOCK

	BEGIN_BLOCK MANUAL_NUMBER
		IF (#MANUAL = #YES)

			INPUT_BLOCK	/ROW=18 /COL=62 &
				/PROMPT=(FIELD_PROMPT(ORDER_NUMBER)) &
				/TARGET=#ORDER_NUMBER &
				/USING=SALES_ORDER_HEADERS(ORDER_NUMBER) &
				/LOV=SALES_ORDER_HEADERS(ORDER_NUMBER,CUSTOMER_NUMBER,ORDER_DATE) &
				/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
				/LOV_WITH=DIVISION=#DIVISION &
				/LOV_WITH=SOP_DESTINATION_WAREHOUSE=""

			FIND IN SALES_ORDER_HEADERS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=ORDER_NUMBER=#ORDER_NUMBER &
				/WITH=SOP_DESTINATION_WAREHOUSE=""

			IF (%STATUS = %SUCCESS)
				MESSAGE/IDENTIFIER/BELL/WAIT P_52287
				GOTO MANUAL_NUMBER
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK COPY
		MESSAGE/IDENTIFIER P_72013

		#TEMPLATE_CODE = SALES_TEMPLATE_HEADERS(TEMPLATE_CODE)
		COMMIT

		PERFORM CREATE_HEADER_FROM_TEMPLATE
		IF (%STATUS = %FAILURE)
			EXIT (%FAILURE)
		END_IF
	END_BLOCK


	BEGIN_BLOCK CHECK_CREDIT_AFTER
		PERFORM CREDIT_CHECK
		
		!executing workflow funtions
		PERFORM WORKFLOW_CREDIT_CHECK
				
	END_BLOCK

	BEGIN_BLOCK MENU_1
		IF (#ORDER_CYCLE=(PARAMETER("SOP_ORDER_CYCLE_A")))

		MENU_BLOCK  /ROW=12 /COL=60 &
			/SOURCE=(MESSAGE("P_54109")) /NOREPEAT &
			/BACK=(GOTO MENU_1) &
			/EXIT=(GOTO MENU_1) &
			/ITEM=(MESSAGE("P_54109")),(""),(#OPT="NEXT")

		END_IF
	END_BLOCK

	BEGIN_BLOCK MENU_1B
		IF (#ORDER_CYCLE=(PARAMETER("SOP_ORDER_CYCLE_B")))

		MENU_BLOCK  /ROW=12 /COL=60 &
			/SOURCE=(MESSAGE("P_54109")) /NOREPEAT &
			/BACK=(GOTO MENU_1) &
			/EXIT=(GOTO MENU_1) &
			/ITEM=(MESSAGE("P_54109")),(""),(#OPT="NEXT") &
			/ITEM=(MESSAGE("P_54034")),(""),(#OPT="DESPATCH")

		END_IF
	END_BLOCK

	BEGIN_BLOCK MENU_1C
		IF (#ORDER_CYCLE=#SOP_ORDER_CYCLE_C)

		MENU_BLOCK  /ROW=13 /COL=60 &
			/SOURCE=(MESSAGE("P_54109")) /NOREPEAT &
			/BACK=(GOTO MENU_1) &
			/EXIT=(GOTO MENU_1) &
			/ITEM=(MESSAGE("P_54109")),(""),(#OPT="NEXT")

		END_IF
	END_BLOCK

	BEGIN_BLOCK PICKING
		IF (#OPT="DESPATCH")
			PERFORM PRODUCE_DESPATCH_NOTE
		END_IF
		IF (#PRINT_CONF_FLAG = #YES)
			PERFORM PRODUCE_ORDER_PRINT
		END_IF
	END_BLOCK

END_FORM


PROCEDURE_FORM CREATE_HEADER_FROM_TEMPLATE


	BEGIN_BLOCK GET_TEMPLATE_HEADER

		FIND IN SALES_TEMPLATE_HEADERS &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=TEMPLATE_CODE=#TEMPLATE_CODE &
			/LOCK=NONE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_52214
			EXIT
		END_IF

		CLEAR_BUFFER SALES_ORDER_HEADERS

		SALES_ORDER_HEADERS(COMPANY_CODE)	= SALES_TEMPLATE_HEADERS(COMPANY_CODE)
		SALES_ORDER_HEADERS(DIVISION)		= SALES_TEMPLATE_HEADERS(DIVISION)
		SALES_ORDER_HEADERS(ORDER_CYCLE)	= #ORDER_CYCLE
		SALES_ORDER_HEADERS(CUSTOMER_NUMBER)	= SALES_TEMPLATE_HEADERS(CUSTOMER_NUMBER)
		SALES_ORDER_HEADERS(MP_INVOICE_CUSTOMER)	= SALES_TEMPLATE_HEADERS(CUSTOMER_NUMBER)
		SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)	= SALES_TEMPLATE_HEADERS(INVOICE_ADDRESS_CODE)
		SALES_ORDER_HEADERS(MP_SHIPPING_CUSTOMER)	= SALES_TEMPLATE_HEADERS(CUSTOMER_NUMBER)
		SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)	= SALES_TEMPLATE_HEADERS(DELIVERY_ADDRESS_CODE)
		SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE)	    = SALES_TEMPLATE_HEADERS(FINAL_ADDRESS_CODE)

		SALES_ORDER_HEADERS(PRICING_METHOD)		  = SALES_TEMPLATE_HEADERS(PRICING_METHOD)
		SALES_ORDER_HEADERS(DELIVERY_INSTRUCTIONS)	= SALES_TEMPLATE_HEADERS(DELIVERY_INSTRUCTIONS)
		SALES_ORDER_HEADERS(SHIP_METHOD)		  = SALES_TEMPLATE_HEADERS(SHIP_METHOD)
		SALES_ORDER_HEADERS(SOP_SHIPPING_TERMS_CODE)		 = SALES_TEMPLATE_HEADERS(SOP_SHIPPING_TERMS_CODE)

		SALES_ORDER_HEADERS(SALES_ORDER_TYPE)	= SALES_TEMPLATE_HEADERS(SALES_ORDER_TYPE)

		SALES_ORDER_HEADERS(ORDER_DATE)		= #ORDER_DATE
		SALES_ORDER_HEADERS(SYS_REQUESTED_DATE)	= #SYS_REQUESTED_DATE
		SALES_ORDER_HEADERS(SYS_SHIPPING_DATE)	= #TEMPLATE_SHIPPING_DATE
		SALES_ORDER_HEADERS(REQUIRED_DATE)	= #TEMPLATE_SHIPPING_DATE
		SALES_ORDER_HEADERS(SYS_DELIVERY_DATE)	= #SYS_DELIVERY_DATE

		SALES_ORDER_HEADERS(SALESPERSON_CODE)	= SALES_TEMPLATE_HEADERS(SALESPERSON_CODE)
		SALES_ORDER_HEADERS(SALES_COMMISSION_CODE)	= SALES_TEMPLATE_HEADERS(SALES_COMMISSION_CODE)
		SALES_ORDER_HEADERS(LOCATION)		= SALES_TEMPLATE_HEADERS(LOCATION)
		SALES_ORDER_HEADERS(SALES_ANALYSIS_GROUP)	= SALES_TEMPLATE_HEADERS(SALES_ANALYSIS_GROUP)
		SALES_ORDER_HEADERS(CREDIT_TERMS_CODE)	= SALES_TEMPLATE_HEADERS(CREDIT_TERMS_CODE)

		SALES_ORDER_HEADERS(CUSTOMER_REFERENCE)	= #CUSTOMER_REFERENCE

		SALES_ORDER_HEADERS(CUSTOMER_CONTACT)	= SALES_TEMPLATE_HEADERS(CUSTOMER_CONTACT)
		SALES_ORDER_HEADERS(COST_CENTER)	= SALES_TEMPLATE_HEADERS(COST_CENTER)
		SALES_ORDER_HEADERS(FREIGHT)		= SALES_TEMPLATE_HEADERS(FREIGHT)
		SALES_ORDER_HEADERS(NOTES)		= SALES_TEMPLATE_HEADERS(NOTES)
		SALES_ORDER_HEADERS(MISCELLANEOUS)	= SALES_TEMPLATE_HEADERS(MISCELLANEOUS)
		SALES_ORDER_HEADERS(SYS_PRINT_PART_DETAIL)	= SALES_TEMPLATE_HEADERS(SYS_PRINT_PART_DETAIL)

		IF ((#PHYSICAL_IN_USE=#YES) &
		OR  (#COMPANY_EC_REPORT_TYPE <> "") &
		OR  (#SYS_TM_IN_USE = #YES) &
		OR  (#AR_FREIGHT_IN_USE = #YES))
			SALES_ORDER_HEADERS(WEIGHT_UOM) = #DEF_WEIGHT_UNIT
			SALES_ORDER_HEADERS(VOLUME_UOM) = #DEF_VOLUME_UNIT
		END_IF

		SALES_ORDER_HEADERS(CREDIT_STATUS_CODE)	= #CREDIT_STATUS_CODE
		SALES_ORDER_HEADERS(USERNAME)		= %USERNAME
		SALES_ORDER_HEADERS(SYSTEM_DATE)	= %NOW

		IF (#DATE_CODE = #DUE_CODE)
			#EFFECTIVE_DATE = SALES_ORDER_HEADERS(SYS_SHIPPING_DATE)
		ELSE
			#EFFECTIVE_DATE = SALES_ORDER_HEADERS(ORDER_DATE)
		END_IF
	END_BLOCK

	BEGIN_BLOCK FIND_CUSTOMER

		FIND IN CUSTOMERS &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/LOCK=NONE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00810
			EXIT(%FAILURE)
		END_IF

		#LD_CUST_GROUP	  = CUSTOMERS(LINE_DISCOUNT_GROUP)
		#OD_CUST_GROUP	  = CUSTOMERS(ORDER_DISCOUNT_GROUP)
		#PRICE_CODE			    = CUSTOMERS(PRICE_CODE)
		#ADDR_PRICE_CODE	= CUSTOMERS(PRICE_CODE)
		#CUST_PRICE_CODE	= CUSTOMERS(PRICE_CODE)
		#CUSTOMER_NUMBER	= SALES_ORDER_HEADERS(CUSTOMER_NUMBER)
		#CUSTOMER_NAME	  = CUSTOMERS(CUSTOMER_NAME)
		#CUST_PERMIT_RESERVATION= CUSTOMERS(PERMIT_RESERVATION)
		#AUTO_RESERVE	   = #NO

		SALES_ORDER_HEADERS(AR_DRAFT_PAYMENT_TYPE) = CUSTOMERS(AR_DRAFT_PAYMENT_TYPE)
		SALES_ORDER_HEADERS(SOP_PRINT_CONF_FLAG) = CUSTOMERS(SOP_PRINT_CONF_FLAG)
	
		IF ((#AR_FREIGHT_IN_USE = #YES) OR (#SYS_TM_IN_USE = #YES))
			#DEF_SHIPPING_TERMS_CODE = SALES_TEMPLATE_HEADERS(SOP_SHIPPING_TERMS_CODE)
		ELSE
			#DEF_SHIPPING_TERMS_CODE = ""
		END_IF

		IF ((#AR_FREIGHT_IN_USE = #YES) OR (#SYS_TM_IN_USE = #YES))
			IF (#DEF_SHIPPING_TERMS_CODE <> "")
				FIND IN SOP_SHIPPING_TERMS &
						/LOCK=NONE &
						/WITH=COMPANY_CODE = #COMPANY_CODE &
						/WITH=SOP_SHIPPING_TERMS_CODE = #DEF_SHIPPING_TERMS_CODE

				IF (%STATUS <> %FAILURE)
					#DEF_CUST_PAYS_FREIGHT = SOP_SHIPPING_TERMS(SOP_FREIGHT_INCLUSIVE)
				ELSE
					#DEF_SHIPPING_TERMS_CODE=""
				END_IF
			END_IF
		END_IF		
		
		SALES_ORDER_HEADERS(SOP_SHIPPING_TERMS_CODE) = #DEF_SHIPPING_TERMS_CODE	
	
	END_BLOCK

	BEGIN_BLOCK CURRENCY
		#DEFAULT_CURRENCY_CODE = SALES_TEMPLATE_HEADERS(SYS_CURRENCY_CODE)

		DELETE ALL FROM SYS_CURRENCY_CONTROL_VT
		CLEAR_BUFFER SYS_CURRENCY_CONTROL_VT

		SYS_CURRENCY_CONTROL_VT(COMPANY_CODE)	= #COMPANY_CODE
		SYS_CURRENCY_CONTROL_VT(DIVISION)	= #DIVISION
		SYS_CURRENCY_CONTROL_VT(SOURCE_MODULE)	= PARAMETER("MODULE_SO")
		SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE)	= #DEFAULT_CURRENCY_CODE
		SYS_CURRENCY_CONTROL_VT(BASE_CURRENCY_CODE)	= #BASE_CURRENCY_CODE
		SYS_CURRENCY_CONTROL_VT(CODE_RATE_INPUT_FLAG)	= "C"
		SYS_CURRENCY_CONTROL_VT(CURRENCY_DATE)	= #ORDER_DATE
		SYS_CURRENCY_CONTROL_VT(RATE_OVERRIDE)	= #NO
		SYS_CURRENCY_CONTROL_VT(RATE_AUTHORITY)	= SALES_TEMPLATE_HEADERS(SYS_RATE_AUTHORITY)
		SYS_CURRENCY_CONTROL_VT(RATE_TYPE)	= SALES_TEMPLATE_HEADERS(SYS_RATE_TYPE)

		ADD TO SYS_CURRENCY_CONTROL_VT
		PERFORM "GEMLB:LB_S_L_CURRENCY_RATES" ( #R_STATUS, #R_MESSAGE)
		IF (#R_STATUS <> #YES)
			ERROR/WAIT #R_MESSAGE
			EXIT (%FAILURE)
		END_IF
		FIND IN SYS_CURRENCY_CONTROL_VT
		SALES_ORDER_HEADERS(SYS_CURRENCY_CODE)  = SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE)
		SALES_ORDER_HEADERS(SYS_CURRENCY_RATE)  = SYS_CURRENCY_CONTROL_VT(TRANSACTION_RATE)
		SALES_ORDER_HEADERS(SYS_CURRENCY_DATE)  = SYS_CURRENCY_CONTROL_VT(CURRENCY_DATE)
		SALES_ORDER_HEADERS(SYS_CURRENCY_FIXED_FLAG)	= SYS_CURRENCY_CONTROL_VT(FIXED_RATE_INDIC)
		SALES_ORDER_HEADERS(SYS_CURRENCY_RATIO_INDIC)	= SYS_CURRENCY_CONTROL_VT(CURR_RATIO_INDIC)
		SALES_ORDER_HEADERS(SYS_RATE_AUTHORITY)	= SYS_CURRENCY_CONTROL_VT(RATE_AUTHORITY)
		SALES_ORDER_HEADERS(SYS_RATE_TYPE)	= SYS_CURRENCY_CONTROL_VT(RATE_TYPE)
		SALES_ORDER_HEADERS(SYS_BASE_CURRENCY)	= SYS_CURRENCY_CONTROL_VT(BASE_CURRENCY_CODE)
		SALES_ORDER_HEADERS(SYS_CURRENCY_2_FIXED_FLAG)	= SYS_CURRENCY_CONTROL_VT(TRANS_TRIANGULATION)
		SALES_ORDER_HEADERS(SYS_CURRENCY_2_RATE)	= SYS_CURRENCY_CONTROL_VT(BASE_RATE)
		SALES_ORDER_HEADERS(SYS_CURRENCY_2_RATIO_INDIC)	= SYS_CURRENCY_CONTROL_VT(SYS_CURRENCY_2_RATIO_INDIC)

		#CURRENCY_CODE	= SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE)
		#RATE_AUTHORITY	= SYS_CURRENCY_CONTROL_VT(RATE_AUTHORITY)
		#RATE_TYPE	= SYS_CURRENCY_CONTROL_VT(RATE_TYPE)
		#CURRENCY_RATE	= SYS_CURRENCY_CONTROL_VT(TRANSACTION_RATE)
		#CURRENCY_RATIO_INDIC	= SYS_CURRENCY_CONTROL_VT(CURR_RATIO_INDIC)
		#CURRENCY_FIXED	= SYS_CURRENCY_CONTROL_VT(FIXED_RATE_INDIC)
		#CURRENCY_MASK	= SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_MASK)
		#CURRENCY_DESC	= SYS_CURRENCY_CONTROL_VT(CURRENCY_CODE_DESCRIPTION)
		#CURRENCY_DECIMAL	= SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_DECIMALS)
		#CURRENCY_DATE	= SYS_CURRENCY_CONTROL_VT(TRANSACTION_DATE)
		#BASE_2_CURRENCY_CODE	= SYS_CURRENCY_CONTROL_VT(BASE_2_CURRENCY_CODE)
	END_BLOCK

	BEGIN_BLOCK AUTO_NUMBER

		IF (#MANUAL <> #YES)

		FIND IN SOP_TRANSACTION_TYPES &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=TRANSACTION_TYPE=(PARAMETER("MODULE_SO")) &
			/LOCK=WRITE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00277
			EXIT(%FAILURE)
		END_IF

		#ORDER_NUMBER = SOP_TRANSACTION_TYPES(TRANSACTION_NUMBER)

		SALES_ORDER_HEADERS(ORDER_NUMBER)=#ORDER_NUMBER
		SOP_TRANSACTION_TYPES(TRANSACTION_NUMBER) = SOP_TRANSACTION_TYPES(TRANSACTION_NUMBER) + 1

		FIND IN AA:SALES_ORDER_HEADERS &
				/SECONDARY &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=ORDER_NUMBER=#ORDER_NUMBER

		IF (%STATUS = %SUCCESS)
			MESSAGE/IDENTIFIER/BELL P_02334
			EXIT(%FAILURE)
		END_IF

		! Need to check EDI reject tables if EDI active to ensure
		! a duplicate order number is not being generated.

		IF (#EDI_ACTIVE_FLAG = PARAMETER("LANGUAGE_YES"))

			FIND IN SOP_EDI_INBOUND_REJECT_HEADER &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=ORDER_NUMBER=#ORDER_NUMBER

			IF (%STATUS = %SUCCESS)
				MESSAGE/IDENTIFIER/BELL P_02334
				EXIT(%FAILURE)
			END_IF
		END_IF

		OUTPUT_BLOCK		 /ROW=18 /COL=62 &
			/PROMPT=(FIELD_PROMPT(ORDER_NUMBER)) &
			/SOURCE=(#ORDER_NUMBER) &
			/USING=SALES_ORDER_HEADERS(ORDER_NUMBER)
	END_BLOCK

	BEGIN_BLOCK MANUAL_ORDER_NUMBER
		ELSE

		SALES_ORDER_HEADERS(ORDER_NUMBER)=#ORDER_NUMBER

		END_IF
	END_BLOCK

	BEGIN_BLOCK SETUP_VARIABLES
		#LOCATION		= SALES_ORDER_HEADERS(LOCATION)
		#BROKER_CODE		  = SALES_ORDER_HEADERS(BROKER_CODE)
		#SALESPERSON_CODE	  = SALES_ORDER_HEADERS(SALESPERSON_CODE)
		#SALES_COMMISSION_CODE  = SALES_ORDER_HEADERS(SALES_COMMISSION_CODE)
		#SA_GROUP		= SALES_ORDER_HEADERS(SALES_ANALYSIS_GROUP)
		#SYS_SHIPPING_DATE	= SALES_ORDER_HEADERS(SYS_SHIPPING_DATE)
		#REQUIRED_DATE		= SALES_ORDER_HEADERS(REQUIRED_DATE)
		#ORDER_DATE		= SALES_ORDER_HEADERS(ORDER_DATE)
		#DEF_DELIVERY_ADDRESS	  = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
		#MP_SHIPPING_CUSTOMER	= SALES_ORDER_HEADERS(MP_SHIPPING_CUSTOMER)
		#COST_CENTER		= SALES_ORDER_HEADERS(COST_CENTER)
		#ORDER_TYPE		= SALES_ORDER_HEADERS(SALES_ORDER_TYPE)
		#PRINT_CONF_FLAG	= SALES_ORDER_HEADERS(SOP_PRINT_CONF_FLAG)
		IF (#DATE_CODE = #DUE_CODE)
			#EFFECTIVE_DATE = SALES_ORDER_HEADERS(SYS_SHIPPING_DATE)
		ELSE
			#EFFECTIVE_DATE = SALES_ORDER_HEADERS(ORDER_DATE)
		END_IF

		SALES_ORDER_HEADERS(USERNAME)	   = %USERNAME
		SALES_ORDER_HEADERS(SYSTEM_DATE)	= %NOW

		#PRICING_METHOD = SALES_ORDER_HEADERS(PRICING_METHOD)
		!
		PERFORM SET_PRICING_METHOD_PROMPTS

	END_BLOCK

	BEGIN_BLOCK LINES

		ADD TO SALES_ORDER_HEADERS
		IF (%STATUS = %FAILURE)  EXIT(%FAILURE)

		PERFORM COPY_TEMPLATE_LINES
		IF (%STATUS = %FAILURE)
			ROLLBACK
			EXIT (%FAILURE)
		END_IF

		PERFORM COPY_TEMPLATE_LOT_LIMITS

		PERFORM FINAL_HEADER_UPDATES
		COMMIT
	END_BLOCK

END_FORM


PROCEDURE_FORM COPY_TEMPLATE_LINES

	BEGIN_BLOCK EXTRACT_LINES
		START_STREAM SL &
			/SECONDARY &
			/LOCK=NONE &
			/TABLE=SALES_TEMPLATE_LINES &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=TEMPLATE_CODE=#TEMPLATE_CODE

		WHILE (1)

		FETCH SL /FAILURE=(CONTINUE OUT)

		CLEAR_BUFFER SALES_ORDER_LINES

		SALES_ORDER_LINES(COMPANY_CODE)			= SL:SALES_TEMPLATE_LINES(COMPANY_CODE)
		SALES_ORDER_LINES(DIVISION)			= SL:SALES_TEMPLATE_LINES(DIVISION)
		SALES_ORDER_LINES(ORDER_NUMBER)			= #ORDER_NUMBER
		SALES_ORDER_LINES(ORDER_LINE_NUMBER)		= SL:SALES_TEMPLATE_LINES(ORDER_LINE_NUMBER)
		SALES_ORDER_LINES(ORDER_LINE_TYPE)		= SL:SALES_TEMPLATE_LINES(ORDER_LINE_TYPE)
		SALES_ORDER_LINES(PRODUCT_GROUP)		= SL:SALES_TEMPLATE_LINES(PRODUCT_GROUP)
		SALES_ORDER_LINES(PART_CODE)			= SL:SALES_TEMPLATE_LINES(PART_CODE)
		SALES_ORDER_LINES(CUSTOMERS_PART_CODE)		= SL:SALES_TEMPLATE_LINES(CUSTOMERS_PART_CODE)
		SALES_ORDER_LINES(WAREHOUSE)			= SL:SALES_TEMPLATE_LINES(WAREHOUSE)
		SALES_ORDER_LINES(ORDER_LINE_REFERENCE)		= SL:SALES_TEMPLATE_LINES(ORDER_LINE_REFERENCE)
		SALES_ORDER_LINES(UNIT_COST)			= SL:SALES_TEMPLATE_LINES(UNIT_COST)
		SALES_ORDER_LINES(DETAIL_DESCRIPTION)		= SL:SALES_TEMPLATE_LINES(DETAIL_DESCRIPTION)
		SALES_ORDER_LINES(SALES_ORDER_DETAIL_DESCRIPTION)= SL:SALES_TEMPLATE_LINES(SALES_ORDER_DETAIL_DESCRIPTION)
		SALES_ORDER_LINES(MP_SHIPPING_CUSTOMER)	= #CUSTOMER_NUMBER
		SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE)	= SL:SALES_TEMPLATE_LINES(DELIVERY_ADDRESS_CODE)
		SALES_ORDER_LINES(FINAL_ADDRESS_CODE)	    = SL:SALES_TEMPLATE_LINES(FINAL_ADDRESS_CODE)

		IF (SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE) =  SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE))
			SALES_ORDER_LINES(DELIVERY_INSTRUCTIONS)	= SALES_ORDER_HEADERS(DELIVERY_INSTRUCTIONS)
			SALES_ORDER_LINES(SHIP_METHOD)			= SALES_ORDER_HEADERS(SHIP_METHOD)
		ELSE
			IF (SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE) <> "")
				FIND IN CUSTOMER_ADDRESSES &
					/LOCK=NONE &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=DIVISION = #DIVISION &
					/WITH=CUSTOMER_NUMBER=#CUSTOMER_NUMBER &
					/WITH=ADDRESS_CODE=SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE)

				IF (%STATUS = %FAILURE)
					MESSAGE/IDENTIFIER/BELL/WAIT P_22178
					EXIT (%FAILURE)
				END_IF

				IF (CUSTOMER_ADDRESSES(ACTIVATION_STATUS) <> (PARAMETER("STATUS_ACTIVE")))
					MESSAGE/IDENTIFIER/BELL/WAIT P_02199
					EXIT (%FAILURE)
				END_IF

				SALES_ORDER_LINES(DELIVERY_INSTRUCTIONS) = CUSTOMER_ADDRESSES(DELIVERY_INSTRUCTIONS)
				SALES_ORDER_LINES(SHIP_METHOD) = CUSTOMER_ADDRESSES(SHIP_METHOD)
			END_IF
		END_IF

		SALES_ORDER_LINES(UNIT_SALES)			= SL:SALES_TEMPLATE_LINES(UNIT_SALES)
		SALES_ORDER_LINES(UNIT_PRICE)			= SL:SALES_TEMPLATE_LINES(UNIT_PRICE)
		SALES_ORDER_LINES(SOP_NOMINATED_UNIT)		= SL:SALES_TEMPLATE_LINES(SOP_NOMINATED_UNIT)
		SALES_ORDER_LINES(SOP_NOMINATED_PRICE_UNIT)		= SL:SALES_TEMPLATE_LINES(SOP_NOMINATED_PRICE_UNIT)
		SALES_ORDER_LINES(IC_PACK_UNIT)			= SL:SALES_TEMPLATE_LINES(IC_PACK_UNIT)
		SALES_ORDER_LINES(LOCATION)			= #LOCATION
		SALES_ORDER_LINES(BROKER_CODE)			= #BROKER_CODE
		SALES_ORDER_LINES(SALESPERSON_CODE)		= #SALESPERSON_CODE
		SALES_ORDER_LINES(SALES_COMMISSION_CODE)	= #SALES_COMMISSION_CODE
		SALES_ORDER_LINES(SALES_ANALYSIS_GROUP)		= #SA_GROUP
		SALES_ORDER_LINES(CUSTOMER_NUMBER)		= #CUSTOMER_NUMBER
		SALES_ORDER_LINES(COST_CENTER)			= #COST_CENTER
		SALES_ORDER_LINES(SPECIFICATION_CODE)		= SL:SALES_TEMPLATE_LINES(SPECIFICATION_CODE)
		SALES_ORDER_LINES(ORDER_CYCLE)			= #ORDER_CYCLE
		SALES_ORDER_LINES(USERNAME)			= %USERNAME
		SALES_ORDER_LINES(SYSTEM_DATE)			= %NOW
		SALES_ORDER_LINES(SYS_PRINT_PART_DETAIL)	= SALES_TEMPLATE_HEADERS(SYS_PRINT_PART_DETAIL)
		SALES_ORDER_LINES(SYS_CURRENCY_CODE)		= #CURRENCY_CODE
		SALES_ORDER_LINES(SYS_CURRENCY_RATE)		= #CURRENCY_RATE
		SALES_ORDER_LINES(SYS_CURRENCY_DATE)		= #CURRENCY_DATE
		SALES_ORDER_LINES(SYS_RATE_TYPE)		= #RATE_TYPE
		SALES_ORDER_LINES(SYS_RATE_AUTHORITY)		= #RATE_AUTHORITY
		SALES_ORDER_LINES(SYS_CURRENCY_RATIO_INDIC)	= #CURRENCY_RATIO_INDIC
		SALES_ORDER_LINES(SYS_CURRENCY_FIXED_FLAG)	= #CURRENCY_FIXED
		SALES_ORDER_LINES(SYS_BASE_CURRENCY)		= #BASE_CURRENCY_CODE
		SALES_ORDER_LINES(SYS_EC_STATISTICS_APPLICABLE)	= SL:SALES_TEMPLATE_LINES(SYS_EC_STATISTICS_APPLICABLE)
		SALES_ORDER_LINES(SYS_EC_PROCESSED_INDICATOR)	= SL:SALES_TEMPLATE_LINES(SYS_EC_PROCESSED_INDICATOR)
		SALES_ORDER_LINES(SYS_EC_TRANSACTION_TYPE)	= SL:SALES_TEMPLATE_LINES(SYS_EC_TRANSACTION_TYPE)
		SALES_ORDER_LINES(SYS_TARIFF_CODE)		= SL:SALES_TEMPLATE_LINES(SYS_TARIFF_CODE)
		SALES_ORDER_LINES(SYS_COUNTRY_OF_ORIGIN)	= SL:SALES_TEMPLATE_LINES(SYS_COUNTRY_OF_ORIGIN)
		SALES_ORDER_LINES(SYS_EC_SUPP_UNIT_QTY)		= SL:SALES_TEMPLATE_LINES(SYS_EC_SUPP_UNIT_QTY)
		SALES_ORDER_LINES(SYS_EC_WEIGHT)		= SL:SALES_TEMPLATE_LINES(SYS_EC_WEIGHT)
		SALES_ORDER_LINES(SYS_EC_MODE_OF_TRANSPORT)	= SL:SALES_TEMPLATE_LINES(SYS_EC_MODE_OF_TRANSPORT)
		SALES_ORDER_LINES(SYS_EC_DELIVERY_TERMS)	= SL:SALES_TEMPLATE_LINES(SYS_EC_DELIVERY_TERMS)
		SALES_ORDER_LINES(SYS_EC_STATISTICAL_VALUE)	= SL:SALES_TEMPLATE_LINES(SYS_EC_STATISTICAL_VALUE)
		SALES_ORDER_LINES(SYS_EC_ANALYSIS_1)		= SL:SALES_TEMPLATE_LINES(SYS_EC_ANALYSIS_1)
		SALES_ORDER_LINES(SYS_EC_ANALYSIS_2)		= SL:SALES_TEMPLATE_LINES(SYS_EC_ANALYSIS_2)
		SALES_ORDER_LINES(SYS_EC_ANALYSIS_3)		= SL:SALES_TEMPLATE_LINES(SYS_EC_ANALYSIS_3)
		SALES_ORDER_LINES(SYS_EC_ANALYSIS_4)		= SL:SALES_TEMPLATE_LINES(SYS_EC_ANALYSIS_4)
		SALES_ORDER_LINES(SYS_EC_ANALYSIS_5)		= SL:SALES_TEMPLATE_LINES(SYS_EC_ANALYSIS_5)
		SALES_ORDER_LINES(SOP_SHIPPING_TERMS_CODE)  = #DEF_SHIPPING_TERMS_CODE
	END_BLOCK

	BEGIN_BLOCK DATE_CALCULATIONS
		#LINE_REQUESTED_DATE = #SYS_REQUESTED_DATE
		#WAREHOUSE = SALES_ORDER_LINES(WAREHOUSE)
		PERFORM VALIDATE_REQUESTED_DATE
		#TEMPLATE_SHIPPING_DATE = #SYS_SHIPPING_DATE

		SALES_ORDER_LINES(SYS_REQUESTED_DATE) = #SYS_REQUESTED_DATE
	END_BLOCK

	BEGIN_BLOCK SETUP_FOR_CALC_LINE_VALUES
		#LINE_DISCOUNT  = 0
		#LINE_VALUE		= 0
		#SALES_ORDER_QTY= SL:SALES_TEMPLATE_LINES(ORDER_QUANTITY)
		#LINE_TAX	  = 0
		#LINE_TOTAL	= 0
		#WEIGHT	 	= 0
		#VOLUME	 	= 0
		#SALES_UOM	  = SALES_ORDER_LINES(UNIT_SALES)
		#NOMI_UOM	  = SALES_ORDER_LINES(SOP_NOMINATED_UNIT)
		#PACK_UOM	  = SALES_ORDER_LINES(IC_PACK_UNIT)
		#PRICE_UOM	  = SALES_ORDER_LINES(UNIT_PRICE)
		#NOMI_PRICE_UOM = SALES_ORDER_LINES(SOP_NOMINATED_PRICE_UNIT)
	END_BLOCK

	BEGIN_BLOCK BRANCH_FOR_NON_STOCK
		IF (SALES_ORDER_LINES(ORDER_LINE_TYPE) = #SO_LINE_TYPE_NONSTOCK)
			PERFORM SORT_OUT_NON_STOCK
			IF (%STATUS = %FAILURE) CONTINUE

			GOTO FINAL_LINE_UPDATE
		ELSE
			#PART_CODE = SALES_ORDER_LINES(PART_CODE)
			#WAREHOUSE = SALES_ORDER_LINES(WAREHOUSE)
		END_IF
	END_BLOCK

	BEGIN_BLOCK FIND_PART
		FIND IN PRODUCT_MASTER &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PART_CODE=#PART_CODE &
			/LOCK=NONE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_42014,#PART_CODE
			CONTINUE
		END_IF

		#WAREHOUSED_FLAG 	= PRODUCT_MASTER(WAREHOUSED_FLAG)
		#IC_UOM_CONTROL 	= PRODUCT_MASTER(IC_PRODUCT_UOM_CONTROL)
		#IC_PACKAGED_PRODUCT	= PRODUCT_MASTER(IC_PACKAGED_PRODUCT)

		#CUSTOMER_PART = #NO
		FIND IN PART_MASTER_BY_CUSTOMER &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PART_CODE=#PART_CODE &
			/WITH=CUSTOMER_NUMBER=#CUSTOMER_NUMBER &
			/WITH=DIVISION=#DIVISION &
			/WITH= SYS_CURRENCY_CODE = #CURRENCY_CODE

		IF (%STATUS=%SUCCESS)
			#CUSTOMER_PART = #YES
			SALES_ORDER_LINES(CUSTOMERS_PART_CODE) = PART_MASTER_BY_CUSTOMER(CUSTOMERS_PART_CODE)
		ELSE
			SALES_ORDER_LINES(CUSTOMERS_PART_CODE) = ""
		END_IF

		IF (#WAREHOUSED_FLAG = #YES)
			FIND IN WAREHOUSE_CONTROLS &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=WAREHOUSE=#WAREHOUSE &
				/LOCK=NONE

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_00366,#WAREHOUSE
				CONTINUE
			END_IF

			FIND IN PRODUCT_WAREHOUSE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=WAREHOUSE=#WAREHOUSE &
				/WITH=PART_CODE=#PART_CODE &
				/LOCK=NONE

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_52022,#PART_CODE,#WAREHOUSE
				CONTINUE
			END_IF

			#BATCHES_REQD = #NO
			#PART_TAXABLE = PRODUCT_WAREHOUSE(TAXABLE)
		ELSE
			#PART_TAXABLE = PRODUCT_MASTER(TAXABLE)
		END_IF

		IF (PRODUCT_MASTER(BATCHES_AT_SALES_ORDERS)=#YES AND PRODUCT_MASTER(BATCHES_EXIST)=#YES)
			#BATCHES_REQD = #YES
		END_IF

		IF (#PHYSICAL_IN_USE = #YES OR #LINE_EC_REPORT_TYPE <> "")
			SALES_ORDER_LINES(WEIGHT_UOM)   = PRODUCT_MASTER(WEIGHT_UOM)
			SALES_ORDER_LINES(VOLUME_UOM)   = PRODUCT_MASTER(CUBIC_SIZE_UOM)
			SALES_ORDER_LINES(WEIGHT)		= SL:SALES_TEMPLATE_LINES(WEIGHT)
			SALES_ORDER_LINES(VOLUME)		= SL:SALES_TEMPLATE_LINES(VOLUME)
		END_IF
	END_BLOCK

	BEGIN_BLOCK CONVERT_UNITS
		IF (#CUSTOMER_PART = #YES)
			SALES_ORDER_LINES(SOP_NOMINATED_UNIT) = PART_MASTER_BY_CUSTOMER(SOP_NOMINATED_UNIT)
			SALES_ORDER_LINES(SOP_NOMINATED_PRICE_UNIT) = &
						PART_MASTER_BY_CUSTOMER(SOP_NOMINATED_PRICE_UNIT)
		END_IF
	END_BLOCK

	BEGIN_BLOCK FIND_CUSTOMER_ADDRESS
		FIND IN CUSTOMER_ADDRESSES &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/WITH=ADDRESS_CODE=SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE) &
			/LOCK=NONE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_22086
			CONTINUE
		ELSE
			IF (CUSTOMER_ADDRESSES(PRICE_CODE) <> "")
				#ADDR_PRICE_CODE = CUSTOMER_ADDRESSES(PRICE_CODE)
				#PRICE_CODE	     = #ADDR_PRICE_CODE
			END_IF

			PERFORM GET_ADDR_TAX_VARS

			#TAXABLE = #DEF_TAXABLE
			#CUSTOMER_TAX_CODE = #DEF_CUSTOMER_TAX_CODE

			#LINE_DIST_BOD_CODE = CUSTOMER_ADDRESSES(SYS_BOD_CODE)
			#DEF_ORDER_COUNTRY = CUSTOMER_ADDRESSES(SYS_COUNTRY)
			#DEF_ORDER_DIST_ZONE = CUSTOMER_ADDRESSES(SYS_DISTRIBUTION_ZONE)

			PERFORM GET_DIST_ZONE_DETAILS (#DEF_ORDER_COUNTRY, #DEF_ORDER_DIST_ZONE)
			IF (#LINE_DIST_BOD_CODE = "")
				IF (#ADDR_DIST_BOD_CODE <> "")
					#LINE_DIST_BOD_CODE = #ADDR_DIST_BOD_CODE
				ELSE
					#LINE_DIST_BOD_CODE = #DEF_BOD_CODE
				END_IF
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK ADD
		ADD TO SALES_ORDER_LINES

		! create rows in SALES_ORDER_LINE_QTYS
		PERFORM ADD_SO_LINE_ORDER_QTY( #SALES_UOM, #SALES_ORDER_QTY, #YES, #R1)

		IF (SALES_ORDER_LINES(ORDER_LINE_TYPE)=#SO_LINE_TYPE_STOCK AND &
			#BATCHES_REQD = #YES AND #WAREHOUSED_FLAG=#YES)

			PERFORM BATCH_DETAIL_FROM_TEMPLATES
			IF (%STATUS = %FAILURE)
				EXIT (%STATUS)
			END_IF
		ELSE
			#ORDER_FLAG = (PARAMETER("HORIZON_CURRENT"))

			IF (#SYS_SHIPPING_DATE <> "")
				#ORDER_DAYS = DAYS(#SYS_SHIPPING_DATE) - DAYS(%NOW)

				IF (#ORDER_DAYS > WAREHOUSE_CONTROLS(DAYS_FORWARD_COMMITMENT))
					#ORDER_FLAG = (PARAMETER("HORIZON_FORWARD"))
				END_IF

				IF (#ORDER_DAYS < -(WAREHOUSE_CONTROLS(DAYS_BACKWARD_COMMITMENT)))
					#ORDER_FLAG = (PARAMETER("HORIZON_BACKWARD"))
				END_IF
			END_IF

			#LEAD_TIME = ""

			! BOD code for the line:
			! Default value is directly from customer addresses
			! record for delivery address on line.
			! If that value is blank, take the value for the
			! distribution zone of the line's delivery address.
			! If that value is blank, take the value for the
			! order header.

			FIND IN SYS_BILL_OF_DISTRIBUTION &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=SYS_BOD_CODE=#LINE_DIST_BOD_CODE &
				/WITH=WAREHOUSE=#WAREHOUSE

			IF (%STATUS=%SUCCESS)
				#LEAD_TIME = SYS_BILL_OF_DISTRIBUTION(SYS_LEAD_TIME)
			END_IF

			#SYS_DELIVERY_DATE = DATE(DAYS(#SYS_SHIPPING_DATE) + #LEAD_TIME)

			CLEAR_BUFFER SALES_ORDER_LINE_DETAILS
			SALES_ORDER_LINE_DETAILS(COMPANY_CODE)	  	= #COMPANY_CODE
			SALES_ORDER_LINE_DETAILS(DIVISION)			   	= #DIVISION
			SALES_ORDER_LINE_DETAILS(ORDER_NUMBER)	  	= #ORDER_NUMBER
			SALES_ORDER_LINE_DETAILS(ORDER_LINE_NUMBER)		 	= SALES_ORDER_LINES(ORDER_LINE_NUMBER)
			SALES_ORDER_LINE_DETAILS(SEQUENCE)			   	= "1"
			SALES_ORDER_LINE_DETAILS(ORIGINAL_SEQUENCE) 	= "1"
			SALES_ORDER_LINE_DETAILS(ORDER_HORIZON)	 	= #ORDER_FLAG
			SALES_ORDER_LINE_DETAILS(ORDER_LINE_REF)	= SALES_ORDER_LINES(ORDER_LINE_REFERENCE)
			SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)	= #SYS_SHIPPING_DATE
			SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE)	= #SYS_DELIVERY_DATE
			SALES_ORDER_LINE_DETAILS(REQUIRED_DATE)	 	= #SYS_SHIPPING_DATE
			SALES_ORDER_LINE_DETAILS(TEMP_REQUIRED_DATE)	 	= #REQUIRED_DATE
			SALES_ORDER_LINE_DETAILS(ORDER_DATE)	    	= #ORDER_DATE
			SALES_ORDER_LINE_DETAILS(WAREHOUSE)		= #WAREHOUSE

			#NEW_QTY_RESERVED = "0"
			#OLD_QTY_RESERVED = 0
			SALES_ORDER_LINE_DETAILS(ORDER_LINE_STATUS)		  = ""

			ADD TO SALES_ORDER_LINE_DETAILS

			PERFORM ADD_SO_LINE_DETAIL_ORDER_QTY ( "", #WAREHOUSE, #SALES_UOM, #SALES_ORDER_QTY, #YES, #P1)

			#NOMI_ORDER_QTY = 0.0
			PERFORM CONVERT_QTYS((SALES_ORDER_LINES(WAREHOUSE)), &
				"", &
				(SALES_ORDER_LINES(PART_CODE)), &
				#SALES_UOM, &
				#SALES_ORDER_QTY, &
				#NOMI_UOM,		   &
				#NOMI_ORDER_QTY, &
				#R1)
			IF (#NOMI_UOM <> #SALES_UOM)
				PERFORM ADD_SO_LINE_ORDER_QTY( #NOMI_UOM, #NOMI_ORDER_QTY, #YES, #P1)
				PERFORM ADD_SO_LINE_DETAIL_ORDER_QTY ( "", #WAREHOUSE, #NOMI_UOM, #NOMI_ORDER_QTY, #YES, #P1)
			END_IF

			IF (PRODUCT_MASTER(IC_PRODUCT_UOM_CONTROL) = (PARAMETER("IC_CATCHWEIGHT_UOM_CONTROL")) OR       &
				PRODUCT_MASTER(IC_PRODUCT_UOM_CONTROL) = (PARAMETER("IC_POTENT_UOM_CONTROL")))
				! calculate quantity for the non-nominated UOM of the product
				PERFORM GET_NON_NOMINATED_UOM ( SALES_ORDER_LINES(PART_CODE),   &
							#NOMI_UOM, &
							#NON_NOMI_UOM)
				IF (#NON_NOMI_UOM <> "" AND #NON_NOMI_UOM <> #SALES_UOM)
					#NON_NOMI_ORDER_QTY = 0.0
					PERFORM CONVERT_QTYS((SALES_ORDER_LINES(WAREHOUSE)), &
						"", &
						(SALES_ORDER_LINES(PART_CODE)), &
						#NOMI_UOM, &
						#NOMI_ORDER_QTY, &
						#NON_NOMI_UOM, &
						#NON_NOMI_ORDER_QTY, &
						#R1)
					PERFORM ADD_SO_LINE_DETAIL_ORDER_QTY ( "", #WAREHOUSE, &
										#NON_NOMI_UOM, #NON_NOMI_ORDER_QTY, #YES, #P1)
					PERFORM ADD_SO_LINE_ORDER_QTY( #NON_NOMI_UOM, #NON_NOMI_ORDER_QTY, "", #P1)
				END_IF
			END_IF
			IF ((#IC_PACKAGED_PRODUCT = #YES) AND &
			    (#PACK_UOM <> #SALES_UOM) AND &
			    (#PACK_UOM <> #NOMI_UOM) AND &
			    (#PACK_UOM <> #NON_NOMI_UOM))
				IF (PRODUCT_MASTER(IC_UNIT_CAPACITY) = #NOMI_UOM)
					#CAPACITY_ORDER_QUANTITY	= #NOMI_ORDER_QTY
				ELSE
					#CAPACITY_ORDER_QUANTITY	= #NON_NOMI_ORDER_QTY
				END_IF
				! convert from capacity to package
				#PACK_ORDER_QTY = 0.0
				PERFORM CONVERT_QTYS((SALES_ORDER_LINES(WAREHOUSE)), &
					"", &
					(SALES_ORDER_LINES(PART_CODE)), &
					(PRODUCT_MASTER(IC_UNIT_CAPACITY)), &
					#CAPACITY_ORDER_QUANTITY, &
					#PACK_UOM, &
					#PACK_ORDER_QTY, &
					#R1)
				PERFORM ADD_SO_LINE_DETAIL_ORDER_QTY ( "", #WAREHOUSE, #PACK_UOM, #PACK_ORDER_QTY, #YES, #P1)
				PERFORM ADD_SO_LINE_ORDER_QTY( #PACK_UOM, #PACK_ORDER_QTY, "", #P1)
			END_IF

			#PRICE_UOM = SALES_ORDER_LINES(UNIT_PRICE)
			#PRICE_ORDER_QTY = 0.0

			IF (#PRICE_UOM = #SALES_UOM)
				#PRICE_ORDER_QTY = #SALES_ORDER_QTY
			ELSE_IF (#PRICE_UOM = #NOMI_UOM)
				#PRICE_ORDER_QTY = #NOMI_ORDER_QTY
			ELSE_IF (#PRICE_UOM = #NON_NOMI_UOM)
				#PRICE_ORDER_QTY = #NON_NOMI_ORDER_QTY
			ELSE_IF (#PRICE_UOM =  #PACK_UOM)
				#PRICE_ORDER_QTY = #PACK_ORDER_QTY
			ELSE
				PERFORM "GEMLB:SOP_L_SALES_PRICE_QTY" &
					(#COMPANY_CODE, &
					(SALES_ORDER_LINES(PART_CODE)), &
					(SALES_ORDER_LINES(WAREHOUSE)), &
					"", &
					#SALES_UOM, &
					#SALES_ORDER_QTY, &
					#NOMI_UOM, &
					#NOMI_ORDER_QTY, &
					#NON_NOMI_UOM, &
					#NON_NOMI_ORDER_QTY, &
					#PRICE_UOM, &
					#NOMI_PRICE_UOM, &
					"", &
					"", &
					#PRICE_ORDER_QTY, &
					#PQ_STATUS, &
					#PQ_MESSAGE)
				IF (#PQ_STATUS = #NO)
					#PRICE_ORDER_QTY = 0
					ERROR/BELL/TEXT_ONLY/WAIT #PQ_MESSAGE
				ELSE
					PERFORM ADD_SO_LINE_DETAIL_ORDER_QTY ( "", #WAREHOUSE, &
										#PRICE_UOM, #PRICE_ORDER_QTY, #YES, #P1)
					PERFORM ADD_SO_LINE_ORDER_QTY( #PRICE_UOM, #PRICE_ORDER_QTY, "", #P1)
				END_IF
			END_IF

			! make commitments for the add
			PERFORM 'GEMSOP:SOP_L_DO_IC_COMMITMENTS' (#WAREHOUSE, &
							#SYS_SHIPPING_DATE, "", #IC_MOVEMENT_CODE, "0", #NOMI_ORDER_QTY, #R1)
			IF (%STATUS <> %SUCCESS)
				ERROR /WAIT #R1
			END_IF

			IF (SALES_ORDER_LINES(ORDER_LINE_TYPE) = #SO_LINE_TYPE_STOCK AND &
				#WAREHOUSED_FLAG = #YES)
				#AUTO_RESERVE = CUSTOMERS(AUTO_RESERVE)
				IF (#AUTO_RESERVE = #YES)
					PERFORM RESERVATION_CHECK (#WAREHOUSE)
						IF ((%STATUS <> %SUCCESS) &
							AND (%STATUS <> %BACK))
							EXIT (%STATUS)
						END_IF
					#DELTA_QTY_RESERVED     = #NEW_QTY_RESERVED - #OLD_QTY_RESERVED
					IF (#DELTA_QTY_RESERVED <> 0 AND #NEW_QTY_RESERVED <> 0)
						PERFORM ZERO_CURRENT_LINE_DETAIL_QTYS("QTY_RESERVED")
						PERFORM UPDATE_A_SO_QTY ("QTY_RESERVED", #NEW_QTY_RESERVED, #NOMI_NEW_QTY_RESERVED, &
						#NON_NOMI_NEW_QTY_RESERVED, #PACK_NEW_QTY_RESERVED, #PRICE_NEW_QTY_RESERVED)
					END_IF
				END_IF
			END_IF
		END_IF

	END_BLOCK

	BEGIN_BLOCK PRICING_ROUTINE

		#TRANSACTION_TAXABLE = #TAXABLE
		IF ( #PART_TAXABLE = #NO ) #TRANSACTION_TAXABLE = #NO

		#OLD_CONTRACT_NUMBER		 = ""
		#CHECK_ORDERED_TD	  = #YES

		#PRICE_UOM = SALES_ORDER_LINES(UNIT_PRICE)
		PERFORM FIND_CURRENT_SO_LINE_QTY( #PRICE_UOM, #R1)
		#PRICE_ORDER_QTY=SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)

		PERFORM "GEMLB:SOP_L_SALES_PRICING" &
			(#DIVISION, &
			#CUSTOMER_NUMBER, &
			#PRICE_CODE, &
			(SALES_ORDER_LINES(PART_CODE)), &
			(SALES_ORDER_LINES(WAREHOUSE)), &
			#PRICE_ORDER_QTY, &
			#ORDER_DATE, &
			#CONTRACT_PRICES, &
			#PROMOTION_PRICES, &
			#PROM_OVER_CONTRACTS, &
			#CURRENCY_CODE, &
			#CHECK_ORDERED_TD, &
			#COMPANY_CODE, &
			#PRICE_ORDER_QTY, &
			#OLD_CONTRACT_NUMBER, &
			#PRICE_UOM, &
 			#PRICING_METHOD, &
 			#TRANSACTION_TAXABLE, &
			"", &
			"", &
			"", &
		    #R1, &
		    #R2, &
		    #R3, &
		    #R4, &
			#R5, &
			#R6 )

		#PRICE = #R1
		#PRICE_STATUS = #R2
		#MESSAGE = #R3
		#CONTRACT_NUMBER = #R4
		#PRICING_METHOD_USED = #R6

		IF ( #PRICE_STATUS = PARAMETER("STATUS_FAIL")  &
		OR ( #TRANSACTION_TAXABLE = #NO AND #PRICING_METHOD_USED = #TAX_INCLUSIVE AND #PRICE<>0 ) )

			#PRICE_INC_TAX = #PRICE

			PERFORM "GEMLB:SOP_L_GET_DEFAULT_SALES_PRICE" ( &
				#COMPANY_CODE, &
				#WAREHOUSE, &
				#PART_CODE, &
				#PRICING_METHOD, &
				(#TRANSACTION_TAXABLE), &
				#RETURN_STATUS, &
				#RETURN_MESSAGE, &
				#DEFAULT_PRICE, &
				#DEFAULT_SOURCE_USED )

			IF ( #TRANSACTION_TAXABLE = #NO )
				IF ( #PRICING_METHOD = #TAX_INCLUSIVE AND  #DEFAULT_PRICE = 0 )
					#PRICE = #PRICE_INC_TAX
				ELSE
					IF (PRODUCT_MASTER(UNIT_PRICE) = #PRICE_UOM)
						#PRICE = #DEFAULT_PRICE
						BEGIN_CASE (#DEFAULT_SOURCE_USED)
						CASE "WT", "MT"
							#PRICING_METHOD_USED = #TAX_INCLUSIVE
						CASE "WN", "MN"
							#PRICING_METHOD_USED = #TAX_EXCLUSIVE
						END_CASE
					ELSE
						#MESSAGE = MESSAGE("P_91239", #WAREHOUSE, #PART_CODE, #PRICE_UOM)
						ERROR/WAIT (#MESSAGE)
					END_IF
					#PRICE_STATUS = PARAMETER("SOP_PRICE_STATUS_PRICE")
				END_IF
			ELSE
				#PRICE = #DEFAULT_PRICE
				#PRICE_STATUS = PARAMETER("SOP_PRICE_STATUS_PRICE")
			END_IF

			IF (#WAREHOUSED_FLAG = #YES)
				#PRICE_CURRENCY_CODE    = WAREHOUSE_CONTROLS(SYS_CURRENCY_CODE)
			ELSE
				#PRICE_CURRENCY_CODE    = PRODUCT_MASTER(SYS_CURRENCY_CODE)
			END_IF

			IF (#PRICE_CURRENCY_CODE <> #CURRENCY_CODE AND #CURRENCY_METHOD  <> "0")

				IF (#PRICE_CURRENCY_CODE = #BASE_CURRENCY_CODE)

					DELETE ALL FROM SYS_CURRENCY_COST_VT

					SYS_CURRENCY_COST_VT(COST_BASE_VALUE)	= #PRICE
					SYS_CURRENCY_COST_VT(COST_DECIMALS)	= PARAMETER("SYS_COST_ROUND")

					ADD TO SYS_CURRENCY_COST_VT

					PERFORM "GEMLB:LB_S_L_COST_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
					IF (#R_STATUS <> #YES)
						ERROR/WAIT #R_MESSAGE
						EXIT (%FAILURE)
					END_IF

					FIND IN SYS_CURRENCY_COST_VT

					#PRICE	= SYS_CURRENCY_COST_VT(COST_TRANS_VALUE)
				END_IF

				IF (#PRICE_CURRENCY_CODE = #BASE_2_CURRENCY_CODE)

					DELETE ALL FROM SYS_CURRENCY_COST_VT

					SYS_CURRENCY_COST_VT(COST_BASE_2_VALUE)	= #PRICE
					SYS_CURRENCY_COST_VT(COST_DECIMALS)	= PARAMETER("SYS_COST_ROUND")

					ADD TO SYS_CURRENCY_COST_VT

					PERFORM "GEMLB:LB_S_L_COST_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
					IF (#R_STATUS <> #YES)
						ERROR/WAIT #R_MESSAGE
						EXIT (%FAILURE)
					END_IF

					FIND IN SYS_CURRENCY_COST_VT

					#PRICE	= SYS_CURRENCY_COST_VT(COST_TRANS_VALUE)

				END_IF

				IF ((#PRICE_CURRENCY_CODE <> #BASE_CURRENCY_CODE) &
				AND (#PRICE_CURRENCY_CODE <> #BASE_2_CURRENCY_CODE))

					PERFORM SAVE_SYS_CURRENCY_CONTROL_VT
					DELETE ALL FROM SYS_CURRENCY_CONTROL_VT
					CLEAR_BUFFER SYS_CURRENCY_CONTROL_VT

					SYS_CURRENCY_CONTROL_VT(COMPANY_CODE)	= #COMPANY_CODE
					SYS_CURRENCY_CONTROL_VT(DIVISION)	= #DIVISION
					SYS_CURRENCY_CONTROL_VT(SOURCE_MODULE)	= PARAMETER("MODULE_SO")
					SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE)	= #CURRENCY_CODE
					SYS_CURRENCY_CONTROL_VT(TRANS_2_CURRENCY_CODE)	= #PRICE_CURRENCY_CODE
					SYS_CURRENCY_CONTROL_VT(RATE_OVERRIDE)	= #NO
					SYS_CURRENCY_CONTROL_VT(CODE_RATE_INPUT_FLAG)	= "C"
					SYS_CURRENCY_CONTROL_VT(CURRENCY_DATE)	= #CURRENCY_DATE

					ADD TO SYS_CURRENCY_CONTROL_VT

					PERFORM "GEMLB:LB_S_L_CURRENCY_RATES" (#R_STATUS, #R_MESSAGE)
					IF (#R_STATUS <> #YES)
						ERROR/WAIT #R_MESSAGE
						EXIT(%FAILURE)
					END_IF

					FIND IN SYS_CURRENCY_CONTROL_VT

					DELETE ALL FROM SYS_CURRENCY_COST_VT

					SYS_CURRENCY_COST_VT(COST_TRANS_2_VALUE)	= #PRICE
					SYS_CURRENCY_COST_VT(COST_DECIMALS)		= PARAMETER("SYS_COST_ROUND")

					ADD TO SYS_CURRENCY_COST_VT

					PERFORM "GEMLB:LB_S_L_COST_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
					IF (#R_STATUS <> #YES)
						ERROR/WAIT #R_MESSAGE
						EXIT (%FAILURE)
					END_IF

					FIND IN SYS_CURRENCY_COST_VT

					#PRICE	= SYS_CURRENCY_COST_VT(COST_TRANS_VALUE)

					PERFORM RESTOR_SYS_CURRENCY_CONTROL_VT
				END_IF
			END_IF

			! Get the price (see library routine for details)
		END_IF

		IF ( #TRANSACTION_TAXABLE = #NO AND #PRICING_METHOD_USED = #TAX_INCLUSIVE )
			#MESSAGE = ( COMPRESS(#MESSAGE) &" - Tax Inclusive" )
		END_IF

		IF ( #PRICING_METHOD = #TAX_INCLUSIVE )
			SALES_ORDER_LINES(SALES_PRICE_INC_TAX) = #PRICE
		ELSE
			SALES_ORDER_LINES(SALES_PRICE) = #PRICE
		END_IF
		SALES_ORDER_LINES(CONTRACT_NUMBER) = #CONTRACT_NUMBER

	END_BLOCK

	BEGIN_BLOCK UPDATE_CONTRACT_QTY
		IF (SALES_ORDER_LINES(CONTRACT_NUMBER) <> "")
			IF (SALES_ORDER_LINES(UNIT_PRICE) <> SALES_ORDER_LINES(UNIT_SALES))
				PERFORM FIND_CURRENT_SO_LINE_QTY (SALES_ORDER_LINES(UNIT_PRICE), #R1)
				#NEW_PRICE_ORDER_QTY = SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)
			ELSE
				#NEW_PRICE_ORDER_QTY = #PRICE_ORDER_QTY
			END_IF

			PERFORM "GEMLB:SOP_L_CONTRACT_PRICE_QTY_UPDATE" (&
				#COMPANY_CODE, &
				#DIVISION, &
				#CUSTOMER_NUMBER, &
				(SALES_ORDER_LINES(PART_CODE)), &
				(SALES_ORDER_LINES(WAREHOUSE)), &
				#NEW_PRICE_ORDER_QTY, &
				#ORDER_DATE, &
				#CURRENCY_CODE, &
				(SALES_ORDER_LINES(CONTRACT_NUMBER)), &
				#ORIG_PRICE_ORDER_QTY, &
				#OLD_CONTRACT_NUMBER, &
				#OLD_PART_CODE, &
				#OLD_WAREHOUSE, &
				(SALES_ORDER_LINES(UNIT_PRICE)), &
				"", &
				"")


			IF (%STATUS = %FAILURE) EXIT(%FAILURE)
		END_IF
	END_BLOCK

	BEGIN_BLOCK RECALC_LINE_VALUE
		IF ( #PRICING_METHOD = #TAX_INCLUSIVE )

			IF (#WAREHOUSED_FLAG = #YES)
				#PRODUCT_TAX_CODE=PRODUCT_WAREHOUSE(PRODUCT_TAX_CODE)
			ELSE
				#PRODUCT_TAX_CODE=PRODUCT_MASTER(PRODUCT_TAX_CODE)
			END_IF

			IF (#PRODUCT_TAX_CODE = "") #PRODUCT_TAX_CODE = #DEF_PART_TAX_CODE

			IF (#CUSTOMER_TAX_CODE = "") #CUSTOMER_TAX_CODE = #DEF_CUST_TAX_CODE

			DELETE ALL FROM TAX_TRANSACTIONS_VT

			PERFORM SETUP_TAX_CONTROL_VT

			IF ( #TAXABLE = #NO OR #PART_TAXABLE = #NO )
				LB_TAX_CONTROL_VT(PRICING_METHOD) = #TAX_EXCLUSIVE
			END_IF

			LB_TAX_CONTROL_VT(PART_CODE) = SALES_ORDER_LINES(PART_CODE)
			LB_TAX_CONTROL_VT(WAREHOUSE) = SALES_ORDER_LINES(WAREHOUSE)
			LB_TAX_CONTROL_VT(CUSTOMER_NUMBER) = SALES_ORDER_HEADERS(CUSTOMER_NUMBER)
			LB_TAX_CONTROL_VT(INVOICE_ADDRESS_CODE) = SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)
			LB_TAX_CONTROL_VT(DELIVERY_ADDRESS_CODE) = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
			LB_TAX_CONTROL_VT(TRANSACTION_NUMBER) = SALES_ORDER_HEADERS(ORDER_NUMBER)
			LB_TAX_CONTROL_VT(TRANSACTION_TYPE) = PARAMETER("TTYPE_SO")
			LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE) = #PRODUCT_TAX_CODE
			LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE) = #CUSTOMER_TAX_CODE
			LB_TAX_CONTROL_VT(ORDER_LINE_TYPE) = ""
			LB_TAX_CONTROL_VT(FORM_TITLE) = ""
			LB_TAX_CONTROL_VT(PRICE_ORDER_QTY) = #PRICE_ORDER_QTY
			LB_TAX_CONTROL_VT(SALES_PRICE) = #PRICE
			LB_TAX_CONTROL_VT(LINE_DISCOUNT) = 0

	        PERFORM "GEMLB:LB_L_TAX_CONTROL" ( "T", #ERROR_OCCURRED, #ERROR_MESSAGE )

			IF ( #ERROR_OCCURRED ) ERROR/TEXT_ONLY #ERROR_MESSAGE

			FIND IN LB_TAX_CONTROL_VT

			#NET_PRICE = LB_TAX_CONTROL_VT(NET_PRICE)
			#LINE_VALUE = LB_TAX_CONTROL_VT(NET_LINE_VALUE)

			SALES_ORDER_LINES(SALES_PRICE) = #NET_PRICE

		ELSE
			#LINE_VALUE = ROUND( #PRICE_ORDER_QTY * #PRICE, #CURRENCY_DECIMAL )
		END_IF

	END_BLOCK

!*** pricing enhancements
	BEGIN_BLOCK DISCOUNTING_ROUTINE
		IF (#LD_IN_USE = #YES)

			IF (#LD_BREAK =PARAMETER("DISCOUNT_BREAK_QTY"))

				! SALES_DISCOUNT_LINES table stores allways the currency,
				! wheather applicable or not. So when QTY based the base
				! currency is used.
				#PAR_CURRENCY_CODE =#BASE_CURRENCY_CODE
			ELSE
				#PAR_CURRENCY_CODE =#CURRENCY_CODE
			END_IF

			PERFORM CONVERT_QTYS ((SALES_ORDER_LINES(WAREHOUSE)), &
				"", &
				(SALES_ORDER_LINES(PART_CODE)), &
				#SALES_UOM, &
				#PRICE_ORDER_QTY, &
				(PRODUCT_MASTER(UNIT_SALES)), &
				#DISCOUNT_QTY, &
				#R1)

			IF (%STATUS <> %SUCCESS)
				#DISCOUNT_QTY = 0
			END_IF

			PERFORM "GEMLB:SOP_L_LINE_DISCOUNTS" &
				(#COMPANY_CODE, &
				#DIVISION, &
				#LD_INV, &
				#LD_CUS, &
				#CUSTOMER_NUMBER, &
				#LD_CUST_GROUP, &
				(SALES_ORDER_LINES(PART_CODE)), &
				(SALES_ORDER_LINES(WAREHOUSE)), &
				(PRODUCT_MASTER(PRODUCT_DISCOUNT_GROUP)), &
				#LD_BREAK, &
				#LD_CALC, &
				#DISCOUNT_QTY, &
				#LINE_VALUE, &
				#ORDER_DATE, &
				#PAR_CURRENCY_CODE, &
				#R1, &
				#R2, &
				#R3)

				#LD_STATUS = #R3
				#LINE_DISCOUNT = #R1
				#PERCENT_DISCOUNT = #R2

			END_IF
	END_BLOCK

	BEGIN_BLOCK SALES_TAX
		IF (#TAXABLE = #YES AND #PART_TAXABLE <> #NO)

			IF (#WAREHOUSED_FLAG = #YES)
				#PRODUCT_TAX_CODE=PRODUCT_WAREHOUSE(PRODUCT_TAX_CODE)
			ELSE
				#PRODUCT_TAX_CODE=PRODUCT_MASTER(PRODUCT_TAX_CODE)
			END_IF

			IF (#PRODUCT_TAX_CODE = "") #PRODUCT_TAX_CODE = #DEF_PART_TAX_CODE

			IF (#CUSTOMER_TAX_CODE = "") #CUSTOMER_TAX_CODE = #DEF_CUST_TAX_CODE

			PERFORM SETUP_TAX_CONTROL_VT

			LB_TAX_CONTROL_VT(PART_CODE) = SALES_ORDER_LINES(PART_CODE)
			LB_TAX_CONTROL_VT(WAREHOUSE) = SALES_ORDER_LINES(WAREHOUSE)
			LB_TAX_CONTROL_VT(CUSTOMER_NUMBER) = SALES_ORDER_HEADERS(CUSTOMER_NUMBER)
			LB_TAX_CONTROL_VT(INVOICE_ADDRESS_CODE) = SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)
			LB_TAX_CONTROL_VT(DELIVERY_ADDRESS_CODE) = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
			LB_TAX_CONTROL_VT(TRANSACTION_NUMBER) = SALES_ORDER_HEADERS(ORDER_NUMBER)
			LB_TAX_CONTROL_VT(TRANSACTION_TYPE) = PARAMETER("TTYPE_SO")
			LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE) = #PRODUCT_TAX_CODE
			LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE) = #CUSTOMER_TAX_CODE
			LB_TAX_CONTROL_VT(ORDER_LINE_TYPE) = ""
			LB_TAX_CONTROL_VT(FORM_TITLE) = ""
			LB_TAX_CONTROL_VT(PRICE_ORDER_QTY) = #PRICE_ORDER_QTY
			LB_TAX_CONTROL_VT(SALES_PRICE) = #PRICE
			LB_TAX_CONTROL_VT(LINE_DISCOUNT) = #LINE_DISCOUNT

	        PERFORM "GEMLB:LB_L_TAX_CONTROL" ( "C", #ERROR_OCCURRED, #ERROR_MESSAGE )

			IF ( #ERROR_OCCURRED ) ERROR/TEXT_ONLY #ERROR_MESSAGE

			FIND IN LB_TAX_CONTROL_VT

			#LINE_TAX = LB_TAX_CONTROL_VT(TOTAL_TAX_AMOUNT)
			#PRODUCT_TAX_CODE = LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE)
			#CUSTOMER_TAX_CODE = LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE)
			#TAX_ON_CASH = LB_TAX_CONTROL_VT(TAX_ON_CASH)

!			PERFORM "GEMLB:LB_TAX_ANALYSIS" &
!				("C", &
!				 #TAX_FLAG, &
!				 #PRODUCT_TAX_CODE, &
!				 #CUSTOMER_TAX_CODE, &
!				 (#LINE_VALUE-#LINE_DISCOUNT), &
!				 #COMPANY_CODE, &
!				 #CURRENCY_DECIMAL, &
!				 #CURRENCY_MASK, &
!				 (PARAMETER("MODULE_AR")), &
!				 "", &
!				 (SALES_ORDER_LINES(PART_CODE)), &
!				 (SALES_ORDER_LINES(WAREHOUSE)), &
!				 "", &
!				 "", &
!				 "", &
!				 #TAX_ON_CASH, &
!				 #DIVISION, &
!				 #LINE_TAX)

			#ORDER_LINE	= SALES_ORDER_LINES(ORDER_LINE_NUMBER)
			#TAX_TYPE  = PARAMETER("TAX_TYPE_LINE")

			PERFORM CREATE_TAX_DETAIL_FROM_VT (#TAX_TYPE)
		END_IF
	END_BLOCK

	BEGIN_BLOCK FINAL_LINE_UPDATE
		IF (SALES_ORDER_LINES(STATUS_FLAG) = PARAMETER("STATUS_UPDATE"))
			! order line was copied, now reset status
			SALES_ORDER_LINES(STATUS_FLAG) = ""
		END_IF

		SALES_ORDER_LINES(SOP_ORDER_TOTAL_CURRENCY)	= #LINE_VALUE
		SALES_ORDER_LINES(SOP_GOODS_VALUE_CURRENCY)	= #LINE_VALUE
		SALES_ORDER_LINES(LINE_DISCOUNT)		= #LINE_DISCOUNT
		SALES_ORDER_LINES(LINE_TAX)			= #LINE_TAX

			! Calculate the value in base currency
		IF (#CURRENCY_METHOD > "0")
			PERFORM RESTOR_SYS_CURRENCY_CONTROL_VT
			DELETE ALL FROM SYS_CURRENCY_VALUES_VT
			SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE)	= #LINE_VALUE
			ADD TO SYS_CURRENCY_VALUES_VT
			PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
			IF (#R_STATUS <> #YES)
				ERROR/WAIT #R_MESSAGE
				EXIT (%FAILURE)
			END_IF
			FIND IN SYS_CURRENCY_VALUES_VT
			SALES_ORDER_LINES(SOP_ORDER_TOTAL_BASE) = SYS_CURRENCY_VALUES_VT(BASE_VALUE)
			SALES_ORDER_LINES(SOP_ORDER_TOTAL_2_BASE)	= SYS_CURRENCY_VALUES_VT(BASE_2_VALUE)

		END_IF

		IF (#PHYSICAL_IN_USE = #YES OR #LINE_EC_REPORT_TYPE <> "")
			IF (SALES_ORDER_LINES(ORDER_LINE_TYPE) <> #SO_LINE_TYPE_NONSTOCK)
				IF (#BATCHES_REQD=#YES AND PRODUCT_MASTER(BATCHES_EXIST)=#YES)
					! set the weight/volume by line detail (with lot chars)
					#WEIGHT = 0
					#WEIGHT_UOM	= 0
					#VOLUME = 0
					#VOLUME_UOM	= 0

					PERFORM CALC_LINE_WTVOL_BY_DETAIL
					IF (%STATUS <> %SUCCESS)
						EXIT (%FAILURE)
					END_IF
				ELSE
					!pass #NOMI_INVOICE_QTY
					IF (PRODUCT_MASTER(BATCHES_EXIST) = #YES)
						#IC_CHARACTERISTIC_SOURCE = PARAMETER("IC_UOM_LOT_CHAR_DEFAULT")
					ELSE
						#IC_CHARACTERISTIC_SOURCE = ""
					END_IF

					PERFORM SET_WV_FOR_LINE( "", #WEIGHT, #WEIGHT_UOM, #VOLUME, #VOLUME_UOM, #R1)
				END_IF
				SALES_ORDER_LINES(WEIGHT) = #WEIGHT
				SALES_ORDER_LINES(VOLUME) = #VOLUME
			END_IF
			! Else already set in SORT_OUT_NON_STOCK
		END_IF

		END_WHILE
	END_BLOCK

END_FORM


PROCEDURE_FORM SORT_OUT_NON_STOCK

	BEGIN_BLOCK FIND_CUSTOMER_ADDRESS
		FIND IN CUSTOMER_ADDRESSES &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/WITH=ADDRESS_CODE=SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE) &
			/LOCK=NONE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_22086
			EXIT(%FAILURE)
		END_IF

		IF (CUSTOMER_ADDRESSES(PRICE_CODE)<> "")
			#ADDR_PRICE_CODE=CUSTOMER_ADDRESSES(PRICE_CODE)
		END_IF

		#CUSTOMER_TAX_CODE=CUSTOMER_ADDRESSES(TAX_CODE)
		#TAXABLE = CUSTOMER_ADDRESSES(SALES_TAXABLE)

		IF (#DIV_TAX_ON_CASH = #YES AND #CO_TAX_ON_CASH = #YES AND CUSTOMER_ADDRESSES(SYS_TAX_ON_CASH) =#YES)
			#TAX_ON_CASH = #YES
		ELSE
			#TAX_ON_CASH = #NO
		END_IF

	END_BLOCK

	BEGIN_BLOCK PRICING_DISCOUNTS
		SALES_ORDER_LINES(SALES_PRICE)  = SL:SALES_TEMPLATE_LINES(SALES_PRICE)
		SALES_ORDER_LINES(SALES_PRICE_INC_TAX)  = SL:SALES_TEMPLATE_LINES(SALES_PRICE_INC_TAX)
		SALES_ORDER_LINES(UNIT_PRICE)	  = SL:SALES_TEMPLATE_LINES(UNIT_PRICE)
		#SALES_ORDER_QTY = SL:SALES_TEMPLATE_LINES(ORDER_QUANTITY)
		#PRICE_UOM	  = SALES_ORDER_LINES(UNIT_PRICE)

		IF (#SALES_UOM = #PRICE_UOM)
			#PRICE_ORDER_QTY	= #SALES_ORDER_QTY
		ELSE
			#PRICE_ORDER_QTY = 0.0
			PERFORM CONVERT_QTYS ("", &
					"", &
					"", &
					#SALES_UOM, &
					#SALES_ORDER_QTY, &
					#PRICE_UOM, &
					#PRICE_ORDER_QTY, &
					#R1)
			IF (%STATUS <> %SUCCESS)
				#PRICE_ORDER_QTY = 0
			END_IF
		END_IF
		#LINE_VALUE = ROUND(#PRICE_ORDER_QTY * SALES_ORDER_LINES(SALES_PRICE),#CURRENCY_DECIMAL)
		#LINE_DISCOUNT  = SL:SALES_TEMPLATE_LINES(LINE_DISCOUNT)
	END_BLOCK

	BEGIN_BLOCK SALES_TAX
		IF (#TAXABLE = #YES AND #TAX_FLAG <> #NO)

			PERFORM SETUP_TAX_CONTROL_VT

			LB_TAX_CONTROL_VT(PRICING_METHOD) = SALES_TEMPLATE_HEADERS(PRICING_METHOD)
			LB_TAX_CONTROL_VT(PART_CODE) = SALES_ORDER_LINES(PART_CODE)
			LB_TAX_CONTROL_VT(WAREHOUSE) = SALES_ORDER_LINES(WAREHOUSE)
			LB_TAX_CONTROL_VT(CUSTOMER_NUMBER) = SALES_ORDER_HEADERS(CUSTOMER_NUMBER)
			LB_TAX_CONTROL_VT(INVOICE_ADDRESS_CODE) = SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)
			LB_TAX_CONTROL_VT(DELIVERY_ADDRESS_CODE) = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
			LB_TAX_CONTROL_VT(TRANSACTION_NUMBER) = SALES_ORDER_HEADERS(ORDER_NUMBER)
			LB_TAX_CONTROL_VT(TRANSACTION_TYPE) = PARAMETER("TTYPE_SO")
			LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE) = #DEF_PART_TAX_CODE
			LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE) = #CUSTOMER_TAX_CODE
			LB_TAX_CONTROL_VT(ORDER_LINE_TYPE) = ""
			LB_TAX_CONTROL_VT(FORM_TITLE) = ""
			LB_TAX_CONTROL_VT(PRICE_ORDER_QTY) = #PRICE_ORDER_QTY
			LB_TAX_CONTROL_VT(SALES_PRICE) = SALES_ORDER_LINES(SALES_PRICE)
			LB_TAX_CONTROL_VT(LINE_DISCOUNT) = #LINE_DISCOUNT

	        PERFORM "GEMLB:LB_L_TAX_CONTROL" ( "C", #ERROR_OCCURRED, #ERROR_MESSAGE )

			IF ( #ERROR_OCCURRED ) ERROR/TEXT_ONLY #ERROR_MESSAGE

			FIND IN LB_TAX_CONTROL_VT

			#LINE_TAX = LB_TAX_CONTROL_VT(TOTAL_TAX_AMOUNT)
			#DEF_PART_TAX_CODE = LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE)
			#CUSTOMER_TAX_CODE = LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE)
			#TAX_ON_CASH = LB_TAX_CONTROL_VT(TAX_ON_CASH)

!			PERFORM "GEMLB:LB_TAX_ANALYSIS" &
!				("C", &
!				 #TAX_FLAG, &
!				 #DEF_PART_TAX_CODE, &
!				 #CUSTOMER_TAX_CODE, &
!				 (#LINE_VALUE-#LINE_DISCOUNT), &
!				 #COMPANY_CODE, &
!				 #CURRENCY_DECIMAL, &
!				 #CURRENCY_MASK, &
!				 (PARAMETER("MODULE_AR")), &
!				 "", &
!				 "", &
!				 "", &
!				 "", &
!				 "", &
!				 "", &
!				 #TAX_ON_CASH, &
!				 #DIVISION, &
!				 #LINE_TAX)

			#ORDER_LINE = SALES_ORDER_LINES(ORDER_LINE_NUMBER)
			#TAX_TYPE = PARAMETER("TAX_TYPE_LINE")
			PERFORM CREATE_TAX_DETAIL_FROM_VT (#TAX_TYPE)
		END_IF

		SALES_ORDER_LINES(WEIGHT_UOM) = SL:SALES_TEMPLATE_LINES(WEIGHT_UOM)
		#WEIGHT_UOM = SALES_ORDER_LINES(WEIGHT_UOM)
		SALES_ORDER_LINES(VOLUME_UOM) = SL:SALES_TEMPLATE_LINES(VOLUME_UOM)
		#VOLUME_UOM		= SALES_ORDER_LINES(VOLUME_UOM)
		#WEIGHT = SL:SALES_TEMPLATE_LINES(WEIGHT)
		#VOLUME = SL:SALES_TEMPLATE_LINES(VOLUME)
		SALES_ORDER_LINES(WEIGHT)	  = #WEIGHT
		SALES_ORDER_LINES(VOLUME)	  = #VOLUME
	END_BLOCK

	BEGIN_BLOCK ADD
		SALES_ORDER_LINES(ORDER_CYCLE)=#ORDER_CYCLE

		#ORDER_FLAG = (PARAMETER("HORIZON_CURRENT"))

		IF (#SYS_SHIPPING_DATE <> "")
			#ORDER_DAYS = DAYS(#SYS_SHIPPING_DATE) - DAYS(%NOW)

			IF (#ORDER_DAYS > WAREHOUSE_CONTROLS(DAYS_FORWARD_COMMITMENT))
				#ORDER_FLAG = (PARAMETER("HORIZON_FORWARD"))
			END_IF

			IF (#ORDER_DAYS < -(WAREHOUSE_CONTROLS(DAYS_BACKWARD_COMMITMENT)))
				#ORDER_FLAG = (PARAMETER("HORIZON_BACKWARD"))
			END_IF
		END_IF

		ADD TO SALES_ORDER_LINES

		PERFORM ADD_SO_LINE_ORDER_QTY (#SALES_UOM, #SALES_ORDER_QTY, #YES, #R1)

		CLEAR_BUFFER SALES_ORDER_LINE_DETAILS

		SALES_ORDER_LINE_DETAILS(COMPANY_CODE)      = #COMPANY_CODE
		SALES_ORDER_LINE_DETAILS(DIVISION)		 = #DIVISION
		SALES_ORDER_LINE_DETAILS(ORDER_NUMBER)      = #ORDER_NUMBER
		SALES_ORDER_LINE_DETAILS(ORDER_LINE_NUMBER) = SALES_ORDER_LINES(ORDER_LINE_NUMBER)
		SALES_ORDER_LINE_DETAILS(SEQUENCE)		 = "1"
		SALES_ORDER_LINE_DETAILS(ORIGINAL_SEQUENCE) = "1"
		SALES_ORDER_LINE_DETAILS(ORDER_HORIZON)     = #ORDER_FLAG
		SALES_ORDER_LINE_DETAILS(ORDER_LINE_REF)    = SALES_ORDER_LINES(ORDER_LINE_REFERENCE)
		SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE) = #SYS_SHIPPING_DATE
		SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE) = #SYS_SHIPPING_DATE
		SALES_ORDER_LINE_DETAILS(REQUIRED_DATE)     = #SYS_SHIPPING_DATE
		SALES_ORDER_LINE_DETAILS(TEMP_REQUIRED_DATE)= #SYS_SHIPPING_DATE
		SALES_ORDER_LINE_DETAILS(ORDER_DATE)		 = #ORDER_DATE
		SALES_ORDER_LINE_DETAILS(WAREHOUSE)		= ""

		ADD TO SALES_ORDER_LINE_DETAILS

		PERFORM ADD_SO_LINE_DETAIL_ORDER_QTY( "", "", #SALES_UOM, #SALES_ORDER_QTY, #YES, #R1)
	END_BLOCK

END_FORM


PROCEDURE_FORM BATCH_DETAIL_FROM_TEMPLATES &
	/TABLE=SALES_TEMPLATE_LINE_DETAILS &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION=#DIVISION &
	/WITH=TEMPLATE_CODE=#TEMPLATE_CODE &
	/WITH=ORDER_LINE_NUMBER=SL:SALES_TEMPLATE_LINES(ORDER_LINE_NUMBER)


	BEGIN_BLOCK CHECK_IC_LOT_NUMBER

		FIND IN PART_BATCHES &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=WAREHOUSE=SL:SALES_TEMPLATE_LINES(WAREHOUSE) &
			/WITH=PART_CODE=SL:SALES_TEMPLATE_LINES(PART_CODE) &
			/WITH=IC_LOT_NUMBER=SALES_TEMPLATE_LINE_DETAILS(IC_LOT_NUMBER)  &
			/LOCK=NONE
		IF ((%STATUS<>%SUCCESS) OR (PART_BATCHES(BATCH_DATE)<>"" AND &
			DAYS(PART_BATCHES(BATCH_DATE))<=DAYS(%TODAY)))
			MESSAGE/IDENTIFIER/BELL/WAIT P_52369
			EXIT(%FAILURE)
		END_IF
	END_BLOCK

	BEGIN_BLOCK CREATE_LINE

		#ORDER_FLAG = (PARAMETER("HORIZON_CURRENT"))

		IF (#SYS_SHIPPING_DATE <> "")
			#ORDER_DAYS = DAYS(#SYS_SHIPPING_DATE) - DAYS(%NOW)

			IF (#ORDER_DAYS > WAREHOUSE_CONTROLS(DAYS_FORWARD_COMMITMENT))
				#ORDER_FLAG = (PARAMETER("HORIZON_FORWARD"))
			END_IF

			IF (#ORDER_DAYS < -(WAREHOUSE_CONTROLS(DAYS_BACKWARD_COMMITMENT)))
				#ORDER_FLAG = (PARAMETER("HORIZON_BACKWARD"))
			END_IF
		END_IF

		#LEAD_TIME = ""
		FIND IN SYS_BILL_OF_DISTRIBUTION &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=SYS_BOD_CODE=#LINE_DIST_BOD_CODE &
			/WITH=WAREHOUSE=#WAREHOUSE

		IF (%STATUS=%SUCCESS)
			#LEAD_TIME = SYS_BILL_OF_DISTRIBUTION(SYS_LEAD_TIME)
		END_IF

		#SYS_DELIVERY_DATE = DATE(DAYS(#SYS_SHIPPING_DATE) + #LEAD_TIME)

		CLEAR_BUFFER SALES_ORDER_LINE_DETAILS

		SALES_ORDER_LINE_DETAILS(COMPANY_CODE)=SALES_TEMPLATE_LINE_DETAILS(COMPANY_CODE)
		SALES_ORDER_LINE_DETAILS(DIVISION)=SALES_TEMPLATE_LINE_DETAILS(DIVISION)
		SALES_ORDER_LINE_DETAILS(ORDER_NUMBER)=#ORDER_NUMBER
		SALES_ORDER_LINE_DETAILS(ORDER_LINE_NUMBER)=SALES_TEMPLATE_LINE_DETAILS(ORDER_LINE_NUMBER)
		SALES_ORDER_LINE_DETAILS(SEQUENCE)=SALES_TEMPLATE_LINE_DETAILS(SEQUENCE)
		SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER)=SALES_TEMPLATE_LINE_DETAILS(IC_LOT_NUMBER)
		SALES_ORDER_LINE_DETAILS(ORDER_LINE_REF)=SALES_TEMPLATE_LINE_DETAILS(ORDER_LINE_REFERENCE)
		SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE) = #SYS_SHIPPING_DATE
		SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE) = #SYS_DELIVERY_DATE
		SALES_ORDER_LINE_DETAILS(REQUIRED_DATE)=#SYS_SHIPPING_DATE
		SALES_ORDER_LINE_DETAILS(TEMP_REQUIRED_DATE)=#SYS_SHIPPING_DATE
		SALES_ORDER_LINE_DETAILS(ORDER_DATE)=#ORDER_DATE
		SALES_ORDER_LINE_DETAILS(ORDER_HORIZON) = #ORDER_FLAG
		SALES_ORDER_LINE_DETAILS(WAREHOUSE) = #WAREHOUSE

		#NEW_QTY_RESERVED = "0"
		#OLD_QTY_RESERVED = 0
		#SALES_ORDER_QTY	= SALES_TEMPLATE_LINE_DETAILS(ORDER_QUANTITY)
		SALES_ORDER_LINE_DETAILS(ORDER_LINE_STATUS)=""

		ADD TO SALES_ORDER_LINE_DETAILS
		PERFORM ADD_SO_LINE_DETAIL_ORDER_QTY ( "", #WAREHOUSE, #SALES_UOM, #SALES_ORDER_QTY, #YES, #P1)

		#NOMI_ORDER_QTY = 0.0
		PERFORM CONVERT_QTYS((SALES_ORDER_LINES(WAREHOUSE)), &
				(SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER)), &
				(SALES_ORDER_LINES(PART_CODE)), &
				#SALES_UOM, &
				#SALES_ORDER_QTY, &
				#NOMI_UOM,		   &
				#NOMI_ORDER_QTY, &
				#R1)
		IF (#NOMI_UOM <> #SALES_UOM)
			PERFORM ADD_SO_LINE_DETAIL_ORDER_QTY ( "", #WAREHOUSE, #NOMI_UOM, #NOMI_ORDER_QTY, #YES, #P1)
			PERFORM ADD_UPDATE_SO_LINE_ORDER_QTY( #NOMI_UOM, #NOMI_ORDER_QTY, #YES, #P1)
		END_IF

		IF (PRODUCT_MASTER(IC_PRODUCT_UOM_CONTROL) = (PARAMETER("IC_CATCHWEIGHT_UOM_CONTROL")) OR       &
			PRODUCT_MASTER(IC_PRODUCT_UOM_CONTROL) = (PARAMETER("IC_POTENT_UOM_CONTROL")))
			! calculate quantity for the non-nominated UOM of the product
			PERFORM GET_NON_NOMINATED_UOM ( SALES_ORDER_LINES(PART_CODE),   &
							#NOMI_UOM, &
							#NON_NOMI_UOM)
			IF (#NON_NOMI_UOM <> "" AND #NON_NOMI_UOM <> #SALES_UOM)
				#NON_NOMI_ORDER_QTY = 0.0
				PERFORM CONVERT_QTYS((SALES_ORDER_LINES(WAREHOUSE)), &
					(SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER)), &
					(SALES_ORDER_LINES(PART_CODE)), &
					#NOMI_UOM, &
					#NOMI_ORDER_QTY, &
					#NON_NOMI_UOM, &
					#NON_NOMI_ORDER_QTY, &
					#R1)
				PERFORM ADD_SO_LINE_DETAIL_ORDER_QTY ( "", #WAREHOUSE, &
									#NON_NOMI_UOM, #NON_NOMI_ORDER_QTY, #YES, #P1)
				PERFORM ADD_UPDATE_SO_LINE_ORDER_QTY( #NON_NOMI_UOM, #NON_NOMI_ORDER_QTY, "", #P1)
			ELSE
				#NON_NOMI_ORDER_QTY = #SALES_ORDER_QTY
			END_IF
		END_IF

		IF ((#IC_PACKAGED_PRODUCT = #YES) AND &
		   (#PACK_UOM <> #SALES_UOM) AND &
		   (#PACK_UOM <> #NOMI_UOM) AND &
		   (#PACK_UOM <> #NON_NOMI_UOM))
			IF (PRODUCT_MASTER(IC_UNIT_CAPACITY) = #NOMI_UOM)
				#CAPACITY_ORDER_QUANTITY	= #NOMI_ORDER_QTY
			ELSE
				#CAPACITY_ORDER_QUANTITY	= #NON_NOMI_ORDER_QTY
			END_IF
			! convert from capacity to package
			#PACK_ORDER_QTY = 0.0
			PERFORM CONVERT_QTYS((SALES_ORDER_LINES(WAREHOUSE)), &
					(SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER)), &
					(SALES_ORDER_LINES(PART_CODE)), &
					(PRODUCT_MASTER(IC_UNIT_CAPACITY)), &
					#CAPACITY_ORDER_QUANTITY, &
					#PACK_UOM, &
					#PACK_ORDER_QTY, &
					#R1)
			PERFORM ADD_SO_LINE_DETAIL_ORDER_QTY ( "", #WAREHOUSE, &
									#PACK_UOM, #PACK_ORDER_QTY, #YES, #P1)
			PERFORM ADD_UPDATE_SO_LINE_ORDER_QTY( #PACK_UOM, #PACK_ORDER_QTY, "", #P1)
		END_IF

		!  Get Pricing Quantity
		IF (#PRICE_UOM <> #SALES_UOM AND &
		    #PRICE_UOM <> #NOMI_UOM AND &
		    #PRICE_UOM <> #NON_NOMI_UOM AND &
		    #PRICE_UOM <> #PACK_UOM)
			#PRICE_ORDER_QTY = 0.0
			PERFORM "GEMLB:SOP_L_SALES_PRICE_QTY" &
				(#COMPANY_CODE, &
				(SALES_ORDER_LINES(PART_CODE)), &
				(SALES_ORDER_LINES(WAREHOUSE)), &
				(SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER)), &
				#SALES_UOM, &
				#SALES_ORDER_QTY, &
				#NOMI_UOM, &
				#NOMI_ORDER_QTY, &
				#NON_NOMI_UOM, &
				#NON_NOMI_ORDER_QTY, &
				#PRICE_UOM, &
				#NOMI_PRICE_UOM, &
				"", &
				"", &
				#PRICE_ORDER_QTY, &
				#PQ_STATUS, &
				#PQ_MESSAGE)
			IF (#PQ_STATUS = #NO)
				ERROR/BELL/TEXT_ONLY/WAIT #PQ_MESSAGE
				#PRICE_ORDER_QTY = 0
			ELSE
				PERFORM ADD_SO_LINE_DETAIL_ORDER_QTY ( "", #WAREHOUSE, #PRICE_UOM, #PRICE_ORDER_QTY, #YES, #P1)
				PERFORM ADD_UPDATE_SO_LINE_ORDER_QTY( #PRICE_UOM, #PRICE_ORDER_QTY, "", #P1)
			END_IF
		END_IF

		#OLD_SALES_ORDER_QTY = 0

		! make commitments for the add
		PERFORM 'GEMSOP:SOP_L_DO_IC_COMMITMENTS' (#WAREHOUSE, &
							#SYS_SHIPPING_DATE, "", #IC_MOVEMENT_CODE, "0", #NOMI_ORDER_QTY, #R1)
		IF (%STATUS <> %SUCCESS)
				ERROR /WAIT #R1
		END_IF

		IF (SALES_ORDER_LINES(ORDER_LINE_TYPE)=#SO_LINE_TYPE_STOCK)
		!
		! do reservations
		!
			#AUTO_RESERVE = #YES
			PERFORM RESERVATION_CHECK (#WAREHOUSE)
			IF (%STATUS <> %SUCCESS)
				EXIT (%STATUS)
			END_IF
			#DELTA_QTY_RESERVED		  = #NEW_QTY_RESERVED - #OLD_QTY_RESERVED
			IF (#DELTA_QTY_RESERVED <> 0 AND #NEW_QTY_RESERVED <> 0)
				PERFORM 'GEMSOP:SOP_L_UPDATE_SO_QTYS' (#COMPANY_CODE,   &
								#DIVISION,	&
								(SALES_ORDER_LINES(ORDER_NUMBER)),	&
								(SALES_ORDER_LINES(ORDER_LINE_NUMBER)), &
								(SALES_ORDER_LINE_DETAILS(SEQUENCE)),	&
								"QTY_RESERVED", &
								#DELTA_QTY_RESERVED,	&
								(SALES_ORDER_LINES(UNIT_SALES)))
				IF (%STATUS <> %SUCCESS)
					EXIT (%STATUS)
				END_IF
			END_IF
		END_IF
	END_BLOCK

END_FORM


PROCEDURE_FORM FINAL_HEADER_UPDATES


	BEGIN_BLOCK SETUP_UP_CODES

		IF (#OD_IN_USE=#YES)
			IF (SALES_ORDER_HEADERS(ORDER_DISCOUNT_GROUP) = "" &
			   AND #MAIN_OPT <> "MODIFY" AND  #OPT <> "MODIFY" )
				SALES_ORDER_HEADERS(ORDER_DISCOUNT_GROUP) = #OD_CUST_GROUP
			ELSE
				#OD_CUST_GROUP = SALES_ORDER_HEADERS(ORDER_DISCOUNT_GROUP)
			END_IF
		ELSE
			SALES_ORDER_HEADERS(ORDER_DISCOUNT_GROUP)=""
		END_IF

		IF (SALES_ORDER_HEADERS(FREIGHT_TAX_CODE) <> "")
			#FREIGHT_TAX_CODE = SALES_ORDER_HEADERS(FREIGHT_TAX_CODE)
		ELSE
			#FREIGHT_TAX_CODE = #DEF_FREIGHT_TAX_CODE
		END_IF

		IF (SALES_ORDER_HEADERS(MISC_TAX_CODE) <> "")
			#MISC_TAX_CODE = SALES_ORDER_HEADERS(MISC_TAX_CODE)
		ELSE
			#MISC_TAX_CODE = #DEF_MISC_TAX_CODE
		END_IF
	END_BLOCK

	BEGIN_BLOCK CALC_TOTAL_ORDER_QTY
		#ORDER_DISCOUNT_QUANTITY = 0.0
		PERFORM TOTAL_ORDER_DISCOUNT_QTY
	END_BLOCK

	BEGIN_BLOCK CALC_ORDER_DISCOUNTS
		#NET_LINE_VALUE = SALES_ORDER_HEADERS(SOP_ORDER_TOTAL_CURRENCY)- &
				  SALES_ORDER_HEADERS(LINE_DISCOUNT)

		SALES_ORDER_HEADERS(LINE_VALUE_DISCOUNTED) = #NET_LINE_VALUE
		SALES_ORDER_HEADERS(LINE_TAX_DISCOUNTED)   = SALES_ORDER_HEADERS(LINE_TAX)

		IF (#OD_IN_USE)
			IF (#OD_CUST_GROUP <> "")
				SALES_ORDER_HEADERS(ORDER_DISCOUNT)= 0
				SALES_ORDER_HEADERS(ORDER_DISCOUNT_PERCENT)= 0
				#DISC_CURRENCY_CODE = SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE)

				PERFORM "GEMLB:SOP_L_ORDER_DISCOUNTS" &
					(#COMPANY_CODE, &
					#DIVISION, &
					#OD_CUST_GROUP, &
					#OD_BREAK, &
					#OD_CALC, &
					#ORDER_DISCOUNT_QUANTITY, &
					#NET_LINE_VALUE, &
					#ORDER_DATE, &
					#DISC_CURRENCY_CODE, &
					#R1, &
					#R2, &
					#R3)
				SALES_ORDER_HEADERS(ORDER_DISCOUNT)= #R1
				SALES_ORDER_HEADERS(ORDER_DISCOUNT_PERCENT)= #R2
				SALES_ORDER_HEADERS(LINE_VALUE_DISCOUNTED)= &
					SALES_ORDER_HEADERS(LINE_VALUE_DISCOUNTED) &
					- SALES_ORDER_HEADERS(ORDER_DISCOUNT)
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK DISCOUNT_ON_TAX
		#DISCOUNT_ON_TAX = ROUND(SALES_ORDER_HEADERS(ORDER_DISCOUNT_PERCENT) &
				* SALES_ORDER_HEADERS(LINE_TAX) / 100,2)

		SALES_ORDER_HEADERS(LINE_TAX_DISCOUNTED) = SALES_ORDER_HEADERS(LINE_TAX) - #DISCOUNT_ON_TAX
	END_BLOCK

	BEGIN_BLOCK CALC_TAX_ON_FREIGHT
		IF (#TAXABLE = #YES AND SALES_ORDER_HEADERS(FREIGHT) <> "0" &
				AND #FREIGHT_TAXABLE <> #NO)

			PERFORM SETUP_TAX_CONTROL_VT

			LB_TAX_CONTROL_VT(PART_CODE) = SALES_ORDER_LINES(PART_CODE)
			LB_TAX_CONTROL_VT(WAREHOUSE) = SALES_ORDER_LINES(WAREHOUSE)
			LB_TAX_CONTROL_VT(CUSTOMER_NUMBER) = SALES_ORDER_HEADERS(CUSTOMER_NUMBER)
			LB_TAX_CONTROL_VT(INVOICE_ADDRESS_CODE) = SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)
			LB_TAX_CONTROL_VT(DELIVERY_ADDRESS_CODE) = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
			LB_TAX_CONTROL_VT(TRANSACTION_NUMBER) = SALES_ORDER_HEADERS(ORDER_NUMBER)
			LB_TAX_CONTROL_VT(TRANSACTION_TYPE) = PARAMETER("TTYPE_SO")
			LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE) = #FREIGHT_TAX_CODE
			LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE) = #CUSTOMER_TAX_CODE
			LB_TAX_CONTROL_VT(ORDER_LINE_TYPE) = "F"
			LB_TAX_CONTROL_VT(FORM_TITLE) = ""
			LB_TAX_CONTROL_VT(PRICE_ORDER_QTY) = 1
			LB_TAX_CONTROL_VT(SALES_PRICE) = SALES_ORDER_LINES(FREIGHT)
			LB_TAX_CONTROL_VT(LINE_DISCOUNT) = 0

	        PERFORM "GEMLB:LB_L_TAX_CONTROL" ( "C", #ERROR_OCCURRED, #ERROR_MESSAGE )

			IF ( #ERROR_OCCURRED ) ERROR/TEXT_ONLY #ERROR_MESSAGE

			FIND IN LB_TAX_CONTROL_VT

			#LINE_TAX = LB_TAX_CONTROL_VT(TOTAL_TAX_AMOUNT)
			#FREIGHT_TAX_CODE = LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE)
			#CUSTOMER_TAX_CODE = LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE)
			#TAX_ON_CASH = LB_TAX_CONTROL_VT(TAX_ON_CASH)

!			PERFORM "GEMLB:LB_TAX_ANALYSIS" &
!				("C", &
!				 #TAX_FLAG, &
!				 #FREIGHT_TAX_CODE, &
!				 #CUSTOMER_TAX_CODE, &
!				 (SALES_ORDER_HEADERS(FREIGHT)), &
!				 #COMPANY_CODE, &
!				 #CURRENCY_DECIMAL, &
!				 #CURRENCY_MASK, &
!				 (PARAMETER("MODULE_AR")), &
!				 "", &
!				 "", &
!				 "", &
!				 "", &
!				 "F", &
!				 "", &
!				 #TAX_ON_CASH, &
!				 #DIVISION, &
!				 #LINE_TAX)

			#ORDER_LINE		  = 0
			#TAX_TYPE  = PARAMETER("TAX_TYPE_FREIGHT")

			PERFORM CREATE_TAX_DETAIL_FROM_VT (#TAX_TYPE)
			SALES_ORDER_HEADERS(TAX_ON_FREIGHT)= #LINE_TAX
		ELSE
			SALES_ORDER_HEADERS(TAX_ON_FREIGHT)= 0.00
		END_IF
	END_BLOCK

	BEGIN_BLOCK CALC_TAX_ON_MISC
		IF (#TAXABLE = #YES AND SALES_ORDER_HEADERS(MISCELLANEOUS) <> "0" &
				AND #MISC_TAXABLE <> #NO)

			PERFORM SETUP_TAX_CONTROL_VT

			LB_TAX_CONTROL_VT(PART_CODE) = SALES_ORDER_LINES(PART_CODE)
			LB_TAX_CONTROL_VT(WAREHOUSE) = SALES_ORDER_LINES(WAREHOUSE)
			LB_TAX_CONTROL_VT(CUSTOMER_NUMBER) = SALES_ORDER_HEADERS(CUSTOMER_NUMBER)
			LB_TAX_CONTROL_VT(INVOICE_ADDRESS_CODE) = SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)
			LB_TAX_CONTROL_VT(DELIVERY_ADDRESS_CODE) = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
			LB_TAX_CONTROL_VT(TRANSACTION_NUMBER) = SALES_ORDER_HEADERS(ORDER_NUMBER)
			LB_TAX_CONTROL_VT(TRANSACTION_TYPE) = PARAMETER("TTYPE_SO")
			LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE) = #MISC_TAX_CODE
			LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE) = #CUSTOMER_TAX_CODE
			LB_TAX_CONTROL_VT(ORDER_LINE_TYPE) = "M"
			LB_TAX_CONTROL_VT(FORM_TITLE) = ""
			LB_TAX_CONTROL_VT(PRICE_ORDER_QTY) = 1
			LB_TAX_CONTROL_VT(SALES_PRICE) = SALES_ORDER_HEADERS(MISCELLANEOUS)
			LB_TAX_CONTROL_VT(LINE_DISCOUNT) = 0

	        PERFORM "GEMLB:LB_L_TAX_CONTROL" ( "C", #ERROR_OCCURRED, #ERROR_MESSAGE )

			IF ( #ERROR_OCCURRED ) ERROR/TEXT_ONLY #ERROR_MESSAGE

			FIND IN LB_TAX_CONTROL_VT

			#LINE_TAX = LB_TAX_CONTROL_VT(TOTAL_TAX_AMOUNT)
			#MISC_TAX_CODE = LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE)
			#CUSTOMER_TAX_CODE = LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE)
			#TAX_ON_CASH = LB_TAX_CONTROL_VT(TAX_ON_CASH)

!			PERFORM "GEMLB:LB_TAX_ANALYSIS" &
!				("C", &
!				 #TAX_FLAG, &
!				 #MISC_TAX_CODE, &
!				 #CUSTOMER_TAX_CODE, &
!				 (SALES_ORDER_HEADERS(MISCELLANEOUS)), &
!				 #COMPANY_CODE, &
!				 #CURRENCY_DECIMAL, &
!				 #CURRENCY_MASK, &
!				 (PARAMETER("MODULE_AR")), &
!				 "", &
!				 "", &
!				 "", &
!				 "", &
!				 "M", &
!				 "", &
!				 #TAX_ON_CASH, &
!				 #DIVISION, &
!				 #LINE_TAX)

			#ORDER_LINE = 0
			#TAX_TYPE = PARAMETER("TAX_TYPE_MISC")
			PERFORM CREATE_TAX_DETAIL_FROM_VT (#TAX_TYPE)
			SALES_ORDER_HEADERS(TAX_ON_MISCELLANEOUS)= #LINE_TAX
		ELSE
			SALES_ORDER_HEADERS(TAX_ON_MISCELLANEOUS)= 0.00
		END_IF
	END_BLOCK

	BEGIN_BLOCK UPDATE_ORDER_VALUE_BASE
		#TOTAL_ORDER_VALUE = (SALES_ORDER_HEADERS(LINE_VALUE_DISCOUNTED) + &
							 SALES_ORDER_HEADERS(LINE_TAX_DISCOUNTED)   + &
							 SALES_ORDER_HEADERS(FREIGHT)               + &
							 SALES_ORDER_HEADERS(TAX_ON_FREIGHT)        + &
							 SALES_ORDER_HEADERS(MISCELLANEOUS)         + &
							 SALES_ORDER_HEADERS(TAX_ON_MISCELLANEOUS))
		IF (#CURRENCY_METHOD > '0')
			PERFORM RESTOR_SYS_CURRENCY_CONTROL_VT

			DELETE ALL FROM SYS_CURRENCY_VALUES_VT
			SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE) = #TOTAL_ORDER_VALUE
			ADD TO SYS_CURRENCY_VALUES_VT
			PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
			IF (#R_STATUS <> #YES)
				ERROR/WAIT #R_MESSAGE
				EXIT (%FAILURE)
			END_IF

			FIND IN SYS_CURRENCY_VALUES_VT
			SALES_ORDER_HEADERS(SOP_ORDER_VALUE_BASE) = SYS_CURRENCY_VALUES_VT(BASE_VALUE)
		END_IF
	END_BLOCK

!Add the following lines issue#368358-6
	BEGIN_BLOCK UPDATE_OS_ORDER_VALUE
		FIND IN CUSTOMERS &
			/LOCK=WRITE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=#CUSTOMER_NUMBER

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00187
		ELSE
		 SALES_ORDER_HEADERS(OS_ORDER_VALUE) = SALES_ORDER_HEADERS(SOP_ORDER_VALUE_BASE)
		END_IF		
!End of adds

!Delete the following line
!	BEGIN_BLOCK UPDATE_ORDER_TOTALS
!End of deletes
!Delete the following lines issue#368358-7
!		#TOTAL_LINE_VALUE = SALES_ORDER_HEADERS(LINE_VALUE_DISCOUNTED) &
!					+SALES_ORDER_HEADERS(FREIGHT) &
!					+SALES_ORDER_HEADERS(MISCELLANEOUS)
!
!		#TOTAL_TAX_VALUE = SALES_ORDER_HEADERS(LINE_TAX_DISCOUNTED)+ &
!				SALES_ORDER_HEADERS(TAX_ON_FREIGHT)+ &
!				SALES_ORDER_HEADERS(TAX_ON_MISCELLANEOUS)
!
!		FIND IN CUSTOMERS &
!			/LOCK=WRITE &
!			/WITH=COMPANY_CODE=#COMPANY_CODE &
!			/WITH=DIVISION=#DIVISION &
!			/WITH=CUSTOMER_NUMBER=#CUSTOMER_NUMBER
!
!		IF (%STATUS = %FAILURE)
!
!			MESSAGE/IDENTIFIER/BELL/WAIT P_00187
!End of deletes

!Delete the following lines issue#368358-8
!		ELSE
!			#VALUE_DIFF = #TOTAL_LINE_VALUE + #TOTAL_TAX_VALUE
!
!			IF (#CURRENCY_METHOD > '0')
!				DELETE ALL FROM SYS_CURRENCY_VALUES_VT
!				SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE)	= #VALUE_DIFF
!				ADD TO SYS_CURRENCY_VALUES_VT
!				PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
!				IF (#R_STATUS <> #YES)
!					ERROR/WAIT #R_MESSAGE
!					EXIT (%FAILURE)
!				END_IF
!				FIND IN SYS_CURRENCY_VALUES_VT
!				#BASE_VALUE_DIFF	= SYS_CURRENCY_VALUES_VT(BASE_VALUE)
!			ELSE
!				#BASE_VALUE_DIFF=#VALUE_DIFF
!			END_IF
!			CUSTOMERS(OS_ORDER_VALUE) = CUSTOMERS(OS_ORDER_VALUE) + #BASE_VALUE_DIFF
!		END_IF
!End of deletes	END_BLOCK

END_FORM

FORM ORDER_ANALYSIS_CODES /ROW=8 /COL=2 /HEIGHT=16 /WIDTH=78 &
	/TITLE=(MESSAGE("P_50093"))

	BEGIN_BLOCK SETUP
		DISPLAY DEFAULTS
		GOTO CONFIRM
	END_BLOCK

	BEGIN_BLOCK  /DISPLAY_ONLY SALESPERSON_DISPLAY

		FIND IN SALESPERSONS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=SALESPERSON_CODE=SALES_ORDER_HEADERS(SALESPERSON_CODE)

		#SALESPERSON_CODE = SALES_ORDER_HEADERS(SALESPERSON_CODE)

	END_BLOCK

	INPUT_BLOCK SALESPERSON /ROW=2 /COL=30 &
			/PROMPT=(FIELD_PROMPT(SALESPERSON_CODE)) &
			/BACK=(GOTO SALESPERSON) &
			/TARGET=#SALESPERSON_CODE &
			/USING=SALES_ORDER_HEADERS(SALESPERSON_CODE) &
			/LOV=SALESPERSONS(SALESPERSON_CODE,CODE_DESCRIPTION) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE

	BEGIN_BLOCK SALESPERSON_CODE_VALIDATE

		IF (#SALESPERSON_CODE <> "")
			FIND IN SALESPERSONS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=SALESPERSON_CODE=#SALESPERSON_CODE

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_22205
				GOTO SALESPERSON
			END_IF
		END_IF

		IF (#SALESPERSON_CODE <> SALES_ORDER_HEADERS(SALESPERSON_CODE))
			FIND IN SALES_COMMISSION_CODES &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=SALES_COMMISSION_CODE=SALESPERSONS(SALES_COMMISSION_CODE)

			#SALES_COMMISSION_CODE = SALES_COMMISSION_CODES(SALES_COMMISSION_CODE)
		END_IF

	END_BLOCK

	OUTPUT_BLOCK CODE_DESCRIPTION_1 /ROW=2 /COL=39 &
			/SOURCE=(SALESPERSONS(CODE_DESCRIPTION))

	BEGIN_BLOCK  /DISPLAY_ONLY SALES_COMMISSION_CODE_DISPLAY

			FIND IN SALES_COMMISSION_CODES &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=SALES_COMMISSION_CODE=SALES_ORDER_HEADERS(SALES_COMMISSION_CODE)

			#SALES_COMMISSION_CODE = SALES_ORDER_HEADERS(SALES_COMMISSION_CODE)
	END_BLOCK

	INPUT_BLOCK SALES_COMMISSION_CODE /ROW=3 /COL=30 &
			/PROMPT=(FIELD_PROMPT(SALES_COMMISSION_CODE)) &
			/TARGET=#SALES_COMMISSION_CODE &
			/USING=SALES_ORDER_HEADERS(SALES_COMMISSION_CODE) &
			/LOV=SALES_COMMISSION_CODES(SALES_COMMISSION_CODE,DESCRIPTION) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE

	BEGIN_BLOCK SALES_COMMISSION_CODE_VALIDATE

		IF (#SALES_COMMISSION_CODE <> "")

			FIND IN SALES_COMMISSION_CODES &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=SALES_COMMISSION_CODE=#SALES_COMMISSION_CODE

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_52249
				GOTO SALES_COMMISSION_CODE
			END_IF
		END_IF
	END_BLOCK

	OUTPUT_BLOCK COMMISSION_DESC /ROW=3 /COL=39 &
			/SOURCE=(SALES_COMMISSION_CODES(DESCRIPTION))

	BEGIN_BLOCK  /DISPLAY_ONLY BROKER_DISPLAY

		FIND IN BROKER_CODES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=BROKER_CODE=SALES_ORDER_HEADERS(BROKER_CODE)

		#BROKER_CODE = SALES_ORDER_HEADERS(BROKER_CODE)

	END_BLOCK

	INPUT_BLOCK BROKER /ROW=4 /COL=30 &
			/PROMPT=(FIELD_PROMPT(BROKER_CODE)) &
			/BACK=(GOTO BROKER) &
			/TARGET=#BROKER_CODE &
			/USING=SALES_ORDER_HEADERS(BROKER_CODE) &
			/LOV=BROKER_CODES(BROKER_CODE,CODE_DESCRIPTION) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE

	BEGIN_BLOCK BROKER_CODE_VALIDATE

		IF (#BROKER_CODE <> "")
			FIND IN BROKER_CODES &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=BROKER_CODE=#BROKER_CODE

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_22205
				GOTO BROKER
			END_IF
		END_IF
	END_BLOCK

	OUTPUT_BLOCK BROKER_DESCRIPTION /ROW=4 /COL=43 &
			/SOURCE=(BROKER_CODES(CODE_DESCRIPTION))

	BEGIN_BLOCK  /DISPLAY_ONLY LOCATION_DISPLAY

		FIND IN LOCATIONS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=LOCATION=SALES_ORDER_HEADERS(LOCATION)

		#LOCATION = SALES_ORDER_HEADERS(LOCATION)

	END_BLOCK

	INPUT_BLOCK LOCATION /ROW=5 /COL=30 &
			/PROMPT=(FIELD_PROMPT(LOCATION)) &
			/TARGET=#LOCATION &
			/USING=SALES_ORDER_HEADERS(LOCATION) &
			/LOV=LOCATIONS(LOCATION,CODE_DESCRIPTION) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE

	BEGIN_BLOCK LOCATION_VALIDATE

		IF (#LOCATION <> "")

			FIND IN LOCATIONS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=LOCATION=#LOCATION

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_22196
				GOTO LOCATION
			END_IF

		END_IF
	END_BLOCK

	OUTPUT_BLOCK CODE_DESCRIPTION /ROW=5 /COL=41 &
			/SOURCE=(LOCATIONS(CODE_DESCRIPTION))

	BEGIN_BLOCK  /DISPLAY_ONLY CUSTOMER_GROUP_DISPLAY

		FIND IN CUSTOMER_GROUPS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=CUSTOMER_GROUP=SALES_ORDER_HEADERS(SALES_ANALYSIS_GROUP)

		#SALES_ANALYSIS_GROUP = SALES_ORDER_HEADERS(SALES_ANALYSIS_GROUP)

	END_BLOCK

	INPUT_BLOCK SALES_ANALYSIS_GROUP /ROW=6 /COL=30 &
			/PROMPT=(FIELD_PROMPT(SALES_ANALYSIS_GROUP)) &
			/TARGET=#SALES_ANALYSIS_GROUP &
			/USING=SALES_ORDER_HEADERS(SALES_ANALYSIS_GROUP) &
			/LOV=CUSTOMER_GROUPS(CUSTOMER_GROUP,CODE_DESCRIPTION) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE

	BEGIN_BLOCK CUSTOMER_GROUP_VALIDATE

		IF (#SALES_ANALYSIS_GROUP <> "")

			FIND IN CUSTOMER_GROUPS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=CUSTOMER_GROUP=#SALES_ANALYSIS_GROUP

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_22217
				GOTO SALES_ANALYSIS_GROUP
			END_IF

		END_IF
	END_BLOCK

	OUTPUT_BLOCK ANALYSIS_GROUP_DESC /ROW=6 /COL=41 &
			/SOURCE=(CUSTOMER_GROUPS(CODE_DESCRIPTION))

	BEGIN_BLOCK  /DISPLAY_ONLY CREDIT_CODE_DISPLAY
		FIND IN CREDIT_TERMS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=CREDIT_TERMS_CODE=SALES_ORDER_HEADERS(CREDIT_TERMS_CODE)

		#CREDIT_TERMS_CODE = SALES_ORDER_HEADERS(CREDIT_TERMS_CODE)
	END_BLOCK

	INPUT_BLOCK CREDIT_TERMS_CODE /ROW=7 /COL=30 &
			/PROMPT=(FIELD_PROMPT(CREDIT_TERMS_CODE)) &
			/TARGET=#CREDIT_TERMS_CODE &
			/LOV=CREDIT_TERMS(CREDIT_TERMS_CODE,CODE_DESCRIPTION) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE

	BEGIN_BLOCK CREDIT_CODE_VALIDATE
		FIND IN CREDIT_TERMS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=CREDIT_TERMS_CODE=#CREDIT_TERMS_CODE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_96037
			GOTO CREDIT_TERMS_CODE
		END_IF
	END_BLOCK

	OUTPUT_BLOCK CREDIT_TERMS_DESC /ROW=7 /COL=41 &
			/SOURCE=(CREDIT_TERMS(CODE_DESCRIPTION))

	BEGIN_BLOCK  /DISPLAY_ONLY CONTACT_DISPLAY
		#CUSTOMER_CONTACT= SALES_ORDER_HEADERS(CUSTOMER_CONTACT)
	END_BLOCK

	INPUT_BLOCK CUSTOMER_CONTACT /ROW=9 /COL=30 &
			/PROMPT=(FIELD_PROMPT(CUSTOMER_CONTACT)) &
			/USING=SALES_ORDER_HEADERS(CUSTOMER_CONTACT) &
			/TARGET=  #CUSTOMER_CONTACT  &
	!Change 013
			/LOV=VOL_CUSTOMER_CONTACTS(CUSTOMER_CONTACT,CUSTOMER_NUMBER,PHONE) &
			/LOV_WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) & 
			/LOV_WITH=CONTACT_TYPE="Sales"

	!Change 013 End

	BEGIN_BLOCK  /DISPLAY_ONLY COST_CENTER_DISPLAY

		FIND IN COST_CENTERS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=SOURCE_MODULE=(PARAMETER("LOCAL_SOURCE_MODULE")) &
			/WITH=COST_CENTER=SALES_ORDER_HEADERS(COST_CENTER)

		#COST_CENTER = SALES_ORDER_HEADERS(COST_CENTER)

	END_BLOCK

	INPUT_BLOCK COST_CENTER /ROW=11 /COL=30 &
			/PROMPT=(FIELD_PROMPT(COST_CENTER)) &
			/TARGET=#COST_CENTER &
			/USING=SALES_ORDER_HEADERS(COST_CENTER) &
			/LOV=COST_CENTERS(COST_CENTER,DESCRIPTION) &
			/LOV_SORTED_BY=(COST_CENTER) &
 			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=SOURCE_MODULE=(PARAMETER("LOCAL_SOURCE_MODULE"))

	BEGIN_BLOCK COST_CENTER_VALIDATE

		IF (#COST_CENTER <> "")
			FIND IN COST_CENTERS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=SOURCE_MODULE=(PARAMETER("LOCAL_SOURCE_MODULE")) &
				/WITH=COST_CENTER=#COST_CENTER

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_00347
				GOTO COST_CENTER
			END_IF
		END_IF
	END_BLOCK

	OUTPUT_BLOCK COST_CENTER_DESC /ROW=11 /COL=34 &
			/SOURCE=(COST_CENTERS(DESCRIPTION))

	BEGIN_BLOCK  /DISPLAY_ONLY CURRENCY_DISPLAY
			#CURRENCY_RATE = SALES_ORDER_HEADERS(SYS_CURRENCY_RATE)
	END_BLOCK

	BEGIN_BLOCK CURRENCY_CODE

		DELETE ALL FROM SYS_CURRENCY_CONTROL_VT
		CLEAR_BUFFER SYS_CURRENCY_CONTROL_VT

		SYS_CURRENCY_CONTROL_VT(COMPANY_CODE)	= #COMPANY_CODE
		SYS_CURRENCY_CONTROL_VT(DIVISION)	= #DIVISION
		SYS_CURRENCY_CONTROL_VT(SOURCE_MODULE)	= PARAMETER("MODULE_SO")
		SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE)	= SALES_ORDER_HEADERS(SYS_CURRENCY_CODE)
		SYS_CURRENCY_CONTROL_VT(CODE_RATE_INPUT_FLAG)	= "B"
		SYS_CURRENCY_CONTROL_VT(CURRENCY_DATE)	= SALES_ORDER_HEADERS(ORDER_DATE)
		SYS_CURRENCY_CONTROL_VT(RATE_OVERRIDE)	= #YES
		SYS_CURRENCY_CONTROL_VT(RATE_TYPE)	= SALES_ORDER_HEADERS(SYS_RATE_TYPE)
		SYS_CURRENCY_CONTROL_VT(RATE_AUTHORITY)	= SALES_ORDER_HEADERS(SYS_RATE_AUTHORITY)
		SYS_CURRENCY_CONTROL_VT(FIRST_CURRENCY_RATE)	= SALES_ORDER_HEADERS(SYS_CURRENCY_RATE)
		ADD TO SYS_CURRENCY_CONTROL_VT
		PERFORM "GEMLB:LB_S_L_CURRENCY_RATES" (#R_STATUS, #R_MESSAGE)
		IF (#R_STATUS <> #YES)
			ERROR/WAIT #R_MESSAGE
			EXIT (%FAILURE)
		END_IF
		FIND IN SYS_CURRENCY_CONTROL_VT
		#BASE_CURRENCY_CODE	= SYS_CURRENCY_CONTROL_VT(BASE_CURRENCY_CODE)
		#RATE_AUTHORITY	= SYS_CURRENCY_CONTROL_VT(RATE_AUTHORITY)
		#RATE_TYPE	= SYS_CURRENCY_CONTROL_VT(RATE_TYPE)
		#CURRENCY_RATIO_INDIC	= SYS_CURRENCY_CONTROL_VT(CURR_RATIO_INDIC)
		#CURRENCY_FIXED	= SYS_CURRENCY_CONTROL_VT(FIXED_RATE_INDIC)
		#CURRENCY_MASK	= SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_MASK)
		#CURRENCY_DESC	= SYS_CURRENCY_CONTROL_VT(CURRENCY_CODE_DESCRIPTION)
		#CURRENCY_DECIMAL	= SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_DECIMALS)
		#CURRENCY_DATE	= SYS_CURRENCY_CONTROL_VT(TRANSACTION_DATE)

		IF (%STATUS = %FAILURE) EXIT(%FAILURE)

		OUTPUT_BLOCK		 /ROW=12 /COL=30 &
			/DOMAIN=SYS_CURRENCY_CODES &
			/PROMPT=(FIELD_PROMPT(SYS_CURRENCY_CODE)) &
			/SOURCE=(SALES_ORDER_HEADERS(SYS_CURRENCY_CODE))
	END_BLOCK

	OUTPUT_BLOCK CURRENCY_DESC /ROW=12 /COL=37 &
			/SOURCE=(#CURRENCY_DESC)

	OUTPUT_BLOCK CURRENCY_RATE /ROW=13 /COL=30 &
			/PROMPT=(MESSAGE("P_00562")) &
			/SOURCE=(#CURRENCY_RATE) &
			/USING=SYS_CURRENCY_RATES(SYS_CURRENCY_RATE) &
			/ATTRIBUTES=BOLD &
			/USE_IF=(#CURRENCY_METHOD <> "0")

	INPUT_BLOCK PRINT_ACKNOWLEDGE /ROW=14 /COL=30 &
			/PROMPT=(MESSAGE("P_93405")) &
			/TARGET=SALES_ORDER_HEADERS(SOP_PRINT_CONF_FLAG)

	INPUT_BLOCK PART_DETAIL /ROW=15 /COL=30 &
			/PROMPT=(FIELD_PROMPT(SYS_PRINT_PART_DETAIL)) &
			/SOURCE_IF=(SALES_ORDER_HEADERS(SYS_PRINT_PART_DETAIL)=""),(#NO) &
			/SOURCE=(SALES_ORDER_HEADERS(SYS_PRINT_PART_DETAIL)) &
			/TARGET=SALES_ORDER_HEADERS(SYS_PRINT_PART_DETAIL)

	BEGIN_BLOCK /DISPLAY_ONLY TP_PROMOTIONS_IN_USE
		#PROMOTIONS_IN_USE = #TP_PROMOTIONS_IN_USE
		FIND IN SALES_ORDER_LINES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE= #COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=ORDER_NUMBER=#ORDER_NUMBER &
			/WITH=STATUS_FLAG<>PARAMETER("STATUS_UPDATE")
		IF ( %STATUS = %SUCCESS )
			#ORDER_LINES_EXIST = #YES
		ELSE
			#ORDER_LINES_EXIST = #NO
		END_IF
	END_BLOCK

	BEGIN_BLOCK PRICING_METHOD

		INPUT_BLOCK /ROW=14 /COL=54 &
				/PROMPT=(FIELD_PROMPT(PRICING_METHOD)) &
				/USING=SALES_ORDER_HEADERS(PRICING_METHOD) &
				/TARGET=#PRICING_METHOD &
				/USE_IF=( #PRICING_METHOD_OPTIONAL=#YES AND #ORDER_LINES_EXIST=#NO )

	END_BLOCK

	OUTPUT_BLOCK PRICING_METHOD_OUT /ROW=14 /COL=54 &
			/PROMPT=(FIELD_PROMPT(PRICING_METHOD)) &
			/SOURCE=(#PRICING_METHOD)

	! Tax Exclusive or Tax Inclusive
	OUTPUT_BLOCK /ROW=14 /COL=56 &
		/SOURCE_IF=(#PRICING_METHOD=#TAX_INCLUSIVE),(MESSAGE("P_23079")) &
		/SOURCE_IF=(#PRICING_METHOD<>#TAX_INCLUSIVE),(MESSAGE("P_23078")) &

	IF ( #ORDER_LINES_EXIST = #NO )

		INPUT_BLOCK PROMOTION_DISCOUNTS /ROW=15 /COL=54 &
				/PROMPT=(FIELD_PROMPT(TP_PROMOTIONS_IN_USE)) &
				/USE_IF=(#SYS_TP_IN_USE = #YES AND #TP_PROMOTIONS_AVAILABLE=#YES) &
				/USING=AR_CONTROLS(TP_PROMOTIONS_IN_USE) &
				/SOURCE=(#TP_PROMOTIONS_IN_USE) &
				/TARGET=#PROMOTIONS_IN_USE

	END_IF

	OUTPUT_BLOCK PROMOTION_DISCOUNTS_FLAG /ROW=15 /COL=54 &
			/PROMPT=(FIELD_PROMPT(TP_PROMOTIONS_IN_USE)) &
			/USE_IF=(#SYS_TP_IN_USE = #YES AND #TP_PROMOTIONS_AVAILABLE<>#YES) &
			/SOURCE=(#TP_PROMOTIONS_IN_USE)

	YESNO_BLOCK CONFIRM /ROW=15 /COL=70 &
			/PROMPT=(MESSAGE("P_00149")) &
			/SOURCE=(#NO) &
			/FAILURE=(GOTO SALESPERSON)

	BEGIN_BLOCK UPDATE_FIELDS
		IF ( #ORDER_LINES_EXIST = #NO AND #TP_PROMOTIONS_AVAILABLE=#YES )
			IF ( #PROMOTIONS_IN_USE = #YES )
				#LD_IN_USE = #NO
				#TP_PROMOTIONS_IN_USE = #YES
			ELSE
				#LD_IN_USE = #LD_AVAILABLE
				#TP_PROMOTIONS_IN_USE = #NO
			END_IF
			SALES_ORDER_HEADERS(TP_PROMOTIONS_IN_USE) = #TP_PROMOTIONS_IN_USE
		END_IF
		SALES_ORDER_HEADERS(BROKER_CODE) = #BROKER_CODE
		SALES_ORDER_HEADERS(SALESPERSON_CODE) = #SALESPERSON_CODE
		SALES_ORDER_HEADERS(SALES_COMMISSION_CODE) = #SALES_COMMISSION_CODE
		SALES_ORDER_HEADERS(LOCATION) = #LOCATION
		SALES_ORDER_HEADERS(SALES_ANALYSIS_GROUP) = #SALES_ANALYSIS_GROUP
		SALES_ORDER_HEADERS(CUSTOMER_CONTACT) = #CUSTOMER_CONTACT
		SALES_ORDER_HEADERS(COST_CENTER) = #COST_CENTER
		SALES_ORDER_HEADERS(CREDIT_TERMS_CODE) = #CREDIT_TERMS_CODE
		SALES_ORDER_HEADERS(PRICING_METHOD) = #PRICING_METHOD
		PERFORM SET_PRICING_METHOD_PROMPTS
	END_BLOCK

END_FORM

FORM DATES /ROW=10 /COL=2 /HEIGHT=14 /WIDTH=78 &
	/TITLE=(MESSAGE("P_50094"))
!!! Leave form for call from ALL_OPTIONS form.

	BEGIN_BLOCK INITIALISE
		#SYS_REQUESTED_DATE  = SALES_ORDER_HEADERS(SYS_REQUESTED_DATE)
		#ORDER_DATE			  = SALES_ORDER_HEADERS(ORDER_DATE)

		DISPLAY DEFAULTS
	END_BLOCK

	INPUT_BLOCK ORDER_DATE /ROW=3 /COL=29 &
			/PROMPT=FIELD_PROMPT(ORDER_DATE) &
			/TARGET=SALES_ORDER_HEADERS(ORDER_DATE) &
			/USING=REQUIRED &
			/INPUT_MASK=(#DEFAULT_DATE_MASK)

	INPUT_BLOCK REQUESTED_DATE /ROW=4 /COL=29 &
			/PROMPT=(FIELD_PROMPT(SYS_REQUESTED_DATE)) &
			!Change 017 - Requested date = 1/1/2099 by default
			/SOURCE="1-JAN-2099" &
			!Change 017 End
			/TARGET=SALES_ORDER_HEADERS(SYS_REQUESTED_DATE) &
			/INPUT_MASK=(#DEFAULT_DATE_MASK)

	BEGIN_BLOCK CHECK_CURRENCY_DATES
		IF ((#DATE_CODE = #DUE_CODE) AND (#SYS_REQUESTED_DATE <> SALES_ORDER_HEADERS(SYS_REQUESTED_DATE)))
			IF (DAYS(#CURRENCY_DATE) = DAYS(#SYS_REQUESTED_DATE))
				#CURRENCY_DATE  = ""
				#CURRENCY_RATE  = ""
				#EFFECTIVE_DATE = SALES_ORDER_HEADERS(SYS_REQUESTED_DATE)
				PERFORM GET_NEW_CURRENCY
			END_IF
		END_IF

		IF ((#DATE_CODE <> #DUE_CODE) AND (#ORDER_DATE <> SALES_ORDER_HEADERS(ORDER_DATE)))
			IF (DAYS(#CURRENCY_DATE) = DAYS(#ORDER_DATE))
				#CURRENCY_DATE  = ""
				#CURRENCY_RATE  = ""
				#EFFECTIVE_DATE = SALES_ORDER_HEADERS(ORDER_DATE)
				PERFORM GET_NEW_CURRENCY
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK DEFAULTS
		#ORDER_DATE		= SALES_ORDER_HEADERS(ORDER_DATE)
		#SYS_REQUESTED_DATE  = SALES_ORDER_HEADERS(SYS_REQUESTED_DATE)

		IF (#SOP_REQUIRED_DATE_METHOD = #METHOD_DESPATCH)
			SALES_ORDER_HEADERS(SYS_SHIPPING_DATE) = SALES_ORDER_HEADERS(SYS_REQUESTED_DATE)
			#SYS_SHIPPING_DATE = #SYS_REQUESTED_DATE
			SALES_ORDER_HEADERS(REQUIRED_DATE) = SALES_ORDER_HEADERS(SYS_SHIPPING_DATE)
		ELSE
			SALES_ORDER_HEADERS(SYS_DELIVERY_DATE) = SALES_ORDER_HEADERS(SYS_REQUESTED_DATE)
			#SYS_DELIVERY_DATE = #SYS_REQUESTED_DATE
		END_IF
	END_BLOCK
END_FORM


PROCEDURE_FORM DATE_CALCULATIONS

	BEGIN_BLOCK DEFAULTS
		#ORDER_DATE		= SALES_ORDER_HEADERS(ORDER_DATE)
		#SYS_REQUESTED_DATE	= SALES_ORDER_HEADERS(SYS_REQUESTED_DATE)

		IF (#SOP_REQUIRED_DATE_METHOD = #METHOD_DESPATCH)
			! Requested Date is Shipping Date
			SALES_ORDER_HEADERS(SYS_SHIPPING_DATE) = SALES_ORDER_HEADERS(SYS_REQUESTED_DATE)
			#SYS_SHIPPING_DATE = #SYS_REQUESTED_DATE
			SALES_ORDER_HEADERS(REQUIRED_DATE) = SALES_ORDER_HEADERS(SYS_SHIPPING_DATE)
		ELSE
			! Requested Date is Receipt Date
			SALES_ORDER_HEADERS(SYS_DELIVERY_DATE) = SALES_ORDER_HEADERS(SYS_REQUESTED_DATE)
			#SYS_DELIVERY_DATE = #SYS_REQUESTED_DATE
		END_IF
	END_BLOCK

END_FORM


FORM DEFAULT_ADDRESSES /ROW=6 /COL=2 /HEIGHT=18 /WIDTH=78 &
	/TITLE=(MESSAGE("P_24086"))


	BEGIN_BLOCK DEFAULTS
		! Display defaults not done here so that the different
		! address codes and masking of phone numbers are correct.
		! BUT it means initial screen display must be coded and
		! header fields already populated.

		#MODIFYING = PARAMETER("LANGUAGE_NO")

		IF (SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE) <> "")

			OUTPUT_BLOCK /ROW=2 /COL=11 &
				/PROMPT=(MESSAGE("P_12241")) &
				/SOURCE=SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)

			FIND IN CUSTOMER_ADDRESSES &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
				/WITH=ADDRESS_CODE=SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)
		! this find does not have a /lock=none on purpose!  This is
		! because you can add a customer address using the F17 key
		! and you need to be able to see the address within the same
		! transaction.  PLEASE do not add a /lock=none to these finds.

			OUTPUT_BLOCK CUST_NAME_1 /ROW=3 /COL=10 &
				/PROMPT=(FIELD_SHORT_PROMPT(CUSTOMER_NAME)) &
				/SOURCE=(CUSTOMER_ADDRESSES(CUSTOMER_NAME))

			FIND IN SYS_COUNTRIES &
				/LOCK=NONE &
				/WITH=SYS_COUNTRY=CUSTOMER_ADDRESSES(SYS_COUNTRY)

			#PHONE_MASK = SYS_COUNTRIES(SYS_PHONE_MASK)

			PERFORM "GEMLB:LB_ADDRESSES" (&
				"D", &
				(SYS_COUNTRIES(SYS_COUNTRY)), &
				"CUSTOMER_ADDRESSES", &
				"9", &
				"11", &
				"", &
				"", &
				"", &
				"", &
				"", &
				#R1, &
				#R2, &
				#R3, &
				#R4, &
				#R5)

		#INVOICE_ADDRESS_CODE = SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)

	END_BLOCK

	OUTPUT_BLOCK DEF_PHONE /ROW=10 /COL=9 /LEN=21 &
			/PROMPT=(FIELD_PROMPT(PHONE)) &
			/SOURCE=(CUSTOMER_ADDRESSES(PHONE)) &
			/OUTPUT_MASK=(#PHONE_MASK)

	OUTPUT_BLOCK DEF_EMAIL /ROW=11 /COL=9 /LEN=30 &
			/PROMPT=(FIELD_SHORT_PROMPT(EMAIL)) &
			/SOURCE=(CUSTOMER_ADDRESSES(EMAIL))

	OUTPUT_BLOCK DEF_FAX_NUMBER /ROW=12 /COL=9 &
			/PROMPT=(FIELD_PROMPT(FAX_NUMBER)) &
			/SOURCE=(CUSTOMER_ADDRESSES(FAX_NUMBER)) &
			/OUTPUT_MASK=(#PHONE_MASK)

	BEGIN_BLOCK DISP_ADDR
		END_IF

		IF (SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE) <> "")
			OUTPUT_BLOCK /ROW=2 /COL=47 &
				/PROMPT=(MESSAGE("P_00318")) &
				/SOURCE=SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)

			FIND IN CUSTOMER_ADDRESSES &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
				/WITH=ADDRESS_CODE=SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
		! this find does not have a /lock=none on purpose!  This is
		! because you can add a customer address using the F17 key
		! and you need to be able to see the address within the same
		! transaction.  PLEASE do not add a /lock=none to these finds.

			OUTPUT_BLOCK CUST_NAME_2 /ROW=3 /COL=47 &
				/PROMPT=(FIELD_SHORT_PROMPT(CUSTOMER_NAME)) &
				/SOURCE=(CUSTOMER_ADDRESSES(CUSTOMER_NAME))

			FIND IN SYS_COUNTRIES &
				/LOCK=NONE &
				/WITH=SYS_COUNTRY=CUSTOMER_ADDRESSES(SYS_COUNTRY)

			#PHONE_MASK_1 = SYS_COUNTRIES(SYS_PHONE_MASK)

			PERFORM "GEMLB:LB_ADDRESSES" (&
				"D", &
				(SYS_COUNTRIES(SYS_COUNTRY)), &
				"CUSTOMER_ADDRESSES", &
				"9", &
				"48", &
				"", &
				"", &
				"", &
				"", &
				"", &
				#R1, &
				#R2, &
				#R3, &
				#R4, &
				#R5)

			#DELIVERY_ADDRESS_CODE = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
	END_BLOCK

	OUTPUT_BLOCK DEF_PHONE_1 /ROW=10 /COL=47 /LEN=21 &
			/PROMPT=(FIELD_PROMPT(PHONE)) &
			/SOURCE=(CUSTOMER_ADDRESSES(PHONE)) &
			/OUTPUT_MASK=(#PHONE_MASK_1)

	OUTPUT_BLOCK DEF_EMAIL_1 /ROW=11 /COL=47 /LEN=30 &
			/PROMPT=(FIELD_SHORT_PROMPT(EMAIL)) &
			/SOURCE=(CUSTOMER_ADDRESSES(EMAIL))

	OUTPUT_BLOCK DEF_FAX_NUMBER_1 /ROW=12 /COL=47 &
			/PROMPT=(FIELD_PROMPT(FAX_NUMBER)) &
			/SOURCE=(CUSTOMER_ADDRESSES(FAX_NUMBER)) &
			/OUTPUT_MASK=(#PHONE_MASK_1)

	OUTPUT_BLOCK DISP_DELIVERY_INSTR /ROW=13 /COL=28 &
			/PROMPT=(FIELD_PROMPT(DELIVERY_INSTRUCTIONS)) &
			/SOURCE=(SALES_ORDER_HEADERS(DELIVERY_INSTRUCTIONS))

	OUTPUT_BLOCK DISP_SHIP_METHOD /ROW=14 /COL=28 &
			/PROMPT=(FIELD_PROMPT(SHIP_METHOD)) &
			/SOURCE=(SALES_ORDER_HEADERS(SHIP_METHOD))

	BEGIN_BLOCK SETUP_FREIGHT_DEFAULTS
		END_IF
		! delivery address code non-blank

		IF (SALES_ORDER_HEADERS(SYS_FREIGHT_MODE) <> "")
			FIND IN SYS_FREIGHT_MODES &
				/LOCK=NONE &
				/WITH=COMPANY_CODE = #COMPANY_CODE &
				/WITH=SYS_FREIGHT_MODE = SALES_ORDER_HEADERS(SYS_FREIGHT_MODE)
		END_IF

		IF (SALES_ORDER_HEADERS(SOP_SHIPPING_TERMS_CODE) <> "")
			FIND IN SOP_SHIPPING_TERMS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE = SALES_ORDER_HEADERS(COMPANY_CODE) &
				/WITH=SOP_SHIPPING_TERMS_CODE = SALES_ORDER_HEADERS(SOP_SHIPPING_TERMS_CODE)
		END_IF
	END_BLOCK

	OUTPUT_BLOCK DISP_SYS_FREIGHT_MODE /ROW=15 /COL=28 &
			/PROMPT=(FIELD_PROMPT(SYS_FREIGHT_MODE)) &
			/SOURCE=(SALES_ORDER_HEADERS(SYS_FREIGHT_MODE))
			!Change 006 
			!/USE_IF=((#AR_FREIGHT_IN_USE = #YES) &
			!	OR (#SYS_TM_IN_USE = #YES))
			!Change 006 End

	OUTPUT_BLOCK DISP_SYS_FREIGHT_MODE_DESC /ROW=15 /COL=38 &
			/SOURCE=(SYS_FREIGHT_MODES(DESCRIPTION))
			!Change 006 
			!/USE_IF=((#AR_FREIGHT_IN_USE = #YES) &
			!	OR (#SYS_TM_IN_USE = #YES))
			!Change 006 End

	OUTPUT_BLOCK DISP_TM_AR_SHIPPING_TERMS /ROW=16 /COL=28 &
			/PROMPT=(FIELD_SHORT_PROMPT(SHIPPING_TERMS_CODE)) &
			/SOURCE=(SALES_ORDER_HEADERS(SOP_SHIPPING_TERMS_CODE))
			!Change 006 
			!/USE_IF=(#AR_FREIGHT_IN_USE = #YES)
			!!Change 006  End

	OUTPUT_BLOCK DISP_TM_AR_SHIPPING_TERMS_DESC /ROW=16 /COL=38 &
			/SOURCE=(SOP_SHIPPING_TERMS(DESCRIPTION))
			!Change 006 
			!/USE_IF=(#AR_FREIGHT_IN_USE = #YES)
			!Change 006  End

	BEGIN_BLOCK SWITCH
		GOTO CONFIRM
	END_BLOCK

	BEGIN_BLOCK INVOICE_ADDRESS_CODE

		#MODIFYING = PARAMETER("LANGUAGE_YES")

		INPUT_BLOCK  /ROW=2 /COL=11 &
			/PROMPT=(MESSAGE("P_12241")) &
			/TARGET=#INVOICE_ADDRESS_CODE &
			/USING=SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE) &
			/BACK=(GOTO CONFIRM) &
			/EXIT=(GOTO CONFIRM) &
			/LOV=CUSTOMER_ADDRESSES(ADDRESS_CODE,CUSTOMER_NAME,SYS_POSTAL_CODE) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=DIVISION=#DIVISION &
			/LOV_WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/LOV_WITH=ACTIVATION_STATUS = (PARAMETER("STATUS_ACTIVE")) &
			/USER_KEY1=(PERFORM "GEMSYS:SYS_M_ADD_CUSTOMER_ADDRESSES" &
					(#DIVISION,#CUSTOMER_NUMBER,#INVOICE_ADDRESS_CODE,#TAX_FLAG))
	END_BLOCK


	BEGIN_BLOCK VALIDATE_INVOICE
		#OLD_DELIVERY_ADDRESS = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)

		FIND IN CUSTOMER_ADDRESSES &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/WITH=ADDRESS_CODE=#INVOICE_ADDRESS_CODE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_22178
			GOTO INVOICE_ADDRESS_CODE
		END_IF

		IF (CUSTOMER_ADDRESSES(ACTIVATION_STATUS) <> (PARAMETER("STATUS_ACTIVE")))
			MESSAGE/IDENTIFIER/BELL/WAIT P_02199
			GOTO INVOICE_ADDRESS_CODE
		END_IF

		FIND IN SYS_COUNTRIES &
			/LOCK=NONE &
			/WITH=SYS_COUNTRY=CUSTOMER_ADDRESSES(SYS_COUNTRY)

		#PHONE_MASK = SYS_COUNTRIES(SYS_PHONE_MASK)
		SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE) = #INVOICE_ADDRESS_CODE

	END_BLOCK

	OUTPUT_BLOCK CUSTOMER_NAME /ROW=3 /COL=10 &
			/PROMPT=(FIELD_SHORT_PROMPT(CUSTOMER_NAME)) &
			/SOURCE=(CUSTOMER_ADDRESSES(CUSTOMER_NAME))

	BEGIN_BLOCK DISPLAY_ADDRESS
		PERFORM "GEMLB:LB_ADDRESSES" (&
			"D", &
			(SYS_COUNTRIES(SYS_COUNTRY)), &
			"CUSTOMER_ADDRESSES", &
			"9", &
			"11", &
			"", &
			"", &
			"", &
			"", &
			"", &
			#R1, &
			#R2, &
			#R3, &
			#R4, &
			#R5)
	END_BLOCK

	OUTPUT_BLOCK PHONE /ROW=10 /COL=9 /LEN=21 &
			/PROMPT=(FIELD_PROMPT(PHONE)) &
			/SOURCE=(CUSTOMER_ADDRESSES(PHONE)) &
			/OUTPUT_MASK=(#PHONE_MASK)

	OUTPUT_BLOCK EMAIL /ROW=11 /COL=9 /LEN=30 &
			/PROMPT=(FIELD_SHORT_PROMPT(EMAIL)) &
			/SOURCE=(CUSTOMER_ADDRESSES(EMAIL))

	OUTPUT_BLOCK FAX_NUMBER /ROW=12 /COL=9 &
			/PROMPT=(FIELD_PROMPT(FAX_NUMBER)) &
			/SOURCE=(CUSTOMER_ADDRESSES(FAX_NUMBER)) &
			/OUTPUT_MASK=(#PHONE_MASK)

	BEGIN_BLOCK  /DISPLAY_ONLY DELIVERY
		CLEAR_BUFFER CUSTOMER_ADDRESSES

		IF (SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE) <> "")
			FIND IN CUSTOMER_ADDRESSES &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
				/WITH=ADDRESS_CODE=#ADDRESS_CODE

			FIND IN SYS_COUNTRIES &
				/LOCK=NONE &
				/WITH=SYS_COUNTRY=CUSTOMER_ADDRESSES(SYS_COUNTRY)

			#PHONE_MASK_1 = SYS_COUNTRIES(SYS_PHONE_MASK)
		END_IF
	END_BLOCK

	BEGIN_BLOCK DELIVERY_ADDRESS_CODE
		#OLD_DELIVERY_ADDRESS_CODE = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)

		INPUT_BLOCK  /ROW=2 /COL=47 &
			/PROMPT=(MESSAGE("P_00318")) &
			/TARGET=#DELIVERY_ADDRESS_CODE &
			/USING=SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE) &
			/EXIT=(GOTO CONFIRM) &
			/LOV=CUSTOMER_ADDRESSES(ADDRESS_CODE,CUSTOMER_NAME,SYS_POSTAL_CODE) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=DIVISION=#DIVISION &
			/LOV_WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/LOV_WITH=ACTIVATION_STATUS = (PARAMETER("STATUS_ACTIVE")) &
			/USER_KEY1=(PERFORM "GEMSYS:SYS_M_ADD_CUSTOMER_ADDRESSES" &
				(#DIVISION,#CUSTOMER_NUMBER,#DELIVERY_ADDRESS_CODE,#TAX_FLAG))
	END_BLOCK

	BEGIN_BLOCK VALIDATE_DELIVERY_ADDRESS
		CLEAR_BUFFER CUSTOMER_ADDRESSES

		FIND IN CUSTOMER_ADDRESSES &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/WITH=ADDRESS_CODE=#DELIVERY_ADDRESS_CODE

		! This find does not have a /lock=none on purpose!  This is
		! because you can add a customer address using the F17 key
		! and you need to be able to see the address within the same
		! transaction.  PLEASE do not add a /lock=none to these finds.

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_22178
			GOTO DELIVERY_ADDRESS_CODE
		END_IF

		IF (CUSTOMER_ADDRESSES(ACTIVATION_STATUS) <> (PARAMETER("STATUS_ACTIVE")))
			MESSAGE/IDENTIFIER/BELL/WAIT P_02199
			GOTO DELIVERY_ADDRESS_CODE
		END_IF

		SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE) = #DELIVERY_ADDRESS_CODE 

        PERFORM "GEMLB:LB_L_GET_PRICING_METHOD" ( &
					(#COMPANY_CODE), &
					(PARAMETER("MODULE_SO")), &
					(#DIVISION), &
					(SALES_ORDER_HEADERS(CUSTOMER_NUMBER)), &
					(""), &
					(SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)), &
					#ERROR_OCCURRED, &
					#ERROR_MESSAGE, &
					#TEST_PRICING_METHOD )

		IF ( #ERROR_OCCURRED )
			ERROR/TEXT_ONLY/BELL #ERROR_MESSAGE
			GOTO DELIVERY_ADDRESS_CODE
		END_IF

		IF ( #TEST_PRICING_METHOD <> #PRICING_METHOD )
			! Only change flag if no lines exist
			IF ( #ORDER_LINES_EXIST = #NO )
				#PRICING_METHOD = #TEST_PRICING_METHOD
				SALES_ORDER_HEADERS(PRICING_METHOD) = #PRICING_METHOD
				PERFORM SET_PRICING_METHOD_PROMPTS
			ELSE
				! Cannot change Pricing Method if Transaction Lines exist
				MESSAGE/IDENTIFIER/BELL/WAIT P_23207
			END_IF
		END_IF

		FIND IN SALESPERSONS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=SALESPERSON_CODE=CUSTOMER_ADDRESSES(SALESPERSON_CODE)

		IF ((#MODIFYING <> PARAMETER("LANGUAGE_YES")) OR &
			((#MODIFYING = PARAMETER("LANGUAGE_YES")) AND &
			(#OLD_DELIVERY_ADDRESS_CODE <> #DELIVERY_ADDRESS_CODE)))

			SALES_ORDER_HEADERS(SALESPERSON_CODE)= CUSTOMER_ADDRESSES(SALESPERSON_CODE)
			SALES_ORDER_HEADERS(SALES_COMMISSION_CODE)= SALESPERSONS(SALES_COMMISSION_CODE)
			SALES_ORDER_HEADERS(LOCATION)		= CUSTOMER_ADDRESSES(LOCATION)
			SALES_ORDER_HEADERS(SALES_ANALYSIS_GROUP) = CUSTOMER_ADDRESSES(CUSTOMER_GROUP)
		END_IF

		IF (CUSTOMER_ADDRESSES(PRICE_CODE) <> "")
			#ADDR_PRICE_CODE = CUSTOMER_ADDRESSES(PRICE_CODE)
			#PRICE_CODE		   = CUSTOMER_ADDRESSES(PRICE_CODE)
		ELSE
			#ADDR_PRICE_CODE = #CUST_PRICE_CODE
			#PRICE_CODE		   = #CUST_PRICE_CODE
		END_IF

		PERFORM GET_ADDR_TAX_VARS

		#DEF_BOD_CODE		= CUSTOMER_ADDRESSES(SYS_BOD_CODE)

		FIND IN SYS_COUNTRIES &
			/LOCK=NONE &
			/WITH=SYS_COUNTRY=CUSTOMER_ADDRESSES(SYS_COUNTRY)

		#PHONE_MASK_1 = SYS_COUNTRIES(SYS_PHONE_MASK)

		IF (SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE) <> #OLD_DELIVERY_ADDRESS)
			SALES_ORDER_HEADERS(DELIVERY_INSTRUCTIONS) = CUSTOMER_ADDRESSES(DELIVERY_INSTRUCTIONS)
			SALES_ORDER_HEADERS(SHIP_METHOD) = CUSTOMER_ADDRESSES(SHIP_METHOD)

			!Change 006 
			!IF (#AR_FREIGHT_IN_USE = #YES)
			!Change 006 End
				SALES_ORDER_HEADERS(SYS_FREIGHT_CONTRACT_NUMBER) = #CUST_FREIGHT_CONTRACT
				IF (SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE) <> "")
					IF (CUSTOMER_ADDRESSES(SYS_FREIGHT_CONTRACT_NUMBER) <> "")
						SALES_ORDER_HEADERS(SYS_FREIGHT_CONTRACT_NUMBER) = CUSTOMER_ADDRESSES(SYS_FREIGHT_CONTRACT_NUMBER)
					END_IF
				END_IF
			!Change 006 
			!END_IF
			!Change 006 End
			
			!Change 006 
			!IF ((#AR_FREIGHT_IN_USE = #YES) &
			!OR  (#SYS_TM_IN_USE = #YES))
			!Change 006  End
				SALES_ORDER_HEADERS(SYS_FREIGHT_MODE) = #CUST_FREIGHT_MODE
				IF (SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE) <> "")
					IF (CUSTOMER_ADDRESSES(SYS_FREIGHT_MODE) <> "")
						SALES_ORDER_HEADERS(SYS_FREIGHT_MODE) = CUSTOMER_ADDRESSES(SYS_FREIGHT_MODE)
					END_IF
				END_IF
			!Change 006 
			!END_IF
			!Change 006 End - End AR Freight in use

			#DEF_ORDER_COUNTRY = CUSTOMER_ADDRESSES(SYS_COUNTRY)
			#DEF_ORDER_DIST_ZONE = CUSTOMER_ADDRESSES(SYS_DISTRIBUTION_ZONE)

			PERFORM GET_DIST_ZONE_DETAILS (#DEF_ORDER_COUNTRY, #DEF_ORDER_DIST_ZONE)
			IF ((#DEF_BOD_CODE = "") AND (#ADDR_DIST_BOD_CODE <> ""))
				#DEF_BOD_CODE = #ADDR_DIST_BOD_CODE
			END_IF
		END_IF
		! End changed delivery address code
	END_BLOCK

	BEGIN_BLOCK FINAL_DESTINATION_ADDRESS 
		IF ( CUSTOMER_ADDRESSES(SYS_FINAL_DESTINATION) = "1" ) 
			#HEADER_DELIVERY_ADDR_FLAG                 = #YES
			SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE)	= SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
			IF ( CUSTOMER_ADDRESSES(SYS_STATE) <> "" ) 
				#HEADER_STATE_PROVINCE = CUSTOMER_ADDRESSES(SYS_STATE)
			ELSE
				#HEADER_STATE_PROVINCE = CUSTOMER_ADDRESSES(SYS_PROVINCE)	
			END_IF
			#HEADER_COUNTRY_CODE					= CUSTOMER_ADDRESSES(SYS_COUNTRY)
			#HEADER_CITY                            = CUSTOMER_ADDRESSES(SYS_CITY)
		ELSE
			#HEADER_DELIVERY_ADDR_FLAG              = #NO			 
			#HEADER_STATE_PROVINCE                  = ""	
			#HEADER_COUNTRY_CODE					= ""
			#HEADER_CITY                            = ""
			
			IF ( #OLD_DELIVERY_ADDRESS_CODE <> #DELIVERY_ADDRESS_CODE ) 
				MESSAGE/IDENTIFIER/BELL P_37119
			END_IF 
			
			PERFORM FINAL_ADDRESSES		
		END_IF	
	END_BLOCK

	BEGIN_BLOCK DISPLAY_DELIVERY_ADDRESS
		FIND IN CUSTOMER_ADDRESSES &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/WITH=ADDRESS_CODE=SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
		
		FIND IN SYS_COUNTRIES &
			/LOCK=NONE &
			/WITH=SYS_COUNTRY=CUSTOMER_ADDRESSES(SYS_COUNTRY)
		
		PERFORM "GEMLB:LB_ADDRESSES" (&
			"D", &
			(SYS_COUNTRIES(SYS_COUNTRY)), &
			"CUSTOMER_ADDRESSES", &
			"9", &
			"48", &
			"", &
			"", &
			"", &
			"", &
			"", &
			#R1, &
			#R2, &
			#R3, &
			#R4, &
			#R5)
	END_BLOCK

	OUTPUT_BLOCK CUSTOMER_NAME_1 /ROW=3 /COL=47 &
		/PROMPT=(FIELD_SHORT_PROMPT(CUSTOMER_NAME)) &
		/SOURCE=(CUSTOMER_ADDRESSES(CUSTOMER_NAME))
	
	OUTPUT_BLOCK PHONE_1 /ROW=10 /COL=47 /LEN=21 &
			/PROMPT=(FIELD_PROMPT(PHONE)) &
			/SOURCE=(CUSTOMER_ADDRESSES(PHONE)) &
			/OUTPUT_MASK=(#PHONE_MASK_1)

	OUTPUT_BLOCK EMAIL_1 /ROW=11 /COL=47 /LEN=30 &
			/PROMPT=(FIELD_SHORT_PROMPT(EMAIL)) &
			/SOURCE=(CUSTOMER_ADDRESSES(EMAIL))

	OUTPUT_BLOCK FAX_NUMBER_1 /ROW=12 /COL=47 &
			/PROMPT=(FIELD_PROMPT(FAX_NUMBER)) &
			/SOURCE=(CUSTOMER_ADDRESSES(FAX_NUMBER)) &
			/OUTPUT_MASK=(#PHONE_MASK_1)

	OUTPUT_BLOCK DELIVERY_INSTR_OUT /ROW=13 /COL=28 &
			/PROMPT=(FIELD_PROMPT(DELIVERY_INSTRUCTIONS)) &
			/SOURCE=(SALES_ORDER_HEADERS(DELIVERY_INSTRUCTIONS))

	OUTPUT_BLOCK SHIP_METHOD_OUT /ROW=14 /COL=28 &
			/PROMPT=(FIELD_PROMPT(SHIP_METHOD)) &
			/SOURCE=(SALES_ORDER_HEADERS(SHIP_METHOD))

	OUTPUT_BLOCK SHIPPING_TERMS_OUT /ROW=16 /COL=28 &
			/PROMPT=(FIELD_SHORT_PROMPT(SHIPPING_TERMS_CODE)) &
			/SOURCE=(SALES_ORDER_HEADERS(SOP_SHIPPING_TERMS_CODE)) &
			/USE_IF=((#AR_FREIGHT_IN_USE = #YES) &
				OR (#SYS_TM_IN_USE = #YES))

	OUTPUT_BLOCK SHIPPING_TERMS_DESC_OUT /ROW=16 /COL=38 &
			/SOURCE=(SOP_SHIPPING_TERMS(DESCRIPTION)) &
			/USE_IF=((#AR_FREIGHT_IN_USE = #YES) &
				OR (#SYS_TM_IN_USE = #YES))

	INPUT_BLOCK DELIVERY_INSTRUCTIONS /ROW=13 /COL=28 &
			/PROMPT=(FIELD_PROMPT(DELIVERY_INSTRUCTIONS)) &
			/TARGET=SALES_ORDER_HEADERS(DELIVERY_INSTRUCTIONS)

	INPUT_BLOCK SHIP_METHOD /ROW=14 /COL=28 &
			/PROMPT=(FIELD_PROMPT(SHIP_METHOD)) &
			/TARGET=SALES_ORDER_HEADERS(SHIP_METHOD)

	BEGIN_BLOCK /DISPLAY_ONLY FREIGHT_MODE_DISP
		!Change 006 
		!IF ((#AR_FREIGHT_IN_USE = #YES) &
		!OR (#SYS_TM_IN_USE = #YES))
		!Change 006 End
			FIND IN SYS_FREIGHT_MODES &
				/LOCK=NONE &
				/WITH=COMPANY_CODE = #COMPANY_CODE &
				/WITH=SYS_FREIGHT_MODE = SALES_ORDER_HEADERS(SYS_FREIGHT_MODE)
		!Change 006
		!END_IF
		!Change 006 End
	END_BLOCK

	INPUT_BLOCK FREIGHT_MODE /ROW=15 /COL=28 &
			/PROMPT=(FIELD_PROMPT(SYS_FREIGHT_MODE)) &
			/SOURCE=(SALES_ORDER_HEADERS(SYS_FREIGHT_MODE)) &
			/TARGET=SALES_ORDER_HEADERS(SYS_FREIGHT_MODE) &
			/LOV=SYS_FREIGHT_MODES(SYS_FREIGHT_MODE,DESCRIPTION) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			!Change 006 
			!/USE_IF=((#AR_FREIGHT_IN_USE = #YES) &
			!	OR (#SYS_TM_IN_USE = #YES))
			!Change 006 End

	BEGIN_BLOCK VALIDATE_FREIGHT_MODE
		!Change 006 
		!IF ((#AR_FREIGHT_IN_USE = #YES) OR (#SYS_TM_IN_USE = #YES))
		!Change 006 End

			IF ((SALES_ORDER_HEADERS(SYS_FREIGHT_MODE) = "") &
			AND (#AR_FREIGHT_IN_USE = #YES))
				MESSAGE/IDENTIFIER/BELL/WAIT P_93386
			END_IF

			IF (SALES_ORDER_HEADERS(SYS_FREIGHT_MODE) <> "")
				FIND IN SYS_FREIGHT_MODES &
					/LOCK=NONE &
					/WITH=COMPANY_CODE = #COMPANY_CODE &
					/WITH=SYS_FREIGHT_MODE = SALES_ORDER_HEADERS(SYS_FREIGHT_MODE)

				IF (%STATUS = %FAILURE)
					MESSAGE/IDENTIFIER/BELL/WAIT P_93074
					GOTO FREIGHT_MODE
				END_IF
			END_IF
		!Change 006 
		!END_IF
		!Change 006 End
	END_BLOCK

	BEGIN_BLOCK SHIPPING_TERMS_VARIABLE
		IF ((#AR_FREIGHT_IN_USE = #YES) OR (#SYS_TM_IN_USE = #YES))
			#SOP_SHIPPING_TERMS_CODE = SALES_ORDER_HEADERS(SOP_SHIPPING_TERMS_CODE)
		END_IF
	END_BLOCK

	OUTPUT_BLOCK DISP_FREIGHT_MODE_DESC /ROW=15 /COL=38 &
			/SOURCE=(SYS_FREIGHT_MODES(DESCRIPTION))
			!Change 006 
			!/USE_IF=((#AR_FREIGHT_IN_USE = #YES) &
			!	OR (#SYS_TM_IN_USE = #YES))
			!Change 006 End
			
	INPUT_BLOCK TM_AR_SHIPPING_TERMS /ROW=16 /COL=28 &
			/PROMPT=(FIELD_SHORT_PROMPT(SHIPPING_TERMS_CODE)) &
! Emm 006 additional
! Emm 006 additional			/TARGET=#SOP_SHIPPING_TERMS_CODE &
			/TARGET=SALES_ORDER_HEADERS(SOP_SHIPPING_TERMS_CODE) &
			/LOV=SOP_SHIPPING_TERMS(SOP_SHIPPING_TERMS_CODE,DESCRIPTION,SOP_FREIGHT_INCLUSIVE) &
			/LOV_WITH=COMPANY_CODE = SALES_ORDER_HEADERS(COMPANY_CODE)
			!Change 006 
			!/USE_IF=((#AR_FREIGHT_IN_USE = #YES) &
			!	OR (#SYS_TM_IN_USE = #YES))
			!Change 006 End
	
	
	BEGIN_BLOCK VALIDATE_SHIPPING_TERMS

		!Change 006 
		!IF ((#AR_FREIGHT_IN_USE = #YES) OR (#SYS_TM_IN_USE = #YES))
		!Change 006 End
			
! Emm 006 additional			IF (#SOP_SHIPPING_TERMS_CODE = "")
			IF (SALES_ORDER_HEADERS(SOP_SHIPPING_TERMS_CODE) = "")
				MESSAGE/IDENTIFIER/BELL/WAIT P_93385
				GOTO TM_AR_SHIPPING_TERMS
			END_IF

			FIND IN SOP_SHIPPING_TERMS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE = SALES_ORDER_HEADERS(COMPANY_CODE) &
! Emm 006 additional				/WITH=SOP_SHIPPING_TERMS_CODE = #SOP_SHIPPING_TERMS_CODE 
				/WITH=SOP_SHIPPING_TERMS_CODE = SALES_ORDER_HEADERS(SOP_SHIPPING_TERMS_CODE)

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_00835
				GOTO TM_AR_SHIPPING_TERMS
			ELSE
! Emm 006 additional				SALES_ORDER_HEADERS(SOP_SHIPPING_TERMS_CODE) = #SOP_SHIPPING_TERMS_CODE
			END_IF

			#DEF_CUST_PAYS_FREIGHT = SOP_SHIPPING_TERMS(SOP_FREIGHT_INCLUSIVE)
		!Change 006 
		!END_IF
		!Change 006 End
	END_BLOCK

	!Change 006 - need to set the freight and shipping terms variables now
	BEGIN_BLOCK SET_FREIGHT_AND_SHIPPING_TERMS
		#DEF_FREIGHT_MODE=SALES_ORDER_HEADERS(SYS_FREIGHT_MODE)
		#DEF_SHIP_TERMS=SALES_ORDER_HEADERS(SOP_SHIPPING_TERMS_CODE)
	END_BLOCK
	!Change 006 End

	!Change 018
		IF (#DEF_SHIP_TERMS="3RDFTCOL")
			PERFORM VOL_GET_FRT_BILL_ADDRESS(#ADDRESS_CODE)
			IF (%STATUS=%SUCCESS)
				SALES_ORDER_HEADERS(VOL_3RD_PARTY_FREIGHT_BILL)=#ADDRESS_CODE
			ELSE
				ERROR /TEXT_ONLY "You must choose a 3rd party billing address to use this freight mode."
				GOTO TM_AR_SHIPPING_TERMS
			END_IF
		END_IF
	!Change 018 End

	OUTPUT_BLOCK TM_AR_SHIPPING_TERMS_DESC /ROW=16 /COL=38 &
			/SOURCE=(SOP_SHIPPING_TERMS(DESCRIPTION)) &
			!Change 006 
			!/USE_IF=((#AR_FREIGHT_IN_USE = #YES) &
			!	OR (#SYS_TM_IN_USE = #YES))
			!Change 006 End
			
	YESNO_BLOCK CONFIRM /ROW=17 /COL=42 &
			/PROMPT=(MESSAGE("P_00149")) &
			/BACK=(GOTO CONFIRM) &
			/EXIT=(GOTO CONFIRM) &
			/FAILURE=(GOTO INVOICE_ADDRESS_CODE)

	BEGIN_BLOCK CHECK_ADDRESS
		#ADDRESS_CODE = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)

		IF (#OLD_DELIVERY_ADDRESS_CODE <> #DELIVERY_ADDRESS_CODE &
		AND #MODIFYING = PARAMETER("LANGUAGE_YES"))
			PERFORM LOAD_CODES_FROM_ADDRESSES
		END_IF

		IF (CUSTOMER_ADDRESSES(PRICE_CODE) <> "")
			#ADDR_PRICE_CODE = CUSTOMER_ADDRESSES(PRICE_CODE)
			#PRICE_CODE		   = CUSTOMER_ADDRESSES(PRICE_CODE)
		ELSE
			#ADDR_PRICE_CODE = #CUST_PRICE_CODE
			#PRICE_CODE		   = #CUST_PRICE_CODE
		END_IF

		IF (#OLD_DELIVERY_ADDRESS <> SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE))
			MESSAGE/IDENTIFIER/BELL/WAIT P_02050

			IF (#COMPANY_EC_REPORT_TYPE <> "")
				PERFORM GET_CUSTOMER_STATE

				IF (#EC_REPORT_TYPE <> "")
					#DEF_EC_TRANSACTION_TYPE = CUSTOMER_ADDRESSES(SYS_EC_TRANSACTION_TYPE)
					#DEF_EC_MODE_TRANSPORT   = CUSTOMER_ADDRESSES(SYS_EC_MODE_OF_TRANSPORT)
					#DEF_EC_DELIVERY_TERMS   = CUSTOMER_ADDRESSES(SYS_EC_DELIVERY_TERMS)
					#DEF_EC_REPORT_TYPE      = #EC_REPORT_TYPE
					#DEF_EC_STAT_FACTOR = CUSTOMER_ADDRESSES(SYS_EC_FACTOR)
				END_IF
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK CHECK_AR_FREIGHT_SETTING
		!Change 006 
		!IF (#AR_FREIGHT_IN_USE = #YES)
		!	IF ((SALES_ORDER_HEADERS(SYS_FREIGHT_CONTRACT_NUMBER) = "") &
		!	OR  (SALES_ORDER_HEADERS(SYS_FREIGHT_MODE) = ""))
				! AR Freight cannot be used if either
				! the contract number or freight mode
				! are blank.
		!		MESSAGE/IDENTIFIER/BELL/WAIT P_93386
		!	END_IF
		!END_IF
		!Change 006 End
	END_BLOCK

END_FORM


FORM FINAL_ADDRESSES /ROW=12 /COL=2 /HEIGHT=12 /WIDTH=78 &
	/TITLE=(MESSAGE("P_37126")) 
	
	BEGIN_BLOCK DEFAULTS

		OUTPUT_BLOCK FINAL_ADDRESS_O /ROW=2 /COL=16 &
				/PROMPT=FIELD_SHORT_PROMPT(FINAL_ADDRESS_CODE) &
				/SOURCE=SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE)

		FIND IN CUSTOMER_ADDRESSES &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
				/WITH=ADDRESS_CODE=SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE)

		OUTPUT_BLOCK CUST_NAME_1 /ROW=3 /COL=16 &
				/PROMPT=(FIELD_SHORT_PROMPT(CUSTOMER_NAME)) &
				/SOURCE=(CUSTOMER_ADDRESSES(CUSTOMER_NAME))

		FIND IN SYS_COUNTRIES &
				/LOCK=NONE &
				/WITH=SYS_COUNTRY=CUSTOMER_ADDRESSES(SYS_COUNTRY)

		#PHONE_MASK = SYS_COUNTRIES(SYS_PHONE_MASK)

		PERFORM "GEMLB:LB_ADDRESSES" (&
				"D", &
				(SYS_COUNTRIES(SYS_COUNTRY)), &
				"CUSTOMER_ADDRESSES", &
				"15", &
				"17", &
				"", &
				"", &
				"", &
				"", &
				"", &
				#R1, &
				#R2, &
				#R3, &
				#R4, &
				#R5)

	END_BLOCK

	OUTPUT_BLOCK DEF_PHONE /ROW=10 /COL=16 /LEN=21 &
			/PROMPT=(FIELD_PROMPT(PHONE)) &
			/SOURCE=(CUSTOMER_ADDRESSES(PHONE)) &
			/OUTPUT_MASK=(#PHONE_MASK)

	OUTPUT_BLOCK DEF_EMAIL /ROW=11 /COL=16 /LEN=30 &
			/PROMPT=(FIELD_SHORT_PROMPT(EMAIL)) &
			/SOURCE=(CUSTOMER_ADDRESSES(EMAIL))

	BEGIN_BLOCK SWITCH
		GOTO CONFIRM
	END_BLOCK

	BEGIN_BLOCK IS_DELIVERY_FINAL
	
		FIND IN CUSTOMER_ADDRESSES &
			/LOCK=NONE &
			/SECONDARY &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=#CUSTOMER_NUMBER &
			/WITH=ADDRESS_CODE=SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE) &
			/WITH=SYS_FINAL_DESTINATION="1"
		
		IF (%STATUS = %SUCCESS)
		
			#HEADER_DELIVERY_ADDR_FLAG = #YES
		ELSE
		
			#HEADER_DELIVERY_ADDR_FLAG = #NO
		END_IF
	END_BLOCK
	
	BEGIN_BLOCK FINAL_ADDRESS_CODE

		#FINAL_ADDRESS_CODE = SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE)
		
		INPUT_BLOCK  /ROW=2 /COL=16 &
			/PROMPT=FIELD_SHORT_PROMPT(FINAL_ADDRESS_CODE) &
			/TARGET=#FINAL_ADDRESS_CODE &
			/USING=SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE) &
			/USE_IF=(#HEADER_DELIVERY_ADDR_FLAG = #NO) &
			/LOV=CUSTOMER_ADDRESSES(ADDRESS_CODE,CUSTOMER_NAME,SYS_POSTAL_CODE) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=DIVISION=#DIVISION &
			/LOV_WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/LOV_WITH=ACTIVATION_STATUS = (PARAMETER("STATUS_ACTIVE")) &
			/LOV_WITH=SYS_FINAL_DESTINATION = "1" &
			/USER_KEY1=(PERFORM "GEMSYS:SYS_M_ADD_CUSTOMER_ADDRESSES" &
					(#DIVISION,#CUSTOMER_NUMBER,#FINAL_ADDRESS_CODE,#TAX_FLAG))
					
		IF ( #HEADER_DELIVERY_ADDR_FLAG = #YES ) 
			MESSAGE /IDENTIFIER/BELL P_37113
			GOTO CONFIRM
		END_IF 
	END_BLOCK


	BEGIN_BLOCK VALIDATE_FINAL_ADDRESS

		FIND IN CUSTOMER_ADDRESSES &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
			/WITH=ADDRESS_CODE=#FINAL_ADDRESS_CODE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_22178
			GOTO FINAL_ADDRESS_CODE
		END_IF

		IF (CUSTOMER_ADDRESSES(ACTIVATION_STATUS) <> (PARAMETER("STATUS_ACTIVE")))
			MESSAGE/IDENTIFIER/BELL/WAIT P_02199
			GOTO FINAL_ADDRESS_CODE
		END_IF

		#HEADER_COUNTRY_CODE = CUSTOMER_ADDRESSES(SYS_COUNTRY)
		#HEADER_CITY         = CUSTOMER_ADDRESSES(SYS_CITY)
		IF ( CUSTOMER_ADDRESSES(SYS_STATE) <> "" ) 
			#HEADER_STATE_PROVINCE = CUSTOMER_ADDRESSES(SYS_STATE)
		ELSE
			#HEADER_STATE_PROVINCE = CUSTOMER_ADDRESSES(SYS_PROVINCE)
		END_IF

		IF (CUSTOMER_ADDRESSES(SYS_FINAL_DESTINATION) <> "1")
			MESSAGE/IDENTIFIER/BELL/WAIT P_37116
			GOTO FINAL_ADDRESS_CODE
		END_IF		

		FIND IN SYS_COUNTRIES &
			/LOCK=NONE &
			/WITH=SYS_COUNTRY=CUSTOMER_ADDRESSES(SYS_COUNTRY)

		#PHONE_MASK = SYS_COUNTRIES(SYS_PHONE_MASK)
		SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE) = #FINAL_ADDRESS_CODE
		#HEADER_FINAL_ADDRESS_CODE              = SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE) 
	END_BLOCK

	OUTPUT_BLOCK CUSTOMER_NAME /ROW=3 /COL=16 &
			/PROMPT=(FIELD_SHORT_PROMPT(CUSTOMER_NAME)) &
			/SOURCE=(CUSTOMER_ADDRESSES(CUSTOMER_NAME))

	BEGIN_BLOCK DISPLAY_ADDRESS
		PERFORM "GEMLB:LB_ADDRESSES" (&
			"D", &
			(SYS_COUNTRIES(SYS_COUNTRY)), &
			"CUSTOMER_ADDRESSES", &
			"15", &
			"17", &
			"", &
			"", &
			"", &
			"", &
			"", &
			#R1, &
			#R2, &
			#R3, &
			#R4, &
			#R5)
	END_BLOCK

	OUTPUT_BLOCK PHONE /ROW=10 /COL=16 /LEN=21 &
			/PROMPT=(FIELD_PROMPT(PHONE)) &
			/SOURCE=(CUSTOMER_ADDRESSES(PHONE)) &
			/OUTPUT_MASK=(#PHONE_MASK)

	OUTPUT_BLOCK EMAIL /ROW=11 /COL=16 /LEN=30 &
			/PROMPT=(FIELD_SHORT_PROMPT(EMAIL)) &
			/SOURCE=(CUSTOMER_ADDRESSES(EMAIL))

	YESNO_BLOCK CONFIRM /ROW=12 /COL=60 &
			/PROMPT=(MESSAGE("P_00149")) &
			/BACK=(GOTO CONFIRM) &
			/EXIT=(GOTO CONFIRM) &
			/FAILURE=(GOTO IS_DELIVERY_FINAL)
END_FORM  


PROCEDURE_FORM ALL_OPTIONS


	BEGIN_BLOCK ALL_OPTIONS
		#OLD_DELIVERY_ADDRESS = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
		PERFORM DEFAULT_ADDRESSES
		PERFORM DATES
		PERFORM ORDER_ANALYSIS_CODES
		PERFORM ORDER_NOTES
	END_BLOCK

END_FORM


PROCEDURE_FORM LOAD_CODES_FROM_ADDRESSES

	BEGIN_BLOCK GET_RECORD
		FIND IN CUSTOMER_ADDRESSES &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=#CUSTOMER_NUMBER &
			/WITH=ADDRESS_CODE=#ADDRESS_CODE

		! this find does not have a /lock=none on purpose!  This is
		! because you can add a customer address using the F17 key
		! and you need to be able to see the address within the same
		! transaction.  PLEASE do not add a /lock=none to these finds.

		IF (%STATUS = %FAILURE) EXIT

		IF ((#MAIN_OPT <> "MODIFY" AND #EDIT_MODE <> "MODIFY") OR &
			(CUSTOMER_ADDRESSES(ADDRESS_CODE) <> #ADDRESS_CODE))

			SALES_ORDER_HEADERS(LOCATION)			= CUSTOMER_ADDRESSES(LOCATION)
			SALES_ORDER_HEADERS(SALES_ANALYSIS_GROUP) 	= CUSTOMER_ADDRESSES(CUSTOMER_GROUP)
			
			IF ( CUSTOMER_ADDRESSES(SALESPERSON_CODE) <> '' ) 
				SALES_ORDER_HEADERS(SALESPERSON_CODE) = CUSTOMER_ADDRESSES(SALESPERSON_CODE)
			ELSE
				SALES_ORDER_HEADERS(SALESPERSON_CODE) = #CUST_SALESPERSON
			END_IF

			IF ( CUSTOMER_ADDRESSES(BROKER_CODE) <> '' ) 
				SALES_ORDER_HEADERS(BROKER_CODE) = CUSTOMER_ADDRESSES(BROKER_CODE)
			ELSE
				SALES_ORDER_HEADERS(BROKER_CODE) = #CUST_BROKER
			END_IF
			
			FIND IN SALESPERSONS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=SALESPERSON_CODE=SALES_ORDER_HEADERS(SALESPERSON_CODE)

			IF (%STATUS = %SUCCESS)
				SALES_ORDER_HEADERS(SALES_COMMISSION_CODE) = SALESPERSONS(SALES_COMMISSION_CODE)
			END_IF
		END_IF

		!			SALES_ORDER_HEADERS(CUSTOMER_CONTACT)=CUSTOMER_ADDRESSES(CUSTOMER_CONTACT)

		PERFORM GET_ADDR_TAX_VARS
	END_BLOCK

END_FORM


FORM HEADER_REPRINT /ROW=3 /COL=2 /HEIGHT=21 /WIDTH=78 &
	/TITLE=(MESSAGE("P_50131"))


	OUTPUT_BLOCK CUSTOMER /ROW=1 /COL=13 &
			/PROMPT=(FIELD_SHORT_PROMPT(CUSTOMER_NUMBER)) &
			/SOURCE=(#CUSTOMER_NUMBER) &
			/USING=SALES_ORDER_HEADERS(CUSTOMER_NUMBER)

	OUTPUT_BLOCK CUSTOMER_NAME /ROW=1 /COL=22 &
			/SOURCE=(#CUSTOMER_NAME) &
			/USING=CUSTOMERS(CUSTOMER_NAME)

	OUTPUT_BLOCK ORDER_NUMBER /ROW=1 /COL=65 &
			/PROMPT=(MESSAGE("P_00469")) &
			/SOURCE=(#ORDER_NUMBER) &
			/USING=SALES_ORDER_HEADERS(ORDER_NUMBER)

	OUTPUT_BLOCK SHIP_ADDR /ROW=2 /COL=13 &
			/PROMPT=(MESSAGE("P_00318")) &
			/SOURCE=#DEF_DELIVERY_ADDRESS &
			/USING=SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)

	OUTPUT_BLOCK REQUESTED_DATE /ROW=2 /COL=65 &
			/PROMPT=#REQUESTED_DATE_PROMPT &
			/SOURCE=#SYS_REQUESTED_DATE &
			/USING=SALES_ORDER_HEADERS(SYS_REQUESTED_DATE) &
			/OUTPUT_MASK=(#DEFAULT_DATE_MASK)
			
	BEGIN_BLOCK SETUP_CPC_FLAG
		FIND IN CUSTOMERS &
				/LOCK=NONE &
				/WITH=CUSTOMER_NUMBER = #CUSTOMER_NUMBER &
				/WITH=COMPANY_CODE = #COMPANY_CODE &
				/WITH=DIVISION = #DIVISION
			
		IF ( %STATUS = %FAILURE )
			EXIT(%FAILURE) 
		END_IF
		
		IF (CUSTOMERS(ORDER_BY_CPC)<>"")
			#ORDER_BY_CPC = CUSTOMERS(ORDER_BY_CPC)
		ELSE
			#ORDER_BY_CPC = #SOE_BY_PART
		END_IF
			
		BEGIN_CASE (#ORDER_BY_CPC)
			CASE #SOE_BY_CPC				
				#ENTRY_BY_CPC = #YES
			CASE #SOE_BY_BOTH				
				#ENTRY_BY_CPC = #YES				
			CASE ELSE				
				#ENTRY_BY_CPC = #NO
		END_CASE		
	END_BLOCK	

	BEGIN_BLOCK LINES
		COMMIT

		#LINE_EDIT_MODE = ""
		#SALES_ORDER_QTY	= 0

		PERFORM TIDY_UP_ATP
		!Make sure that any old ATP Promises are not hanging around
		
		PERFORM "GEMSOP:SOP_S_L_CUSTOMER" ADD_SO_LINE_DISP_TYPE_VT
		
		PERFORM SALES_ORDER_LINES
		PERFORM COPY_CHECK
		IF ((%STATUS <>  %SUCCESS) AND (%STATUS <>  %EMPTY))
			MESSAGE/IDENTIFIER/BELL/WAIT P_52366
			GOTO LINES
		END_IF

		START_TRANSACTION
		PERFORM "GEMTP:TP_L_CALC_PROMOTIONS"  ("PROCESS_GIFT", &
							"", &
							"1", &
							#COMPANY_CODE, &
							#DIVISION, &
							#ORDER_NUMBER, &
							0, &
							#YES, &
							#R_STATUS, &
							#R_MSG, &
							#R3)

		IF (%STATUS <> %SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_23363
			ROLLBACK
			GOTO LINES
		ELSE
			COMMIT
		END_IF

		IF ( #R_MSG <> "" )
			ERROR/TEXT_ONLY/BELL #R_MSG
		END_IF
	END_BLOCK

	BEGIN_BLOCK ORDER_TOTALS

		#DEST_ZONE	= ""

		START_TRANSACTION

		PERFORM RESTOR_SYS_CURRENCY_CONTROL_VT

		COMMIT

		IF (#TAXABLE = "")
			#TAXABLE = #DEF_TAXABLE
		END_IF

		IF (#CUSTOMER_TAX_CODE = "")
			#CUSTOMER_TAX_CODE = #DEF_CUSTOMER_TAX_CODE
		END_IF

		PERFORM "GEMLB:LB_C_ORDER_TOTALS" &
			("SOP", &
			 #DIVISION, &
			 #MAIN_OPT, &
			 #TAX_ON_CASH, &
			 #ORDER_NUMBER, &
			 #TAXABLE, &
			 #CUSTOMER_TAX_CODE, &
			 #OPT)

		IF (%STATUS = %BACK)		 #OPT = "LINES"


!	update SOP_ORDER_VALUE_BASE using TOTAL_ORDER_VALUE and currency
!	conversion rate assigned to this order.
		IF (#CURRENCY_METHOD > "0")
			START_TRANSACTION

			FIND IN SALES_ORDER_HEADERS &
				/LOCK=WRITE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=ORDER_NUMBER=#ORDER_NUMBER

			IF (%STATUS<>%SUCCESS)
				MESSAGE/IDENTIFIER/BELL/WAIT P_52204
				ROLLBACK
			ELSE

				PERFORM RESTOR_SYS_CURRENCY_CONTROL_VT

				DELETE ALL FROM SYS_CURRENCY_VALUES_VT
				SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE) = SALES_ORDER_HEADERS(TOTAL_ORDER_VALUE)
				ADD TO SYS_CURRENCY_VALUES_VT
				PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
				IF (#R_STATUS <> #YES)
					ERROR/WAIT #R_MESSAGE
					EXIT (%FAILURE)
				END_IF

				FIND IN SYS_CURRENCY_VALUES_VT
				SALES_ORDER_HEADERS(SOP_ORDER_VALUE_BASE) = SYS_CURRENCY_VALUES_VT(BASE_VALUE)
				COMMIT
			END_IF
		END_IF

		PERFORM CREDIT_CHECK

		! #OPT returned in call to Order Totals
		BEGIN_CASE (#OPT)

			CASE "LINES"
				#MAIN_OPT = "MODIFY"
				#EDIT_MODE = "MODIFY"
				GOTO LINES

			CASE "CANCEL"
				FIND IN SALES_ORDER_LINES &
					/LOCK=NONE &
					/WITH=COMPANY_CODE= #COMPANY_CODE &
					/WITH=DIVISION=#DIVISION &
					/WITH=ORDER_NUMBER=#ORDER_NUMBER &
					/WITH=STATUS_FLAG=PARAMETER("STATUS_CLOSED")
				IF (%STATUS=%SUCCESS)
! Cannot cancel the order if at least one line of the order
! is closed.
					MESSAGE/IDENTIFIER/WAIT P_89937
				     	ROLLBACK
				       GOTO ORDER_TOTALS

				END_IF
				FIND IN SOP_SHIPMENT_DETAILS &
			   /LOCK=NONE &
			   /WITH=COMPANY_CODE=#COMPANY_CODE &
			   /WITH=DIVISION=#DIVISION &
			   /WITH=ORDER_NUMBER=#ORDER_NUMBER

		    IF (%STATUS=%SUCCESS)
					MESSAGE/IDENTIFIER/WAIT P_93123
				     	ROLLBACK
				       GOTO ORDER_TOTALS

				END_IF
				FIND IN DESPATCH_NOTES &
					/LOCK=NONE &
					/WITH=COMPANY_CODE= #COMPANY_CODE &
					/WITH=DIVISION=#DIVISION &
					/WITH=ORDER_NUMBER=#ORDER_NUMBER
				IF (%STATUS=%SUCCESS)
					MESSAGE/IDENTIFIER/WAIT P_93123
				     	ROLLBACK
				       GOTO ORDER_TOTALS

				END_IF
				PERFORM CANCEL_ORDER

				IF (%STATUS = %FAILURE)
					ROLLBACK
					GOTO ORDER_TOTALS
				ELSE
					COMMIT
				END_IF
				
		START_TRANSACTION
		#ID			= PARAMETER("FACILITY_ID")
		#PROCESS_KEY = #COMPANY_CODE & "/" & &
						#DIVISION & "/" & &
						#ORDER_NUMBER
		PERFORM "GEMLB:LB_L_PROCESS_CONTROLS" LB_L_PROCESS_CONTROLS &
					(#COMPANY_CODE, &
					("DELETE"), 0, (#ID), &
					(#PROCESS_KEY), &
					#ERROR_OCCURRED, #ERROR_MESSAGE)

		IF (%STATUS = %FAILURE OR #ERROR_OCCURRED)
			ERROR/TEXT_ONLY/WAIT #ERROR_MESSAGE
			EXIT (%FAILURE)
		END_IF

		FIND IN SALES_ORDER_HEADERS &
			/LOCK=WRITE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=ORDER_NUMBER=#ORDER_NUMBER

		SALES_ORDER_HEADERS(STATUS_FLAG) = ""

		COMMIT

			CASE "NEXT", "DESPATCH", "HEADER"
				IF ((#OPT = "DESPATCH") AND (#ORDER_CYCLE = #SOP_ORDER_CYCLE_C))
					PERFORM 'GEMSOP:SOP_L_MSDS' REQD_FOR_ORDER (&
						(#SOP_ORDER_CYCLE_C), &
						(#COMPANY_CODE), &
						(#DIVISION), &
						(#ORDER_NUMBER), &
						(SALES_ORDER_HEADERS(ORDER_DATE)), &
						#MSDS_REQUIRED)

					IF (#MSDS_REQUIRED)
						MESSAGE/IDENTIFIER/BELL/WAIT P_01924,#ORDER_NUMBER
					END_IF
				END_IF

				START_TRANSACTION

				PERFORM "GEMLB:LB_L_PROCESS_CONTROLS" LB_L_PROCESS_CONTROLS &
						(#COMPANY_CODE, &
						 ("DELETE"), 0, &
						 (#FUNCTION_ID), &
						 (#PROCESS_KEY), &
						 (#ID), &
						 "", &
						 #ERROR_OCCURRED, #ERROR_MESSAGE )
			
				IF(%STATUS = %FAILURE OR #ERROR_OCCURRED)
					ERROR/TEXT_ONLY/WAIT #ERROR_MESSAGE
					EXIT(%FAILURE)
				END_IF

				FIND IN SALES_ORDER_HEADERS &
					/LOCK=WRITE &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=DIVISION=#DIVISION &
					/WITH=ORDER_NUMBER=#ORDER_NUMBER

				IF (%STATUS<>%SUCCESS)
					MESSAGE/IDENTIFIER/BELL/WAIT P_52204
					ROLLBACK
				ELSE
					SALES_ORDER_HEADERS(STATUS_FLAG)=""
					COMMIT
				END_IF

				!executing workflow funtions
				IF (#OPT ="NEXT" AND #MAIN_OPT = "ENTRY" )
					PERFORM "GEMLB:LB_L_SALESORDER_EVENTS" CREATE (#COMPANY_CODE, #DIVISION, #ORDER_NUMBER, #CUSTOMER_NUMBER, #SALESPERSON_CODE, #ORDER_DATE, #REQUIRED_DATE, #GRAND_TOTAL, #CURRENCY_CODE)
				END_IF 

			CASE ELSE
				!End of CASE (#OPT)
		END_CASE
	END_BLOCK

END_FORM


TABLE_FORM SALES_ORDER_LINES /ROW=5 /COL=2 /ROW_HEIGHT=3 /HEIGHT=19 /WIDTH=78 &
	/ATTRIBUTES=NOBORDER &
	/TABLE=SALES_ORDER_LINES &
	/SEQUENCE=ORDER_LINE_NUMBER &
	/DELETE_FORM=DELETE_ORDER_LINE &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION=#DIVISION &
	/WITH=ORDER_NUMBER=#ORDER_NUMBER &
	/BEGIN_ROW=(6) &
	/END_ROW=(18)

	! Remove line and title to ensure compatibility with iBrowser
	!
	!	LINE /ROW=3 /COL=1 /END_ROW=3 /END_COL=33
	!	LINE /ROW=3 /COL=45 /END_ROW=3 /END_COL=78
	!
	!	OUTPUT_BLOCK TEXT_ORDER_LINES /ROW=3 /COL=34 /ABSOLUTE_POSITION &
	!			/SOURCE=(MESSAGE("P_56187")) &
	!			/ATTRIBUTES=NONE
	BEGIN_BLOCK /DISPLAY_ONLY INIT_QTYS
		! This block of code is performed when the
		! table edit lines are first displayed (not
		! when selected etc. Therefore we have to
		! look up the part code so that the descriptions
		! get printed correctly

		#WAREHOUSED_FLAG          = #NO
		#IC_PACKAGED_PRODUCT      = #NO
		#SALES_REACH_RETURN_FLAG  = #YES
		#DO_LINE_DETAILS          = #NO

		IF (%EDIT_MODE = %ADD)

			#SALES_REACH_CONTROL_FLAG = #YES

			DELETE ALL FROM TAX_TRANSACTIONS_VT

			CLEAR_BUFFER SALES_ORDER_LINE_QTYS

			#ORIG_SALES_ORDER_QTY = 0
			#SALES_ORDER_QTY = 0
			#PRICE_ORDER_QTY = 0
			#ORIG_PRICE_ORDER_QTY = 0
			#SALES_UOM = ""
			#PRICE_UOM = ""
			#NOMI_UOM  = ""
			#NOMI_PRICE_UOM = ""
			#PRICE = 0.0
			#NET_PRICE = 0
			#TP_GIFT_LINE = 0

		ELSE
			
			#SALES_REACH_CONTROL_FLAG = #NO
			
			#SALES_UOM = SALES_ORDER_LINES(UNIT_SALES)
			#PRICE_UOM = SALES_ORDER_LINES(UNIT_PRICE)
			#NOMI_UOM  = SALES_ORDER_LINES(SOP_NOMINATED_UNIT)
			#NOMI_PRICE_UOM = SALES_ORDER_LINES(SOP_NOMINATED_PRICE_UNIT)
!Add the following line issue#368358-9
			#QTY_FACTOR = 1
!End of adds
			IF ( #PRICING_METHOD = #TAX_INCLUSIVE )
				#PRICE = SALES_ORDER_LINES(SALES_PRICE_INC_TAX)
				#NET_PRICE = SALES_ORDER_LINES(SALES_PRICE)
			ELSE
				#PRICE = SALES_ORDER_LINES(SALES_PRICE)
				#NET_PRICE = SALES_ORDER_LINES(SALES_PRICE)
			END_IF

			FIND IN SALES_ORDER_LINE_QTYS &
				/LOCK=READ &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=ORDER_NUMBER=SALES_ORDER_LINES(ORDER_NUMBER) &
				/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER) &
				/WITH=UNIT_OF_MEASURE=#SALES_UOM

			IF (%STATUS <> %SUCCESS)
				#SALES_ORDER_QTY = 0
				#ORIG_SALES_ORDER_QTY = 0
				#PRICE_ORDER_QTY	= 0
				#ORIG_PRICE_ORDER_QTY   = 0
			ELSE
				#SALES_ORDER_QTY = SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)
				#ORIG_SALES_ORDER_QTY = #SALES_ORDER_QTY

!Add the following lines issue#368358-10
				#QTY_FACTOR = (SALES_ORDER_LINE_QTYS(ORDER_QUANTITY) - &
											 SALES_ORDER_LINE_QTYS(QTY_INVOICED) - & 
											 SALES_ORDER_LINE_QTYS(IC_QTY_CLOSED)) / #SALES_ORDER_QTY
!End of adds

				IF (SALES_ORDER_LINES(UNIT_PRICE) <> SALES_ORDER_LINES(UNIT_SALES))
					FIND IN SALES_ORDER_LINE_QTYS   &
						/LOCK=READ &
						/WITH=COMPANY_CODE=#COMPANY_CODE    &
						/WITH=DIVISION=#DIVISION    &
						/WITH=ORDER_NUMBER=SALES_ORDER_LINES(ORDER_NUMBER)  &
						/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER)	&
						/WITH=UNIT_OF_MEASURE=#PRICE_UOM

					IF (%STATUS <> %SUCCESS)
						#PRICE_ORDER_QTY	= 0
						#ORIG_PRICE_ORDER_QTY   = 0
					ELSE
						#PRICE_ORDER_QTY	= SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)
						#ORIG_PRICE_ORDER_QTY   = #PRICE_ORDER_QTY
					END_IF
				ELSE
					#PRICE_ORDER_QTY	= #SALES_ORDER_QTY
					#ORIG_PRICE_ORDER_QTY   = #ORIG_SALES_ORDER_QTY
				END_IF
			END_IF

			IF (SALES_ORDER_LINES(ORDER_LINE_TYPE)=#SO_LINE_TYPE_STOCK)
				#PART_CODE = SALES_ORDER_LINES(PART_CODE)
				#WAREHOUSE = SALES_ORDER_LINES(WAREHOUSE)

				FIND IN PRODUCT_MASTER &
					/LOCK=NONE &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=PART_CODE=SALES_ORDER_LINES(PART_CODE)

				IF (%STATUS <> %SUCCESS)
					MESSAGE/IDENTIFIER/BELL/WAIT P_52319
					EXIT(%FAILURE)
				END_IF

				#IC_UOM_CONTROL = PRODUCT_MASTER(IC_PRODUCT_UOM_CONTROL)
				#WAREHOUSED_FLAG = PRODUCT_MASTER(WAREHOUSED_FLAG)
				#IC_PACKAGED_PRODUCT = PRODUCT_MASTER(IC_PACKAGED_PRODUCT)

				#TP_FLOOR_PRICE = PRODUCT_MASTER(TP_PRODUCT_FLOOR_PRICE)
				#TP_FLOOR_PERCENT = PRODUCT_MASTER(TP_PRODUCT_FLOOR_PERCENT)

				FIND IN IC_PRODUCT_MASTER_UNITS &
					/LOCK=NONE &
					/STREAM_NAME=PMU1 &
					/SECONDARY &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=PART_CODE=SALES_ORDER_LINES(PART_CODE) &
					/WITH=UNIT_OF_MEASURE=#SALES_UOM &
					/WITH=IC_QUANTITY_MASK<>""

				IF (%STATUS = %SUCCESS)
					#SALES_UOM_MASK = PMU1:IC_PRODUCT_MASTER_UNITS(IC_QUANTITY_MASK)
					#SALES_UOM_NOD  = PMU1:IC_PRODUCT_MASTER_UNITS(IC_DECIMALS)
				ELSE
					FIND IN UNITS_OF_MEASURE &
						/LOCK=NONE &
						/STREAM_NAME=UOM1 &
						/SECONDARY &
						/WITH=UNIT_OF_MEASURE=#SALES_UOM

					IF (%STATUS = %SUCCESS)
						#SALES_UOM_MASK = UOM1:UNITS_OF_MEASURE(IC_QUANTITY_MASK)
						#SALES_UOM_NOD = UOM1:UNITS_OF_MEASURE(IC_DECIMALS)
					ELSE
						#SALES_UOM_MASK = ""
						#SALES_UOM_NOD  = ""
					END_IF
				END_IF

				IF (#ATP_AT_ORDER_ENTRY = #YES AND PRODUCT_MASTER(ATP_IN_USE) = #YES)
					#ATP_IN_USE_FOR_PART = #YES
				END_IF
			ELSE
				#PART_CODE = ""
				#WAREHOUSE = ""
			END_IF
		END_IF
	END_BLOCK
	
	BEGIN_BLOCK /DISPLAY_ONLY SETUP_DISP_TYPE
		IF (#ORDER_BY_CPC=#SOE_BY_PART)
			#ENTRY_BY_CPC=#NO
		ELSE
			FIND IN SO_LINE_DISP_TYPE_VT &
				/LOCK=NONE &
				/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER)
				
			IF ( %STATUS = %FAILURE )
				#ENTRY_BY_CPC=#YES
			ELSE
				#ENTRY_BY_CPC=SO_LINE_DISP_TYPE_VT(ENTRY_BY_CPC)
			END_IF		

			IF (SALES_ORDER_LINES(CUSTOMERS_PART_CODE)="")
				#ENTRY_BY_CPC=#NO
			END_IF
		END_IF	
	END_BLOCK

	BEGIN_BLOCK  /DISPLAY_ONLY DISPLAY_NON_STOCK
		IF (SALES_ORDER_LINES(ORDER_LINE_TYPE) = #SO_LINE_TYPE_NONSTOCK)

		OUTPUT_BLOCK /ROW=1 /COL=8 /LEN=15 &
			/SOURCE=(SALES_ORDER_LINES(SALES_ORDER_DETAIL_DESCRIPTION)) &
			/ATTRIBUTES=NONE
		
		#ENTRY_BY_CPC=#NO
		#CPC_DESC=""
		
		END_IF
		! If the line is a non-stock one display the first line
		! of the detail description rather than the part code and
		! warehouse etc.
	END_BLOCK

	BEGIN_BLOCK /DISPLAY_ONLY SETUP_TOTALS
		#LINE_DISCOUNT		= SALES_ORDER_LINES(LINE_DISCOUNT)
		#PERCENT_DISCOUNT	= SALES_ORDER_LINES(LINE_DISCOUNT_PERCENT)
		#LINE_VALUE		= SALES_ORDER_LINES(SOP_ORDER_TOTAL_CURRENCY)
		IF (#LINE_VALUE > 0.0)
			#QTY_TIMES_PRICE	= #LINE_VALUE &
					- (SALES_ORDER_LINES(FREIGHT) * SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR))
		ELSE
			#QTY_TIMES_PRICE	= #LINE_VALUE
		END_IF
		#LINE_TAX		= SALES_ORDER_LINES(LINE_TAX)
		#LINE_FREIGHT_TAX	= SALES_ORDER_LINES(TAX_ON_FREIGHT)
		#LINE_GOODS_VALUE	= SALES_ORDER_LINES(SOP_GOODS_VALUE_CURRENCY)
		#LINE_TOTAL		= #LINE_VALUE - #LINE_DISCOUNT + #LINE_TAX
!Add the following line issue#368358-11
		#OLD_LINE_OS_VALUE = #LINE_TOTAL * #QTY_FACTOR
!End of adds
	END_BLOCK

	

	OUTPUT_BLOCK ORDER_LINE_NUMBER /ROW=1 /COL=2 &
			/SOURCE=(SALES_ORDER_LINES(ORDER_LINE_NUMBER)) &
			/OUTPUT_MASK="!-@@0"

	OUTPUT_BLOCK PART_CODE /ROW=1 /COL=8 &
			/SOURCE=(SALES_ORDER_LINES(PART_CODE)) &
			/HEADING=FIELD_HEADING(PART_CODE) &
			/USE_IF=((SALES_ORDER_LINES(ORDER_LINE_TYPE)=#SO_LINE_TYPE_STOCK) AND (#ENTRY_BY_CPC = #NO))
	
	OUTPUT_BLOCK PART_CODE_ENTRY_BY_CPC /ROW=3 /COL=13 /LEN=15 &
			! /PROMPT=(MESSAGE("P_33866")) &
			/SOURCE=(SALES_ORDER_LINES(PART_CODE)) &
			/USE_IF=((SALES_ORDER_LINES(ORDER_LINE_TYPE)=#SO_LINE_TYPE_STOCK) AND (#ENTRY_BY_CPC = #YES))
	
	OUTPUT_BLOCK PART_CODE_2 /ROW=1 /COL=8 /LEN=15 &
			/SOURCE=(SALES_ORDER_LINES(SALES_ORDER_DETAIL_DESCRIPTION)) &
			/USE_IF=(SALES_ORDER_LINES(ORDER_LINE_TYPE)=#SO_LINE_TYPE_NONSTOCK)

	OUTPUT_BLOCK ORDER_QUANTITY /ROW=1 /COL=24 /LEN=14 &
			/SOURCE=SALES_ORDER_LINE_QTYS(ORDER_QUANTITY) &
			/OUTPUT_MASK=#SALES_UOM_MASK &
			/RHEADING=FIELD_HEADING(IC_QUANTITY)

	OUTPUT_BLOCK SALES_UNIT /ROW=1 /COL=39 &
			/SOURCE=SALES_ORDER_LINES(UNIT_SALES) &
			/RHEADING=FIELD_HEADING(UNIT_OF_MEASURE)

	OUTPUT_BLOCK SALES_PRICE /ROW=1 /COL=44 &
			/SOURCE=SALES_ORDER_LINES(SALES_PRICE) &
			/RHEADING=(FIELD_SHORT_PROMPT(UNIT_PRICE)) &
	   		/OUTPUT_MASK=#SALES_PRICE_MASK &
			/USE_IF=(#PRICING_METHOD_OPTIONAL=#NO)

	OUTPUT_BLOCK TIP_SALES_PRICE /ROW=1 /COL=44 &
			/SOURCE_IF=(#PRICING_METHOD=#TAX_INCLUSIVE),(SALES_ORDER_LINES(SALES_PRICE_INC_TAX)) &
			/SOURCE=SALES_ORDER_LINES(SALES_PRICE) &
			/RHEADING=(#PRICE_HEADING) &
	   		/OUTPUT_MASK=#SALES_PRICE_MASK &
			/USE_IF=(#PRICING_METHOD_OPTIONAL=#YES)

	OUTPUT_BLOCK SALES_PRICE_UNIT /ROW=1 /COL=59 &
			/SOURCE=(SALES_ORDER_LINES(UNIT_PRICE)) &
			/RHEADING=FIELD_HEADING(UNIT_OF_MEASURE)

	OUTPUT_BLOCK CURRENCY_HEADING /ROW=1 /COL=67 /LEN=11 &
			/SOURCE=(" ") &
			/RHEADING=FIELD_HEADING(SOP_ORDER_TOTAL_CURRENCY) &
			/USE_IF=(#PRICING_METHOD<>#TAX_INCLUSIVE)

	OUTPUT_BLOCK TIP_CURRENCY_HEADING /ROW=1 /COL=67 /LEN=11 &
			/SOURCE=(" ") &
			/RHEADING=(#LINE_VALUE_HEADING) &
			/USE_IF=(#PRICING_METHOD=#TAX_INCLUSIVE)

	OUTPUT_BLOCK TOTAL_CURRENCY /ROW=2 /COL=61 &
			/LEN=(#CURRENCY_LEN) &
			/SOURCE=(SALES_ORDER_LINES(SOP_ORDER_TOTAL_CURRENCY)) &
			/OUTPUT_MASK=(#CURRENCY_MASK) &
			/USE_IF=(#PRICING_METHOD<>#TAX_INCLUSIVE)

	OUTPUT_BLOCK TIP_TOTAL_CURRENCY /ROW=2 /COL=61 &
			/LEN=(#CURRENCY_LEN) &
			/SOURCE=(#LINE_TOTAL) &
			/OUTPUT_MASK=(#CURRENCY_MASK) &
			/USE_IF=(#PRICING_METHOD=#TAX_INCLUSIVE)

	OUTPUT_BLOCK PART_CODE_DESCR1 /ROW=2 /COL=8 &
			/SOURCE=(PRODUCT_MASTER(PART_DESC_1)) &
			/USE_IF=((SALES_ORDER_LINES(ORDER_LINE_TYPE)=#SO_LINE_TYPE_STOCK) AND (#ENTRY_BY_CPC = #NO))

	OUTPUT_BLOCK PART_CODE_DESCR2 /ROW=2 /COL=34 &
			/SOURCE=(PRODUCT_MASTER(PART_DESC_2)) &
			/USE_IF=((SALES_ORDER_LINES(ORDER_LINE_TYPE)=#SO_LINE_TYPE_STOCK) AND (#ENTRY_BY_CPC = #NO))
			
	OUTPUT_BLOCK PART_CODE_DESCR1_ENTRY_BY_CPC /ROW=3 /COL=28 &
			/SOURCE=(PRODUCT_MASTER(PART_DESC_1)) &
			/USE_IF=((SALES_ORDER_LINES(ORDER_LINE_TYPE)=#SO_LINE_TYPE_STOCK) AND (#ENTRY_BY_CPC = #YES))

	OUTPUT_BLOCK PART_CODE_DESCR2_ENTRY_BY_CPC /ROW=3 /COL=53 &
			/SOURCE=(PRODUCT_MASTER(PART_DESC_2)) &
			/USE_IF=((SALES_ORDER_LINES(ORDER_LINE_TYPE)=#SO_LINE_TYPE_STOCK) AND (#ENTRY_BY_CPC = #YES))			

	OUTPUT_BLOCK WAREHOUSE /ROW=1 /COL=64 /LEN=2 &
			/SOURCE=(SALES_ORDER_LINES(WAREHOUSE)) &
			/LHEADING=(FIELD_SHORT_PROMPT(WAREHOUSE)) &
			/USE_IF=((SALES_ORDER_LINES(ORDER_LINE_TYPE)=#SO_LINE_TYPE_STOCK) &
			        AND (#WAREHOUSED_FLAG = #YES))

	OUTPUT_BLOCK NON_WAREHOUSE /ROW=1 /COL=64 /LEN=2 &
			/SOURCE=("") &
			/LHEADING=(FIELD_SHORT_PROMPT(WAREHOUSE)) &
			/USE_IF=((SALES_ORDER_LINES(ORDER_LINE_TYPE)=#SO_LINE_TYPE_NONSTOCK) &
			        OR (#WAREHOUSED_FLAG = #NO))
	
	OUTPUT_BLOCK CUSTOMERS_PART_CODE /ROW=3 /COL=13 /LEN=20 &
			! /PROMPT=FIELD_SHORT_PROMPT(CUSTOMERS_PART_CODE) &
			/SOURCE=(SALES_ORDER_LINES(CUSTOMERS_PART_CODE)) &
			/USE_IF=(#ENTRY_BY_CPC = #NO)
			
	OUTPUT_BLOCK CUSTOMERS_PART_CODE_ENTRY_BY_CPC /ROW=1 /COL=8 /LEN=15 &
			/SOURCE=(SALES_ORDER_LINES(CUSTOMERS_PART_CODE)) &
			/USE_IF=(#ENTRY_BY_CPC = #YES)
	
	BEGIN_BLOCK /DISPLAY_ONLY GET_CPC_DESC 
		IF (SALES_ORDER_LINES(CUSTOMERS_PART_CODE)<>'')
			FIND IN CUSTOMERS_PART_CODE_VW &
				/LOCK=NONE &					
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=CUSTOMER_NUMBER=#CUSTOMER_NUMBER &
				/WITH=PART_CODE=SALES_ORDER_LINES(PART_CODE)
		
				IF (%STATUS <> %FAILURE)	
					
					#CPC_DESC=CUSTOMERS_PART_CODE_VW(DESCRIPTION)
					
					OUTPUT_BLOCK CUSTOMERS_PART_DESC /ROW=3 /COL=34 &
						/SOURCE=CUSTOMERS_PART_CODE_VW(DESCRIPTION) &
						/USE_IF=(#ENTRY_BY_CPC = #NO)
						
					OUTPUT_BLOCK CUSTOMERS_PART_DESC_ENTRY_BY_CPC /ROW=2 /COL=8 &
						/SOURCE=CUSTOMERS_PART_CODE_VW(DESCRIPTION) &
						/USE_IF=(#ENTRY_BY_CPC = #YES)
				END_IF
		ELSE
			#CPC_DESC=""
		END_IF		
	END_BLOCK

	BEGIN_BLOCK  /DISPLAY_ONLY UPDATE_COPY
		! If the main option is copy, this block prints
		! a special indicator next to the line sequence to
		! show the user which items he has not yet selected
		! for modification. The status flag is cleared as soon
		! as the line has been selected and modified.

		IF ((#MAIN_OPT = "COPY") &
			AND (SALES_ORDER_LINES(STATUS_FLAG) = PARAMETER("STATUS_UPDATE")))

			OUTPUT_BLOCK /ROW=1 /COL=1 /LEN=1 &
				/SOURCE=("*")
		END_IF
	END_BLOCK
	
	BEGIN_BLOCK INIT_PART_CODE
		#TEMP_PART_CODE=""
	END_BLOCK

	BEGIN_BLOCK MODIFY
		IF (%EDIT_MODE = %MODIFY)

			DELETE ALL FROM TAX_TRANSACTIONS_VT
			!
			#TAX_TYPE = PARAMETER("TAX_TYPE_LINE")
			#ORDER_LINE = SALES_ORDER_LINES(ORDER_LINE_NUMBER)
			#SALES_REACH_CONTROL_FLAG = #NO
			!
			PERFORM LOAD_TAX_VT (#TAX_TYPE)

			IF (SALES_ORDER_LINES(STATUS_FLAG) = PARAMETER("STATUS_TRANSFORMED"))
				MESSAGE/IDENTIFIER/BELL/WAIT P_91844
				GOTO OLD_NEXT_LINE
			END_IF
			IF (SALES_ORDER_LINES(STATUS_FLAG) = PARAMETER("STATUS_CLOSED"))
				MESSAGE/IDENTIFIER/BELL/WAIT P_03221
				GOTO OLD_NEXT_LINE
			END_IF

			#EC_MODE	= "M"
			#ADD_MODE		= #NO
			#LINE_EDIT_MODE	= "MODIFY"
			#LINE_MENU_SOURCE	= MESSAGE("P_24135")
			#WEIGHT 	= SALES_ORDER_LINES(WEIGHT)
			#WEIGHT_UOM		  = SALES_ORDER_LINES(WEIGHT_UOM)
			#VOLUME 	= SALES_ORDER_LINES(VOLUME)
			#VOLUME_UOM		  = SALES_ORDER_LINES(VOLUME_UOM)
			#LINE_VALUE		  = SALES_ORDER_LINES(SOP_ORDER_TOTAL_CURRENCY)
			IF (#LINE_VALUE > 0.0)
				#QTY_TIMES_PRICE = #LINE_VALUE &
					- (SALES_ORDER_LINES(FREIGHT) * SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR))
			ELSE
				#QTY_TIMES_PRICE = #LINE_VALUE
			END_IF
			#LINE_TAX		= SALES_ORDER_LINES(LINE_TAX)
			#LINE_DISCOUNT  = SALES_ORDER_LINES(LINE_DISCOUNT)
			#PERCENT_DISCOUNT = SALES_ORDER_LINES(LINE_DISCOUNT_PERCENT)
			#LINE_FREIGHT_TAX = SALES_ORDER_LINES(TAX_ON_FREIGHT)
			#LINE_GOODS_VALUE = SALES_ORDER_LINES(SOP_GOODS_VALUE_CURRENCY)
			! line value includes freight value (-ve or +ve)
			#LINE_TOTAL	= #LINE_VALUE - #LINE_DISCOUNT + #LINE_TAX &

			#PART_CODE		 = SALES_ORDER_LINES(PART_CODE)
			#WAREHOUSE		 = SALES_ORDER_LINES(WAREHOUSE)
			IF (#WAREHOUSE <> "")
				#OLD_PART_CODE_WAREHOUSED_FLAG = #YES
			ELSE
				#OLD_PART_CODE_WAREHOUSED_FLAG = #NO
			! Check if a warehoused part; if so than prompt user that any
			! promises or inventory updates will be reversed out for the old part.
			! Otherwise, no need to display the full message for PART/WAREHOUSE CHANGE
			! on the Form MODIFICATION_NOTICE.
			END_IF

			PERFORM	 LINE_CPANEL ("",(SALES_ORDER_LINES(ORDER_LINE_TYPE)),#DIVISION,#PART_CODE,#WAREHOUSE)

			#SALES_UOM		 = SALES_ORDER_LINES(UNIT_SALES)
			#ORIG_SALES_UOM = #SALES_UOM
			#NOMI_UOM		= SALES_ORDER_LINES(SOP_NOMINATED_UNIT)
			#PRICE_UOM		 = SALES_ORDER_LINES(UNIT_PRICE)
			#PACK_UOM		= SALES_ORDER_LINES(IC_PACK_UNIT)
			#PART_CHANGE	   = ""
			#COPY_UPDATE	   = ""

			#PRICE_CODE		= #ADDR_PRICE_CODE
			#CUSTOMER_TAX_CODE	= #DEF_CUSTOMER_TAX_CODE
!			#OLD_BASE_TOTAL		= #LINE_TOTAL
			! above values are header defaults which may be
			! overridden if line delivery address is different
			! to header - in form line_modification_setup

			#PRICE_STATUS = PARAMETER("SOP_PRICE_STATUS_PRICE")
				! On a modify, set up all the working variables

			PERFORM LINE_MODIFICATION_SETUP
				! When modifying a line set up a few
				! defaults first as we can't determine
				! in what order the modifications will be
				! made

			IF (SALES_ORDER_LINES(STATUS_FLAG) = PARAMETER("STATUS_UPDATE"))
				! order line was copied
				#COPY_UPDATE =#YES
			END_IF
				! This flag identifies whether the line has
				! been created from copying. It is used to
				! ensure that all copied lines are selected
				! and modified, since this forces proper
				! calculation of price etc.

			IF (SALES_ORDER_LINES(ORDER_LINE_TYPE) = #SO_LINE_TYPE_NONSTOCK)
				#ORDER_LINE = SALES_ORDER_LINES(ORDER_LINE_NUMBER)

				IF (#AR_FREIGHT_IN_USE = #YES)
					PERFORM GET_FREIGHT_PREFIX ( &
						(SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR)), &
						(#LINE_PRICE_FREIGHT_INCLUSIVE), &
						(#WAREHOUSED_FLAG), &
						#FREIGHT_PREFIX, &
						#LINE_FREIGHT_APPLICABLE)

					! #LINE_PRICE_FREIGHT_INCLUSIVE value
					! is assigned as part of the
					! LINE_MODIFICATION_SETUP form.
				ELSE
					SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR) = ""
					#FREIGHT_PREFIX = ""
					#LINE_FREIGHT_APPLICABLE = #NO
				END_IF

				PERFORM NON_STOCK_MODIFY
				IF (%STATUS = %BACK OR %STATUS = %EXIT) GOTO OLD_NEXT_LINE
				IF (%STATUS = %FAILURE)  EXIT(%FAILURE)

				PERFORM FIND_CURRENT_SO_LINE_QTY (#SALES_UOM, #R1)

				GOTO NEXT_LINE
				! If its a non-stock line go off to special form
			ELSE
				IF (#SECURITY_ACTIVE = #YES AND #WAREHOUSE <> "")
					FIND IN SECURITY_PERIOD_ACCESS_VT &
						/WITH=SYS_ACCESS_TYPE=(PARAMETER("ACCESS_TYPE_WAREHOUSE")) &
						/WITH=SYS_ACCESS_CODE= #WAREHOUSE &
						/WITH=SOURCE_MODULE=(PARAMETER("MODULE_SO"))

					IF (%STATUS = %FAILURE)
						MESSAGE/IDENTIFIER/BELL/WAIT P_10631,(PARAMETER("MODULE_SO"))
						EXIT(%BACK)
					END_IF

					IF (SECURITY_PERIOD_ACCESS_VT(SYS_ALLOW_ACCESS) <> #YES)
						MESSAGE/IDENTIFIER/BELL/WAIT P_10631,(PARAMETER("MODULE_SO"))
						EXIT(%BACK)
					END_IF
				END_IF

				IF (#COPY_UPDATE = #YES)
					FIND IN PRODUCT_MASTER &
						/LOCK=NONE &
						/WITH=COMPANY_CODE=#COMPANY_CODE &
						/WITH=PART_CODE=#PART_CODE

					IF (%STATUS<>%SUCCESS)
						MESSAGE/IDENTIFIER/BELL/WAIT P_52319
						ROLLBACK
						EXIT(%FAILURE)
					END_IF

					#WAREHOUSED_FLAG= PRODUCT_MASTER(WAREHOUSED_FLAG)
					#BATCHES_REQD   = #NO
					#BATCH_EXPIRY   = PRODUCT_MASTER(BATCH_EXPIRY)

					IF (#BATCH_EXPIRY = "") #BATCH_EXPIRY = #NO

					IF (PRODUCT_MASTER(BATCHES_AT_SALES_ORDERS)=#YES &
					AND PRODUCT_MASTER(BATCHES_EXIST)=#YES &
					AND #WAREHOUSED_FLAG=#YES)
						#BATCHES_REQD=#YES
					END_IF

					IF (#WAREHOUSED_FLAG = #YES)
						FIND IN PRODUCT_WAREHOUSE &
							/LOCK=NONE &
							/WITH=COMPANY_CODE=#COMPANY_CODE &
							/WITH=WAREHOUSE=#WAREHOUSE &
							/WITH=PART_CODE=#PART_CODE

						IF (%STATUS<>%SUCCESS)
							MESSAGE/IDENTIFIER/BELL/WAIT P_52321
							ROLLBACK
							EXIT(%FAILURE)
						END_IF

						#PART_TAXABLE = PRODUCT_WAREHOUSE(TAXABLE)
					ELSE
						#PART_TAXABLE = PRODUCT_MASTER(TAXABLE)
					END_IF

					IF (#AR_FREIGHT_IN_USE = #YES)
						PERFORM GET_FREIGHT_PREFIX ( &
							(SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR)), &
							(#LINE_PRICE_FREIGHT_INCLUSIVE), &
							(#WAREHOUSED_FLAG), &
							#FREIGHT_PREFIX, &
							#LINE_FREIGHT_APPLICABLE)
					END_IF

					#LINE_MENU_SOURCE=MESSAGE("P_00432")
				ELSE
					FIND IN PRODUCT_MASTER &
						/LOCK=NONE &
						/WITH=COMPANY_CODE=#COMPANY_CODE &
						/WITH=PART_CODE=#PART_CODE

					IF (%STATUS <> %SUCCESS)
						MESSAGE/IDENTIFIER/BELL/WAIT P_52319
						ROLLBACK
						EXIT (%FAILURE)
					END_IF

					#WAREHOUSED_FLAG= PRODUCT_MASTER(WAREHOUSED_FLAG)
					#BATCHES_REQD   = #NO
					#BATCH_EXPIRY   = PRODUCT_MASTER(BATCH_EXPIRY)

					IF (#BATCH_EXPIRY = "") #BATCH_EXPIRY = #NO

					IF (PRODUCT_MASTER(BATCHES_AT_SALES_ORDERS) = #YES &
					AND PRODUCT_MASTER(BATCHES_EXIST) = #YES &
					AND #WAREHOUSED_FLAG = #YES)
						#BATCHES_REQD = #YES
					END_IF
				END_IF

				#EDIT_MODE = "MODIFY"
				#EC_MODE = "M"

				#ORDER_LINE	    = SALES_ORDER_LINES(ORDER_LINE_NUMBER)

				IF (#AR_FREIGHT_IN_USE = #YES)
					PERFORM GET_FREIGHT_PREFIX ( &
						(SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR)), &
						(#LINE_PRICE_FREIGHT_INCLUSIVE), &
						(#WAREHOUSED_FLAG), &
						#FREIGHT_PREFIX, &
						#LINE_FREIGHT_APPLICABLE)

					! #LINE_PRICE_FREIGHT_INCLUSIVE value
					! is assigned as part of the
					! LINE_MODIFICATION_SETUP form.
				ELSE
					SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR) = ""
					#FREIGHT_PREFIX = ""
					#LINE_FREIGHT_APPLICABLE = #NO
				END_IF

				PERFORM INITIALIZE_GLOBAL_STOCK_LINE

				PERFORM INITIALIZE_MODIFY_STOCK_LINE

				PERFORM MAINTAIN_STOCK_LINE
				! allow modifications to stocked line

				IF (%STATUS = %BACK OR %STATUS = %EXIT)  EXIT(%BACK)
				IF (%STATUS = %FAILURE)  EXIT(%FAILURE)

				GOTO NEXT_LINE
			END_IF
			! For a stock line branch depending on whether its
			! a copied line or not. If not we let them jump
			! straight to the end of line menu, otherwise they
			! have to work through the line input.
		END_IF
	END_BLOCK

	BEGIN_BLOCK ADD
		IF (%EDIT_MODE = %ADD)
			#EC_MODE = "A"
			#LINE_EDIT_MODE = "ADD"
			#ADD_MODE = #YES
			#WAREHOUSED_FLAG  = #NO
			#LINE_MENU_SOURCE = MESSAGE("P_00432")
			#SALES_ORDER_QTY	= 0
			#SALES_UOM = ""
			#NOMI_ORDER_QTY = 0
			#NOMI_UOM		= ""
			#PRICE_UOM		 = ""
			#NON_NOMI_UOM   = ""
			#OLD_SALES_ORDER_QTY = 0
			#ORIG_SALES_ORDER_QTY = 0
			#ORIG_PRICE_ORDER_QTY = 0
			#IC_PACKAGED_PRODUCT = #NO
			#SALES_REACH_CONTROL_FLAG = #YES

			SALES_ORDER_LINES(COMPANY_CODE)			= #COMPANY_CODE
			SALES_ORDER_LINES(DIVISION)			= #DIVISION
			SALES_ORDER_LINES(ORDER_NUMBER)			= #ORDER_NUMBER
			SALES_ORDER_LINES(MP_SHIPPING_CUSTOMER)		= #MP_SHIPPING_CUSTOMER
			SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE)	= #DEF_DELIVERY_ADDRESS
			SALES_ORDER_LINES(FINAL_ADDRESS_CODE)       = #HEADER_FINAL_ADDRESS_CODE
			SALES_ORDER_LINES(DELIVERY_INSTRUCTIONS)	= #DEF_DELIVERY_INST
			SALES_ORDER_LINES(SHIP_METHOD)			= #DEF_SHIP_METHOD
			SALES_ORDER_LINES(LOCATION)			= #LOCATION
			SALES_ORDER_LINES(BROKER_CODE)			= #BROKER_CODE
			SALES_ORDER_LINES(SALESPERSON_CODE)		= #SALESPERSON_CODE
			SALES_ORDER_LINES(SALES_COMMISSION_CODE)	= #SALES_COMMISSION_CODE
			SALES_ORDER_LINES(SALES_ANALYSIS_GROUP)		= #SA_GROUP
			SALES_ORDER_LINES(CUSTOMER_NUMBER)		= #CUSTOMER_NUMBER
			SALES_ORDER_LINES(MP_SHIPPING_CUSTOMER)		= #CUSTOMER_NUMBER
			SALES_ORDER_LINES(COST_CENTER)			= #DEF_COST_CENTER
			SALES_ORDER_LINES(ORDER_CYCLE)			= #ORDER_CYCLE
			SALES_ORDER_LINES(USERNAME)			= %USERNAME
			SALES_ORDER_LINES(SYSTEM_DATE)			= %NOW

			FIND IN SYS_CURRENCY_CONTROL_VT

			SALES_ORDER_LINES(SYS_CURRENCY_CODE)	      = SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE)
			SALES_ORDER_LINES(SYS_CURRENCY_RATE)	      = SYS_CURRENCY_CONTROL_VT(FIRST_CURRENCY_RATE)
			SALES_ORDER_LINES(SYS_CURRENCY_DATE) 		  = SYS_CURRENCY_CONTROL_VT(CURRENCY_DATE)
			SALES_ORDER_LINES(SYS_CURRENCY_FIXED_FLAG) = SYS_CURRENCY_CONTROL_VT(FIXED_RATE_INDIC)
			SALES_ORDER_LINES(SYS_CURRENCY_RATIO_INDIC)= SYS_CURRENCY_CONTROL_VT(CURR_RATIO_INDIC)
			SALES_ORDER_LINES(SYS_RATE_AUTHORITY)      = SYS_CURRENCY_CONTROL_VT(RATE_AUTHORITY)
			SALES_ORDER_LINES(SYS_RATE_TYPE)	   = SYS_CURRENCY_CONTROL_VT(RATE_TYPE)
			SALES_ORDER_LINES(SYS_BASE_CURRENCY)	      = SYS_CURRENCY_CONTROL_VT(BASE_CURRENCY_CODE)

			IF ( #DEF_SHIP_TERMS="" ) 
				FIND IN TERMS_CODE:SALES_ORDER_HEADERS &
					/LOCK=NONE &
					/WITH=COMPANY_CODE = #COMPANY_CODE &
					/WITH=DIVISION = #DIVISION &
					/WITH=ORDER_NUMBER = #ORDER_NUMBER  
				IF ( %STATUS = %SUCCESS ) 
					#DEF_SHIP_TERMS = TERMS_CODE:SALES_ORDER_HEADERS(SOP_SHIPPING_TERMS_CODE)
				END_IF
			END_IF

			SALES_ORDER_LINES(SOP_DESTINATION_WAREHOUSE)	= ""
			SALES_ORDER_LINES(SYS_FREIGHT_MODE)		= #DEF_FREIGHT_MODE
			SALES_ORDER_LINES(SOP_SHIPPING_TERMS_CODE)	= #DEF_SHIP_TERMS
			SALES_ORDER_LINES(SYS_FREIGHT_CONTRACT_NUMBER)	= #DEF_FREIGHT_CONTRACT

			#LINE_DIST_BOD_CODE		= #DEF_BOD_CODE
			#PRICE_CODE			= #ADDR_PRICE_CODE
			#CUSTOMER_TAX_CODE		= #DEF_CUSTOMER_TAX_CODE
			#LINE_PRICE_FREIGHT_INCLUSIVE	= #DEF_PRICE_FREIGHT_INCLUSIVE
			#LINE_PRICE_CODE_DESCRIPTION	= #DEF_PRICE_CODE_DESCRIPTION
			#LINE_CUST_PAYS_FREIGHT		= #DEF_CUST_PAYS_FREIGHT

			#TAXABLE		= #DEF_TAXABLE
			#LINE_DISCOUNT		= 0.0
			#PERCENT_DISCOUNT	= 0.0
			#LINE_VALUE		= 0.0
			#QTY_TIMES_PRICE	= 0.0
			#LINE_TAX		= 0.0
			#LINE_FREIGHT_TAX	= 0.0
			#LINE_GOODS_VALUE	= 0.0
			#LINE_TOTAL		= 0.0
			#WEIGHT			= 0.0
			#VOLUME			= 0.0
			#PART_CHANGE		= ""
			#PART_CODE		= ""
			#WAREHOUSE		= ""
			#SHIP_WAREHOUSE		= ""
			#OLD_PART_CODE_WAREHOUSED_FLAG = ""
			#TP_GIFT_LINE = 0

			IF (#COMPANY_EC_REPORT_TYPE <> "")
				#LINE_EC_REPORT_TYPE = #DEF_EC_REPORT_TYPE
				IF (#LINE_EC_REPORT_TYPE <> "")
					PERFORM CLEAR_EC_VARIABLES
					#EC_TRANSACTION_TYPE = #DEF_EC_TRANSACTION_TYPE
					#EC_MODE_TRANSPORT = #DEF_EC_MODE_TRANSPORT
					#EC_DELIVERY_TERMS = #DEF_EC_DELIVERY_TERMS
					#EC_STAT_FACTOR = #DEF_EC_STAT_FACTOR
				END_IF
			END_IF
		END_IF
	END_BLOCK

	INPUT_BLOCK ORDER_LINE_TYPE /ROW=1 /COL=6 &
			/TARGET=SALES_ORDER_LINES(ORDER_LINE_TYPE) &
			/HEADING="T" &
			/USING=REQUIRED

	BEGIN_BLOCK FINISH_SETUP_ADD

		DELETE ALL FROM TAX_TRANSACTIONS_VT

		IF (SALES_ORDER_LINES(ORDER_LINE_TYPE)=#SO_LINE_TYPE_NONSTOCK)

			#ORDER_LINE = SALES_ORDER_LINES(ORDER_LINE_NUMBER)
			#PART_CODE = ""
			#BATCHES_REQD			= #NO
			#ATP_IN_USE_FOR_PART	= #NO
			#BATCH_EXPIRY			= #NO
			#EC_PROCESSED_INDICATOR = ""
			#EC_TARIFF_CODE			= ""
			#IC_UOM_CONTROL			= ""
			#IC_PACKAGED_PRODUCT	= #NO
			#NOMI_UOM				= ""
			#NON_NOMI_UOM			= ""
			#WAREHOUSE				= ""
			#OLD_WAREHOUSE			= ""
			#WAREHOUSED_FLAG		= #NO
			#PART_TAXABLE			= #NO
			#ATP_IN_USE_FOR_PW		= #NO
			#LINE_WH_DIST_ZONE		= ""
			#LINE_WH_COUNTRY		= ""
			#LINE_TM_IN_USE			= #NO
			#SALES_UOM				= ""
			#PACK_UOM				= ""
			#PRICE_UOM				= ""
			#SALES_ORDER_QTY		= ""
			#PERCENT_DISCOUNT		= ""
			#LINE_DISCOUNT			= ""
			#WEIGHT					= ""
			#VOLUME					= ""
			#LINE_WEIGHT			= ""
			#ENTRY_BY_CPC			= #NO

			SALES_ORDER_LINES(PART_CODE)	 = ""
			SALES_ORDER_LINES(WAREHOUSE)	 = ""
			SALES_ORDER_LINES(PRODUCT_GROUP) = ""
			SALES_ORDER_LINES(SOP_NOMINATED_UNIT)		= ""
			SALES_ORDER_LINES(SOP_NOMINATED_PRICE_UNIT) = ""
			SALES_ORDER_LINES(SALES_PRICE)				= ""
			SALES_ORDER_LINES(SALES_PRICE_INC_TAX)		= ""
			SALES_ORDER_LINES(ORDER_LINE_REFERENCE)		= ""

			IF (#AR_FREIGHT_IN_USE = #YES)
				PERFORM GET_FREIGHT_DORC_IND_VALUE ( &
					#LINE_PRICE_FREIGHT_INCLUSIVE, &
					#LINE_CUST_PAYS_FREIGHT, &
					(#WAREHOUSED_FLAG), &
					SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR), &
					#FREIGHT_PREFIX, &
					#LINE_FREIGHT_APPLICABLE)

				! #line_price_freight_inclusive and #line_cust_pays_freight
				! values are assigned as part of the record Add variable
				! setup.
			ELSE
				SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR) = ""
				#FREIGHT_PREFIX = ""
				#LINE_FREIGHT_APPLICABLE = #NO
			END_IF

			PERFORM NON_STOCK_ENTRY
			IF (%STATUS = %FAILURE)  EXIT(%FAILURE)
			IF (%STATUS = %EXIT OR  %STATUS = %BACK)  GOTO ORDER_LINE_TYPE

			!add the line qty record - if not already created in REQUIRED_DATES
			PERFORM ADD_NO_UPDATE_SO_LINE_ORDER_QTY( #SALES_UOM, #SALES_ORDER_QTY, #YES, #R1)
			IF (#PRICE_UOM <> #SALES_UOM)
				PERFORM ADD_NO_UPDATE_SO_LINE_ORDER_QTY( #PRICE_UOM, #PRICE_ORDER_QTY, #YES, #R1)
			END_IF

			GOTO NEXT_LINE

		ELSE			
			#EC_MODE = "A"
			#EDIT_MODE = "ADD"
			#LINE_EDIT_MODE = "ADD"
			#ORDER_LINE = SALES_ORDER_LINES(ORDER_LINE_NUMBER)

			SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR) = ""
			#FREIGHT_PREFIX = ""
			#LINE_FREIGHT_APPLICABLE = #NO

			PERFORM INITIALIZE_ADD_STOCK_LINE

			PERFORM INITIALIZE_GLOBAL_STOCK_LINE		
			
			IF (#ORDER_BY_CPC <> #SOE_BY_PART)				
				INPUT_BLOCK CUSTOMERS_PART_CODE_ENTRY /ROW=1 /COL=8 /DISPLAY_LENGTH=15 &
					/TARGET=#TEMP_PART_CODE &
					/HEADING=FIELD_HEADING(PART_CODE) &
					/USING=PART_MASTER_BY_CUSTOMER(CUSTOMERS_PART_CODE) &
					/LOV=CUSTOMERS_PART_CODE_VW(CUSTOMERS_PART_CODE,DESCRIPTION,PART_CODE,PART_DESC_1) &
					/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
					/LOV_WITH=DIVISION=#DIVISION &
					/LOV_WITH=CUSTOMER_NUMBER=#CUSTOMER_NUMBER &					
					/USER_KEY18=(PERFORM "GEMIC:IC_I_PRODUCT_MASTER" EXTERNAL_ENTRY_FORM) &
					/USE_IF=((SALES_ORDER_LINES(ORDER_LINE_TYPE)=#SO_LINE_TYPE_STOCK) AND (#ORDER_BY_CPC <> #SOE_BY_PART) AND (%EDIT_MODE = %ADD))
					
				IF (#TEMP_PART_CODE='')
					#PART_CODE = ""			
					#ENTRY_BY_CPC=#NO
					
					IF (#ORDER_BY_CPC<>#SOE_BY_CPC)
						GOTO MAINTAIN_STOCK_LINE
					ELSE
						GOTO CUSTOMERS_PART_CODE_ENTRY
					END_IF
				END_IF
					
				START_STREAM COUNT_PART_BY_CPC &
					/TABLE=PART_MASTER_BY_CUSTOMER &					
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=DIVISION=#DIVISION &
					/WITH=CUSTOMER_NUMBER=#CUSTOMER_NUMBER &
					/WITH=CUSTOMERS_PART_CODE=#TEMP_PART_CODE &				
					/STATISTIC=#PART_COUNT=COUNT
		
				FETCH COUNT_PART_BY_CPC
				IF (%STATUS <> %FAILURE)
					BEGIN_CASE (#PART_COUNT)
					CASE 1
						FIND IN PART_MASTER_BY_CUSTOMER &
							/LOCK=NONE &
							/WITH=COMPANY_CODE=#COMPANY_CODE &
							/WITH=DIVISION=#DIVISION &
							/WITH=CUSTOMER_NUMBER=#CUSTOMER_NUMBER &
							/WITH=CUSTOMERS_PART_CODE=#TEMP_PART_CODE	
						
						#PART_CODE=PART_MASTER_BY_CUSTOMER(PART_CODE)						
						#ENTRY_BY_CPC=#YES
						GOTO CONTINUE			
					CASE 0
						IF (#ORDER_BY_CPC=#SOE_BY_BOTH)
							GOTO PART_CODE_ENTRY
						ELSE_IF (#ORDER_BY_CPC=#SOE_BY_CPC)
							MESSAGE/IDENTIFIER/BELL/WAIT P_33864
							GOTO CUSTOMERS_PART_CODE_ENTRY
						END_IF
					CASE ELSE						
						PERFORM SEL_PART_CODE							
						#PART_CODE=PRODUCT_MASTER(PART_CODE)						
						#ENTRY_BY_CPC=#YES
						GOTO CONTINUE
					END_CASE
				ELSE			
					IF (#ORDER_BY_CPC=#SOE_BY_BOTH)
						GOTO PART_CODE_ENTRY
					ELSE_IF (#ORDER_BY_CPC=#SOE_BY_CPC)
						MESSAGE/IDENTIFIER/BELL/WAIT P_33864
						GOTO CUSTOMERS_PART_CODE_ENTRY
					END_IF
				END_IF
		
				BEGIN_BLOCK PART_CODE_ENTRY
					#PART_CODE=#TEMP_PART_CODE
					#ENTRY_BY_CPC=#NO
				END_BLOCK
				
				BEGIN_BLOCK CONTINUE
					PERFORM VALIDATE_PRODUCT
	 				IF (%STATUS=%FAILURE)
						MESSAGE/IDENTIFIER/BELL/WAIT P_33867
	 					GOTO CUSTOMERS_PART_CODE_ENTRY					
					END_IF
	 				SALES_ORDER_LINES(PART_CODE) = #PART_CODE					
					PERFORM GET_CPC_DESC(#PART_CODE,#CPC_DESC)					
				END_BLOCK
			ELSE
				INPUT_BLOCK PART_CODE_EZ /ROW=1 /COL=8 &
					/TARGET=#PART_CODE &
					/HEADING=FIELD_HEADING(PART_CODE) &
					/USING=SALES_ORDER_LINES(PART_CODE) &
				!Change 002 - Added PART_DESC_2 to LOV
					!/LOV=PRODUCT_MASTER(PART_CODE,PART_DESC_1) &
					/LOV=PRODUCT_MASTER(PART_CODE,PART_DESC_1,PART_DESC_2) &
				!Change 002 End
					/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
					/LOV_WITH=ACTIVATION_STATUS =(PARAMETER("STATUS_ACTIVE")) &
					/USER_KEY18=(PERFORM "GEMIC:IC_I_PRODUCT_MASTER" EXTERNAL_ENTRY_FORM) &
					/USE_IF=((SALES_ORDER_LINES(ORDER_LINE_TYPE)=#SO_LINE_TYPE_STOCK) AND (#ORDER_BY_CPC = #SOE_BY_PART))
					
				PERFORM VALIDATE_PRODUCT
				IF (%STATUS=%FAILURE)
					GOTO PART_CODE_EZ
				ELSE
					! needed by SYS_L_FREIGHT_CALCULATION
					SALES_ORDER_LINES(PART_CODE) = #PART_CODE
				END_IF
			END_IF 
			
			PERFORM "GEMSOP:SOP_S_L_CONTROL_MAINTENANCE" JUDGMENT_SOP_CONTROLS (#COMPANY_CODE, &
																				#DIVISION, &
																				(#CUSTOMER_NUMBER), &
																				(#HEADER_FINAL_ADDRESS_CODE), &
																				#PART_CODE,"","","","", &
																				#ERROR_OCCURRED, #ERROR_MESSAGE,#SALES_REACH_RETURN_FLAG,#RESTRICT_MODE)
			
			IF ( #SALES_REACH_RETURN_FLAG = #NO ) 
				PERFORM GET_FINAL_RETURN_MSG (#COMPANY_CODE,#DIVISION,#CUSTOMER_NUMBER,#HEADER_FINAL_ADDRESS_CODE,#RETURN_PARA_MSG)  
			END_IF 
			
			IF ( #ERROR_OCCURRED = "1")
				ERROR/TEXT_ONLY/BELL #ERROR_MESSAGE
			END_IF
			
			IF (PRODUCT_MASTER(BATCHES_EXIST) = #YES)
				IF (PRODUCT_MASTER(BATCHES_AT_SALES_ORDERS) = #YES)
					GOTO MAINTAIN_STOCK_LINE
				END_IF

				IF (PRODUCT_MASTER(CHARACTERISTICS_AT_ORDER_ENTRY) = #YES)
					PERFORM INITIALIZE_CHARACTERISTICS
					IF (#SPECIFICATION_CODE = "")
						GOTO MAINTAIN_STOCK_LINE
					ELSE_IF (#CHARACTERISTIC_NEEDS_LIMIT = #YES)
						GOTO MAINTAIN_STOCK_LINE
					END_IF
				END_IF
			END_IF

			IF (#IC_PACKAGED_PRODUCT = #YES)

				FIND IN IC_PRODUCT_MASTER_UNITS &
					/LOCK=NONE &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=PART_CODE=#PART_CODE &
					/WITH=UNIT_OF_MEASURE=#SALES_UOM &
					/WITH=IC_PRODUCT_UOM_TYPE=(PARAMETER("IC_PACKAGED_UOM"))

				IF (%STATUS = %SUCCESS)
					#PACK_UOM = #SALES_UOM
				ELSE
					GOTO MAINTAIN_STOCK_LINE
				END_IF
			END_IF

			IF (#WAREHOUSED_FLAG = #YES)
				IF (#LINE_DIST_BOD_CODE = "")
					GOTO MAINTAIN_STOCK_LINE
				END_IF

				PERFORM VALIDATE_WAREHOUSE
				IF (%STATUS = %FAILURE)
					GOTO MAINTAIN_STOCK_LINE
				END_IF

				PERFORM VALIDATE_PRODUCT_WAREHOUSE
				IF (%STATUS = %FAILURE)
					GOTO MAINTAIN_STOCK_LINE
				END_IF

				! needed by SYS_L_FREIGHT_CALCULATION
				SALES_ORDER_LINES(WAREHOUSE) = #WAREHOUSE
				
			END_IF
			
			PERFORM	 LINE_CPANEL ("",(SALES_ORDER_LINES(ORDER_LINE_TYPE)),#DIVISION,#PART_CODE,#WAREHOUSE)

			OUTPUT_BLOCK PART_CODE_DESCR1_EZ /ROW=2 /COL=8 &
				/SOURCE=(PRODUCT_MASTER(PART_DESC_1)) &
				/USE_IF=((SALES_ORDER_LINES(ORDER_LINE_TYPE)=#SO_LINE_TYPE_STOCK) AND (#ENTRY_BY_CPC=#NO))

			OUTPUT_BLOCK PART_CODE_DESCR2_EZ /ROW=2 /COL=34 &
				/SOURCE=(PRODUCT_MASTER(PART_DESC_2)) &
				/USE_IF=((SALES_ORDER_LINES(ORDER_LINE_TYPE)=#SO_LINE_TYPE_STOCK) AND (#ENTRY_BY_CPC=#NO))

			OUTPUT_BLOCK PART_CODE_DESCR1_EZ_BY_CPC /ROW=3 /COL=28 &
				/SOURCE=(PRODUCT_MASTER(PART_DESC_1)) &
				/USE_IF=((SALES_ORDER_LINES(ORDER_LINE_TYPE)=#SO_LINE_TYPE_STOCK) AND (#ENTRY_BY_CPC=#YES))

			OUTPUT_BLOCK PART_CODE_DESCR2_EZ_BY_CPC /ROW=3 /COL=53 &
				/SOURCE=(PRODUCT_MASTER(PART_DESC_2)) &
				/USE_IF=((SALES_ORDER_LINES(ORDER_LINE_TYPE)=#SO_LINE_TYPE_STOCK) AND (#ENTRY_BY_CPC=#YES))
			
			PERFORM VALIDATE_REQUESTED_DATE
			
			OUTPUT_BLOCK CUSTOMERS_PART_CODE_1 /ROW=3 /COL=13 /LEN=20 &
				! /PROMPT=FIELD_SHORT_PROMPT(CUSTOMERS_PART_CODE) &
				/SOURCE=(SALES_ORDER_LINES(CUSTOMERS_PART_CODE)) &
				/USE_IF=((#ORDER_BY_CPC <> #SOE_BY_PART) AND (#ENTRY_BY_CPC=#NO))
			
			OUTPUT_BLOCK CUSTOMERS_PART_CODE_1_ENTRY_BY_CPC /ROW=1 /COL=8 /LEN=15 &				
				/SOURCE=(SALES_ORDER_LINES(CUSTOMERS_PART_CODE)) &
				/USE_IF=((#ORDER_BY_CPC <> #SOE_BY_PART) AND (#ENTRY_BY_CPC=#YES))
				
			OUTPUT_BLOCK CUSTOMERS_PART_DESC_1 /ROW=3 /COL=34 &				
				/SOURCE=#CPC_DESC &
				/USE_IF=((#ORDER_BY_CPC <> #SOE_BY_PART) AND (#ENTRY_BY_CPC=#NO))
				
			OUTPUT_BLOCK CUSTOMERS_PART_DESC_1_BY_CPC /ROW=2 /COL=8 &				
				/SOURCE=#CPC_DESC &
				/USING=PART_MASTER_BY_CUSTOMER(DESCRIPTION) &
				/USE_IF=((#ORDER_BY_CPC <> #SOE_BY_PART) AND (#ENTRY_BY_CPC=#YES))
				
			OUTPUT_BLOCK PART_CODE_1_BY_CPC /ROW=3 /COL=13 /LEN=15 &
				! /PROMPT=(MESSAGE("P_33866")) &
				/SOURCE=(SALES_ORDER_LINES(PART_CODE)) &
				/USE_IF=((#ORDER_BY_CPC <> #SOE_BY_PART) AND (#ENTRY_BY_CPC=#YES))	
			
			OUTPUT_BLOCK PART_CODE_1 /ROW=1 /COL=8 /LEN=15 &				
				/SOURCE=(SALES_ORDER_LINES(PART_CODE)) &
				/USE_IF=((SALES_ORDER_LINES(ORDER_LINE_TYPE)=#SO_LINE_TYPE_STOCK) AND (#ORDER_BY_CPC <> #SOE_BY_PART) AND (#ENTRY_BY_CPC=#NO))
			
			OUTPUT_BLOCK /ROW=3 /COL=2 &
				/SOURCE=(FIELD_SHORT_PROMPT(CUSTOMERS_PART_CODE) & MESSAGE("FA_T0332"))&
				/ATTRIBUTES=NONE &
				/USE_IF=(#ENTRY_BY_CPC = #NO)
				
			OUTPUT_BLOCK /ROW=3 /COL=2 &
				/SOURCE=(MESSAGE("P_33866")) &
				/ATTRIBUTES=NONE &
				/USE_IF=(#ENTRY_BY_CPC = #YES)	

			IF (#WAREHOUSE <> "")
				PERFORM STOCK_AVAILABILITY
			END_IF

			BEGIN_BLOCK SAVE_OLD_UOM
				#OLD_SALES_UOM = #SALES_UOM
			END_BLOCK

			IF ( #SALES_REACH_RETURN_FLAG = #NO ) 
				MESSAGE/IDENTIFIER/BELL P_37128
				MESSAGE/IDENTIFIER/BELL P_37118,#PART_CODE,#RETURN_PARA_MSG
			END_IF

			INPUT_BLOCK ORDER_QUANTITY_EZ /ROW=1 /COL=24 /LEN=14 &
				/TARGET=#SALES_ORDER_QTY &
				/USING=SALES_ORDER_LINE_QTYS(ORDER_QUANTITY), NONEGATIVE &
				/INPUT_MASK=#SALES_UOM_MASK &
				/RHEADING=FIELD_HEADING(IC_QUANTITY)

			INPUT_BLOCK SALES_UNIT_EZ_NP /ROW=1 /COL=39 &
				/TARGET=#SALES_UOM &
				/USING=SALES_ORDER_LINES(UNIT_SALES) &
				/LOV=IC_PRODUCT_MASTER_UNITS(UNIT_OF_MEASURE) &
				/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
				/LOV_WITH=PART_CODE=#PART_CODE &
				/RHEADING=FIELD_HEADING(UNIT_OF_MEASURE) &
				/USE_IF=(#IC_PACKAGED_PRODUCT <> #YES)

			INPUT_BLOCK SALES_UNIT_EZ_PK /ROW=1 /COL=39 &
				/TARGET=#SALES_UOM &
				/USING=SALES_ORDER_LINES(UNIT_SALES) &
				/LOV=IC_PRODUCT_MASTER_UNITS(UNIT_OF_MEASURE) &
				/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
				/LOV_WITH=PART_CODE=#PART_CODE &
				/LOV_WITH=IC_PRODUCT_UOM_TYPE=(PARAMETER("IC_PACKAGED_UOM")) &
				/RHEADING=FIELD_HEADING(UNIT_OF_MEASURE) &
				/USE_IF=(#IC_PACKAGED_PRODUCT = #YES)

			
			!Change 012
			PERFORM VOL_ORDER_LINE_REFERENCE_EZ
			!Change 012 End

			#OLD_SALES_UOM_MASK = #SALES_UOM_MASK
			#OLD_SALES_UOM_NOD = #SALES_UOM_NOD

			PERFORM VERIFY_UOMS
			IF (%STATUS <> %SUCCESS)
				GOTO SALES_UNIT_EZ_NP

			ELSE_IF ((#OLD_SALES_UOM_MASK <> #SALES_UOM_MASK) &
				AND (#OLD_SALES_UOM_NOD > #SALES_UOM_NOD))

				MESSAGE/IDENTIFIER/BELL/WAIT P_13270
				GOTO ORDER_QUANTITY_EZ
			END_IF

			BEGIN_BLOCK INV_AVAIL_NEW_SALES_UOM
				IF (#SALES_UOM <> #OLD_SALES_UOM)
					#OLD_SALES_UOM = #SALES_UOM
					IF (#WAREHOUSE <> "")
						PERFORM STOCK_AVAILABILITY
					END_IF
				END_IF
			END_BLOCK

			! These fields are potentially needed in called programs; update now.
			SALES_ORDER_LINES(UNIT_SALES) = #SALES_UOM
			SALES_ORDER_LINES(SOP_NOMINATED_UNIT) = #NOMI_UOM

			IF (#IC_PACKAGED_PRODUCT = #YES)
				#PACK_UOM = #SALES_UOM
				PERFORM VERIFY_PACK_UNIT
				IF (%STATUS <> %SUCCESS)
					GOTO MAINTAIN_STOCK_LINE
				END_IF

				! This field is potentially needed in a called program; update now.
				SALES_ORDER_LINES(IC_PACK_UNIT) = #PACK_UOM
			ELSE
				#PACK_UOM = ""
			END_IF

			PERFORM SET_QTIES_NO_LOTS_AT_SO
			IF (%STATUS <> %SUCCESS)
				IF ((#IC_PACKAGED_PRODUCT = #YES) &
					AND (%STATUS = %FAILURE))
					GOTO MAINTAIN_STOCK_LINE
				ELSE
					GOTO ORDER_QUANTITY_EZ
				END_IF
			END_IF

			IF (#ORIG_SALES_ORDER_QTY <> #SALES_ORDER_QTY)
				#QTY_VALUE_CHANGE = #YES
				#TP_VALUE_CHANGE = #YES
				#BALANCE = #SALES_ORDER_QTY - #ORIG_SALES_ORDER_QTY
			END_IF

			PERFORM SET_UP_ATP_NO_LOTS_AT_SALES
			IF (%STATUS <> %SUCCESS)
				GOTO FINISH_SETUP_ADD
			END_IF

			OUTPUT_BLOCK WAREHOUSE_EZ /ROW=1 /COL=64 /LEN=2 &
				/SOURCE=#WAREHOUSE &
				/USING=SALES_ORDER_LINES(WAREHOUSE) &
				/LHEADING=(FIELD_SHORT_PROMPT(WAREHOUSE)) &
				/USE_IF=((SALES_ORDER_LINES(ORDER_LINE_TYPE)=#SO_LINE_TYPE_STOCK) &
			        	AND (#WAREHOUSED_FLAG = #YES))

			OUTPUT_BLOCK NON_WAREHOUSE_EZ /ROW=1 /COL=64 /LEN=2 &
				/SOURCE=("") &
				/LHEADING=(FIELD_SHORT_PROMPT(WAREHOUSE)) &
				/USE_IF=((SALES_ORDER_LINES(ORDER_LINE_TYPE)=#SO_LINE_TYPE_NONSTOCK) &
			        	OR (#WAREHOUSED_FLAG = #NO))

			PERFORM SET_PART_TAXABLE

			PERFORM SALES_PRICING_ROUTINE(#RSP_STATUS, #RSP_MESSAGE)
			BEGIN_CASE (#RSP_STATUS)
				CASE (#YES)
					IF (#RSP_MESSAGE <> "")
						ERROR/TEXT_ONLY/NOBELL/NOWAIT #RSP_MESSAGE
					END_IF
				CASE ELSE
					MESSAGE/IDENTIFIER/BELL/WAIT #RSP_MESSAGE
					GOTO MAINTAIN_STOCK_LINE
			END_CASE

			OUTPUT_BLOCK SALES_PRICE_EZ /ROW=1 /COL=44 &
				/SOURCE=#PRICE &
				/USING=SALES_ORDER_LINES(SALES_PRICE) &
				/RHEADING=(FIELD_SHORT_PROMPT(UNIT_PRICE)) &
				/OUTPUT_MASK=#SALES_PRICE_MASK &
				/USE_IF=(#PRICING_METHOD_OPTIONAL=#NO)

			OUTPUT_BLOCK TIP_SALES_PRICE_EZ /ROW=1 /COL=44 &
				/SOURCE=#PRICE &
				/USING=SALES_ORDER_LINES(SALES_PRICE) &
				/RHEADING=(#PRICE_HEADING) &
				/OUTPUT_MASK=#SALES_PRICE_MASK &
				/USE_IF=(#PRICING_METHOD_OPTIONAL=#YES)

			OUTPUT_BLOCK SALES_PRICE_UNIT_EZ /ROW=1 /COL=59 &
				/SOURCE=#PRICE_UOM &
				/USING=SALES_ORDER_LINES(UNIT_PRICE) &
				/RHEADING=FIELD_HEADING(UNIT_OF_MEASURE)

			#OLD_PRICE_UOM = #PRICE_UOM

			IF ( #PRICING_METHOD = #TAX_INCLUSIVE )

				IF (#WAREHOUSED_FLAG = #YES)
					#PRODUCT_TAX_CODE = PRODUCT_WAREHOUSE(PRODUCT_TAX_CODE)
				ELSE
					#PRODUCT_TAX_CODE = PRODUCT_MASTER(PRODUCT_TAX_CODE)
				END_IF
				IF (#PRODUCT_TAX_CODE = "")
					#PRODUCT_TAX_CODE = #DEF_PART_TAX_CODE
				END_IF
				IF (#CUSTOMER_TAX_CODE = "")
					#CUSTOMER_TAX_CODE = #DEF_CUST_TAX_CODE
				END_IF

				PERFORM SETUP_TAX_CONTROL_VT

				IF ( #TAXABLE = #NO OR #PART_TAXABLE = #NO )
					LB_TAX_CONTROL_VT(PRICING_METHOD) = #TAX_EXCLUSIVE
				END_IF

				LB_TAX_CONTROL_VT(PART_CODE) = SALES_ORDER_LINES(PART_CODE)
				LB_TAX_CONTROL_VT(WAREHOUSE) = SALES_ORDER_LINES(WAREHOUSE)
				LB_TAX_CONTROL_VT(CUSTOMER_NUMBER) = SALES_ORDER_HEADERS(CUSTOMER_NUMBER)
				LB_TAX_CONTROL_VT(INVOICE_ADDRESS_CODE) = SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)
				LB_TAX_CONTROL_VT(DELIVERY_ADDRESS_CODE) = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
				LB_TAX_CONTROL_VT(TRANSACTION_NUMBER) = SALES_ORDER_HEADERS(ORDER_NUMBER)
				LB_TAX_CONTROL_VT(TRANSACTION_TYPE) = PARAMETER("TTYPE_SO")
				LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE) = #PRODUCT_TAX_CODE
				LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE) = #CUSTOMER_TAX_CODE
				LB_TAX_CONTROL_VT(ORDER_LINE_TYPE) = ""
				LB_TAX_CONTROL_VT(FORM_TITLE) = ""
				LB_TAX_CONTROL_VT(PRICE_ORDER_QTY) = #PRICE_ORDER_QTY
				LB_TAX_CONTROL_VT(SALES_PRICE) = #PRICE
				LB_TAX_CONTROL_VT(LINE_DISCOUNT) = 0

		        PERFORM "GEMLB:LB_L_TAX_CONTROL" ( "T", #ERROR_OCCURRED, #ERROR_MESSAGE )

				IF (%STATUS = %BACK OR %STATUS = %EXIT)
					EXIT (%STATUS)
				END_IF

				IF ( #ERROR_OCCURRED ) ERROR/TEXT_ONLY #ERROR_MESSAGE

				FIND IN LB_TAX_CONTROL_VT

				#NET_PRICE = LB_TAX_CONTROL_VT(NET_PRICE)
				#NET_LINE_VALUE = LB_TAX_CONTROL_VT(NET_LINE_VALUE)

				#QTY_TIMES_PRICE = #NET_LINE_VALUE

			ELSE

				#QTY_TIMES_PRICE = ROUND( #PRICE_ORDER_QTY * #PRICE, #CURRENCY_DECIMAL )

			END_IF

			OUTPUT_BLOCK TOTAL_CURRENCY_EZ /ROW=2 /COL=61 &
				/LEN=(#CURRENCY_LEN) &
				/SOURCE=(#QTY_TIMES_PRICE) &
				/USING=SALES_ORDER_LINES(SOP_ORDER_TOTAL_CURRENCY) &
				/OUTPUT_MASK=(#CURRENCY_MASK) &
				/USE_IF=(#PRICING_METHOD<>#TAX_INCLUSIVE)

			OUTPUT_BLOCK TIP_TOTAL_CURRENCY_EZ /ROW=2 /COL=61 &
				/LEN=(#CURRENCY_LEN) &
				/SOURCE=(#LINE_TOTAL) &
				/USING=SALES_ORDER_LINES(SOP_ORDER_TOTAL_CURRENCY) &
				/OUTPUT_MASK=(#CURRENCY_MASK) &
				/USE_IF=(#PRICING_METHOD=#TAX_INCLUSIVE)

			PERFORM CALC_WEIGHT_VOL
			IF (%STATUS = %FAILURE)
				GOTO FINISH_SETUP_ADD
			END_IF

			PERFORM CALC_FREIGHT_FROM_QTY
			IF (%STATUS = %FAILURE)
				GOTO FINISH_SETUP_ADD
			END_IF

			IF (#WAREHOUSED_FLAG <> #YES)
				PERFORM NON_WAREHOUSED_FREIGHT
			END_IF

			PERFORM DISCOUNTING_ROUTINE
			IF (%STATUS <> %SUCCESS)
				#DISCOUNT_BASIS = #QTY_TIMES_PRICE
			END_IF

			IF (#TP_PROMOTIONS_IN_USE= #YES)
				PERFORM PROMOTION_DISCOUNTS
			END_IF

			PERFORM SALES_TAX
			IF (%STATUS = %BACK OR %STATUS = %EXIT)
				GOTO SALES_UNIT_EZ_NP
			END_IF

			PERFORM CALC_LINE_TOTAL

			PERFORM EC_REPORTING

			PERFORM CONVERT_VALUE_TO_BASE (#LINE_TOTAL,#NET_VALUE_BASE)
			IF (%STATUS = %FAILURE)
				EXIT (%FAILURE)
			END_IF

			IF (#SECURITY_ACTIVE = #YES AND #NET_VALUE_BASE > #TRANSACTION_MAX)
				MESSAGE/IDENTIFIER/BELL/WAIT P_00872
				GOTO ORDER_QUANTITY_EZ
			END_IF

			INPUT_BLOCK LINE_DETAILS /ROW=1 /COL=77 &
				/SOURCE=(#NO) &
				/LEN=1 &
				/TARGET=#DO_LINE_DETAILS &
				/PROMPT=(MESSAGE("P_64051")) &
				/USING=REQUIRED &
				/USE_IF=(SALES_ORDER_LINES(ORDER_LINE_TYPE)=#SO_LINE_TYPE_STOCK)

			#DO_LINE_DETAILS = LEFT( (UPPERCASE(#DO_LINE_DETAILS)), 1)
			IF ((#DO_LINE_DETAILS <> #NO) AND (#DO_LINE_DETAILS <> #YES))
				GOTO LINE_DETAILS
			END_IF

			IF (#DO_LINE_DETAILS)
				GOTO MAINTAIN_STOCK_LINE
			ELSE				
				PERFORM COMPLETE_ORDER_LINE
				IF (%STATUS <> %SUCCESS)
					GOTO FINISH_SETUP_ADD
				END_IF
				
				IF ( #SALES_REACH_CONTROL_FLAG = #YES OR #COPY_REACH_CHECK_FALG = #YES ) 
					PERFORM "GEMSOP:SOP_S_L_CONTROL_MAINTENANCE" JUDGMENT_SOP_CONTROLS (#COMPANY_CODE, &
																					#DIVISION, &
																					(#CUSTOMER_NUMBER), &
																					(SALES_ORDER_LINES(FINAL_ADDRESS_CODE)), &
																					(SALES_ORDER_LINES(PART_CODE)),"","","","", &
																					#ERROR_OCCURRED, #ERROR_MESSAGE,#SALES_REACH_RETURN_FLAG,#RESTRICT_MODE)
																				
					IF ( #ERROR_OCCURRED = "1")
						ERROR/TEXT_ONLY/BELL #ERROR_MESSAGE
					END_IF
					
					IF ( #SALES_REACH_RETURN_FLAG = #NO ) 
						PERFORM GET_FINAL_RETURN_MSG (#COMPANY_CODE,#DIVISION,#CUSTOMER_NUMBER,(SALES_ORDER_LINES(FINAL_ADDRESS_CODE)),#RETURN_PARA_MSG)
						
						MESSAGE/IDENTIFIER/BELL P_37128
						MESSAGE/IDENTIFIER/BELL P_37118,(SALES_ORDER_LINES(PART_CODE)),#RETURN_PARA_MSG
						GOTO MAINTAIN_STOCK_LINE
					END_IF				
				END_IF
								
				GOTO NEXT_LINE
			END_IF

		! if else continues through next block
		!* IF (SALES_ORDER_LINES(ORDER_LINE_TYPE)=#SO_LINE_TYPE_NONSTOCK) *
	END_BLOCK

	BEGIN_BLOCK MAINTAIN_STOCK_LINE

			PERFORM MAINTAIN_STOCK_LINE

			IF (%STATUS = %BACK OR %STATUS = %EXIT )

				#DO_LINE_DETAILS = #NO

				PERFORM DELETE_EXISTING_DETAIL_LINES

				PERFORM DELETE_SALES_LINE_QTYS

				!Change 003 - Clean up minor/balance component entries to prevent incorrect entries if this line number is recreated
				PERFORM VOL_DELETE_MINBAL
				!Change 003 End
				
				PERFORM DELETE_ALL_LINE_DISCOUNTS

				PERFORM	 LINE_CPANEL ("REMOVE","","","")
				
				GOTO FINISH_SETUP_ADD

			END_IF

			#DO_LINE_DETAILS = #NO

			GOTO NEXT_LINE
		END_IF
			! When inserting perform the routine depending on
			! the order line type
	END_BLOCK

	BEGIN_BLOCK NEXT_LINE
		! This block is convenient for jumps made from previous blocks to here.
	END_BLOCK
	
	BEGIN_BLOCK REMOVE_LINE_CPANEL 
		PERFORM	 LINE_CPANEL ("REMOVE","","","")
	END_BLOCK
	 
	BEGIN_BLOCK UPDATE_PHYSICAL_TOTALS
!Add the following line issue#368358-12
		#NEW_QTY_FACTOR = (SALES_ORDER_LINE_QTYS(ORDER_QUANTITY) - &
											 SALES_ORDER_LINE_QTYS(QTY_INVOICED) - &
											 SALES_ORDER_LINE_QTYS(IC_QTY_CLOSED)) / SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)
		
		#NEW_LINE_OS_VALUE = (#LINE_VALUE - #LINE_DISCOUNT + #LINE_TAX) * #NEW_QTY_FACTOR

!End of adds


		FIND IN SALES_ORDER_HEADERS &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION = #DIVISION &
			/WITH=ORDER_NUMBER=#ORDER_NUMBER &
			/LOCK=WRITE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_52217
			EXIT(%FAILURE)
		END_IF

		IF (SALES_ORDER_LINES(STATUS_FLAG) = PARAMETER("STATUS_UPDATE"))
			SALES_ORDER_LINES(STATUS_FLAG) = ""
		END_IF

		SALES_ORDER_LINES(SOP_ORDER_TOTAL_CURRENCY) 	= #LINE_VALUE
		SALES_ORDER_LINES(LINE_DISCOUNT)		= #LINE_DISCOUNT
		SALES_ORDER_LINES(LINE_TAX)			= #LINE_TAX
		SALES_ORDER_LINES(TAX_ON_FREIGHT)		= #LINE_FREIGHT_TAX
		SALES_ORDER_LINES(SOP_GOODS_VALUE_CURRENCY)	= #LINE_GOODS_VALUE
		SALES_ORDER_LINES(LINE_DISCOUNT_PERCENT)	= #PERCENT_DISCOUNT
		SALES_ORDER_LINES(CUSTOMER_TAX_CODE)		= #CUSTOMER_TAX_CODE
		SALES_ORDER_LINES(PRODUCT_TAX_CODE)		= #PRODUCT_TAX_CODE
		SALES_ORDER_LINES(FREIGHT_TAX_CODE)		= #FREIGHT_TAX_CODE
		SALES_ORDER_LINES(SYS_REQUESTED_DATE)	= #LINE_REQUESTED_DATE
			! Calculate the value in base currency
		IF (#CURRENCY_METHOD > "0")
			! set the trans/base currency info to that of header
			PERFORM RESTOR_SYS_CURRENCY_CONTROL_VT

			! translate transaction amount to base amount with currency info of header
			DELETE ALL FROM SYS_CURRENCY_VALUES_VT
			SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE)	= SALES_ORDER_LINES(SOP_ORDER_TOTAL_CURRENCY)
			ADD TO SYS_CURRENCY_VALUES_VT
			PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
			IF (#R_STATUS <> #YES)
				ERROR/WAIT #R_MESSAGE
				EXIT (%FAILURE)
			END_IF
			FIND IN SYS_CURRENCY_VALUES_VT
			SALES_ORDER_LINES(SOP_ORDER_TOTAL_BASE) = SYS_CURRENCY_VALUES_VT(BASE_VALUE)
			SALES_ORDER_LINES(SOP_ORDER_TOTAL_2_BASE)	= SYS_CURRENCY_VALUES_VT(BASE_2_VALUE)
		END_IF

		! Update line weight volume here with new values so that
		! trigger updates header weight and volume correctly.
		IF ((#PHYSICAL_IN_USE = #YES) &
		OR  (#LINE_EC_REPORT_TYPE <> "") &
		OR  ((#AR_FREIGHT_IN_USE = #YES) AND (#WAREHOUSED_FLAG = #YES)))
			IF ((SALES_ORDER_LINES(WEIGHT) <> #WEIGHT) OR &
			  (SALES_ORDER_LINES(WEIGHT_UOM) <> #WEIGHT_UOM))
				SALES_ORDER_LINES(WEIGHT_UOM)   = #WEIGHT_UOM
				! Need UOM assigned before value for header
				! update trigger to work.
				SALES_ORDER_LINES(WEIGHT) = 0
				! set to zero first to reverse-out original
				! value before increasing by new known value
				! (means more accurate representation of
				! final total value on order header).
				SALES_ORDER_LINES(WEIGHT) = #WEIGHT
			END_IF
			IF ((SALES_ORDER_LINES(VOLUME) <> #VOLUME) OR &
			   (SALES_ORDER_LINES(VOLUME_UOM) <> #VOLUME_UOM))
				SALES_ORDER_LINES(VOLUME_UOM) = #VOLUME_UOM
				SALES_ORDER_LINES(VOLUME) = 0
				SALES_ORDER_LINES(VOLUME) = #VOLUME
			END_IF

			IF (#PHYSICAL_IN_USE = #YES)
				PERFORM DO_PHYSICAL_UNITS_CONVERT
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK SET_UP_FOR_TOTALS_DISPLAY
		#TOTAL_ORDER_WEIGHT	= SALES_ORDER_HEADERS(WEIGHT)
		#TOTAL_ORDER_VOLUME	= SALES_ORDER_HEADERS(VOLUME)
		#TOTAL_WEIGHT_UOM	= SALES_ORDER_HEADERS(WEIGHT_UOM)
		#TOTAL_VOLUME_UOM	= SALES_ORDER_HEADERS(VOLUME_UOM)		
		#TOTAL_LINE_DISCOUNT	= SALES_ORDER_HEADERS(LINE_DISCOUNT)
		#TOTAL_LINE_TAX		= SALES_ORDER_HEADERS(LINE_TAX)
		#GRAND_TOTAL = SALES_ORDER_HEADERS(SOP_ORDER_TOTAL_CURRENCY) &
				+ #TOTAL_LINE_TAX &
				- #TOTAL_LINE_DISCOUNT

		IF (#CURRENCY_METHOD > "0")
			! set the trans/base currency info to that of header
			PERFORM RESTOR_SYS_CURRENCY_CONTROL_VT
			DELETE ALL FROM SYS_CURRENCY_VALUES_VT
			SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE)	= SALES_ORDER_HEADERS(SOP_ORDER_TOTAL_CURRENCY)
			ADD TO SYS_CURRENCY_VALUES_VT
			PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
			IF (#R_STATUS <> #YES)
				ERROR/WAIT #R_MESSAGE
				EXIT (%FAILURE)
			END_IF
			FIND IN SYS_CURRENCY_VALUES_VT
			! Recalculate SALES_ORDER_HEADERS(SOP_ORDER_TOTAL_BASE)
			SALES_ORDER_HEADERS(SOP_ORDER_TOTAL_BASE)	= SYS_CURRENCY_VALUES_VT(BASE_VALUE)
			SALES_ORDER_HEADERS(SOP_ORDER_TOTAL_2_BASE)	= SYS_CURRENCY_VALUES_VT(BASE_2_VALUE)
		END_IF
	END_BLOCK
	
	FIND IN UNITS_OF_MEASURE &
		/LOCK=NONE &
		/WITH=UNIT_OF_MEASURE=#TOTAL_WEIGHT_UOM
			
	IF (%STATUS = %SUCCESS)
		#TOTAL_WEIGHT_MASK = UNITS_OF_MEASURE(IC_QUANTITY_MASK)
	ELSE
		#TOTAL_WEIGHT_MASK = ""
	END_IF

	OUTPUT_BLOCK TOTAL_WEIGHT /ROW=1 /COL=13 /ABSOLUTE_POSITION &
			/SOURCE=(#TOTAL_ORDER_WEIGHT) &
			/PROMPT=(MESSAGE("P_00751")) &
			/USING=SALES_ORDER_HEADERS(WEIGHT) &
			/OUTPUT_MASK=#TOTAL_WEIGHT_MASK

	OUTPUT_BLOCK WEIGHT_UNIT /ROW=1 /COL=28 /ABSOLUTE_POSITION &
			/SOURCE=(#TOTAL_WEIGHT_UOM) &
			/USING=SALES_ORDER_HEADERS(WEIGHT_UOM)

	OUTPUT_BLOCK CUSTOMER_REF /ROW=1 /COL=56 /ABSOLUTE_POSITION &
			/PROMPT=(MESSAGE("P_13029")) &
			/SOURCE=#CUSTOMER_REFERENCE &
			/USING=SALES_ORDER_HEADERS(CUSTOMER_REFERENCE)
	
	FIND IN UNITS_OF_MEASURE &
			/LOCK=NONE &
			/WITH=UNIT_OF_MEASURE=#TOTAL_VOLUME_UOM

	IF (%STATUS = %SUCCESS)
			#TOTAL_UOM_MASK = UNITS_OF_MEASURE(IC_QUANTITY_MASK)
	ELSE
			#TOTAL_UOM_MASK = ""
	END_IF
	
	OUTPUT_BLOCK TOTAL_VOLUME /ROW=2 /COL=13 /ABSOLUTE_POSITION &
			/SOURCE=(#TOTAL_ORDER_VOLUME) &
			/PROMPT=(FIELD_PROMPT(VOLUME)) &
			/USING=SALES_ORDER_HEADERS(VOLUME) &
			/OUTPUT_MASK=#TOTAL_UOM_MASK

	OUTPUT_BLOCK VOLUME_UNIT /ROW=2 /COL=28 /ABSOLUTE_POSITION &
			/SOURCE=(#TOTAL_VOLUME_UOM) &
			/USING=SALES_ORDER_HEADERS(VOLUME_UOM)

	OUTPUT_BLOCK TOTAL_LINE_TOTAL /ROW=2 /COL=56 /LEN=(#CURRENCY_LEN) /ABSOLUTE_POSITION &
			/SOURCE=(#GRAND_TOTAL) &
			/PROMPT=(MESSAGE("P_00680")) &
			/USING=SALES_ORDER_HEADERS(SOP_ORDER_TOTAL_CURRENCY) &
			/OUTPUT_MASK=#CURRENCY_MASK

	OUTPUT_BLOCK CURRENCY_CODE /ROW=2 /COL=74 /ABSOLUTE_POSITION &
			/SOURCE=(#CURRENCY_CODE) &
			/USING=SALES_ORDER_HEADERS(SYS_CURRENCY_CODE) &
			/ATTRIBUTES=BOLD

	BEGIN_BLOCK CREATE_DEFAULT_DETAIL_RECORD
!		 see if SALES_ORDER_LINE_DETAILS have already been specified for line

		#ORDER_FLAG = (PARAMETER("HORIZON_CURRENT"))

		IF (#SYS_SHIPPING_DATE <> "")

			#ORDER_DAYS = DAYS(#SYS_SHIPPING_DATE) - DAYS(%NOW)

			IF (#ORDER_DAYS > WAREHOUSE_CONTROLS(DAYS_FORWARD_COMMITMENT))
				#ORDER_FLAG = (PARAMETER("HORIZON_FORWARD"))
			END_IF

			IF (#ORDER_DAYS < -(WAREHOUSE_CONTROLS(DAYS_BACKWARD_COMMITMENT)))
				#ORDER_FLAG = (PARAMETER("HORIZON_BACKWARD"))
			END_IF
		END_IF

		FIND IN SALES_ORDER_LINE_DETAILS &
			/LOCK = READ &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=ORDER_NUMBER=#ORDER_NUMBER &
			/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER)

		IF (%STATUS<>%SUCCESS)
			CLEAR_BUFFER SALES_ORDER_LINE_DETAILS

			SALES_ORDER_LINE_DETAILS(COMPANY_CODE)=#COMPANY_CODE
			SALES_ORDER_LINE_DETAILS(DIVISION)=#DIVISION
			SALES_ORDER_LINE_DETAILS(ORDER_NUMBER)=#ORDER_NUMBER
			SALES_ORDER_LINE_DETAILS(ORDER_LINE_NUMBER) = SALES_ORDER_LINES(ORDER_LINE_NUMBER)
			SALES_ORDER_LINE_DETAILS(SEQUENCE) = "001"
			SALES_ORDER_LINE_DETAILS(ORIGINAL_SEQUENCE) = "1"
			SALES_ORDER_LINE_DETAILS(ORDER_LINE_REF)=SALES_ORDER_LINES(ORDER_LINE_REFERENCE)

			! disallow blank sales_order_line_details(warhouse) if ATP not in use ...
			IF ((#ATP_AT_ORDER_ENTRY <> #YES OR #ATP_IN_USE_FOR_PW <> #YES))
	                        SALES_ORDER_LINE_DETAILS(WAREHOUSE) = SALES_ORDER_LINES(WAREHOUSE)
			ELSE
				! allow possible blank ship warehouse to defer warehouse selection to promising stage...
				SALES_ORDER_LINE_DETAILS(WAREHOUSE) = #SHIP_WAREHOUSE
			END_IF

			SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE) = #SYS_SHIPPING_DATE
			SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE) = #SYS_DELIVERY_DATE
			SALES_ORDER_LINE_DETAILS(REQUIRED_DATE) = SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)
			SALES_ORDER_LINE_DETAILS(TEMP_REQUIRED_DATE) = ""
			SALES_ORDER_LINE_DETAILS(ORDER_DATE)=#ORDER_DATE
			SALES_ORDER_LINE_DETAILS(ORDER_HORIZON) = #ORDER_FLAG
			#NEW_QTY_RESERVED = "0"
			#OLD_SALES_ORDER_QTY = 0
			#OLD_QTY_RESERVED = 0
			SALES_ORDER_LINE_DETAILS(ORDER_LINE_STATUS)=""

			SALES_ORDER_LINE_DETAILS(TM_LOAD_PLANNING) = #LINE_TM_IN_USE

			ADD TO SALES_ORDER_LINE_DETAILS

			IF (%STATUS<>%SUCCESS)
				MESSAGE/IDENTIFIER/BELL/WAIT P_52157
				ROLLBACK
				EXIT(%FAILURE)
			END_IF
			PERFORM ADD_NO_UPDATE_SO_LINE_ORDER_QTY( #SALES_UOM, #SALES_ORDER_QTY, #YES, #R1)
			PERFORM ADD_SO_LINE_DETAIL_ORDER_QTY( "", SALES_ORDER_LINES(WAREHOUSE), &
									#SALES_UOM, #SALES_ORDER_QTY, #YES, #R1)
			IF (#SALES_UOM <> #NOMI_UOM AND #NOMI_UOM <> "")
				IF (#NOMI_ORDER_QTY = 0)
					PERFORM CONVERT_QTYS((SALES_ORDER_LINES(WAREHOUSE)), &
							"", &
							(SALES_ORDER_LINES(PART_CODE)), &
							#SALES_UOM, &
							#SALES_ORDER_QTY, &
							#NOMI_UOM,      &
							#NOMI_ORDER_QTY, &
							#R1)
				END_IF
				PERFORM ADD_SO_LINE_DETAIL_ORDER_QTY( "", SALES_ORDER_LINES(WAREHOUSE), &
									 #NOMI_UOM, #NOMI_ORDER_QTY, #YES, #R1)
				PERFORM ADD_NO_UPDATE_SO_LINE_ORDER_QTY( #NOMI_UOM, #NOMI_ORDER_QTY, #YES, #R1)
			END_IF
			IF ((#IC_PACKAGED_PRODUCT = #YES) AND &
						(#PACK_UOM <> #SALES_UOM) AND &
						(#PACK_UOM <> #NOMI_UOM))
				PERFORM ADD_SO_LINE_DETAIL_ORDER_QTY ("", SALES_ORDER_LINES(WAREHOUSE), &
										#PACK_UOM, #PACK_ORDER_QTY, "", #R1)
				PERFORM ADD_NO_UPDATE_SO_LINE_ORDER_QTY( #PACK_UOM, #PACK_ORDER_QTY, "", #R1)
			END_IF
			IF ((#IC_UOM_CONTROL = PARAMETER("IC_CATCHWEIGHT_UOM_CONTROL")) OR      &
					(#IC_UOM_CONTROL = PARAMETER("IC_POTENT_UOM_CONTROL")))
				IF (#NOMI_UOM <> #NON_NOMI_UOM AND #NON_NOMI_UOM <> #SALES_UOM AND &
						#NON_NOMI_UOM <> #PACK_UOM)
					PERFORM ADD_SO_LINE_DETAIL_ORDER_QTY ("", SALES_ORDER_LINES(WAREHOUSE), &
										#NON_NOMI_UOM, #NON_NOMI_ORDER_QTY, "", #R1)
					PERFORM ADD_NO_UPDATE_SO_LINE_ORDER_QTY( #NON_NOMI_UOM, #NON_NOMI_ORDER_QTY, "", #R1)
				END_IF
			END_IF

			IF (#PRICE_UOM <> "" AND &
					#PRICE_UOM <> #SALES_UOM AND &
					#PRICE_UOM <> #NOMI_UOM AND &
					#PRICE_UOM <> #NON_NOMI_UOM AND &
					#PRICE_UOM <> #PACK_UOM)
				PERFORM ADD_SO_LINE_DETAIL_ORDER_QTY ("", SALES_ORDER_LINES(WAREHOUSE), &
										#PRICE_UOM, #PRICE_ORDER_QTY, "", #R1)
				PERFORM ADD_NO_UPDATE_SO_LINE_ORDER_QTY( #PRICE_UOM, #PRICE_ORDER_QTY, "", #R1)
			END_IF
			IF (SALES_ORDER_LINES(ORDER_LINE_TYPE)=#SO_LINE_TYPE_STOCK AND #WAREHOUSED_FLAG=#YES)
				IF (#ATP_IN_USE_FOR_PART = #NO)
					PERFORM RESERVATION_CHECK(SALES_ORDER_LINES(WAREHOUSE))
					IF ((%STATUS <> %SUCCESS) &
					AND (%STATUS <> %BACK))
						EXIT (%STATUS)
		   			END_IF
					#DELTA_QTY_RESERVED     = #NEW_QTY_RESERVED - #OLD_QTY_RESERVED
							IF (#DELTA_QTY_RESERVED <> 0 AND #NEW_QTY_RESERVED <> 0)
						PERFORM ZERO_CURRENT_LINE_DETAIL_QTYS("QTY_RESERVED")
						PERFORM UPDATE_A_SO_QTY ("QTY_RESERVED", #NEW_QTY_RESERVED, #NOMI_NEW_QTY_RESERVED, &
								#NON_NOMI_NEW_QTY_RESERVED, #PACK_NEW_QTY_RESERVED, #PRICE_NEW_QTY_RESERVED)
						IF (%STATUS <> %SUCCESS)
							MESSAGE/IDENTIFIER/BELL/WAIT P_52157
							ROLLBACK
							EXIT (%STATUS)
								 	END_IF
					END_IF
				END_IF
				! add commitments
				PERFORM 'GEMSOP:SOP_L_DO_IC_COMMITMENTS' (SALES_ORDER_LINES(WAREHOUSE), &
								#SYS_SHIPPING_DATE, &
								"", &
								#IC_MOVEMENT_CODE, &
								"0", &
								#NOMI_ORDER_QTY, &
								#R1)
				IF (%STATUS <> %SUCCESS)
					ERROR /WAIT #R1
				END_IF
			END_IF
			PERFORM FIND_CURRENT_SO_LINE_QTY(#SALES_UOM, #R1)
		END_IF
	END_BLOCK

	BEGIN_BLOCK OLD_NEXT_LINE
		PERFORM FIND_CURRENT_SO_LINE_QTY (#SALES_UOM, #R1)
		#SALES_ORDER_QTY = SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)
		PERFORM SUM_CURRENT_SO_LINE_DETAIL_QTYS (#SALES_UOM)
		#BALANCE = #SALES_ORDER_QTY  - #TOTAL_DETAIL_ORDER_QTY

	     	IF (#BALANCE <> 0)
			IF (#WAREHOUSED_FLAG = #YES)
				IF (#BALANCE > 0)
					MESSAGE/IDENTIFIER/BELL/WAIT P_52440, LTRIM(MASK(#SALES_UOM_MASK,#BALANCE))
				END_IF
				IF (#BALANCE < 0)
					MESSAGE/IDENTIFIER/BELL/WAIT P_52291
				END_IF

				IF (#BATCHES_REQD = #YES  AND PRODUCT_MASTER(BATCHES_EXIST)=#YES )
					#OLD_LOT_NUM = ""
					#START_QTY_AVAILABLE = 0.0
					#START_QTY_AVAILABLE_BACK = 0.0
					PERFORM BATCHES
					GOTO OLD_NEXT_LINE
				ELSE
					PERFORM REQUIRED_DATES
					GOTO OLD_NEXT_LINE
				END_IF
			END_IF
			! Check to make sure that the correct quantities have been allocated to
			! batches and/or required dates
		END_IF
	END_BLOCK

	BEGIN_BLOCK CREDIT_CHECK
			! At this point the credit limit check should determine whether or not
			! the customer is within his limits before further entry

		IF (#CURRENCY_METHOD > "0")
			PERFORM RESTOR_SYS_CURRENCY_CONTROL_VT
			DELETE ALL FROM SYS_CURRENCY_VALUES_VT
!Delete the following line issue#368358-13
!			SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE)	= #GRAND_TOTAL
!End of deletes
!Add the following line
			SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE)	= #NEW_LINE_OS_VALUE
!End of adds
			ADD TO SYS_CURRENCY_VALUES_VT
			PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
			IF (#R_STATUS <> #YES)
				ERROR/WAIT #R_MESSAGE
				EXIT (%FAILURE)
			END_IF
			FIND IN SYS_CURRENCY_VALUES_VT
!Delete the following line issue#368358-14
!			#GRAND_BASE_VALUE	= SYS_CURRENCY_VALUES_VT(BASE_VALUE)
!End of deletes
!Add the following line
			#NEW_LINE_OS_VALUE_BASE	= SYS_CURRENCY_VALUES_VT(BASE_VALUE)
!End of adds
			! Recalculate SALES_ORDER_HEADERS(SOP_ORDER_TOTAL_BASE)
!Add the following lines issue#368358-15
			PERFORM RESTOR_SYS_CURRENCY_CONTROL_VT
			DELETE ALL FROM SYS_CURRENCY_VALUES_VT
			SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE)	= #OLD_LINE_OS_VALUE
			ADD TO SYS_CURRENCY_VALUES_VT
			PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
			IF (#R_STATUS <> #YES)
				ERROR/WAIT #R_MESSAGE
				EXIT (%FAILURE)
			END_IF
			FIND IN SYS_CURRENCY_VALUES_VT
			#OLD_LINE_OS_VALUE_BASE	= SYS_CURRENCY_VALUES_VT(BASE_VALUE)			
!End of adds
		ELSE
!Delete the following line issue#368358-16
!			#GRAND_BASE_VALUE = #GRAND_TOTAL
!End of deletes
!Add the following lines
			#NEW_LINE_OS_VALUE_BASE = #NEW_LINE_OS_VALUE
			#OLD_LINE_OS_VALUE_BASE = #OLD_LINE_OS_VALUE
!End of adds
		END_IF
!Add the following lines issue#368358-17
		FIND IN CUSTOMERS &
			/LOCK=WRITE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=#CUSTOMER_NUMBER
			
		SALES_ORDER_HEADERS(OS_ORDER_VALUE) = SALES_ORDER_HEADERS(OS_ORDER_VALUE) + &
							#NEW_LINE_OS_VALUE_BASE - &
							#OLD_LINE_OS_VALUE_BASE			

!End of adds

		IF ((#ACTION <> "HOLD") OR &
				((#ACTION = "HOLD") AND (%EDIT_MODE <> %ADD)))
			PERFORM "GEMLB:SOP_L_CREDIT_LIMITS" &
				(#COMPANY_CODE, &
				 #DIVISION, &
				 #CUSTOMER_NUMBER, &
!Delete the following line issue#368358-18
!				 #GRAND_BASE_VALUE, &
!End of deletes
!Add the following line
				 #NEW_LINE_OS_VALUE_BASE, &
!End of adds
				 (PARAMETER("SOP_STAGE_ORDER")), &
!Delete the following line issue#368358-19
!				 #OLD_TOTAL_ORDER_VALUE, &
!End of deletes
!Add the following line
				 (#OLD_LINE_OS_VALUE_BASE), &
!End of adds
				 #LINE_EDIT_MODE, &
				 #NO,	&
				 "", &
				 "", &
				 #ACTION, &
				 #MAN_AUTO, &
				 #CREDIT_STATUS_CODE, &
				 #MESSAGE, &
				 "")

			IF (%STATUS = %FAILURE)
				ROLLBACK
				EXIT (%FAILURE)
			END_IF

			IF (#ACTION = (PARAMETER("CREDIT_OK"))) GOTO FINAL_DETAIL_UPDATE

			IF (#ACTION = (PARAMETER("CREDIT_REJECT")))
				ERROR (#MESSAGE)
				PAUSE_BLOCK /ROW=7 /COL=63								
				EXIT(%FAILURE)
			END_IF

			IF (#ACTION = (PARAMETER("CREDIT_HOLD")))
				ERROR (#MESSAGE)
				#ALREADY_CREDIT_HOLD = #YES
				SALES_ORDER_HEADERS(CREDIT_STATUS_CODE)=#CREDIT_STATUS_CODE

				IF (#MAN_AUTO = (PARAMETER("AM_FLAG_M")))
					PERFORM CREDIT_STATUS_CODE
					SALES_ORDER_HEADERS(CREDIT_STATUS_CODE)=#CREDIT_STATUS_CODE
					GOTO FINAL_DETAIL_UPDATE
				ELSE
					GOTO FINAL_DETAIL_UPDATE
				END_IF
			END_IF

			IF (#ACTION = (PARAMETER("CREDIT_WARN")))
				ERROR (#MESSAGE)
				#ALREADY_WARN = #YES
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK FINAL_DETAIL_UPDATE

		PERFORM UPDATE_ORDER_LINE_COMMITMENTS
		IF (%STATUS<>%SUCCESS)
			EXIT(%FAILURE)
		END_IF

		FIND IN IC_DEMAND_SUPPLY_VT &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=EVENT_TYPE=53 &
			/WITH=IC_REF_DIV_WH_FAC=SALES_ORDER_LINES(DIVISION) &
			/WITH=IC_REF_DOCUMENT=SALES_ORDER_LINES(ORDER_NUMBER) &
			/WITH=IC_REF_LINE_STAGE=SALES_ORDER_LINES(ORDER_LINE_NUMBER)

		IF (%STATUS = %SUCCESS) 
			START_TRANSACTION
			PERFORM UPDATE_DEMAND_SUPPLY
			COMMIT
		END_IF 

	END_BLOCK

	BEGIN_BLOCK SHOTTING_BLANKS
		! Places blanks in heading lines on both sides of the sales price UOM
		! The block is here to insure that the blanks overwrite the line and
		! not the lines overwriting the blanks.
		OUTPUT_BLOCK BLANK_SPACE_1 /ROW=5 /COL=63 /ABSOLUTE_POSITION /LEN=1 &
			/SOURCE=(" ") &
			/NOHEADING &
			/ATTRIBUTES=NONE

		OUTPUT_BLOCK BLANK_SPACE_2 /ROW=5 /COL=66 /ABSOLUTE_POSITION /LEN=1 &
			/SOURCE=(" ") &
			/NOHEADING &
			/ATTRIBUTES=NONE
	END_BLOCK
	
	PERFORM ADD_SO_LINE_DISP_TYPE_VT_RECORD(#ENTRY_BY_CPC)
	
END_FORM


FORM LINE_MENU /ROW=10 /COL=67 /HEIGHT=1 /WIDTH=2 &
	/ATTRIBUTES=NOBORDER

	BEGIN_BLOCK SETUP
		#OPT = ""

		! setup variables to test in item_if qualifiers so that a
		! large number of conditions do not have to be checked
		! on each menu.
		IF (#LINE_EC_REPORT_TYPE = "")
			#EC_REP_MENU_OPTION = #NO
		ELSE
			#EC_REP_MENU_OPTION = #YES
		END_IF

		IF ((#ALLOW_ORDER_CLOSE = #YES) &
		AND (#ADD_MODE = #NO) &
		AND (SALES_ORDER_LINES(STATUS_FLAG) <> PARAMETER("STATUS_CLOSED"))	&
		AND (#ALLOW_ORDER_LINE_CLOSE = #YES))
			#LINE_CLOSE_MENU_OPTION = #YES
		ELSE
			#LINE_CLOSE_MENU_OPTION = #NO
		END_IF
	END_BLOCK

	BEGIN_BLOCK MENU_1
		IF (SALES_ORDER_LINES(ORDER_LINE_TYPE) = #SO_LINE_TYPE_STOCK)

			IF (#BATCHES_REQD = #YES)

				IF ((#CONTRACT_OVERRIDE=#YES AND #PRICE_STATUS = (PARAMETER("SOP_PRICE_STATUS_CONTRACT"))) &
				   OR (#PROMOTION_OVERRIDE=#YES AND #PRICE_STATUS = (PARAMETER("SOP_PRICE_STATUS_PROMOTION"))) &
				   OR (#PRICE_OVERRIDE=#YES AND #PRICE_STATUS = (PARAMETER("SOP_PRICE_STATUS_PRICE"))))

						MENU_BLOCK  /ROW=1 /COL=1 &
							/SOURCE=(#LINE_MENU_SOURCE) /NOREPEAT &
							/ITEM_IF=((#TP_PROMOTIONS_IN_USE = #YES) AND (NOT(#TP_GIFT_LINE))), &
									(MESSAGE("P_13869")),(""),(#OPT="DISCOUNTS") &
							/ITEM=(MESSAGE("P_13785")),(""),(PERFORM MISC_ADJUSTMENTS("MODIFY")) &
							/ITEM=(MESSAGE("P_01861")),(""),(#OPT="BATCHES") &
							/ITEM=(MESSAGE("P_00108")),(""),(PERFORM COMMENTS) &
							/ITEM_IF=(((#TP_PROMOTIONS_IN_USE = #YES) AND (NOT(#TP_GIFT_LINE))) &
										OR (#TP_PROMOTIONS_IN_USE = #NO)), &
									(MESSAGE("P_00484")),(""),(#OPT="PRICE") &
							/ITEM=(MESSAGE("P_82345")),(""),(#OPT="TAX") &
							/ITEM=(MESSAGE("P_24001")),(""),(PERFORM ADDITIONAL_DESCRIPTION) &
							/ITEM=(MESSAGE("P_00107")),(""),(PERFORM SALES_ORDER_LINE_CODES) &
							/ITEM_IF=(#AR_FREIGHT_IN_USE = #YES), &
								(MESSAGE("P_64157")),(""),(#OPT="FREIGHT") &
							/ITEM_IF=(#LINE_CLOSE_MENU_OPTION = #YES), &
								(MESSAGE("P_03219")),(""),(PERFORM CLOSE_ORDER_LINE) &
							/ITEM_IF=(#EC_REP_MENU_OPTION = #YES), &
								(MESSAGE("P_02055")),(""),(#OPT="EC_REP") &
							/ITEM=(MESSAGE("P_24135")),(""),(#OPT="LINE") &
							/ITEM_IF=(#WAREHOUSED_FLAG = #YES),(MESSAGE("P_33342")),(""),(#OPT="PROJECTED") &
							!Change 003 - DBM - 3-9-2007 - Add option to set up minor/balance components
							/ITEM_IF=(PRODUCT_MASTER(PART_CODE)>"200000" AND PRODUCT_MASTER(PART_CODE)<="299999"),("COMPONENTS"),(""),(#OPT="MINBAL") &
							!Change 003 End
							/ITEM=(MESSAGE("P_00432")),(""),(#OPT="NEXT")
				ELSE
	END_BLOCK

	BEGIN_BLOCK MENU_2

						MENU_BLOCK  /ROW=1 /COL=1 &
							/SOURCE=(#LINE_MENU_SOURCE) /NOREPEAT &
							/ITEM_IF=((#TP_PROMOTIONS_IN_USE = #YES) AND (NOT(#TP_GIFT_LINE))), &
								(MESSAGE("P_13869")),(""),(#OPT="DISCOUNTS") &
							/ITEM=(MESSAGE("P_13785")),(""),(PERFORM MISC_ADJUSTMENTS("MODIFY")) &
							/ITEM=(MESSAGE("P_01861")),(""),(#OPT="BATCHES") &
							/ITEM=(MESSAGE("P_00108")),(""),(PERFORM COMMENTS) &
							/ITEM_IF=(((#TP_PROMOTIONS_IN_USE = #YES) AND (NOT(#TP_GIFT_LINE))) &
										OR (#TP_PROMOTIONS_IN_USE = #NO)), &
									(MESSAGE("P_00484")),(""),(#OPT="PRICE") &
							/ITEM=(MESSAGE("P_82345")),(""),(#OPT="TAX") &
							/ITEM=(MESSAGE("P_24001")),(""),(PERFORM ADDITIONAL_DESCRIPTION) &
							/ITEM=(MESSAGE("P_00107")),(""),(PERFORM SALES_ORDER_LINE_CODES) &
							/ITEM_IF=(#EC_REP_MENU_OPTION = #YES), &
								(MESSAGE("P_02055")),(""),(#OPT="EC_REP") &
							/ITEM=(MESSAGE("P_00115")),(""),(#OPT="COST_CENTER") &
							/ITEM_IF=(#AR_FREIGHT_IN_USE = #YES), &
								(MESSAGE("P_64157")),(""),(#OPT="FREIGHT") &
							/ITEM_IF=(#LINE_CLOSE_MENU_OPTION = #YES), &
								(MESSAGE("P_03219")),(""),(PERFORM CLOSE_ORDER_LINE) &
							/ITEM=(MESSAGE("P_24135")),(""),(#OPT="LINE") &
							/ITEM_IF=(#WAREHOUSED_FLAG = #YES),(MESSAGE("P_33342")),(""),(#OPT="PROJECTED") &
							!Change 003 - DBM - 3-9-2007 - Add option to set up minor/balance components
							/ITEM_IF=(PRODUCT_MASTER(PART_CODE)>"200000" AND PRODUCT_MASTER(PART_CODE)<="299999"),("COMPONENTS"),(""),(#OPT="MINBAL") &
							!Change 003 End
							/ITEM=(MESSAGE("P_00432")),(""),(#OPT="NEXT")
				END_IF
			END_IF
	END_BLOCK

	BEGIN_BLOCK MENU_3
			IF (#BATCHES_REQD <> #YES)

				IF ((#CONTRACT_OVERRIDE=#YES AND #PRICE_STATUS = (PARAMETER("SOP_PRICE_STATUS_CONTRACT"))) &
				OR (#PROMOTION_OVERRIDE=#YES AND #PRICE_STATUS = (PARAMETER("SOP_PRICE_STATUS_PROMOTION"))) &
				OR (#PRICE_OVERRIDE=#YES AND #PRICE_STATUS = (PARAMETER("SOP_PRICE_STATUS_PRICE"))))

						MENU_BLOCK  /ROW=1 /COL=1 &
							/SOURCE=(#LINE_MENU_SOURCE) /NOREPEAT &
							/ITEM_IF=((#TP_PROMOTIONS_IN_USE = #YES) AND (NOT(#TP_GIFT_LINE))), &
								(MESSAGE("P_13869")),(""),(#OPT="DISCOUNTS") &
							/ITEM=(MESSAGE("P_13785")),(""),(PERFORM MISC_ADJUSTMENTS("MODIFY")) &
							/ITEM=(MESSAGE("P_54108")),(""),(#OPT="DATES") &
							/ITEM=(MESSAGE("P_00108")),(""),(PERFORM COMMENTS) &
							/ITEM_IF=(((#TP_PROMOTIONS_IN_USE = #YES) AND (NOT(#TP_GIFT_LINE))) &
										OR (#TP_PROMOTIONS_IN_USE = #NO)), &
									(MESSAGE("P_00484")),(""),(#OPT="PRICE") &
							/ITEM=(MESSAGE("P_82345")),(""),(#OPT="TAX") &
							/ITEM=(MESSAGE("P_24001")),(""),(PERFORM ADDITIONAL_DESCRIPTION) &
							/ITEM=(MESSAGE("P_00107")),(""),(PERFORM SALES_ORDER_LINE_CODES) &
							/ITEM_IF=(#AR_FREIGHT_IN_USE = #YES), &
								(MESSAGE("P_64157")),(""),(#OPT="FREIGHT") &
							/ITEM_IF=(#LINE_CLOSE_MENU_OPTION = #YES), &
								(MESSAGE("P_03219")),(""),(PERFORM CLOSE_ORDER_LINE) &
							/ITEM_IF=(#EC_REP_MENU_OPTION = #YES), &
								(MESSAGE("P_02055")),(""),(#OPT="EC_REP") &
							/ITEM=(MESSAGE("P_24135")),(""),(#OPT="LINE") &
							/ITEM_IF=(#WAREHOUSED_FLAG = #YES),(MESSAGE("P_33342")),(""),(#OPT="PROJECTED") &
							!Change 003 - DBM - 3-9-2007 - Add option to set up minor/balance components
							/ITEM_IF=(PRODUCT_MASTER(PART_CODE)>"200000" AND PRODUCT_MASTER(PART_CODE)<="299999"),("COMPONENTS"),(""),(#OPT="MINBAL") &
							!Change 003 End
							/ITEM=(MESSAGE("P_00432")),(""),(#OPT="NEXT")

				ELSE
	END_BLOCK

	BEGIN_BLOCK MENU_4
						MENU_BLOCK  /ROW=1 /COL=1 &
							/SOURCE=(#LINE_MENU_SOURCE) /NOREPEAT &
							/ITEM_IF=((#TP_PROMOTIONS_IN_USE = #YES) AND (NOT(#TP_GIFT_LINE))), &
								(MESSAGE("P_13869")),(""),(#OPT="DISCOUNTS") &
							/ITEM=(MESSAGE("P_13785")),(""),(PERFORM MISC_ADJUSTMENTS("MODIFY")) &
							/ITEM=(MESSAGE("P_54108")),(""),(#OPT="DATES") &
							/ITEM=(MESSAGE("P_00108")),(""),(PERFORM COMMENTS) &
							/ITEM_IF=(((#TP_PROMOTIONS_IN_USE = #YES) AND (NOT(#TP_GIFT_LINE))) &
										OR (#TP_PROMOTIONS_IN_USE = #NO)), &
									(MESSAGE("P_00484")),(""),(#OPT="PRICE") &
							/ITEM=(MESSAGE("P_82345")),(""),(#OPT="TAX") &
							/ITEM=(MESSAGE("P_24001")),(""),(PERFORM ADDITIONAL_DESCRIPTION) &
							/ITEM=(MESSAGE("P_00107")),(""),(PERFORM SALES_ORDER_LINE_CODES) &
							/ITEM_IF=(#AR_FREIGHT_IN_USE = #YES), &
								(MESSAGE("P_64157")),(""),(#OPT="FREIGHT") &
							/ITEM_IF=(#LINE_CLOSE_MENU_OPTION = #YES), &
								(MESSAGE("P_03219")),(""),(PERFORM CLOSE_ORDER_LINE) &
							/ITEM_IF=(#EC_REP_MENU_OPTION = #YES), &
								(MESSAGE("P_02055")),(""),(#OPT="EC_REP") &
							/ITEM=(MESSAGE("P_24135")),(""),(#OPT="LINE") &
							/ITEM_IF=(#WAREHOUSED_FLAG = #YES),(MESSAGE("P_33342")),(""),(#OPT="PROJECTED") &
							!Change 003 - DBM - 3-9-2007 - Add option to set up minor/balance components
							/ITEM_IF=(PRODUCT_MASTER(PART_CODE)>"200000" AND PRODUCT_MASTER(PART_CODE)<="299999"),("COMPONENTS"),(""),(#OPT="MINBAL") &
							!Change 003 End
							/ITEM=(MESSAGE("P_00432")),(""),(#OPT="NEXT")

				END_IF
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK MENU_5
		IF (SALES_ORDER_LINES(ORDER_LINE_TYPE) = #SO_LINE_TYPE_NONSTOCK)
				MENU_BLOCK	/ROW=1 /COL=1 &
					/SOURCE=(MESSAGE("P_00432")) /NOREPEAT &
					/ITEM=(MESSAGE("P_13785")),(""),(PERFORM MISC_ADJUSTMENTS("MODIFY")) &
					/ITEM=(MESSAGE("P_82345")),(""),(#OPT="TAX") &
					/ITEM=(MESSAGE("P_54108")),(""),(PERFORM REQUIRED_DATES) &
					/ITEM=(MESSAGE("P_00108")),(""),(PERFORM COMMENTS) &
					/ITEM=(MESSAGE("P_00107")),(""),(PERFORM SALES_ORDER_LINE_CODES) &
					/ITEM_IF=(#AR_FREIGHT_IN_USE = #YES), &
						(MESSAGE("P_64157")),(""),(#OPT="FREIGHT") &
					/ITEM_IF=(#LINE_CLOSE_MENU_OPTION = #YES), &
						(MESSAGE("P_03219")),(""),(PERFORM CLOSE_ORDER_LINE) &
					/ITEM_IF=(#EC_REP_MENU_OPTION = #YES), &
						(MESSAGE("P_02055")),(""),(#OPT="EC_REP") &
					/ITEM=(MESSAGE("P_00432")),(""),(#OPT="NEXT")
		END_IF
		#LINE_MENU_SOURCE=MESSAGE("P_00432")

		IF (#OPT = "")
			GOTO SETUP
		ELSE
			! about to return to MAINTAIN_STOCK_LINE to change line values
			! don't allow close order line option
			#ALLOW_ORDER_LINE_CLOSE	= #NO
		END_IF
	END_BLOCK

END_FORM


PROCEDURE_FORM INITIALIZE_GLOBAL_STOCK_LINE

	BEGIN_BLOCK INITIAL
		! total quantity ordered for detail records

		PERFORM TIDY_UP_ATP
		!Delete all Virtual Tables related to ATP

		#ALLOW_ORDER_LINE_CLOSE	= #ALLOW_ORDER_CLOSE

		#SPECIFICATION_CODE = SALES_ORDER_LINES(SPECIFICATION_CODE)
		#SPEC_CODE_EXISTS = #NO
		#SPEC_CODE_MANDATORY = #NO

		#OLD_PART_CODE 	= SALES_ORDER_LINES(PART_CODE)
		#OLD_SPECIFICATION_CODE = SALES_ORDER_LINES(SPECIFICATION_CODE)
		#OLD_PRICE_UOM  = SALES_ORDER_LINES(UNIT_PRICE)
		#OLD_CONTRACT_NUMBER	= SALES_ORDER_LINES(CONTRACT_NUMBER)
		#OLD_WAREHOUSE = SALES_ORDER_LINES(WAREHOUSE)

		#NON_NOMI_UOM = ""
		#NON_NOMI_ORDER_QTY = 0.0
		#WAREHOUSE_DESCRIPTION = ""

		#LINE_TM_IN_USE 	= #SYS_TM_IN_USE
		#LINE_WH_DIST_ZONE	= ""
		#LINE_WH_COUNTRY	= ""

		! clear SOP_ORDER_CHARS_VT
		DELETE ALL FROM SOP_ORDER_CHARS_VT

		#LINE_VALUE	= SALES_ORDER_LINES(SOP_ORDER_TOTAL_CURRENCY)
		#QTY_TIMES_PRICE = #LINE_VALUE &
				- (SALES_ORDER_LINES(FREIGHT) * SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR))
		#LINE_DISCOUNT	= SALES_ORDER_LINES(LINE_DISCOUNT)
		#LINE_DISCOUNT_OLD = #LINE_DISCOUNT
		#PERCENT_DISCOUNT = SALES_ORDER_LINES(LINE_DISCOUNT_PERCENT)
		#PERCENT_DISCOUNT_OLD = #PERCENT_DISCOUNT
		#LINE_TAX	= SALES_ORDER_LINES(LINE_TAX)
		#LINE_GOODS_VALUE = SALES_ORDER_LINES(SOP_GOODS_VALUE_CURRENCY)
		#LINE_TOTAL	= #LINE_VALUE - #LINE_DISCOUNT + #LINE_TAX

		#QTY_VALUE_CHANGE = #NO
		#TP_VALUE_CHANGE = #NO
		#OLD_ORDER_VALUE  = #QTY_TIMES_PRICE

		IF (#AR_FREIGHT_IN_USE = #YES)
			#LINE_PRICE_CODE_DESCRIPTION = ""
			#LINE_PRICE_FREIGHT_INCLUSIVE = ""

			FIND IN PRICE_CODES &
				/LOCK=NONE &
				/WITH=COMPANY_CODE = #COMPANY_CODE &
				/WITH=DIVISION = #DIVISION &
				/WITH=PRICE_CODE = #PRICE_CODE

			IF (%STATUS <> %FAILURE)
				#LINE_PRICE_FREIGHT_INCLUSIVE = PRICE_CODES(SOP_FREIGHT_INCLUSIVE)
				#LINE_PRICE_CODE_DESCRIPTION = PRICE_CODES(DESCRIPTION)
			END_IF
			IF (#LINE_PRICE_FREIGHT_INCLUSIVE = "")
				#LINE_PRICE_FREIGHT_INCLUSIVE = #NO
			END_IF
		END_IF
	END_BLOCK
END_FORM


PROCEDURE_FORM INITIALIZE_ADD_STOCK_LINE

	BEGIN_BLOCK INITIALIZE

		! These are set to blank again just in case user
		! exits MAINTAIN_STOCK_LINE to return to modify part code.
		#WAREHOUSE = ""
		SALES_ORDER_LINES(SPECIFICATION_CODE) = ""
		SALES_ORDER_LINES(UNIT_PRICE) = ""
		SALES_ORDER_LINES(CONTRACT_NUMBER) = ""
		SALES_ORDER_LINES(WAREHOUSE) = ""
		SALES_ORDER_LINES(SOP_ORDER_TOTAL_CURRENCY) = 0.0
		SALES_ORDER_LINES(FREIGHT) = 0.0
		SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR) = 0
		SALES_ORDER_LINES(LINE_DISCOUNT) = 0.0
		SALES_ORDER_LINES(LINE_TAX) = 0.0
		SALES_ORDER_LINES(SOP_GOODS_VALUE_CURRENCY) = 0.0

		! #SYS_REQUESTED_DATE is from the header
		#LINE_REQUESTED_DATE = #SYS_REQUESTED_DATE
		IF (#LINE_REQUESTED_DATE = "")
			#LINE_REQUESTED_DATE = %TODAY
		END_IF

		! These variables are set here in case the user
		! steps back from the maintain stock line (detail) form.
		#SALES_ORDER_QTY	= 0
		#PACK_ORDER_QTY		= 0
		#PACK_UOM		= ""
		#PRICE			= 0.0

		PERFORM LOAD_DEFAULT_CHARS
	END_BLOCK
END_FORM


PROCEDURE_FORM INITIALIZE_MODIFY_STOCK_LINE

	BEGIN_BLOCK INITIALIZE
		#SALES_UOM = SALES_ORDER_LINES(UNIT_SALES)
		#NOMI_UOM = SALES_ORDER_LINES(SOP_NOMINATED_UNIT)
		#PRICE_UOM = SALES_ORDER_LINES(UNIT_PRICE)
		#NOMI_PRICE_UOM = SALES_ORDER_LINES(SOP_NOMINATED_PRICE_UNIT)

		PERFORM ASSIGN_LINE_REQUESTED_DATE

		#OLD_LINE_REQUESTED_DATE = #LINE_REQUESTED_DATE

		PERFORM GET_NON_NOMINATED_UOM ((SALES_ORDER_LINES(PART_CODE)), #NOMI_UOM, #NON_NOMI_UOM)

		IF (#WAREHOUSED_FLAG = #YES)

			#OLD_PART_CODE_WAREHOUSED_FLAG = #YES
			FIND IN WAREHOUSE_CONTROLS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=WAREHOUSE=SALES_ORDER_LINES(WAREHOUSE)
		END_IF

		PERFORM FIND_CURRENT_SO_LINE_QTY( #SALES_UOM, #R1)
		IF (%STATUS = %SUCCESS)
			#ORIG_SALES_ORDER_QTY   = SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)
			#SALES_ORDER_QTY	= SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)

	     	IF (#WAREHOUSED_FLAG = #YES)

				IF ((#AR_FREIGHT_IN_USE = #YES) OR (#SYS_TM_IN_USE = #YES))
					#FREIGHT_QTY_TO_SHIP = SALES_ORDER_LINE_QTYS(IC_QTY_TO_SHIP)
					#FREIGHT_INVOICED_QTY = SALES_ORDER_LINE_QTYS(QTY_INVOICED)
					! These values control whether the customer can modify the line
					! delivery address code (and related shipping terms code or
					! contract) or not:
					! if TM is in use and any quantity is on a shipping list or
					! TM not in use and any quantity invoiced, the
					! delivery address code cannot be changed to another value.
				END_IF

				IF (#TP_PROMOTIONS_IN_USE = #YES)
					#TP_INVOICED_QTY = SALES_ORDER_LINE_QTYS(QTY_INVOICED)
					#TP_PROCESSED_QTY = SALES_ORDER_LINE_QTYS(ORDER_QUANTITY_PROCESSED)
				END_IF

			END_IF

			! uom MASK
			PERFORM 'GEMLB:LB_GET_QUANTITY_MASK' (#COMPANY_CODE, SALES_ORDER_LINES(PART_CODE),      &
					#SALES_UOM,     &
					#R1,    &
					#R2)
			IF (%STATUS = %SUCCESS)
				#SALES_UOM_MASK = #R1
				#SALES_UOM_NOD  = #R2
			ELSE
				EXIT (%FAILURE)
			END_IF
		END_IF

		PERFORM FIND_CURRENT_SO_LINE_QTY( #PACK_UOM, #R1)
		IF (%STATUS = %SUCCESS)
			#PACK_ORDER_QTY = SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)
		ELSE
			#PACK_ORDER_QTY = 0
		END_IF

		PERFORM FIND_CURRENT_SO_LINE_QTY( #PRICE_UOM, #R1)
		IF (%STATUS = %SUCCESS)
			#ORIG_PRICE_ORDER_QTY   = SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)
			#PRICE_ORDER_QTY	= SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)
		END_IF

		IF ( #PRICING_METHOD = #TAX_INCLUSIVE )
			#ORIG_DESP_VALUE = (#DESPATCH_QTY * SALES_ORDER_LINES(SALES_PRICE_INC_TAX))
		ELSE
			#ORIG_DESP_VALUE = (#DESPATCH_QTY * SALES_ORDER_LINES(SALES_PRICE))
		END_IF

		PERFORM FIND_CURRENT_SO_LINE_QTY( #NOMI_UOM, #R1)
		IF (%STATUS = %SUCCESS)
			#NOMI_ORDER_QTY = SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)
		END_IF

		IF (#NON_NOMI_UOM <> "")
			PERFORM FIND_CURRENT_SO_LINE_QTY( #NON_NOMI_UOM, #R1)
			IF (%STATUS = %SUCCESS)
				#NON_NOMI_ORDER_QTY = SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)
			END_IF
		END_IF

		FIND IN PRODUCT_MASTER &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PART_CODE=#PART_CODE

		#WAREHOUSED_FLAG = PRODUCT_MASTER(WAREHOUSED_FLAG)
		#BATCHES_REQD = #NO
		#IC_PACKAGED_PRODUCT = PRODUCT_MASTER(IC_PACKAGED_PRODUCT)

		#TP_FLOOR_PRICE = PRODUCT_MASTER(TP_PRODUCT_FLOOR_PRICE)
		#TP_FLOOR_PERCENT = PRODUCT_MASTER(TP_PRODUCT_FLOOR_PERCENT)
		IF (#TP_FLOOR_PRICE > 0.0)
			#TP_BASE_PRICE = #TP_FLOOR_PRICE
			PERFORM CONVERT_BASE_TO_VALUE (#TP_BASE_PRICE,#TP_FLOOR_PRICE)
		END_IF

		IF (PRODUCT_MASTER(BATCHES_EXIST)=#YES &
		AND PRODUCT_MASTER(CHARACTERISTICS_AT_ORDER_ENTRY) = #YES)

			IF (#PART_CODE <> #OLD_PART_CODE)
				PERFORM DELETE_CHAR_LIMITS
				PERFORM LOAD_DEFAULT_CHARS
		  ! load the chars for this sales order line on modify
			ELSE
				PERFORM LOAD_CHARS
			END_IF
		END_IF

		#ATP_IN_USE_FOR_PART = #NO
		IF (#ATP_AT_ORDER_ENTRY = #YES AND PRODUCT_MASTER(ATP_IN_USE) = #YES)
			#ATP_IN_USE_FOR_PART = #YES
		END_IF

		IF (#WAREHOUSED_FLAG = #YES &
		   AND PRODUCT_MASTER(BATCHES_AT_SALES_ORDERS) = #YES &
		   AND PRODUCT_MASTER(BATCHES_EXIST) = #YES)

			#BATCHES_REQD = #YES
		END_IF

		PERFORM IS_LINE_FOR_TP_GIFT (#TP_GIFT_LINE, #TP_PROMOTION_VARIABLE)

		IF ( #TP_PROMOTIONS_IN_USE= #YES )
			FIND IN TP_PROMOTION_CUSTOMER_INPUT_VT
			IF ( TP_PROMOTION_CUSTOMER_INPUT_VT(ADDRESS_CODE) <> SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE) &
				OR TP_PROMOTION_CUSTOMER_INPUT_VT(BROKER_CODE) <> SALES_ORDER_LINES(BROKER_CODE) &
				OR TP_PROMOTION_CUSTOMER_INPUT_VT(SALESPERSON_CODE) <> SALES_ORDER_LINES(SALESPERSON_CODE) &
				OR TP_PROMOTION_CUSTOMER_INPUT_VT(LOCATION) <> SALES_ORDER_LINES(LOCATION) )

				#ASSOCIATION_VALUE_CHANGE = #NO
				TP_PROMOTION_CUSTOMER_INPUT_VT(ADDRESS_CODE)		= SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE)
				TP_PROMOTION_CUSTOMER_INPUT_VT(FINAL_ADDRESS_CODE)  = #HEADER_FINAL_ADDRESS_CODE
				TP_PROMOTION_CUSTOMER_INPUT_VT(BROKER_CODE)		    = SALES_ORDER_LINES(BROKER_CODE)
				TP_PROMOTION_CUSTOMER_INPUT_VT(SALESPERSON_CODE)	= SALES_ORDER_LINES(SALESPERSON_CODE)
				TP_PROMOTION_CUSTOMER_INPUT_VT(LOCATION)			= SALES_ORDER_LINES(LOCATION)

				PERFORM "GEMTP:TP_L_PROMOTION_DISCOUNTS" ( "INITIALIZE", #R_STATUS, #R_MSG, #DMMY1, #DMMY2, #DMMY3 )

			END_IF
			#LOAD_DISCOUNTS = #YES
		END_IF

	END_BLOCK
END_FORM

PROCEDURE_FORM ASSIGN_LINE_REQUESTED_DATE

	BEGIN_BLOCK DO_ASSIGN
		#LINE_REQUESTED_DATE = SALES_ORDER_LINES(SYS_REQUESTED_DATE)

		IF (#LINE_REQUESTED_DATE = "")
			#LINE_REQUESTED_DATE = SALES_ORDER_HEADERS(SYS_REQUESTED_DATE)
		END_IF

		IF (#LINE_REQUESTED_DATE = "")
			#LINE_REQUESTED_DATE = %TODAY
		END_IF
		
		IF(#MAIN_OPT = "COPY")
			#LINE_REQUESTED_DATE = #SYS_REQUESTED_DATE
		END_IF
	END_BLOCK

END_FORM


TABLE_FORM BATCHES /ROW=15 /COL=2 /HEIGHT=9 /ROW_HEIGHT=2 /WIDTH=78 &
	/TITLE=(MESSAGE("P_44154")) &
	/TABLE=SALES_ORDER_LINE_DETAILS &
	/SEQUENCE=SEQUENCE &
	/DELETE_FORM=DELETE_LOT_DETAIL &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION=#DIVISION &
	/WITH=ORDER_NUMBER=#ORDER_NUMBER &
	/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER)

	BEGIN_BLOCK SETUP_1

     	#OLD_SHIP_WAREHOUSE = SALES_ORDER_LINE_DETAILS(WAREHOUSE)
		#OLD_LOT_NUMBER = SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER)

		#OLD_SYS_SHIPPING_DATE = SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)
		#OLD_SYS_DELIVERY_DATE = SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE)

		#DETAIL_QTYS_DELETED = #NO

		IF (%EDIT_MODE = %ADD)
			SALES_ORDER_LINE_DETAILS(COMPANY_CODE)	  = #COMPANY_CODE
			SALES_ORDER_LINE_DETAILS(DIVISION)			   = #DIVISION
			SALES_ORDER_LINE_DETAILS(ORDER_NUMBER)	  = #ORDER_NUMBER

			SALES_ORDER_LINE_DETAILS(ORDER_LINE_NUMBER)		  = SALES_ORDER_LINES(ORDER_LINE_NUMBER)
			SALES_ORDER_LINE_DETAILS(ORIGINAL_SEQUENCE)	= SALES_ORDER_LINE_DETAILS(SEQUENCE)
			SALES_ORDER_LINE_DETAILS(ORDER_DATE)	    = #ORDER_DATE

			SALES_ORDER_LINE_DETAILS(WAREHOUSE) = SALES_ORDER_LINES(WAREHOUSE)

			SALES_ORDER_LINE_DETAILS(ORDER_LINE_STATUS)		  = ""

			IF (#LINE_REQUESTED_DATE = "")
				#LINE_REQUESTED_DATE = SALES_ORDER_HEADERS(SYS_REQUESTED_DATE)
				IF (#LINE_REQUESTED_DATE = "")
					#LINE_REQUESTED_DATE = %TODAY
				END_IF
			END_IF

			PERFORM "GEMLB:LB_L_ATP_AUTO" CALCULATE_DATES ((#COMPANY_CODE), &
					(#DIVISION), &
					(#SHIP_WAREHOUSE), &
					(#CUSTOMER_NUMBER), &
					(SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE)), &
					(#LINE_REQUESTED_DATE), &
					#TEMP_RECOMMENDED_DATE, &
					#TEMP_SHIPPING_DATE, &
					#TEMP_DELIVERY_DATE, &
					#TEMP_DISTRIBUTION_CALENDAR)

			SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE) = #TEMP_SHIPPING_DATE
			SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE) = #TEMP_DELIVERY_DATE

			SALES_ORDER_LINE_DETAILS(REQUIRED_DATE)	 = SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)
			SALES_ORDER_LINE_DETAILS(TEMP_REQUIRED_DATE)	   = SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)
			SALES_ORDER_LINE_DETAILS(ORDER_LINE_REF)	= SALES_ORDER_LINES(ORDER_LINE_REFERENCE)
			SALES_ORDER_LINE_DETAILS(ORDER_HORIZON) = ""
			SALES_ORDER_LINE_DETAILS(TM_LOAD_PLANNING) = #SYS_TM_IN_USE

			#OLD_SYS_SHIPPING_DATE = SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)
			#OLD_SYS_DELIVERY_DATE = SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE)

			#DETAIL_SALES_ORDER_QTY = 0
			#DETAIL_NOMI_ORDER_QTY = 0
			#OLD_DETAIL_NOMI_ORDER_QTY = 0
			#OLD_SALES_ORDER_QTY = 0
			#OLD_QTY_RESERVED = 0

			OUTPUT_BLOCK QTY_UOM_1  /ROW=1  /COL=66 /LEN=4 &
				/SOURCE=#SALES_UOM		   &
				/HEADING=FIELD_HEADING(UNIT_SALES) &
				/USING = SALES_ORDER_LINE_QTYS(UNIT_OF_MEASURE)
		END_IF

		IF (%EDIT_MODE = %MODIFY)
			! set the quantity
			PERFORM FIND_CURRENT_SO_LINE_DETAIL_QTY( #NOMI_UOM, #R1)
			IF (%STATUS <> %SUCCESS)
				EXIT (%STATUS)
			END_IF
			#DETAIL_NOMI_ORDER_QTY  = SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY)
			#OLD_DETAIL_NOMI_ORDER_QTY		 = SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY)

			PERFORM FIND_CURRENT_SO_LINE_DETAIL_QTY( #SALES_UOM, #R1)
			IF (%STATUS <> %SUCCESS)
				EXIT (%STATUS)
			END_IF

			#DETAIL_SALES_ORDER_QTY = SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY)
			#OLD_SALES_ORDER_QTY = #DETAIL_SALES_ORDER_QTY
			#OLD_QTY_RESERVED = SALES_ORDER_LINE_DETAIL_QTYS(QTY_RESERVED)

			PERFORM FIND_CURRENT_SO_LINE_DETAIL_QTY( #PRICE_UOM, #R1)
			IF (%STATUS <> %SUCCESS)
				EXIT (%STATUS)
			END_IF

			#OLD_PRICE_QTY = SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY)
		END_IF
	END_BLOCK

	BEGIN_BLOCK  /DISPLAY_ONLY SETUP_QUANTITY_2
		FIND IN SALES_ORDER_LINE_DETAIL_QTYS		 &
			/LOCK = READ &
			/WITH = COMPANY_CODE = #COMPANY_CODE	   &
			/WITH = DIVISION = #DIVISION	   &
			/WITH = ORDER_NUMBER = SALES_ORDER_LINES(ORDER_NUMBER)  &
			/WITH = ORDER_LINE_NUMBER = SALES_ORDER_LINES(ORDER_LINE_NUMBER)	&
			/WITH = SEQUENCE = SALES_ORDER_LINE_DETAILS(SEQUENCE) &
			/WITH = UNIT_OF_MEASURE = #SALES_UOM

		IF (%STATUS = %SUCCESS)
			#DETAIL_SALES_ORDER_QTY = SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY)
		ELSE
			#DETAIL_SALES_ORDER_QTY = 0
		END_IF
		FIND IN SALES_ORDER_LINE_DETAIL_QTYS		 &
			/LOCK = READ &
			/WITH = COMPANY_CODE = #COMPANY_CODE	   &
			/WITH = DIVISION = #DIVISION	   &
			/WITH = ORDER_NUMBER = SALES_ORDER_LINES(ORDER_NUMBER)  &
			/WITH = ORDER_LINE_NUMBER = SALES_ORDER_LINES(ORDER_LINE_NUMBER)	&
			/WITH = SEQUENCE = SALES_ORDER_LINE_DETAILS(SEQUENCE) &
			/WITH = UNIT_OF_MEASURE = #NOMI_UOM

		IF (%STATUS = %SUCCESS)
			#DETAIL_NOMI_ORDER_QTY = SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY)
		ELSE
			#DETAIL_NOMI_ORDER_QTY  = 0
		END_IF
	END_BLOCK

	OUTPUT_BLOCK SEQUENCE_3 /ROW=1 /COL=2 &
			/DOMAIN=SALES_ORDER_LINE_DETAILS &
			/SOURCE=(SALES_ORDER_LINE_DETAILS(SEQUENCE)) &
			/HEADING=FIELD_HEADING(SEQUENCE) &
			/OUTPUT_MASK="!-@@0"

	BEGIN_BLOCK WAREHOUSE

     		INPUT_BLOCK /ROW=1 /COL=6 &
			/SOURCE=SALES_ORDER_LINE_DETAILS(WAREHOUSE) &
			/TARGET=#SHIP_WAREHOUSE &
			/HEADING=FIELD_HEADING(WAREHOUSE) &
			/USING=SALES_ORDER_LINES(WAREHOUSE) &
			/LOV=WAREHOUSE_DESC(WAREHOUSE,WAREHOUSE_DESCRIPTION,QTY_AVAILABLE) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=PART_CODE=#PART_CODE &
			/LOV_WITH=IC_STATUS_CODE = (PARAMETER("IC_STATUS_QOH")) &
			/LOV_WITH=WAREHOUSE AMONG #ACCESSIBLE_WAREHOUSES &
			/LOV_SORTED_BY=(WAREHOUSE) &
			/LOV_REDUCED_TO=(WAREHOUSE)

		! allow to select from ATP warehouses
  		IF (#SHIP_WAREHOUSE = "")
			GOTO WAREHOUSE_CHANGE_WARN
		END_IF

		FIND IN WAREHOUSE_CONTROLS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=WAREHOUSE=#SHIP_WAREHOUSE

		IF (%STATUS <> %SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00366,#SHIP_WAREHOUSE
			GOTO WAREHOUSE
		END_IF

		IF (WAREHOUSE_CONTROLS(ACTIVATE_MODULE) <> #YES)
			MESSAGE/IDENTIFIER/BELL/WAIT P_42027
			GOTO WAREHOUSE
		END_IF

		IF (#SECURITY_ACTIVE = #YES)
			FIND IN SECURITY_PERIOD_ACCESS_VT &
				/WITH=SYS_ACCESS_TYPE=(PARAMETER("ACCESS_TYPE_WAREHOUSE")) &
				/WITH=SYS_ACCESS_CODE= #SHIP_WAREHOUSE &
				/WITH=SOURCE_MODULE=(PARAMETER("MODULE_SO"))

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_10631,(PARAMETER("MODULE_SO"))
				GOTO WAREHOUSE
			END_IF

			IF (SECURITY_PERIOD_ACCESS_VT(SYS_ALLOW_ACCESS) <> #YES)
				MESSAGE/IDENTIFIER/BELL/WAIT P_10631,(PARAMETER("MODULE_SO"))
				GOTO WAREHOUSE
			END_IF
		END_IF

		FIND IN PRODUCT_WAREHOUSE &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=WAREHOUSE=#SHIP_WAREHOUSE &
			/WITH=PART_CODE=#PART_CODE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_42024
			GOTO WAREHOUSE
		END_IF
		! Validate the part code

		IF (PRODUCT_WAREHOUSE(ACTIVATION_STATUS) <> (PARAMETER("STATUS_ACTIVE")) )
			MESSAGE/IDENTIFIER/BELL/WAIT P_02198
			GOTO WAREHOUSE
		END_IF

		IF (PRODUCT_WAREHOUSE(SALES_ORDERS_FLAG)<>#YES)
			MESSAGE/IDENTIFIER/BELL/WAIT P_52342
			GOTO WAREHOUSE
		END_IF

 		IF (#SYS_TM_IN_USE = #YES)
			#DETAIL_TM_IN_USE = WAREHOUSE_CONTROLS(TM_LOAD_PLANNING)
		ELSE
			#DETAIL_TM_IN_USE = #NO
		END_IF
		IF (#DETAIL_TM_IN_USE = "")
			#DETAIL_TM_IN_USE = #NO
		END_IF

		#ATP_IN_USE_FOR_PW = PRODUCT_WAREHOUSE(ATP_IN_USE)

		SALES_ORDER_LINE_DETAILS(WAREHOUSE) = #SHIP_WAREHOUSE

		#SHIP_WH_COUNTRY = WAREHOUSE_CONTROLS(SYS_COUNTRY)
		#SHIP_WH_DIST_ZONE = WAREHOUSE_CONTROLS(SYS_DISTRIBUTION_ZONE)

		FIND IN SYS_BILL_OF_DISTRIBUTION &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=SYS_BOD_CODE=#LINE_DIST_BOD_CODE &
			/WITH=WAREHOUSE=#SHIP_WAREHOUSE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/WAIT P_93557, #SHIP_WAREHOUSE, #LINE_DIST_BOD_CODE
		END_IF

		IF ((#SHIP_WH_COUNTRY = "") AND (#DETAIL_TM_IN_USE = #YES))
			MESSAGE/IDENTIFIER/BELL/WAIT P_93526, #SHIP_WH_COUNTRY, #SHIP_WAREHOUSE
			#DETAIL_TM_IN_USE = #NO
			GOTO WAREHOUSE_CHANGE_WARN
		END_IF

		IF ((#SHIP_WH_DIST_ZONE = "") AND (#DETAIL_TM_IN_USE = #YES))
			MESSAGE/IDENTIFIER/BELL/WAIT P_93527, #SHIP_WAREHOUSE
			#DETAIL_TM_IN_USE = #NO
			GOTO WAREHOUSE_CHANGE_WARN
		END_IF

		FIND IN SYS_DISTRIBUTION_ZONES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=SYS_COUNTRY = #SHIP_WH_COUNTRY &
			/WITH=SYS_DISTRIBUTION_ZONE = #SHIP_WH_DIST_ZONE

		IF (%STATUS = %FAILURE)
			! Always display warning message if find fails, because Country and
			! Distribution zone were not blank, so assume they were to be used
			! regardless of whether TM is in use or not.
			MESSAGE/IDENTIFIER/BELL/WAIT P_93556, #SHIP_WH_DIST_ZONE
			#DETAIL_TM_IN_USE = #NO
			GOTO WAREHOUSE_CHANGE_WARN
		END_IF
	END_BLOCK

	BEGIN_BLOCK WAREHOUSE_CHANGE_WARN
		SALES_ORDER_LINE_DETAILS(TM_LOAD_PLANNING) = #DETAIL_TM_IN_USE

		#WAREHOUSE_CHANGE = #NO
		#DELETE_PROMISES = #NO
		IF ((#SHIP_WAREHOUSE <> #OLD_SHIP_WAREHOUSE) &
				AND (#OLD_SHIP_WAREHOUSE <> "" ))

			IF (SALES_ORDER_LINE_DETAIL_QTYS(QTY_RESERVED) > 0)
			!Only after confirm shall we start all those unreserving
			!for quantity and should also warn that ATP will be deleted
				MESSAGE/IDENTIFIER/BELL/WAIT P_91503
			ELSE
				IF (SALES_ORDER_LINE_DETAILS(IC_ATP_QTY_PROMISED) > 0)
					MESSAGE/IDENTIFIER/BELL/WAIT P_91531
					#DELETE_PROMISES = #YES
				END_IF
			END_IF

			#WAREHOUSE_CHANGE = #YES
		END_IF
	END_BLOCK

	BEGIN_BLOCK IC_LOT_NUMBER_5
		SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER) = #OLD_LOT_NUMBER
		IF (#IC_PACKAGED_PRODUCT = #YES)
			#INQ_UOM	= #PACK_UOM
		ELSE
			#INQ_UOM	= #NOMI_UOM
		END_IF

!Prevent the lot being changed for a line that is already in despatch.
		OUTPUT_BLOCK SHOW_LOT_NUMBER /ROW=1 /COL=9 &
			/SOURCE=SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER) &
			/HEADING=FIELD_HEADING(IC_LOT_NUMBER) &
			/USE_IF=(SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY_PROCESSED) <> 0)

		INPUT_BLOCK GET_LOT_NUMBER /ROW=1 /COL=9 &
			/TARGET=SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER) &
			/HEADING=FIELD_HEADING(IC_LOT_NUMBER) &
			/USING=REQUIRED &
			/LOV=IC_LOT_STATUS(IC_LOT_NUMBER,UNIT_OF_MEASURE, IC_STATUS_CODE, IC_QTY_AVAILABLE) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=WAREHOUSE=SALES_ORDER_LINE_DETAILS(WAREHOUSE) &
			/LOV_WITH=PART_CODE=SALES_ORDER_LINES(PART_CODE) &
			/LOV_WITH=IC_QTY_AVAILABLE > 0 &
			/LOV_WITH=UNIT_OF_MEASURE = #INQ_UOM &
			/LOV_WITH=IC_STATUS_CODE = (PARAMETER("IC_STATUS_QOH")) &
			/USE_IF=(#ATP_IN_USE_FOR_PART = #NO AND &
				 SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY_PROCESSED) = 0)

		INPUT_BLOCK GET_LOT_NUMBER_ATP /ROW=1 /COL=9 &
			/TARGET=SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER) &
			/HEADING=FIELD_HEADING(IC_LOT_NUMBER) &
			/LOV=IC_LOT_STATUS(IC_LOT_NUMBER,UNIT_OF_MEASURE, IC_STATUS_CODE, IC_QTY_AVAILABLE) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=WAREHOUSE=SALES_ORDER_LINE_DETAILS(WAREHOUSE) &
			/LOV_WITH=PART_CODE=SALES_ORDER_LINES(PART_CODE) &
			/LOV_WITH=IC_QTY_AVAILABLE > 0 &
			/LOV_WITH = UNIT_OF_MEASURE = #INQ_UOM &
			/USE_IF=(#ATP_IN_USE_FOR_PART = #YES AND &
				 SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY_PROCESSED) = 0)

			IF (SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER) = "")
				GOTO DATES
			END_IF
		IF (SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER) <> "" AND SALES_ORDER_LINE_DETAILS(WAREHOUSE) = "")
			GOTO WAREHOUSE
		END_IF

	END_BLOCK

	BEGIN_BLOCK VERIFY_BATCHES_6
		FIND IN PART_BATCHES &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=WAREHOUSE=SALES_ORDER_LINE_DETAILS(WAREHOUSE) &
			/WITH=PART_CODE=SALES_ORDER_LINES(PART_CODE) &
			/WITH=IC_LOT_NUMBER=SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER) &
			/LOCK=NONE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00344
			GOTO IC_LOT_NUMBER_5
		END_IF

		START_STREAM HS &
			/TABLE=IC_LOT_STATUS &
			/LOCK=READ &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PART_CODE=PRODUCT_WAREHOUSE(PART_CODE) &
			/WITH=WAREHOUSE=SALES_ORDER_LINE_DETAILS(WAREHOUSE) &
			/WITH=IC_LOT_NUMBER=SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER) &
			/WITH=IC_STATUS_CODE=#IC_STATUS_CODE &
			/WITH = UNIT_OF_MEASURE = #INQ_UOM &
			/STATISTIC=#QTY_AVAILABLE=TOTAL(IC_QTY_AVAILABLE)

		FETCH HS
		IF (%STATUS=%FAILURE)
			#QTY_AVAILABLE=0
		END_IF

		PERFORM FIND_CURRENT_SO_LINE_DETAIL_QTY (#INQ_UOM, #R1)
		IF (#R1 = "")
			#OLD_INQ_QTY_RESERVED		= SALES_ORDER_LINE_DETAIL_QTYS(QTY_RESERVED)
		ELSE
			#OLD_INQ_QTY_RESERVED		= 0
		END_IF

		#START_QTY_AVAILABLE = #QTY_AVAILABLE

		IF (#OLD_LOT_NUM <> SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER))
			#START_QTY_AVAILABLE = #QTY_AVAILABLE
			#OLD_LOT_NUM = SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER)
			#LOT_START_QTY_AVAILABLE = #START_QTY_AVAILABLE
		END_IF

		IF (PRODUCT_MASTER(BATCH_REPLENISH_ALLOWED) = (PARAMETER("LANGUAGE_NO")) &
		    AND (#QTY_AVAILABLE + #OLD_INQ_QTY_RESERVED) <= 0)
			MESSAGE/IDENTIFIER/BELL/WAIT P_52062
			GOTO IC_LOT_NUMBER_5
		END_IF

		IF (#IC_PACKAGED_PRODUCT = #YES AND #QTY_AVAILABLE <=0)
			MESSAGE/IDENTIFIER/BELL/WAIT P_90020
			GOTO IC_LOT_NUMBER_5
		END_IF

		IF (#CHARACTERISTICS <> #NO)
			#WITHIN_LIMITS = #YES

			START_STREAM LIM &
				/TABLE=SOP_ORDER_CHARS_VT &
				/LOCK=WRITE

			WHILE (#WITHIN_LIMITS = #YES)

				FETCH LIM /FAILURE=(CONTINUE OUT)

				FIND IN IC_LOT_CHARACTERISTICS &
					/LOCK=NONE &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=WAREHOUSE=SALES_ORDER_LINE_DETAILS(WAREHOUSE) &
					/WITH=PART_CODE=SALES_ORDER_LINES(PART_CODE) &
					/WITH=IC_LOT_NUMBER=SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER) &
					/WITH = CHARACTERISTIC_CODE=SOP_ORDER_CHARS_VT(CHARACTERISTIC_CODE)

				IF (%STATUS <> %SUCCESS)
					#WITHIN_LIMITS = #NO
				ELSE
					IF (IC_LOT_CHARACTERISTICS(IC_DATATYPE_INDICATOR) &
						= (PARAMETER("IC_CHARACTERISTIC_NUMERIC")))

						IF (IC_LOT_CHARACTERISTICS(CHARACTERISTIC_NUMERIC) &
							< SOP_ORDER_CHARS_VT(IC_LOW_LIMIT_NUMERIC) &
							OR IC_LOT_CHARACTERISTICS(CHARACTERISTIC_NUMERIC) &
							> SOP_ORDER_CHARS_VT(IC_HIGH_LIMIT_NUMERIC))
							#WITHIN_LIMITS = #NO
						END_IF
					ELSE
						IF (IC_LOT_CHARACTERISTICS(CHARACTERISTIC_TEXT) &
							< SOP_ORDER_CHARS_VT(IC_LOW_LIMIT_TEXT) &
							OR IC_LOT_CHARACTERISTICS(CHARACTERISTIC_TEXT) &
							> SOP_ORDER_CHARS_VT(IC_HIGH_LIMIT_TEXT))
							#WITHIN_LIMITS = #NO
						END_IF
					END_IF
				END_IF
			END_WHILE

			IF (#WITHIN_LIMITS <> #YES)
				MESSAGE/IDENTIFIER/BELL/WAIT P_52376
					! This is just a warning message, not an error message
					!
			END_IF
		END_IF

		IF (#BATCH_EXPIRY=#YES AND PART_BATCHES(BATCH_DATE)<>"" &
			AND DAYS(PART_BATCHES(BATCH_DATE)) < DAYS(%TODAY))
			MESSAGE/IDENTIFIER/BELL/WAIT P_52229
			GOTO IC_LOT_NUMBER_5
		END_IF

		PERFORM FIND_CURRENT_SO_LINE_DETAIL_QTY (#SALES_UOM, #R1)
		IF (#R1 = "")
			#OLD_QTY_RESERVED		= SALES_ORDER_LINE_DETAIL_QTYS(QTY_RESERVED)
		ELSE
			#OLD_QTY_RESERVED		= 0
		END_IF
	END_BLOCK

	BEGIN_BLOCK LOT_CHANGE_WARN
		#LOT_CHANGE = #NO
		IF ((SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER) <> #OLD_LOT_NUMBER) &
		AND (#OLD_LOT_NUMBER <> "" ))

			#LOT_CHANGE = #YES

			IF (SALES_ORDER_LINE_DETAIL_QTYS(QTY_RESERVED)>0)
			!Only after confirm shall we start all those unreserving
			!for quantity and should also warn that ATP will be deleted
				IF (#WAREHOUSE_CHANGE = #NO)
					MESSAGE/IDENTIFIER/BELL/WAIT P_80023
				END_IF
			ELSE
				IF (#DELETE_PROMISES = #NO AND SALES_ORDER_LINE_DETAILS(IC_ATP_QTY_PROMISED) > 0.0)
					MESSAGE/IDENTIFIER/BELL/WAIT P_91533
					#DELETE_PROMISES = #YES
				END_IF
			END_IF
		END_IF
	END_BLOCK


	BEGIN_BLOCK DATES

		#DATE_CHANGE = #NO

		IF (#SOP_REQUIRED_DATE_METHOD = #METHOD_DESPATCH)

			INPUT_BLOCK /ROW=1 /COL=25 &
				/TARGET=SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE) &
				/HEADING=FIELD_HEADING(SYS_SHIPPING_DATE) &
				/USING=REQUIRED &
				/USE_IF=(#SOP_REQUIRED_DATE_METHOD=#METHOD_DESPATCH)

			IF (SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE) <> #OLD_SYS_SHIPPING_DATE)

				IF ((SALES_ORDER_LINE_DETAIL_QTYS(QTY_RESERVED) > 0) &
				AND (#WAREHOUSED_FLAG = #YES))
					!Only after confirm shall we start all those unreserving
					!for quantity and should also warn that ATP will be deleted
					MESSAGE/IDENTIFIER/BELL/WAIT P_91503
				ELSE
					IF ((SALES_ORDER_LINE_DETAILS(IC_ATP_QTY_PROMISED) > 0) &
					AND (#WAREHOUSED_FLAG = #YES))
						MESSAGE/IDENTIFIER/BELL/WAIT P_91531
						#DELETE_PROMISES = #YES
					END_IF
				END_IF

				#DATE_CHANGE = #YES
				! This check was added because a user can choose to do a manual promise
				! against a future PO or another ATP source type which may not have been
				! available to promise from the previous date.	 In this case, any existing
				! promises should be deleted and new promises made.

			END_IF
			
			! Change 004 - For Voltaix, the Shipping Dates and therfore the Required Date should be the same as the Delivery Date
			SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE) = SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE)
			!Change 004 End

			IF ((DAYS(SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)) < DAYS(%TODAY)) &
				AND (#WAREHOUSED_FLAG = #YES))
				MESSAGE/IDENTIFIER/BELL/WAIT P_91540
			END_IF

			IF (#DATE_CHANGE = #YES OR (#WAREHOUSE <> #SHIP_WAREHOUSE))
				PERFORM "GEMLB:LB_L_ATP_AUTO" CALCULATE_DATES ((#COMPANY_CODE), &
						(#DIVISION), &
						(#SHIP_WAREHOUSE), &
						(#CUSTOMER_NUMBER), &
						(SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE)), &
						(SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)), &
						#TEMP_RECOMMENDED_DATE, &
						#TEMP_SHIPPING_DATE, &
						#TEMP_DELIVERY_DATE, &
						#TEMP_DISTRIBUTION_CALENDAR)

				IF (DAYS(#TEMP_RECOMMENDED_DATE) <> DAYS(SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)))
					MESSAGE/IDENTIFIER/BELL P_93533, &
							(MASK(#DEFAULT_DATE_MASK, SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE))), &
							#SHIP_WH_DIST_ZONE
				END_IF

				IF ( %EDIT_MODE = %ADD )
					SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE) = #TEMP_DELIVERY_DATE
				END_IF
			END_IF

			! Calculate working date for delivery.
			! If TM is in use for company and supply warehouse,
			! see if any existing shipping requirements match
			! this detail line, if so take the delivery date
			! from the shipping requirement found.
			IF (#DETAIL_TM_IN_USE = #YES)
				PERFORM "GEMTM:TM_L_TRANSPORT_REQUIREMENTS" &
						MATCH_DETAIL_TO_REQUIREMENT

				IF (SALES_ORDER_LINE_DETAILS(SHIPPING_REQUIREMENT_NUMBER) <> 0)
					SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE) = &
						SOP_SHIPPING_REQUIREMENTS(SYS_DELIVERY_DATE)
				END_IF
			END_IF

			INPUT_BLOCK /ROW=1 /COL=37 &
				/TARGET=SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE) &
				/HEADING=FIELD_HEADING(SYS_DELIVERY_DATE) &
				/USING=REQUIRED &
				/USE_IF=(#SOP_REQUIRED_DATE_METHOD=#METHOD_DESPATCH)

!			Just warnings...
			IF ( SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE) < SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE) )
				MESSAGE/IDENTIFIER/BELL/WAIT P_85193
			END_IF

			PERFORM "GEMLB:LB_L_ATP_AUTO" CHECK_WORKING_DAY ((#COMPANY_CODE), &
									(#DIVISION), &
									"", &
									(SALES_ORDER_LINES(CUSTOMER_NUMBER)), &
									(SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE)), &
									(SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE)))

			IF ( SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE) <> #OLD_SYS_DELIVERY_DATE )
					#DATE_CHANGE = #YES
			END_IF
		ELSE

			INPUT_BLOCK /ROW=1 /COL=37 &
				/TARGET = SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE) &
				/HEADING=FIELD_HEADING(SYS_DELIVERY_DATE) &
				/USING=REQUIRED &
				/USE_IF=(#SOP_REQUIRED_DATE_METHOD=#METHOD_RECEIPT)

			IF (SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE) <> #OLD_SYS_DELIVERY_DATE)

				IF ((SALES_ORDER_LINE_DETAIL_QTYS(QTY_RESERVED) > 0) &
				AND (#WAREHOUSED_FLAG = #YES))
					!Only after confirm shall we start all those unreserving
					!for quantity and should also warn that ATP will be deleted
					MESSAGE/IDENTIFIER/BELL/WAIT P_91503
				ELSE
					IF ((SALES_ORDER_LINE_DETAILS(IC_ATP_QTY_PROMISED) > 0) &
					AND (#WAREHOUSED_FLAG = #YES))
						MESSAGE/IDENTIFIER/BELL/WAIT P_91531
						#DELETE_PROMISES = #YES
					END_IF
				END_IF
				#DATE_CHANGE = #YES
				! This check was added because a user can choose to do a manual promise
				! against a future PO or another ATP source type which may not have been
				! available to promise previously.	 In this case, any existing promises
				! should be deleted and new promises made.
			END_IF

			IF (#DATE_CHANGE = #YES OR (#WAREHOUSE <> #SHIP_WAREHOUSE))

				PERFORM "GEMLB:LB_L_ATP_AUTO" CALCULATE_DATES ((#COMPANY_CODE), &
						(#DIVISION), &
						(#SHIP_WAREHOUSE), &
						(#CUSTOMER_NUMBER), &
						(SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE)), &
						(SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE)), &
						#TEMP_RECOMMENDED_DATE, &
						#TEMP_SHIPPING_DATE, &
						#TEMP_DELIVERY_DATE, &
						#TEMP_DISTRIBUTION_CALENDAR)

				IF (DAYS(#TEMP_RECOMMENDED_DATE) <> DAYS(SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE)))
					MESSAGE/IDENTIFIER/BELL P_93533, &
						(MASK(#DEFAULT_DATE_MASK, SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE))), #DEST_ZONE
					SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE) = #TEMP_DELIVERY_DATE
				END_IF

				IF ( %EDIT_MODE = %ADD )
					SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE) = #TEMP_SHIPPING_DATE
				END_IF
			END_IF

			INPUT_BLOCK /ROW=1 /COL=25 &
				/TARGET = SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE) &
				/HEADING=FIELD_HEADING(SYS_SHIPPING_DATE) &
				/USING=REQUIRED &
				/USE_IF=(#SOP_REQUIRED_DATE_METHOD=#METHOD_RECEIPT)

!			Just warnings...
			IF ((DAYS(SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)) < DAYS(%TODAY)) &
				AND (#WAREHOUSED_FLAG = #YES))
				MESSAGE/IDENTIFIER/BELL/WAIT P_91540
			END_IF

			IF ( SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE) < SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE) )
				MESSAGE/IDENTIFIER/BELL/WAIT P_85193
			END_IF

			PERFORM "GEMLB:LB_L_ATP_AUTO" CHECK_WORKING_DAY ((#COMPANY_CODE), &
									(#DIVISION), &
									(#SHIP_WAREHOUSE), &
									"", &
									"", &
									(SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)))

			IF ( SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE) <> #OLD_SYS_SHIPPING_DATE )
				#DATE_CHANGE = #YES
			END_IF
		END_IF

		#OLD_SYS_DELIVERY_DATE = SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE)
		#OLD_SYS_SHIPPING_DATE = SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)
		#OLD_REQ_DATE = SALES_ORDER_LINE_DETAILS(REQUIRED_DATE)
		SALES_ORDER_LINE_DETAILS(REQUIRED_DATE) = SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)
	END_BLOCK

	INPUT_BLOCK ORDER_LINE_REF_9 /ROW=2 /COL=20 &
		/TARGET=SALES_ORDER_LINE_DETAILS(ORDER_LINE_REF) &
		/PROMPT=FIELD_SHORT_PROMPT(ORDER_LINE_REFERENCE)

	!Change 005 - If the part code is a charge, then make the order line reference be required
	BEGIN_BLOCK CHECK_IF_REQUIRED 
		IF (SALES_ORDER_LINE_DETAILS(ORDER_LINE_REF)="" AND SALES_ORDER_LINES(PART_CODE)>="901000")
			ERROR /TEXT_ONLY "Line Reference is required for all demurrage charges."
			GOTO ORDER_LINE_REF_9
		END_IF
	END_BLOCK
	!Change 005 End

	INPUT_BLOCK ORDER_QUANTITY_10 /ROW=1 /COL=50 /LEN=14 &
			/SOURCE = #DETAIL_SALES_ORDER_QTY &
			/INPUT_MASK = #SALES_UOM_MASK &
			/TARGET=#DETAIL_SALES_ORDER_QTY &
			/USING= SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY),NONEGATIVE &
			/HEADING=FIELD_HEADING(ORDER_QUANTITY)

	OUTPUT_BLOCK QTY_UOM /ROW=1 /COL=66 /LEN=4 &
		/SOURCE=#SALES_UOM	  &
		/HEADING=FIELD_HEADING(UNIT_SALES) &
		/USING = SALES_ORDER_LINE_QTYS(UNIT_OF_MEASURE)

	INPUT_BLOCK WH_TM_IN_USE /ROW=1 /COL=72 /LEN=4 &
		/TARGET=SALES_ORDER_LINE_DETAILS(TM_LOAD_PLANNING) &
		/HEADING=FIELD_HEADING(TM_LOAD_PLANNING) &
		/INPUT_MASK="!  @ " &
		/USE_IF=(#DETAIL_TM_IN_USE = #YES)

	OUTPUT_BLOCK DISP_WH_TM_IN_USE /ROW=1 /COL=72 /LEN=4 &
		/SOURCE=(SALES_ORDER_LINE_DETAILS(TM_LOAD_PLANNING)) &
		/HEADING=FIELD_HEADING(TM_LOAD_PLANNING) &
		/OUTPUT_MASK="!  @ " &
		/USE_IF=(#SYS_TM_IN_USE = #YES)

	BEGIN_BLOCK CHECK_QTY_11
		IF (#DETAIL_SALES_ORDER_QTY < SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY_PROCESSED))
			MESSAGE/IDENTIFIER/BELL/WAIT P_52087,MASK( #SALES_UOM_MASK, &
					SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY_PROCESSED))
			GOTO ORDER_QUANTITY_10
		END_IF

		IF (SALES_ORDER_LINES(ORDER_LINE_TYPE) = #SO_LINE_TYPE_STOCK &
			AND #WAREHOUSED_FLAG=#YES)

			IF ((#WAREHOUSE_CHANGE = #YES) OR (#LOT_CHANGE = #YES) OR (#DATE_CHANGE = #YES))
				! unreserve the qty
				! perform the reservation check
				IF ((SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY_PROCESSED) <> 0) AND (#LOT_CHANGE = #YES))
					!
					!		    Only when the line has not been process should
					!		    we allow change in lot number
					!		    OTHERWISE we cannot trace back what lot is being used.
					!
					!MESSAGE/IDENTIFIER/BELL/WAIT P_32232
					EXIT(%FAILURE)
				END_IF

				IF ((#WAREHOUSE_CHANGE = #YES) OR (#DATE_CHANGE = #YES))
					!Lot number not passed in, uses table.field
					!Need to set field to old value so that reversal works
					#NEW_LOT_NUMBER = SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER)
					SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER) = #OLD_LOT_NUMBER

					PERFORM 'GEMSOP:SOP_L_DO_IC_COMMITMENTS' (#OLD_SHIP_WAREHOUSE, &
								(SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)), &
								#OLD_REQ_DATE, &
								#IC_MOVEMENT_CODE, &
								#OLD_DETAIL_NOMI_ORDER_QTY, &
								"0", &
								#R1)
					IF (%STATUS <> %SUCCESS)
						ERROR /WAIT #R1
					END_IF
					SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER) = #NEW_LOT_NUMBER

				END_IF

				IF (SALES_ORDER_LINE_DETAIL_QTYS(QTY_RESERVED) > 0)
				! unreserve these
					FIND IN PRODUCT_WAREHOUSE &
						/LOCK=WRITE &
						/WITH=COMPANY_CODE=#COMPANY_CODE &
						/WITH=WAREHOUSE=#OLD_SHIP_WAREHOUSE &
						/WITH=PART_CODE=SALES_ORDER_LINES(PART_CODE)

					#START_QTY_AVAILABLE_BACK = 0.0

					PERFORM "GEMSOP:SOP_L_RESERVATION" (&
							#COMPANY_CODE, &
							#OLD_SHIP_WAREHOUSE,&
							"0", &
							#OLD_LOT_NUMBER, &
							#YES, &
							(SALES_ORDER_LINE_DETAIL_QTYS(SEQUENCE)), &
							#IC_STATUS_CODE, &
							#START_QTY_AVAILABLE, &
							#R1, &
							#R2, &
							#R3, &
							#R4, &
							#R5,	&
							#START_QTY_AVAILABLE_BACK)

					! The user will not be requested to
					! confirm the unreservation -
					! controlled by parameter #5 set to Y.

					IF (%STATUS <> %SUCCESS)
						ERROR/WAIT #R5
						EXIT(%FAILURE)
					ELSE
						#NEW_QTY_RESERVED	 = #R1
						#START_QTY_AVAILABLE = #START_QTY_AVAILABLE_BACK
					END_IF
					IF (#LOT_CHANGE = #YES)
						PERFORM ZERO_CURRENT_LINE_DETAIL_QTYS("QTY_RESERVED")
						#START_QTY_AVAILABLE = #LOT_START_QTY_AVAILABLE
					END_IF
					IF (#WAREHOUSE_CHANGE = #YES OR #DATE_CHANGE = #YES)
						PERFORM DELETE_SALES_ORDER_LINE_DETAIL_QTYS(#YES)
						#DETAIL_QTYS_DELETED = #YES
						#OLD_QTY_RESERVED = 0.0
					END_IF
					IF (#WAREHOUSE_CHANGE = #YES)
						#START_QTY_AVAILABLE = #LOT_START_QTY_AVAILABLE
					END_IF
				ELSE
					IF (#WAREHOUSE_CHANGE = #YES OR #DATE_CHANGE = #YES)
						PERFORM DELETE_SALES_ORDER_LINE_DETAIL_QTYS(#YES)
						#DETAIL_QTYS_DELETED = #YES
					END_IF
					IF (#WAREHOUSE_CHANGE = #YES)
						#START_QTY_AVAILABLE = #LOT_START_QTY_AVAILABLE
					END_IF
				END_IF

				IF (#DELETE_PROMISES = #YES)
					PERFORM DELETE_ANY_PROMISES(SALES_ORDER_LINE_DETAILS(SEQUENCE))
					#OLD_SALES_ORDER_LINE_DETAIL_QTY = #OLD_SALES_ORDER_QTY
					! This variable was created to correctly calculate the delta quantity
					! when modifying the sales order line details.
				END_IF

				#OLD_LOT_NUMBER = SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER)
				#OLD_SHIP_WAREHOUSE = SALES_ORDER_LINE_DETAILS(WAREHOUSE)

				#OLD_SYS_SHIPPING_DATE = SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)
				#OLD_SYS_DELIVERY_DATE = SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE)
			END_IF
		END_IF

		#DETAIL_NOMI_ORDER_QTY = 0.0
		PERFORM CONVERT_QTYS ((SALES_ORDER_LINE_DETAILS(WAREHOUSE)), &
			(SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER)), &
			(SALES_ORDER_LINES(PART_CODE)), &
			#SALES_UOM,		  &
			#DETAIL_SALES_ORDER_QTY, &
			#NOMI_UOM, &
			#DETAIL_NOMI_ORDER_QTY, &
			#R1)

		IF (#IC_UOM_CONTROL = PARAMETER("IC_CATCHWEIGHT_UOM_CONTROL") OR	&
		   #IC_UOM_CONTROL = PARAMETER("IC_POTENT_UOM_CONTROL"))
			! convert to the non-nominated inventory uom
			#NON_NOMI_ORDER_QTY = 0.0
			PERFORM CONVERT_QTYS ((SALES_ORDER_LINE_DETAILS(WAREHOUSE)), &
				(SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER)), &
				(SALES_ORDER_LINES(PART_CODE)), &
				#NOMI_UOM, &
				#DETAIL_NOMI_ORDER_QTY, &
				#NON_NOMI_UOM, &
				#NON_NOMI_ORDER_QTY, &
				#R1)
		ELSE
			#NON_NOMI_ORDER_QTY = 0
		END_IF
		IF (#IC_PACKAGED_PRODUCT = #YES)
		! convert to packaged uom
			BEGIN_CASE (#PACK_UOM)
				CASE (#SALES_UOM)
					#PACK_QTY = #DETAIL_SALES_ORDER_QTY
				CASE (#NOMI_UOM)
					#PACK_QTY		    = #DETAIL_NOMI_ORDER_QTY
				CASE (#NON_NOMI_UOM)
					#PACK_QTY		    = #NON_NOMI_ORDER_QTY
				CASE ELSE
					IF (PRODUCT_MASTER(IC_UNIT_CAPACITY)  = #NOMI_UOM)
						#CAP_QTY	= #DETAIL_NOMI_ORDER_QTY
					ELSE
						#CAP_QTY	= #NON_NOMI_ORDER_QTY
					END_IF
					#PACK_QTY = 0.0
					PERFORM CONVERT_QTYS ((SALES_ORDER_LINE_DETAILS(WAREHOUSE)), &
						(SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER)), &
						(SALES_ORDER_LINES(PART_CODE)), &
						(PRODUCT_MASTER(IC_UNIT_CAPACITY)), &
						#CAP_QTY, &
						#PACK_UOM,      &
						#PACK_QTY, &
						#R1)
			END_CASE
		ELSE
			#PACK_QTY = 0
		END_IF
		!  Get Pricing Quantity
		IF (#PRICE_UOM = #SALES_UOM)
			#PRICE_QTY = #DETAIL_SALES_ORDER_QTY
		ELSE_IF (#PRICE_UOM = #NOMI_UOM)
			#PRICE_QTY		 = #DETAIL_NOMI_ORDER_QTY
		ELSE_IF (#PRICE_UOM = #NON_NOMI_UOM)
			#PRICE_QTY		 = #NON_NOMI_ORDER_QTY
		ELSE_IF (#PRICE_UOM = #PACK_UOM)
			#PRICE_QTY		 = #PACK_QTY
		ELSE
			#PRICE_QTY = 0.0
			PERFORM "GEMLB:SOP_L_SALES_PRICE_QTY" &
				(#COMPANY_CODE, &
				(SALES_ORDER_LINES(PART_CODE)), &
				(SALES_ORDER_LINES(WAREHOUSE)), &
				(SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER)), &
				#SALES_UOM, &
				#DETAIL_SALES_ORDER_QTY, &
				#NOMI_UOM, &
				#DETAIL_NOMI_ORDER_QTY, &
				#NON_NOMI_UOM, &
				#NON_NOMI_ORDER_QTY, &
				#PRICE_UOM, &
				#NOMI_PRICE_UOM, &
				"", &
				"", &
				#PRICE_QTY, &
				#PQ_STATUS, &
				#PQ_MESSAGE)

			IF (#PQ_STATUS = #NO)
				ERROR/BELL/TEXT_ONLY/WAIT #PQ_MESSAGE
				EXIT (%FAILURE)
			END_IF
		END_IF

		IF (#ATP_AT_ORDER_ENTRY = #YES)

			IF (#ATP_IN_USE_FOR_PW = #YES)

				IF (#IC_ATP_SELECTION_METHOD = PARAMETER("FLAG_AUTO"))
					#ATP_AUTO_FLAG = #YES
				ELSE
					#ATP_AUTO_FLAG = #NO
				END_IF

				IF (#IC_PACKAGED_PRODUCT = #YES)
					#ATP_UNIT = #PACK_UOM
				ELSE
					#ATP_UNIT = PRODUCT_MASTER(SOP_NOMINATED_UNIT)
					! Don't use #nomi_uom
				END_IF

				#SEQ_LOT = SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER)

 				#RETURN_WHSE = ""

				PERFORM "GEMLB:LB_L_ATP_AUTO" (#DIVISION, &
							#ORDER_NUMBER, &
							SALES_ORDER_LINES(ORDER_LINE_NUMBER), &
							SALES_ORDER_LINE_DETAILS(SEQUENCE), &
							SALES_ORDER_LINE_DETAILS(WAREHOUSE), &
							#PART_CODE, &
							#SEQ_LOT, &
							#OLD_SALES_ORDER_QTY, &
							#DETAIL_SALES_ORDER_QTY, &
							#SALES_UOM, &
							#SALES_UOM_MASK, &
							#NOMI_UOM, &
							#NON_NOMI_UOM, &
							#PRICE_UOM, &
							#PACK_UOM, &
							#ATP_UNIT, &
							"", &
							SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE), &
							SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE), &
							#LINE_DIST_BOD_CODE, &
							#ATP_AUTO_FLAG, &
							SALES_ORDER_LINE_DETAILS(ORDER_LINE_REF), &
							SALES_ORDER_HEADERS(ORDER_DATE), &
							"", &
							"", &
							#RETURN_WHSE)

				IF (%STATUS = %FAILURE)
					GOTO WAREHOUSE
				END_IF

  				IF (SALES_ORDER_LINE_DETAILS(WAREHOUSE) = "")
					IF (#RETURN_WHSE <> "")
						SALES_ORDER_LINE_DETAILS(WAREHOUSE) = #RETURN_WHSE
					ELSE
						GOTO WAREHOUSE
					END_IF
				END_IF
			END_IF
		END_IF

		! disallow blank sales_order_line_details(warhouse) if ATP not in use ...
		IF ((#ATP_AT_ORDER_ENTRY <> #YES OR #ATP_IN_USE_FOR_PW <> #YES) AND (SALES_ORDER_LINE_DETAILS(WAREHOUSE) = ""))
			SALES_ORDER_LINE_DETAILS(WAREHOUSE) = SALES_ORDER_LINES(WAREHOUSE)
		END_IF

	END_BLOCK

	BEGIN_BLOCK UPDATE_QTYS
		IF ((%EDIT_MODE = %ADD) OR &
			((%EDIT_MODE = %MODIFY) AND (#DETAIL_QTYS_DELETED = #YES)))
		! add the qty records and make commitments
			PERFORM ADD_SO_LINE_DETAIL_ORDER_QTY( "", SALES_ORDER_LINE_DETAILS(WAREHOUSE), &
									#SALES_UOM, #DETAIL_SALES_ORDER_QTY, #YES, #R1)
			PERFORM ADD_UPDATE_SO_LINE_ORDER_QTY( #SALES_UOM, #DETAIL_SALES_ORDER_QTY, #YES, #R1)
			IF (#NOMI_UOM <> #SALES_UOM)
				PERFORM ADD_SO_LINE_DETAIL_ORDER_QTY( "", SALES_ORDER_LINE_DETAILS(WAREHOUSE), &
									#NOMI_UOM, #DETAIL_NOMI_ORDER_QTY, #YES, #R1)
				PERFORM ADD_UPDATE_SO_LINE_ORDER_QTY( #NOMI_UOM, #DETAIL_NOMI_ORDER_QTY, #YES, #R1)
			END_IF
			IF ((#IC_UOM_CONTROL = PARAMETER("IC_CATCHWEIGHT_UOM_CONTROL")) OR      &
				(#IC_UOM_CONTROL = PARAMETER("IC_POTENT_UOM_CONTROL")))
				IF (#NON_NOMI_UOM <> #SALES_UOM AND #NON_NOMI_UOM <> #NOMI_UOM)
					PERFORM ADD_SO_LINE_DETAIL_ORDER_QTY ("", SALES_ORDER_LINE_DETAILS(WAREHOUSE), &
										#NON_NOMI_UOM, #NON_NOMI_ORDER_QTY, "", #R1)
					PERFORM ADD_UPDATE_SO_LINE_ORDER_QTY (#NON_NOMI_UOM, #NON_NOMI_ORDER_QTY, "", #R1)
				END_IF
			END_IF
			IF (#IC_PACKAGED_PRODUCT = #YES)
				IF ((#PACK_UOM <> #SALES_UOM) AND			 &
					(#PACK_UOM <> #NOMI_UOM) AND &
					(#PACK_UOM <> #NON_NOMI_UOM))
					PERFORM ADD_SO_LINE_DETAIL_ORDER_QTY ("", SALES_ORDER_LINE_DETAILS(WAREHOUSE), &
												#PACK_UOM, #PACK_QTY, "", #R1)
					PERFORM ADD_UPDATE_SO_LINE_ORDER_QTY (#PACK_UOM, #PACK_QTY, "", #R1)
				END_IF
			END_IF
			IF ((#PRICE_UOM <> #SALES_UOM) AND		&
				(#PRICE_UOM <> #NOMI_UOM) AND &
				(#PRICE_UOM <> #NON_NOMI_UOM) AND &
				(#PRICE_UOM <> #PACK_UOM))
				PERFORM ADD_SO_LINE_DETAIL_ORDER_QTY ("", SALES_ORDER_LINE_DETAILS(WAREHOUSE), &
												#PRICE_UOM, #PRICE_QTY, "", #R1)
				PERFORM ADD_UPDATE_SO_LINE_ORDER_QTY (#PRICE_UOM, #PRICE_QTY, "", #R1)
			END_IF
			FIND IN PRODUCT_MASTER &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=PART_CODE=SALES_ORDER_LINES(PART_CODE)

			PERFORM 'GEMSOP:SOP_L_DO_IC_COMMITMENTS' (SALES_ORDER_LINE_DETAILS(WAREHOUSE), &
								SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE), &
								"",     &
								#IC_MOVEMENT_CODE, &
								"0", &
								#DETAIL_NOMI_ORDER_QTY, &
								#R1)
			IF (%STATUS <> %SUCCESS)
				ERROR /WAIT #R1
			END_IF
		ELSE
			! Edit Mode = Modify
			! modify the qty records and make commitments
			#REVERSE_OLD_SOLDQ_QTY = (-1 * #OLD_SALES_ORDER_QTY)
			IF ((#WAREHOUSE_CHANGE = #YES) OR (#DATE_CHANGE = #YES))
				#REVERSE_OLD_SOLDQ_QTY = (-1 * #OLD_SALES_ORDER_LINE_DETAIL_QTY)
				! Added to give the correct reversal qty
				! when modifying the sales order line detail.
			END_IF

			! Reverse old qty, then add new, makes stored qtys more
			! accurate
			PERFORM 'GEMSOP:SOP_L_UPDATE_SO_QTYS' (#COMPANY_CODE, &
								#DIVISION, &
								SALES_ORDER_LINES(ORDER_NUMBER), &
								SALES_ORDER_LINES(ORDER_LINE_NUMBER), &
								SALES_ORDER_LINE_DETAILS(SEQUENCE), &
								"ORDER_QUANTITY", &
								#REVERSE_OLD_SOLDQ_QTY, &
								SALES_ORDER_LINES(UNIT_SALES))

			PERFORM 'GEMSOP:SOP_L_UPDATE_SO_QTYS' (#COMPANY_CODE, &
								#DIVISION, &
								SALES_ORDER_LINES(ORDER_NUMBER), &
								SALES_ORDER_LINES(ORDER_LINE_NUMBER), &
								SALES_ORDER_LINE_DETAILS(SEQUENCE), &
								"ORDER_QUANTITY", &
								#DETAIL_SALES_ORDER_QTY, &
								SALES_ORDER_LINES(UNIT_SALES))

			PERFORM 'GEMSOP:SOP_L_DO_IC_COMMITMENTS' (SALES_ORDER_LINE_DETAILS(WAREHOUSE), &
								(SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)), &
								#OLD_REQ_DATE, &
								#IC_MOVEMENT_CODE, &
								#OLD_DETAIL_NOMI_ORDER_QTY, &
								#DETAIL_NOMI_ORDER_QTY, &
								#R1)
			IF (%STATUS <> %SUCCESS)
				ERROR /WAIT #R1
			END_IF

			IF (#PRICE_QTY <> #OLD_PRICE_QTY)
				! This call is necessary to update the pricing
				! quantity so that rounding errors which may
				! have been introduced are removed.
				PERFORM "GEMSOP:SOP_L_UPDATE_A_SO_QTY" ( #COMPANY_CODE, &
								#DIVISION, &
								(SALES_ORDER_LINES(ORDER_NUMBER)), &
								(SALES_ORDER_LINES(ORDER_LINE_NUMBER)), &
								SALES_ORDER_LINE_DETAILS(SEQUENCE), &
								"ORDER_QUANTITY", &
								#PRICE_QTY, &
								#PRICE_UOM,	&
								#R1)

				#OLD_PRICE_QTY = #PRICE_QTY
			END_IF
		END_IF

		#ORDER_FLAG = (PARAMETER("HORIZON_CURRENT"))

		IF (SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE) <> "")
			#ORDER_DAYS = DAYS(SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)) - DAYS(%NOW)

			IF (#ORDER_DAYS > WAREHOUSE_CONTROLS(DAYS_FORWARD_COMMITMENT))
				#ORDER_FLAG = (PARAMETER("HORIZON_FORWARD"))
			END_IF

			IF (#ORDER_DAYS < -(WAREHOUSE_CONTROLS(DAYS_BACKWARD_COMMITMENT)))
				#ORDER_FLAG = (PARAMETER("HORIZON_BACKWARD"))
			END_IF
		END_IF

		SALES_ORDER_LINE_DETAILS(ORDER_HORIZON) = #ORDER_FLAG

		START_STREAM DD &
			/TABLE=SALES_ORDER_LINE_DETAIL_QTYS &
			/LOCK=WRITE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=ORDER_NUMBER=SALES_ORDER_LINE_DETAILS(ORDER_NUMBER) &
			/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINE_DETAILS(ORDER_LINE_NUMBER) &
			/WITH=SEQUENCE=SALES_ORDER_LINE_DETAILS(SEQUENCE)

		WHILE (1)
			FETCH DD /FAILURE=(CONTINUE OUT)

			SALES_ORDER_LINE_DETAIL_QTYS(REQUIRED_DATE) = SALES_ORDER_LINE_DETAILS(REQUIRED_DATE)
		END_WHILE

		PERFORM RESERVATION_CHECK (SALES_ORDER_LINE_DETAILS(WAREHOUSE))
		#DELTA_QTY_RESERVED		= #NEW_QTY_RESERVED - #OLD_QTY_RESERVED
		IF (#DELTA_QTY_RESERVED <> 0 OR (#LOT_CHANGE=#YES AND #NEW_QTY_RESERVED<>0))
			!update qty rows - which are created above - with absolute reserve qtys
			!
			PERFORM ZERO_CURRENT_LINE_DETAIL_QTYS("QTY_RESERVED")
			PERFORM UPDATE_A_SO_QTY ("QTY_RESERVED", #NEW_QTY_RESERVED, #NOMI_NEW_QTY_RESERVED, &
						#NON_NOMI_NEW_QTY_RESERVED, #PACK_NEW_QTY_RESERVED, #PRICE_NEW_QTY_RESERVED)
		END_IF
	END_BLOCK
END_FORM


PROCEDURE_FORM DELETE_DETAIL

	BEGIN_BLOCK SETUP
		PERFORM FIND_CURRENT_SO_LINE_QTY ((SALES_ORDER_LINES(UNIT_SALES)), #R1)
		PERFORM FIND_CURRENT_SO_LINE_DETAIL_QTY ((SALES_ORDER_LINES(UNIT_SALES)), #R1)
	END_BLOCK

	BEGIN_BLOCK CHECK_SOP_SHIPMENT_DETAILS
		FIND IN SOP_SHIPMENT_DETAILS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=ORDER_NUMBER=SALES_ORDER_LINE_DETAILS(ORDER_NUMBER) &
			/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINE_DETAILS(ORDER_LINE_NUMBER) & 
			/WITH=SEQUENCE = SALES_ORDER_LINE_DETAILS(SEQUENCE)			
		IF (%STATUS = %SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_06231
			EXIT (%FAILURE)				
		END_IF
	END_BLOCK

	BEGIN_BLOCK REVERSE_RESERVATIONS
		IF (SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY_PROCESSED) <> 0)
			MESSAGE/IDENTIFIER/BELL/WAIT P_32232
			EXIT(%FAILURE)
		END_IF

		IF (SALES_ORDER_LINES(ORDER_LINE_TYPE) = #SO_LINE_TYPE_STOCK)
			IF (SALES_ORDER_LINE_DETAIL_QTYS(QTY_RESERVED) > 0)
				FIND IN PRODUCT_WAREHOUSE &
					/LOCK=NONE &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=WAREHOUSE=SALES_ORDER_LINE_DETAILS(WAREHOUSE) &
					/WITH=PART_CODE=SALES_ORDER_LINES(PART_CODE)

				! unreserve
				#START_QTY_AVAILABLE_BACK = 0.0
				PERFORM "GEMSOP:SOP_L_RESERVATION" (&
					#COMPANY_CODE, &
					SALES_ORDER_LINE_DETAILS(WAREHOUSE), &
					0,	     &
					"", &
					#YES, &
					(SALES_ORDER_LINE_DETAIL_QTYS(SEQUENCE)),		    &
					#IC_STATUS_CODE,	&
					#START_QTY_AVAILABLE, &
					#R1,    &
					#R2,    &
					#R3,    &
					#R4,    &
					#R5,	&
					#START_QTY_AVAILABLE_BACK)

				! The user will not be requested to
				! confirm the unreservation -
				! controlled by parameter #5 set to Y.

				IF (%STATUS <> %SUCCESS)
					ERROR/WAIT #R5
					EXIT(%FAILURE)
				END_IF
				#START_QTY_AVAILABLE = #START_QTY_AVAILABLE_BACK
				PERFORM UPDATE_A_SO_QTY ("QTY_RESERVED", "0", "0", "0", "0", "0")
				IF (%STATUS <> %SUCCESS)
					EXIT (%FAILURE)
				END_IF
			END_IF
			BEGIN_BLOCK COMMITMENTS
				PERFORM FIND_CURRENT_SO_LINE_DETAIL_QTY ((SALES_ORDER_LINES(SOP_NOMINATED_UNIT)), #R1)
				PERFORM 'GEMSOP:SOP_L_DO_IC_COMMITMENTS' (SALES_ORDER_LINE_DETAILS(WAREHOUSE), &
								"", &
								(SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)), &
								#IC_MOVEMENT_CODE, &
								#NOMI_ORDER_QTY, &
								"0", &
								#R1)
				IF (%STATUS <> %SUCCESS)
					ERROR /WAIT #R1
				END_IF
			END_BLOCK
		END_IF
	END_BLOCK

	BEGIN_BLOCK UPDATE_ATP
		IF (#ATP_IN_USE_FOR_COMPANY = #YES AND SALES_ORDER_LINES(ORDER_LINE_TYPE) = #SO_LINE_TYPE_STOCK &
			 AND PRODUCT_WAREHOUSE(ATP_IN_USE) = #YES)

			 PERFORM DELETE_ANY_PROMISES(SALES_ORDER_LINE_DETAILS(SEQUENCE))
		END_IF
	END_BLOCK

	BEGIN_BLOCK DELETE
		PERFORM DELETE_SALES_ORDER_LINE_DETAIL_QTYS(#YES)
		IF (%STATUS <> %SUCCESS)
			EXIT (%FAILURE)
		END_IF

		IF (SALES_ORDER_LINE_QTYS(ORDER_QUANTITY) = 0)
			PERFORM DELETE_SALES_LINE_QTYS
		END_IF
	END_BLOCK
END_FORM

PROCEDURE_FORM DELETE_LOT_DETAIL

	BEGIN_BLOCK SETUP
		PERFORM FIND_CURRENT_SO_LINE_DETAIL_QTY ((SALES_ORDER_LINES(UNIT_SALES)), #R1)
	END_BLOCK

	BEGIN_BLOCK REVERSE_RESERVATIONS
		IF (SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY_PROCESSED) <> 0)
			MESSAGE/IDENTIFIER/BELL/WAIT P_32232
			EXIT(%FAILURE)
		END_IF

		IF (SALES_ORDER_LINES(ORDER_LINE_TYPE) = #SO_LINE_TYPE_STOCK)
			IF (SALES_ORDER_LINE_DETAIL_QTYS(QTY_RESERVED) > 0)
				FIND IN PRODUCT_WAREHOUSE &
					/LOCK=NONE &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=WAREHOUSE=SALES_ORDER_LINE_DETAILS(WAREHOUSE) &
					/WITH=PART_CODE=SALES_ORDER_LINES(PART_CODE)

				! unreserve
				#START_QTY_AVAILABLE_BACK = 0.0

				PERFORM "GEMSOP:SOP_L_RESERVATION" (&
					#COMPANY_CODE, &
					SALES_ORDER_LINE_DETAILS(WAREHOUSE), &
					0,	     &
					(SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER)), &
					#YES, &
					(SALES_ORDER_LINE_DETAIL_QTYS(SEQUENCE)),		    &
					#IC_STATUS_CODE,	&
					#START_QTY_AVAILABLE, &
					#R1,    &
					#R2,    &
					#R3,    &
					#R4,    &
					#R5,	&
					#START_QTY_AVAILABLE_BACK)

				IF (%STATUS <> %SUCCESS)
					ERROR/WAIT #R5
					EXIT(%FAILURE)
				END_IF

				#START_QTY_AVAILABLE = #START_QTY_AVAILABLE_BACK

				PERFORM UPDATE_A_SO_QTY ("QTY_RESERVED", "0", "0", "0", "0", "0")
				IF (%STATUS <> %SUCCESS)
					EXIT (%FAILURE)
				END_IF
			END_IF
			BEGIN_BLOCK COMMITMENTS
				PERFORM FIND_CURRENT_SO_LINE_DETAIL_QTY ((SALES_ORDER_LINES(SOP_NOMINATED_UNIT)), #R1)
				#NOMI_ORDER_QTY = SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY)
				#OLD_REQ_DATE   = SALES_ORDER_LINE_DETAILS(REQUIRED_DATE)

				PERFORM 'GEMSOP:SOP_L_DO_IC_COMMITMENTS' (SALES_ORDER_LINE_DETAILS(WAREHOUSE), &
								"", &
								#OLD_REQ_DATE, &
								#IC_MOVEMENT_CODE, &
								#NOMI_ORDER_QTY, &
								"0", &
								#R1)
				IF (%STATUS <> %SUCCESS)
					ERROR /WAIT #R1
				END_IF
			END_BLOCK
		END_IF
	END_BLOCK

	BEGIN_BLOCK UPDATE_ATP
		IF (#ATP_IN_USE_FOR_COMPANY = #YES AND SALES_ORDER_LINES(ORDER_LINE_TYPE) = #SO_LINE_TYPE_STOCK &
			 AND PRODUCT_WAREHOUSE(ATP_IN_USE) = #YES)

			 PERFORM DELETE_ANY_PROMISES(SALES_ORDER_LINE_DETAILS(SEQUENCE))
		END_IF
	END_BLOCK

	BEGIN_BLOCK DELETE
		PERFORM DELETE_SALES_ORDER_LINE_DETAIL_QTYS(#YES)
		IF (%STATUS <> %SUCCESS)
			EXIT (%FAILURE)
		END_IF
	END_BLOCK
END_FORM


TABLE_FORM REQUIRED_DATES /ROW=15 /COL=2 /HEIGHT=9 /WIDTH=78 &
	/TITLE=(MESSAGE("P_50110")) &
	/TABLE=SALES_ORDER_LINE_DETAILS &
	/SEQUENCE=SEQUENCE &
	/DELETE_FORM=DELETE_DETAIL &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION=#DIVISION &
	/WITH=ORDER_NUMBER=#ORDER_NUMBER &
	/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER)

	BEGIN_BLOCK SETUP

		PERFORM SUM_CURRENT_SO_LINE_DETAIL_QTYS (#SALES_UOM)

		#OLD_SHIP_WAREHOUSE = SALES_ORDER_LINE_DETAILS(WAREHOUSE)

		#OLD_SYS_SHIPPING_DATE = SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)
		#OLD_SYS_DELIVERY_DATE = SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE)
		#EDIT_MODE = "MODIFY"
		#DETAIL_QTYS_DELETED = #NO

		IF (%EDIT_MODE = %ADD)
			SALES_ORDER_LINE_DETAILS(COMPANY_CODE)		= #COMPANY_CODE
			SALES_ORDER_LINE_DETAILS(DIVISION)		= #DIVISION
			SALES_ORDER_LINE_DETAILS(ORDER_NUMBER)		= #ORDER_NUMBER
			SALES_ORDER_LINE_DETAILS(ORDER_LINE_NUMBER)	= SALES_ORDER_LINES(ORDER_LINE_NUMBER)
			SALES_ORDER_LINE_DETAILS(ORIGINAL_SEQUENCE)	= SALES_ORDER_LINE_DETAILS(SEQUENCE)
			SALES_ORDER_LINE_DETAILS(ORDER_DATE)		= #ORDER_DATE

			IF (((SALES_ORDER_LINES(ORDER_LINE_TYPE)) <> #SO_LINE_TYPE_STOCK) &
				AND ((SALES_ORDER_LINES(WAREHOUSE)) <> ""))
				SALES_ORDER_LINE_DETAILS(WAREHOUSE)		= SALES_ORDER_LINES(WAREHOUSE)
			END_IF

			IF (#LINE_REQUESTED_DATE = "")
				#LINE_REQUESTED_DATE = SALES_ORDER_HEADERS(SYS_REQUESTED_DATE)
				IF (#LINE_REQUESTED_DATE = "")
					#LINE_REQUESTED_DATE = %TODAY
				END_IF
			END_IF

			PERFORM "GEMLB:LB_L_ATP_AUTO" CALCULATE_DATES ((#COMPANY_CODE), &
					(#DIVISION), &
					(#WAREHOUSE), &
					(#CUSTOMER_NUMBER), &
					(SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE)), &
					(#LINE_REQUESTED_DATE), &
					#TEMP_RECOMMENDED_DATE, &
					#TEMP_SHIPPING_DATE, &
					#TEMP_DELIVERY_DATE, &
					#TEMP_DISTRIBUTION_CALENDAR)

			SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE) = #TEMP_SHIPPING_DATE
			SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE) = #TEMP_DELIVERY_DATE
			DISPLAY DEFAULTS

			SALES_ORDER_LINE_DETAILS(REQUIRED_DATE) = SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)
			SALES_ORDER_LINE_DETAILS(TEMP_REQUIRED_DATE)	   = SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)

			#OLD_SYS_SHIPPING_DATE = SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)
			#OLD_SYS_DELIVERY_DATE = SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE)

			SALES_ORDER_LINE_DETAILS(ORDER_LINE_STATUS)		  = ""
			SALES_ORDER_LINE_DETAILS(TM_LOAD_PLANNING)	= #SYS_TM_IN_USE

			#DETAIL_SALES_ORDER_QTY = 0
			#DETAIL_NOMI_ORDER_QTY = 0
			#OLD_DETAIL_NOMI_ORDER_QTY = 0
			#OLD_SALES_ORDER_QTY = 0
			#OLD_QTY_RESERVED = 0
			#OLD_PRICE_QTY = 0

			OUTPUT_BLOCK SALES_QTY_1/ROW=1 /COL=69 &
				/SOURCE = #SALES_UOM &
				/USING = SALES_ORDER_LINES(UNIT_SALES) &
				/NOHEADING

		END_IF

		IF (%EDIT_MODE = %MODIFY)
			IF (SALES_ORDER_LINES(ORDER_LINE_TYPE) <> #SO_LINE_TYPE_NONSTOCK)
				PERFORM FIND_CURRENT_SO_LINE_DETAIL_QTY( #NOMI_UOM, #R1)
				IF (%STATUS = %SUCCESS)
					#DETAIL_NOMI_ORDER_QTY = SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY)
					#OLD_DETAIL_NOMI_ORDER_QTY = SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY)
				ELSE
					ERROR/WAIT #R1
					EXIT (%FAILURE)
				END_IF
			ELSE
				#DETAIL_NOMI_ORDER_QTY = 0
				#OLD_DETAIL_NOMI_ORDER_QTY = 0
			END_IF

			PERFORM FIND_CURRENT_SO_LINE_DETAIL_QTY( #PRICE_UOM, #R1)
			IF (%STATUS = %SUCCESS)
				#OLD_PRICE_QTY = SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY)
			ELSE
				ERROR/WAIT #R1
				EXIT (%FAILURE)
			END_IF

			! Make sure detail qty record for Sales UOM is the last
			! one found, this record will be used in this form.
			PERFORM FIND_CURRENT_SO_LINE_DETAIL_QTY( #SALES_UOM, #R1)
			IF (%STATUS = %SUCCESS)
				#OLD_QTY_RESERVED			 = SALES_ORDER_LINE_DETAIL_QTYS(QTY_RESERVED)
				#DETAIL_SALES_ORDER_QTY = SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY)
				#OLD_SALES_ORDER_QTY = #DETAIL_SALES_ORDER_QTY
			ELSE
				ERROR/WAIT #R1
				EXIT (%FAILURE)
			END_IF
		END_IF

	END_BLOCK

	BEGIN_BLOCK  /DISPLAY_ONLY SETUP_QUANTITY
		#LAST_SHIP_WAREHOUSE = #SHIP_WAREHOUSE
		FIND IN SALES_ORDER_LINE_DETAIL_QTYS &
			/LOCK = READ &
			/WITH = COMPANY_CODE = #COMPANY_CODE &
			/WITH = DIVISION = #DIVISION &
			/WITH = ORDER_NUMBER = SALES_ORDER_LINES(ORDER_NUMBER) &
			/WITH = ORDER_LINE_NUMBER = SALES_ORDER_LINES(ORDER_LINE_NUMBER) &
			/WITH = SEQUENCE = SALES_ORDER_LINE_DETAILS(SEQUENCE) &
			/WITH = UNIT_OF_MEASURE = #SALES_UOM

		IF (%STATUS = %SUCCESS)
			#DETAIL_SALES_ORDER_QTY = SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY)
		ELSE
			#DETAIL_SALES_ORDER_QTY = 0
		END_IF
	END_BLOCK

	OUTPUT_BLOCK SEQUENCE /ROW=1 /COL=2 &
			/DOMAIN=SALES_ORDER_LINE_DETAILS &
			/SOURCE=(SALES_ORDER_LINE_DETAILS(SEQUENCE)) &
			/HEADING=FIELD_HEADING(SEQUENCE) &
			/OUTPUT_MASK="!-@@0"

	BEGIN_BLOCK WAREHOUSE

		IF (#WAREHOUSED_FLAG <> #YES)
			GOTO DATES
		END_IF

		IF (%EDIT_MODE = %MODIFY)
			#SHIP_WAREHOUSE = SALES_ORDER_LINE_DETAILS(WAREHOUSE)
		END_IF

		FIND IN DESPATCH_NOTES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=SALES_ORDER_LINES(COMPANY_CODE) &
			/WITH=DIVISION=SALES_ORDER_LINES(DIVISION) &
			/WITH=ORDER_NUMBER=SALES_ORDER_LINES(ORDER_NUMBER) &
			/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER) &
!Change 020
			/WITH=SEQUENCE=SALES_ORDER_LINE_DETAILS(SEQUENCE)
!End Change 020

		IF (%STATUS = %SUCCESS)
			SALES_ORDER_LINE_DETAILS(WAREHOUSE) = SALES_ORDER_LINES(WAREHOUSE)
			#SHIP_WAREHOUSE = SALES_ORDER_LINE_DETAILS(WAREHOUSE)
			#DESPATCH_NOTE_EXISTS = #YES
		ELSE
			#DESPATCH_NOTE_EXISTS = #NO
		END_IF

		OUTPUT_BLOCK /ROW=1 /COL=6 &
			/SOURCE=SALES_ORDER_LINE_DETAILS(WAREHOUSE) &
			/HEADING=FIELD_HEADING(WAREHOUSE) &
			/USING=SALES_ORDER_LINES(WAREHOUSE)

     	INPUT_BLOCK /ROW=1 /COL=6 &
			/SOURCE=SALES_ORDER_LINE_DETAILS(WAREHOUSE) &
			/TARGET=#SHIP_WAREHOUSE &
			/HEADING=FIELD_HEADING(WAREHOUSE) &
			/USING=SALES_ORDER_LINES(WAREHOUSE),REQUIRED &
			/LOV=WAREHOUSE_DESC(WAREHOUSE,WAREHOUSE_DESCRIPTION,QTY_AVAILABLE) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=PART_CODE=#PART_CODE &
			/LOV_WITH=IC_STATUS_CODE = (PARAMETER("IC_STATUS_QOH")) &
			/LOV_WITH=WAREHOUSE AMONG #ACCESSIBLE_WAREHOUSES &
			/LOV_SORTED_BY=(WAREHOUSE) &
			/LOV_REDUCED_TO=(WAREHOUSE) &
!Change 020
!			/USE_IF=(%EDIT_MODE = %ADD AND #DESPATCH_NOTE_EXISTS = #NO AND NOT(#TP_GIFT_LINE))
			/USE_IF=(#DESPATCH_NOTE_EXISTS = #NO AND NOT(#TP_GIFT_LINE))
!End Change 020
		FIND IN WAREHOUSE_CONTROLS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=WAREHOUSE=#SHIP_WAREHOUSE

		IF (%STATUS <> %SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00366,#SHIP_WAREHOUSE
			IF ( %EDIT_MODE = %ADD )
				GOTO WAREHOUSE
			ELSE
				EXIT
			END_IF
		END_IF

		IF (WAREHOUSE_CONTROLS(ACTIVATE_MODULE) <> #YES)
			MESSAGE/IDENTIFIER/BELL/WAIT P_42027
			IF ( %EDIT_MODE = %ADD )
				GOTO WAREHOUSE
			ELSE
				EXIT
			END_IF
		END_IF

		IF (#SECURITY_ACTIVE = #YES)
			FIND IN SECURITY_PERIOD_ACCESS_VT &
				/WITH=SYS_ACCESS_TYPE=(PARAMETER("ACCESS_TYPE_WAREHOUSE")) &
				/WITH=SYS_ACCESS_CODE= #SHIP_WAREHOUSE &
				/WITH=SOURCE_MODULE=(PARAMETER("MODULE_SO"))

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_10631,(PARAMETER("MODULE_SO"))
				IF ( %EDIT_MODE = %ADD )
					GOTO WAREHOUSE
				ELSE
					EXIT
				END_IF
			END_IF

			IF (SECURITY_PERIOD_ACCESS_VT(SYS_ALLOW_ACCESS) <> #YES)
				MESSAGE/IDENTIFIER/BELL/WAIT P_10631,(PARAMETER("MODULE_SO"))
				IF ( %EDIT_MODE = %ADD )
					GOTO WAREHOUSE
				ELSE
					EXIT
				END_IF
			END_IF
		END_IF

		FIND IN PRODUCT_WAREHOUSE &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=WAREHOUSE=#SHIP_WAREHOUSE &
			/WITH=PART_CODE=#PART_CODE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_42024
			IF ( %EDIT_MODE = %ADD )
				GOTO WAREHOUSE
			ELSE
				EXIT
			END_IF
		END_IF
		! Validate the part code

		IF (PRODUCT_WAREHOUSE(ACTIVATION_STATUS) <> (PARAMETER("STATUS_ACTIVE")) )
			MESSAGE/IDENTIFIER/BELL/WAIT P_02198
			IF ( %EDIT_MODE = %ADD )
				GOTO WAREHOUSE
			ELSE
				EXIT
			END_IF
		END_IF

		IF (PRODUCT_WAREHOUSE(SALES_ORDERS_FLAG)<>#YES)
			MESSAGE/IDENTIFIER/BELL/WAIT P_52342
			IF ( %EDIT_MODE = %ADD )
				GOTO WAREHOUSE
			ELSE
				EXIT
			END_IF
		END_IF

!		Get quantity available for part/warehouse combination
		IF ((#LAST_SHIP_WAREHOUSE <> #SHIP_WAREHOUSE) AND &
		    (#LAST_SHIP_WAREHOUSE <> ""))
			FIND IN IC_PRODUCT_STATUS &
				/LOCK = NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=PART_CODE=#PART_CODE &
				/WITH=WAREHOUSE=#SHIP_WAREHOUSE &
				/WITH=IC_STATUS_CODE=#IC_STATUS_CODE    &
				/WITH = UNIT_OF_MEASURE = #AVAIL_UOM

			#START_QTY_AVAILABLE = IC_PRODUCT_STATUS(IC_QTY_AVAILABLE)
			#LAST_SHIP_WAREHOUSE = #SHIP_WAREHOUSE
		END_IF

		IF (#SYS_TM_IN_USE = #YES)
			#DETAIL_TM_IN_USE = WAREHOUSE_CONTROLS(TM_LOAD_PLANNING)
		ELSE
			#DETAIL_TM_IN_USE = #NO
		END_IF
		IF (#DETAIL_TM_IN_USE = "")
			#DETAIL_TM_IN_USE = #NO
		END_IF

		#ATP_IN_USE_FOR_PW = PRODUCT_WAREHOUSE(ATP_IN_USE)

		SALES_ORDER_LINE_DETAILS(WAREHOUSE) = #SHIP_WAREHOUSE

		#SHIP_WH_COUNTRY = WAREHOUSE_CONTROLS(SYS_COUNTRY)
		#SHIP_WH_DIST_ZONE = WAREHOUSE_CONTROLS(SYS_DISTRIBUTION_ZONE)

		FIND IN SYS_BILL_OF_DISTRIBUTION &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=SYS_BOD_CODE=#LINE_DIST_BOD_CODE &
			/WITH=WAREHOUSE=#SHIP_WAREHOUSE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/WAIT P_93557, #SHIP_WAREHOUSE, #LINE_DIST_BOD_CODE
		END_IF

		IF ((#SHIP_WH_COUNTRY = "") AND (#DETAIL_TM_IN_USE = #YES))
			MESSAGE/IDENTIFIER/BELL/WAIT P_93526, #SHIP_WH_COUNTRY, #SHIP_WAREHOUSE
			#DETAIL_TM_IN_USE = #NO
			GOTO WAREHOUSE_CHANGE_WARN
		END_IF

		IF ((#SHIP_WH_DIST_ZONE = "") AND (#DETAIL_TM_IN_USE = #YES))
			MESSAGE/IDENTIFIER/BELL/WAIT P_93527, #SHIP_WAREHOUSE
			#DETAIL_TM_IN_USE = #NO
			GOTO WAREHOUSE_CHANGE_WARN
		END_IF

		FIND IN SYS_DISTRIBUTION_ZONES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=SYS_COUNTRY = #SHIP_WH_COUNTRY &
			/WITH=SYS_DISTRIBUTION_ZONE = #SHIP_WH_DIST_ZONE

   		IF (%STATUS = %FAILURE)
			! Always display warning message if find fails, because Country and
			! Distribution zone were not blank, so assume they were to be used
			! regardless of whether TM is in use or not.
			MESSAGE/IDENTIFIER/BELL/WAIT P_93556, #SHIP_WH_DIST_ZONE
			#DETAIL_TM_IN_USE = #NO
			GOTO WAREHOUSE_CHANGE_WARN
		END_IF
	END_BLOCK

	BEGIN_BLOCK WAREHOUSE_CHANGE_WARN
		SALES_ORDER_LINE_DETAILS(TM_LOAD_PLANNING) = #DETAIL_TM_IN_USE

		#WAREHOUSE_CHANGE = #NO
		#DELETE_PROMISES = #NO
		IF ((SALES_ORDER_LINE_DETAILS(WAREHOUSE) <> #OLD_SHIP_WAREHOUSE) &
		AND (#OLD_SHIP_WAREHOUSE <> "" ))

			IF (SALES_ORDER_LINE_DETAIL_QTYS(QTY_RESERVED) > 0)
			!Only after confirm shall we start all those unreserving
			!for quantity and should also warn that ATP will be deleted
				MESSAGE/IDENTIFIER/BELL/WAIT P_91503
			ELSE
				IF (SALES_ORDER_LINE_DETAILS(IC_ATP_QTY_PROMISED) > 0)
					MESSAGE/IDENTIFIER/BELL/WAIT P_91531
					#DELETE_PROMISES = #YES
				END_IF
			END_IF

			#WAREHOUSE_CHANGE = #YES
		END_IF
	END_BLOCK

	BEGIN_BLOCK DATES

		IF (#SOP_REQUIRED_DATE_METHOD = #METHOD_DESPATCH)

			INPUT_BLOCK /ROW=1 /COL=9 &
				/TARGET=SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE) &
				/HEADING=FIELD_HEADING(SYS_SHIPPING_DATE) &
				/USING=REQUIRED &
				/USE_IF=(#SOP_REQUIRED_DATE_METHOD=#METHOD_DESPATCH)

			IF (SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE) <> #OLD_SYS_SHIPPING_DATE)

				IF ((SALES_ORDER_LINE_DETAIL_QTYS(QTY_RESERVED) > 0) &
				AND (#WAREHOUSED_FLAG = #YES))
					!Only after confirm shall we start all those unreserving
					!for quantity and should also warn that ATP will be deleted
					MESSAGE/IDENTIFIER/BELL/WAIT P_91503
				ELSE
					IF ((SALES_ORDER_LINE_DETAILS(IC_ATP_QTY_PROMISED) > 0) &
					AND (#WAREHOUSED_FLAG = #YES))
						MESSAGE/IDENTIFIER/BELL/WAIT P_91531
						#DELETE_PROMISES = #YES
					END_IF
				END_IF

				#DATE_CHANGE = #YES
				! This check was added because a user can choose to do a manual promise
				! against a future PO or another ATP source type which may not have been
				! available to promise from the previous date.	 In this case, any existing
				! promises should be deleted and new promises made.

			END_IF

			IF ((DAYS(SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)) < DAYS(%TODAY)) &
				AND (#WAREHOUSED_FLAG = #YES))
				MESSAGE/IDENTIFIER/BELL/WAIT P_91540
			END_IF

			IF (#DATE_CHANGE = #YES OR (#WAREHOUSE <> #SHIP_WAREHOUSE))
				PERFORM "GEMLB:LB_L_ATP_AUTO" CALCULATE_DATES ((#COMPANY_CODE), &
						(#DIVISION), &
						(#SHIP_WAREHOUSE), &
						(#CUSTOMER_NUMBER), &
						(SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE)), &
						(SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)), &
						#TEMP_RECOMMENDED_DATE, &
						#TEMP_SHIPPING_DATE, &
						#TEMP_DELIVERY_DATE, &
						#TEMP_DISTRIBUTION_CALENDAR)

				IF (DAYS(#TEMP_RECOMMENDED_DATE) <> DAYS(SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)))
					MESSAGE/IDENTIFIER/BELL P_93533, &
							(MASK(#DEFAULT_DATE_MASK, SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE))), &
							#SHIP_WH_DIST_ZONE
				END_IF

				IF ( %EDIT_MODE = %ADD )
					SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE) = #TEMP_DELIVERY_DATE
				END_IF
			END_IF

			! Calculate working date for delivery.
			! If TM is in use for company and supply warehouse,
			! see if any existing shipping requirements match
			! this detail line, if so take the delivery date
			! from the shipping requirement found.
			IF (#DETAIL_TM_IN_USE = #YES)
				PERFORM "GEMTM:TM_L_TRANSPORT_REQUIREMENTS" &
						MATCH_DETAIL_TO_REQUIREMENT

				IF (SALES_ORDER_LINE_DETAILS(SHIPPING_REQUIREMENT_NUMBER) <> 0)
					SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE) = &
						SOP_SHIPPING_REQUIREMENTS(SYS_DELIVERY_DATE)
				END_IF
			END_IF

			INPUT_BLOCK /ROW=1 /COL=21 &
				/TARGET=SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE) &
				/HEADING=FIELD_HEADING(SYS_DELIVERY_DATE) &
				/USING=REQUIRED &
				/USE_IF=(#SOP_REQUIRED_DATE_METHOD=#METHOD_DESPATCH)

!			Just warnings...
			IF ( SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE) < SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE) )
				MESSAGE/IDENTIFIER/BELL/WAIT P_85193
			END_IF

			PERFORM "GEMLB:LB_L_ATP_AUTO" CHECK_WORKING_DAY ((#COMPANY_CODE), &
									(#DIVISION), &
									"", &
									(SALES_ORDER_LINES(CUSTOMER_NUMBER)), &
									(SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE)), &
									(SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE)))

			IF ( SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE) <> #OLD_SYS_DELIVERY_DATE )
					#DATE_CHANGE = #YES
			END_IF
		ELSE

			INPUT_BLOCK /ROW=1 /COL=21 &
				/TARGET = SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE) &
				/HEADING=FIELD_HEADING(SYS_DELIVERY_DATE) &
				/USING=REQUIRED &
				/USE_IF=(#SOP_REQUIRED_DATE_METHOD=#METHOD_RECEIPT)

			IF (SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE) <> #OLD_SYS_DELIVERY_DATE)

				IF ((SALES_ORDER_LINE_DETAIL_QTYS(QTY_RESERVED) > 0) &
				AND (#WAREHOUSED_FLAG = #YES))
					!Only after confirm shall we start all those unreserving
					!for quantity and should also warn that ATP will be deleted
					MESSAGE/IDENTIFIER/BELL/WAIT P_91503
				ELSE
					IF ((SALES_ORDER_LINE_DETAILS(IC_ATP_QTY_PROMISED) > 0) &
					AND (#WAREHOUSED_FLAG = #YES))
						MESSAGE/IDENTIFIER/BELL/WAIT P_91531
						#DELETE_PROMISES = #YES
					END_IF
				END_IF
				#DATE_CHANGE = #YES
				! This check was added because a user can choose to do a manual promise
				! against a future PO or another ATP source type which may not have been
				! available to promise previously.	 In this case, any existing promises
				! should be deleted and new promises made.
			END_IF

			IF (#DATE_CHANGE = #YES OR (#WAREHOUSE <> #SHIP_WAREHOUSE))

				PERFORM "GEMLB:LB_L_ATP_AUTO" CALCULATE_DATES ((#COMPANY_CODE), &
						(#DIVISION), &
						(#SHIP_WAREHOUSE), &
						(#CUSTOMER_NUMBER), &
						(SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE)), &
						(SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE)), &
						#TEMP_RECOMMENDED_DATE, &
						#TEMP_SHIPPING_DATE, &
						#TEMP_DELIVERY_DATE, &
						#TEMP_DISTRIBUTION_CALENDAR)

				IF (DAYS(#TEMP_RECOMMENDED_DATE) <> DAYS(SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE)))
					MESSAGE/IDENTIFIER/BELL P_93533, &
						(MASK(#DEFAULT_DATE_MASK, SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE))), #DEST_ZONE
					SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE) = #TEMP_DELIVERY_DATE
				END_IF

				IF ( %EDIT_MODE = %ADD OR %EDIT_MODE=%MODIFY)
					SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE) = #TEMP_SHIPPING_DATE
				END_IF
			END_IF

			INPUT_BLOCK /ROW=1 /COL=9 &
				/TARGET = SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE) &
				/HEADING=FIELD_HEADING(SYS_SHIPPING_DATE) &
				/USING=REQUIRED &
				/USE_IF=(#SOP_REQUIRED_DATE_METHOD=#METHOD_RECEIPT)

!			Just warnings...
			IF ((DAYS(SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)) < DAYS(%TODAY)) &
				AND (#WAREHOUSED_FLAG = #YES))
				MESSAGE/IDENTIFIER/BELL/WAIT P_91540
			END_IF

			IF ( SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE) < SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE) )
				MESSAGE/IDENTIFIER/BELL/WAIT P_85193
			END_IF

			PERFORM "GEMLB:LB_L_ATP_AUTO" CHECK_WORKING_DAY ((#COMPANY_CODE), &
									(#DIVISION), &
									(#SHIP_WAREHOUSE), &
									"", &
									"", &
									(SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)))

			IF ( SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE) <> #OLD_SYS_SHIPPING_DATE )
				#DATE_CHANGE = #YES
			END_IF
		END_IF

		#OLD_SYS_DELIVERY_DATE = SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE)
		#OLD_SYS_SHIPPING_DATE = SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)
		#OLD_REQ_DATE = SALES_ORDER_LINE_DETAILS(REQUIRED_DATE)
		SALES_ORDER_LINE_DETAILS(REQUIRED_DATE) = SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)
	END_BLOCK

	INPUT_BLOCK ORDER_LINE_REF /ROW=1 /COL=33 &
			/TARGET=SALES_ORDER_LINE_DETAILS(ORDER_LINE_REF) &
			/HEADING=FIELD_HEADING(ORDER_LINE_REF)

	INPUT_BLOCK ORDER_QUANTITY /ROW=1 /COL=54 /LEN=14 &
			/TARGET =#DETAIL_SALES_ORDER_QTY &
			/INPUT_MASK = #SALES_UOM_MASK   &
			/LHEADING=FIELD_HEADING(ORDER_QUANTITY) &
			/SOURCE = #DETAIL_SALES_ORDER_QTY &
			/USING=SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY),NONEGATIVE

	OUTPUT_BLOCK SALES_QTY_UOM /ROW=1 /COL=69 &
		/SOURCE=#SALES_UOM &
		/USING=SALES_ORDER_LINES(UNIT_SALES) &
		/HEADING=FIELD_HEADING(UNIT_OF_MEASURE)

	INPUT_BLOCK WH_TM_IN_USE /ROW=1 /COL=74 /LEN=4 &
		/TARGET=SALES_ORDER_LINE_DETAILS(TM_LOAD_PLANNING) &
		/HEADING=FIELD_HEADING(TM_LOAD_PLANNING) &
		/INPUT_MASK="!  @ " &
		/USE_IF=(#DETAIL_TM_IN_USE = #YES)

	OUTPUT_BLOCK DISP_WH_TM_IN_USE /ROW=1 /COL=74 /LEN=4 &
		/SOURCE=(SALES_ORDER_LINE_DETAILS(TM_LOAD_PLANNING)) &
		/HEADING=FIELD_HEADING(TM_LOAD_PLANNING) &
		/OUTPUT_MASK="!  @ " &
		/USE_IF=(#SYS_TM_IN_USE = #YES)

	BEGIN_BLOCK CHECK_QTYS

		IF (%EDIT_MODE = %MODIFY &
		AND #DETAIL_SALES_ORDER_QTY < SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY_PROCESSED))
			MESSAGE/IDENTIFIER/BELL/WAIT &
				P_52086, LTRIM(MASK(#SALES_UOM_MASK, SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY_PROCESSED)))
			GOTO ORDER_QUANTITY
		END_IF

		IF (SALES_ORDER_LINES(ORDER_LINE_TYPE)=#SO_LINE_TYPE_STOCK &
			AND #WAREHOUSED_FLAG=#YES)

			IF ((#WAREHOUSE_CHANGE = #YES) OR (#DATE_CHANGE = #YES))
				! unreserve the qty
				! perform the reservation check
				IF (SALES_ORDER_LINE_DETAIL_QTYS(QTY_RESERVED) > 0)
				! unreserve these
					FIND IN PRODUCT_WAREHOUSE &
						/LOCK=WRITE &
						/WITH=COMPANY_CODE=#COMPANY_CODE &
						/WITH=WAREHOUSE=#OLD_SHIP_WAREHOUSE &
						/WITH=PART_CODE=SALES_ORDER_LINES(PART_CODE)

					#START_QTY_AVAILABLE_BACK = 0.0

					PERFORM "GEMSOP:SOP_L_RESERVATION" (&
							#COMPANY_CODE, &
							#OLD_SHIP_WAREHOUSE,&
							"0", &
							#OLD_LOT_NUMBER, &
							#YES, &
							(SALES_ORDER_LINE_DETAIL_QTYS(SEQUENCE)), &
							#IC_STATUS_CODE, &
							#START_QTY_AVAILABLE, &
							#R1, &
							#R2, &
							#R3, &
							#R4, &
							#R5,	&
							#START_QTY_AVAILABLE_BACK)

					IF (%STATUS <> %SUCCESS)
						ERROR/WAIT #R5
						EXIT(%FAILURE)
					ELSE
						#NEW_QTY_RESERVED	      = #R1
						#START_QTY_AVAILABLE = #START_QTY_AVAILABLE_BACK
					END_IF
					PERFORM DELETE_SALES_ORDER_LINE_DETAIL_QTYS(#YES)
					#DETAIL_QTYS_DELETED = #YES
					#OLD_QTY_RESERVED = 0.0
				END_IF

				IF (#DELETE_PROMISES = #YES)
					PERFORM DELETE_ANY_PROMISES(SALES_ORDER_LINE_DETAILS(SEQUENCE))
					SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER) = ""
					#OLD_SALES_ORDER_QTY = 0.0
				END_IF

				#OLD_SHIP_WAREHOUSE = SALES_ORDER_LINE_DETAILS(WAREHOUSE)

				#OLD_SYS_SHIPPING_DATE = SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)
				#OLD_SYS_DELIVERY_DATE = SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE)

			END_IF
		END_IF

		IF (#NOMI_UOM <> "")
			#DETAIL_NOMI_ORDER_QTY = 0.0
			PERFORM CONVERT_QTYS ((SALES_ORDER_LINE_DETAILS(WAREHOUSE)), &
				(SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER)), &
				(SALES_ORDER_LINES(PART_CODE)), &
				#SALES_UOM, &
				#DETAIL_SALES_ORDER_QTY, &
				#NOMI_UOM, &
				#DETAIL_NOMI_ORDER_QTY, &
				#R1)
		ELSE
			#DETAIL_NOMI_ORDER_QTY = 0
		END_IF

		IF (#IC_UOM_CONTROL = PARAMETER("IC_CATCHWEIGHT_UOM_CONTROL") OR	&
		   #IC_UOM_CONTROL = PARAMETER("IC_POTENT_UOM_CONTROL"))
			PERFORM GET_NON_NOMINATED_UOM( (SALES_ORDER_LINES(PART_CODE)), #NOMI_UOM, #NON_NOMI_UOM)
			! convert to the non-nominated inventory uom
			#DETAIL_NON_NOMI_ORDER_QTY = 0.0
			PERFORM CONVERT_QTYS ((SALES_ORDER_LINE_DETAILS(WAREHOUSE)), &
				(SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER)), &
				(SALES_ORDER_LINES(PART_CODE)), &
				#NOMI_UOM, &
				#DETAIL_NOMI_ORDER_QTY, &
				#NON_NOMI_UOM, &
				#DETAIL_NON_NOMI_ORDER_QTY, &
				#R1)
		END_IF

		IF (#IC_PACKAGED_PRODUCT = #YES)
		! convert to packaged uom
			BEGIN_CASE (#PACK_UOM)
				CASE (#SALES_UOM)
					#DETAIL_PACK_QTY = #DETAIL_SALES_ORDER_QTY
				CASE (#NOMI_UOM)
					#DETAIL_PACK_QTY = #DETAIL_NOMI_ORDER_QTY
				CASE (#NON_NOMI_UOM)
					#DETAIL_PACK_QTY = #DETAIL_NON_NOMI_ORDER_QTY
				CASE ELSE
					IF (PRODUCT_MASTER(IC_UNIT_CAPACITY)  = #NOMI_UOM)
						#CAP_QTY	= #DETAIL_NOMI_ORDER_QTY
					ELSE
						#CAP_QTY	= #DETAIL_NON_NOMI_ORDER_QTY
					END_IF
					#PACK_QTY = 0.0
					PERFORM CONVERT_QTYS ((SALES_ORDER_LINE_DETAILS(WAREHOUSE)), &
						(SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER)), &
						(SALES_ORDER_LINES(PART_CODE)), &
						(PRODUCT_MASTER(IC_UNIT_CAPACITY)), &
						#CAP_QTY, &
						#PACK_UOM,      &
						#DETAIL_PACK_QTY, &
						#R1)
			END_CASE
		ELSE
			#DETAIL_PACK_QTY = 0
		END_IF

		! convert to price uom
		IF (#PRICE_UOM = #SALES_UOM)
			#DETAIL_PRICE_QTY = #DETAIL_SALES_ORDER_QTY
		ELSE_IF (#PRICE_UOM = #NOMI_UOM)
			#DETAIL_PRICE_QTY = #DETAIL_NOMI_ORDER_QTY
		ELSE_IF (#PRICE_UOM = #NON_NOMI_UOM)
			#DETAIL_PRICE_QTY = #DETAIL_NON_NOMI_ORDER_QTY
		ELSE_IF (#PRICE_UOM = #PACK_UOM)
			#DETAIL_PRICE_QTY = #DETAIL_PACK_QTY
		ELSE
			#DETAIL_PRICE_QTY = 0.0
			PERFORM "GEMLB:SOP_L_SALES_PRICE_QTY" &
				(#COMPANY_CODE, &
				(SALES_ORDER_LINES(PART_CODE)), &
				(SALES_ORDER_LINES(WAREHOUSE)), &
				(SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER)), &
				#SALES_UOM, &
				#DETAIL_SALES_ORDER_QTY, &
				#NOMI_UOM, &
				#DETAIL_NOMI_ORDER_QTY, &
				#NON_NOMI_UOM, &
				#DETAIL_NON_NOMI_ORDER_QTY, &
				#PRICE_UOM, &
				#NOMI_PRICE_UOM, &
				"", &
				"", &
				#DETAIL_PRICE_QTY, &
				#PQ_STATUS, &
				#PQ_MESSAGE)
		END_IF

		IF (#ATP_AT_ORDER_ENTRY = #YES)

			IF (#ATP_IN_USE_FOR_PW = #YES)

				IF (#IC_ATP_SELECTION_METHOD = PARAMETER("FLAG_AUTO"))
					#ATP_AUTO_FLAG = #YES
				ELSE
					#ATP_AUTO_FLAG = #NO
				END_IF

				IF (#IC_PACKAGED_PRODUCT = #YES)
					#ATP_UNIT = #PACK_UOM
				ELSE
					#ATP_UNIT = PRODUCT_MASTER(SOP_NOMINATED_UNIT)
					! Don't use #nomi_uom
				END_IF

				#DETAIL_LOT = SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER)

				PERFORM "GEMLB:LB_L_ATP_AUTO" (#DIVISION, &
							#ORDER_NUMBER, &
							SALES_ORDER_LINES(ORDER_LINE_NUMBER), &
							SALES_ORDER_LINE_DETAILS(SEQUENCE), &
							SALES_ORDER_LINE_DETAILS(WAREHOUSE), &
							#PART_CODE, &
							#DETAIL_LOT, &
							#OLD_SALES_ORDER_QTY, &
							#DETAIL_SALES_ORDER_QTY, &
							#SALES_UOM, &
							#SALES_UOM_MASK, &
							#NOMI_UOM, &
							#NON_NOMI_UOM, &
							#PRICE_UOM, &
							#PACK_UOM, &
							#ATP_UNIT, &
							"", &
							SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE), &
							SALES_ORDER_LINE_DETAILS(SYS_DELIVERY_DATE), &
							#LINE_DIST_BOD_CODE, &
							#ATP_AUTO_FLAG, &
							SALES_ORDER_LINE_DETAILS(ORDER_LINE_REF), &
							SALES_ORDER_HEADERS(ORDER_DATE))

				IF (%STATUS = %FAILURE)
					GOTO WAREHOUSE
				END_IF
			END_IF
		END_IF

		IF ((%EDIT_MODE = %ADD) OR &
			((%EDIT_MODE = %MODIFY) AND (#DETAIL_QTYS_DELETED = #YES)))

			PERFORM ADD_SO_LINE_DETAIL_ORDER_QTY( "", SALES_ORDER_LINE_DETAILS(WAREHOUSE), &
								#SALES_UOM, #DETAIL_SALES_ORDER_QTY, #YES, #R1)
			PERFORM ADD_UPDATE_SO_LINE_ORDER_QTY( #SALES_UOM, #DETAIL_SALES_ORDER_QTY, #YES, #R1)

			IF (#NOMI_UOM <> #SALES_UOM AND #NOMI_UOM <> "")
				PERFORM ADD_SO_LINE_DETAIL_ORDER_QTY( "", SALES_ORDER_LINE_DETAILS(WAREHOUSE), &
									#NOMI_UOM, #DETAIL_NOMI_ORDER_QTY, #YES, #R1)
				PERFORM ADD_UPDATE_SO_LINE_ORDER_QTY( #NOMI_UOM, #DETAIL_NOMI_ORDER_QTY, #YES, #R1)
			END_IF

			IF ((#IC_UOM_CONTROL = PARAMETER("IC_CATCHWEIGHT_UOM_CONTROL")) OR      &
				(#IC_UOM_CONTROL = PARAMETER("IC_POTENT_UOM_CONTROL")))
				IF (#NON_NOMI_UOM <> "" &
				AND #NON_NOMI_UOM <> #SALES_UOM &
				AND #NON_NOMI_UOM <> #NOMI_UOM)
					PERFORM ADD_SO_LINE_DETAIL_ORDER_QTY &
							("", SALES_ORDER_LINE_DETAILS(WAREHOUSE), &
									#NON_NOMI_UOM, #DETAIL_NON_NOMI_ORDER_QTY, "", #R1)
					PERFORM ADD_UPDATE_SO_LINE_ORDER_QTY &
							(#NON_NOMI_UOM, #DETAIL_NON_NOMI_ORDER_QTY, "", #R1)
				END_IF
			END_IF

			IF (#IC_PACKAGED_PRODUCT = #YES)
				IF ((#PACK_UOM <> #SALES_UOM) AND &
					(#PACK_UOM <> #NOMI_UOM) AND &
					(#PACK_UOM <> #NON_NOMI_UOM))
					PERFORM ADD_SO_LINE_DETAIL_ORDER_QTY ("", SALES_ORDER_LINE_DETAILS(WAREHOUSE), &
											#PACK_UOM, #DETAIL_PACK_QTY, "", #R1)
					PERFORM ADD_UPDATE_SO_LINE_ORDER_QTY (#PACK_UOM, #DETAIL_PACK_QTY, "", #R1)
				END_IF
			END_IF

			IF ((#PRICE_UOM <> #SALES_UOM) AND &
			    (#PRICE_UOM <> #NOMI_UOM) AND &
			    (#PRICE_UOM <> #NON_NOMI_UOM) AND &
			    (#PRICE_UOM <> #PACK_UOM))
				PERFORM ADD_SO_LINE_DETAIL_ORDER_QTY ("", SALES_ORDER_LINE_DETAILS(WAREHOUSE), &
										#PRICE_UOM, #DETAIL_PRICE_QTY, "", #R1)
				PERFORM ADD_UPDATE_SO_LINE_ORDER_QTY (#PRICE_UOM, #DETAIL_PRICE_QTY, "", #R1)
			END_IF

			FIND IN PRODUCT_MASTER &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=PART_CODE=SALES_ORDER_LINES(PART_CODE)

			IF (SALES_ORDER_LINES(ORDER_LINE_TYPE) <>  #SO_LINE_TYPE_NONSTOCK)
				PERFORM 'GEMSOP:SOP_L_DO_IC_COMMITMENTS' (SALES_ORDER_LINE_DETAILS(WAREHOUSE), &
								SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE), &
								#OLD_REQ_DATE, &
								#IC_MOVEMENT_CODE, &
								#OLD_DETAIL_NOMI_ORDER_QTY, &
								#DETAIL_NOMI_ORDER_QTY, &
								#R1)
				IF (%STATUS <> %SUCCESS)
					ERROR /WAIT #R1
				END_IF
			END_IF
		ELSE
			! Edit Mode = Modify
			#REVERSE_OLD_SOLDQ_QTY = (-1 * SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY))

			! Reverse old qty, then add new, makes stored qtys more
			! accurate.
			PERFORM 'GEMSOP:SOP_L_UPDATE_SO_QTYS' &
					(#COMPANY_CODE,   &
					#DIVISION,	     &
					SALES_ORDER_LINES(ORDER_NUMBER),	&
					SALES_ORDER_LINES(ORDER_LINE_NUMBER),   &
					SALES_ORDER_LINE_DETAILS(SEQUENCE),     &
					"ORDER_QUANTITY",       &
					#REVERSE_OLD_SOLDQ_QTY , &
					SALES_ORDER_LINES(UNIT_SALES))

			PERFORM 'GEMSOP:SOP_L_UPDATE_SO_QTYS' &
					(#COMPANY_CODE,   &
					#DIVISION,	     &
					SALES_ORDER_LINES(ORDER_NUMBER),	&
					SALES_ORDER_LINES(ORDER_LINE_NUMBER),   &
					SALES_ORDER_LINE_DETAILS(SEQUENCE),     &
					"ORDER_QUANTITY",       &
					#DETAIL_SALES_ORDER_QTY, &
					SALES_ORDER_LINES(UNIT_SALES))

			START_STREAM MD &
				/TABLE=SALES_ORDER_LINE_DETAIL_QTYS &
				/LOCK=WRITE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=ORDER_NUMBER=SALES_ORDER_LINE_DETAILS(ORDER_NUMBER) &
				/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINE_DETAILS(ORDER_LINE_NUMBER) &
				/WITH=SEQUENCE=SALES_ORDER_LINE_DETAILS(SEQUENCE)

			WHILE (1)
				FETCH MD /FAILURE=(CONTINUE OUT)

				SALES_ORDER_LINE_DETAIL_QTYS(REQUIRED_DATE) = SALES_ORDER_LINE_DETAILS(REQUIRED_DATE)
			END_WHILE

			IF (SALES_ORDER_LINES(ORDER_LINE_TYPE) <> #SO_LINE_TYPE_NONSTOCK)
				PERFORM 'GEMSOP:SOP_L_DO_IC_COMMITMENTS' (SALES_ORDER_LINE_DETAILS(WAREHOUSE), &
								SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE), &
								#OLD_REQ_DATE, &
								#IC_MOVEMENT_CODE, &
								#OLD_DETAIL_NOMI_ORDER_QTY, &
								#DETAIL_NOMI_ORDER_QTY, &
								#R1)
				IF (%STATUS <> %SUCCESS)
					ERROR /WAIT #R1
				END_IF
			END_IF

			IF (#DETAIL_PRICE_QTY <> #OLD_PRICE_QTY)
				! This call is necessary to update the pricing
				! quantity so that rounding errors which may
				! have been introduced are removed.
				PERFORM "GEMSOP:SOP_L_UPDATE_A_SO_QTY" ( #COMPANY_CODE, &
								#DIVISION, &
								(SALES_ORDER_LINES(ORDER_NUMBER)), &
								(SALES_ORDER_LINES(ORDER_LINE_NUMBER)), &
								SALES_ORDER_LINE_DETAILS(SEQUENCE), &
								"ORDER_QUANTITY", &
								#DETAIL_PRICE_QTY, &
								#PRICE_UOM,	&
								#R1)

				#OLD_PRICE_QTY = #DETAIL_PRICE_QTY
			END_IF
		END_IF

		! updates to qty's happens in this form - prevent from happening in MAINTAIN_STOCK_LINE
		#ORIG_SALES_ORDER_QTY	  = #SALES_ORDER_QTY
		#ORDER_FLAG = (PARAMETER("HORIZON_CURRENT"))

		IF (SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE) <> "")
			#ORDER_DAYS = DAYS(SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE))- DAYS(%NOW)
			IF (#ORDER_DAYS > WAREHOUSE_CONTROLS(DAYS_FORWARD_COMMITMENT))
				#ORDER_FLAG = (PARAMETER("HORIZON_FORWARD"))
			END_IF
			IF (#ORDER_DAYS < -(WAREHOUSE_CONTROLS(DAYS_BACKWARD_COMMITMENT)))
				#ORDER_FLAG = (PARAMETER("HORIZON_BACKWARD"))
			END_IF
		END_IF
		SALES_ORDER_LINE_DETAILS(ORDER_HORIZON) = #ORDER_FLAG

		! reservation
		IF (SALES_ORDER_LINES(ORDER_LINE_TYPE)=#SO_LINE_TYPE_STOCK &
		AND #WAREHOUSED_FLAG=#YES)
			PERFORM RESERVATION_CHECK (SALES_ORDER_LINE_DETAILS(WAREHOUSE))
			#DELTA_QTY_RESERVED		  = #NEW_QTY_RESERVED - #OLD_QTY_RESERVED
			IF (#DELTA_QTY_RESERVED <> 0 AND #NEW_QTY_RESERVED <> 0)
				PERFORM ZERO_CURRENT_LINE_DETAIL_QTYS("QTY_RESERVED")
				PERFORM UPDATE_A_SO_QTY ("QTY_RESERVED", #NEW_QTY_RESERVED, #NOMI_NEW_QTY_RESERVED, &
						#NON_NOMI_NEW_QTY_RESERVED, #PACK_NEW_QTY_RESERVED, #PRICE_NEW_QTY_RESERVED)
			END_IF

			IF (#DELTA_QTY_RESERVED <= 0 AND #NEW_QTY_RESERVED = 0) &
				PERFORM ZERO_CURRENT_LINE_DETAIL_QTYS("QTY_RESERVED")

		END_IF
	END_BLOCK
END_FORM


FORM SALES_ORDER_LINE_CODES /ROW=6 /COL=2 /HEIGHT=18 /WIDTH=78 &
	/TITLE=(MESSAGE("P_50135"))

	BEGIN_BLOCK DELIVERY
		#OLD_ADDRESS_CODE	= SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE)
		#ORIGINAL_ADDRESS_CODE	= SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE)
		#LINE_FINAL_ADDRESS_CODE = SALES_ORDER_LINES(FINAL_ADDRESS_CODE)
		#LINE_DELIVERY_ADDR_FLAG = #NO
		#FINAL_ADDR_CHANGE_FLAG = #NO
		#DEL_ADDR_CODE = SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE)
		! The delivery address code value is required to be stored
		! twice to record 2 possible situations: firstly the difference
		! between the code before entering the form (#OLD...) and
		! after confirming the screen, and secondly the difference
		! between the last value on the form (#ORIGINAL...) and its
		! current value (because the user can repeatedly enter an
		! address code and not confirm the screen).

		#RE_CALC_FREIGHT = #NO

		#ORIG_LINE_EC_REPORT_TYPE     = #LINE_EC_REPORT_TYPE
		#LINE_DELIVERY_CHANGE_FLAG    = #NO 
		#FINAL_ADDR_CHANGE_FLAG       = #NO

		CLEAR_BUFFER CUSTOMER_ADDRESSES

		IF (SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE) <> "")
			FIND IN CUSTOMER_ADDRESSES &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION = #DIVISION &
				/WITH=CUSTOMER_NUMBER=#customer_number &
				/WITH=ADDRESS_CODE=SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE)

			FIND IN SYS_COUNTRIES &
				/LOCK=NONE &
				/WITH=SYS_COUNTRY=CUSTOMER_ADDRESSES(SYS_COUNTRY)

			#PHONE_MASK = SYS_COUNTRIES(SYS_PHONE_MASK)
		END_IF

		DISPLAY DEFAULTS
	END_BLOCK

	BEGIN_BLOCK DISPLAY_ADDRESS
		PERFORM "GEMLB:LB_ADDRESSES" (&
			"D", &
			(SYS_COUNTRIES(SYS_COUNTRY)), &
			"CUSTOMER_ADDRESSES", &
			"7", &
			"3", &
			MESSAGE("P_82258"), &
			"", &
			"", &
			"", &
			"", &
			#R1, &
			#R2, &
			#R3, &
			#R4, &
			#R5)

		GOTO CONFIRM
	END_BLOCK
 
	INPUT_BLOCK DELIVERY_ADDRESS_CODE /ROW=1 /COL=11 &
			/PROMPT=(MESSAGE("P_00318")) &
			/TARGET=#DEL_ADDR_CODE &
			/USING=SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE) &
			/LOV=CUSTOMER_ADDRESSES(ADDRESS_CODE,CUSTOMER_NAME,SYS_POSTAL_CODE) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=DIVISION=#DIVISION &
			/LOV_WITH=CUSTOMER_NUMBER=#CUSTOMER_NUMBER &
			/LOV_WITH=ACTIVATION_STATUS = (PARAMETER("STATUS_ACTIVE")) &
			/BACK=(GOTO SHOW_ADDRESS_CODE) &
			/EXIT=(GOTO SHOW_ADDRESS_CODE) &
			/USER_KEY1=(PERFORM "GEMSYS:SYS_M_ADD_CUSTOMER_ADDRESSES" &
				(#DIVISION,#CUSTOMER_NUMBER,#DEL_ADDR_CODE,#TAX_FLAG)) &
			/USE_IF=(((#SYS_TM_IN_USE <> #YES) AND (#AR_FREIGHT_IN_USE <> #YES)) &
				OR ((#SYS_TM_IN_USE = #YES) AND (#AR_FREIGHT_IN_USE <> #YES) &
							AND (#FREIGHT_QTY_TO_SHIP = 0.0)) &
				OR ((#SYS_TM_IN_USE <> #YES) AND (#AR_FREIGHT_IN_USE = #YES) &
					AND (#FREIGHT_INVOICED_QTY = 0.0)) &
				OR ((#SYS_TM_IN_USE = #YES) AND (#AR_FREIGHT_IN_USE = #YES) &
					AND (#FREIGHT_QTY_TO_SHIP = 0.0) AND (#FREIGHT_INVOICED_QTY = 0.0)))

	BEGIN_BLOCK VALIDATE_DELIVERY_ADDRESS
		CLEAR_BUFFER CUSTOMER_ADDRESSES

		IF (#DEL_ADDR_CODE <> "")
			FIND IN CUSTOMER_ADDRESSES &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION = #DIVISION &
				/WITH=CUSTOMER_NUMBER=#CUSTOMER_NUMBER &
				/WITH=ADDRESS_CODE=#DEL_ADDR_CODE

		! this find does not have a /lock=none on purpose!  This is
		! because you can add a customer address using the F17 key
		! and you need to be able to see the address within the same
		! transaction.  PLEASE do not add a /lock=none to these finds.

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_22178
				GOTO DELIVERY_ADDRESS_CODE
			END_IF

			IF (CUSTOMER_ADDRESSES(ACTIVATION_STATUS) <> (PARAMETER("STATUS_ACTIVE")))
				MESSAGE/IDENTIFIER/BELL/WAIT P_02199
				GOTO DELIVERY_ADDRESS_CODE
			END_IF

			IF ( CUSTOMER_ADDRESSES(SYS_FINAL_DESTINATION) = "1" ) 
				#LINE_DELIVERY_ADDR_FLAG = #YES
			ELSE
				#LINE_DELIVERY_ADDR_FLAG = #NO	
			END_IF 

			FIND IN SYS_COUNTRIES &
				/LOCK=NONE &
				/WITH=SYS_COUNTRY=CUSTOMER_ADDRESSES(SYS_COUNTRY)

			#PHONE_MASK = SYS_COUNTRIES(SYS_PHONE_MASK)
		END_IF

		IF (#ORIGINAL_ADDRESS_CODE <> #DEL_ADDR_CODE)
			SALES_ORDER_LINES(DELIVERY_INSTRUCTIONS) = CUSTOMER_ADDRESSES(DELIVERY_INSTRUCTIONS)
			SALES_ORDER_LINES(SHIP_METHOD) = CUSTOMER_ADDRESSES(SHIP_METHOD)

			#LINE_DELIVERY_CHANGE_FLAG = #YES

			IF (#AR_FREIGHT_IN_USE = #YES)
				#RE_CALC_FREIGHT = #YES
				IF (CUSTOMER_ADDRESSES(SYS_FREIGHT_CONTRACT_NUMBER) <> "")
					SALES_ORDER_LINES(SYS_FREIGHT_CONTRACT_NUMBER) &
							= CUSTOMER_ADDRESSES(SYS_FREIGHT_CONTRACT_NUMBER)
				END_IF
			END_IF
			IF ((#AR_FREIGHT_IN_USE = #YES) &
			OR  (#SYS_TM_IN_USE = #YES))
				#RE_CALC_FREIGHT = #YES
				IF (CUSTOMER_ADDRESSES(SYS_FREIGHT_MODE) <> "")
					SALES_ORDER_LINES(SYS_FREIGHT_MODE) = CUSTOMER_ADDRESSES(SYS_FREIGHT_MODE)
					! Only override previous values if the new value is not blank.
				END_IF
			END_IF

			PERFORM OVERRIDE
			! user confirmation screen for Sales impact.
			IF (%STATUS = %SUCCESS)
				SALES_ORDER_LINES(LOCATION)	     		= CUSTOMER_ADDRESSES(LOCATION)
				SALES_ORDER_LINES(BROKER_CODE)	    	= CUSTOMER_ADDRESSES(BROKER_CODE)
				SALES_ORDER_LINES(SALESPERSON_CODE)	    = CUSTOMER_ADDRESSES(SALESPERSON_CODE)
				SALES_ORDER_LINES(SALES_ANALYSIS_GROUP) = CUSTOMER_ADDRESSES(CUSTOMER_GROUP)

				FIND IN SALESPERSONS &
					/LOCK=NONE &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=SALESPERSON_CODE=SALES_ORDER_LINES(SALESPERSON_CODE)

				IF (%STATUS = %SUCCESS)
					SALES_ORDER_LINES(SALES_COMMISSION_CODE)=SALESPERSONS(SALES_COMMISSION_CODE)
				END_IF
			END_IF
			
			#ORIGINAL_ADDRESS_CODE = #DEL_ADDR_CODE

	        PERFORM "GEMLB:LB_L_GET_PRICING_METHOD" ( &
						(#COMPANY_CODE), &
						(PARAMETER("MODULE_SO")), &
						(#DIVISION), &
						(#CUSTOMER_NUMBER), &
						(""), &
						(#DEL_ADDR_CODE), &
						#ERROR_OCCURRED, &
						#ERROR_MESSAGE, &
						#TEST_PRICING_METHOD )

			IF ( #ERROR_OCCURRED )
				ERROR/TEXT_ONLY/BELL #ERROR_MESSAGE
				GOTO DELIVERY_ADDRESS_CODE
			END_IF

			IF ( #TEST_PRICING_METHOD <> #PRICING_METHOD )
				! Pricing Method mismatch.  Required Pricing Method is !AS
				MESSAGE/IDENTIFIER/BELL/WAIT P_23468, #PRICING_METHOD_DESC
			END_IF

		END_IF

	END_BLOCK

	BEGIN_BLOCK DISPLAY_NEW_ADDRESS
	
		IF(#DEL_ADDR_CODE <> "")
			
			PERFORM "GEMLB:LB_ADDRESSES" (&
				"D", &
				(SYS_COUNTRIES(SYS_COUNTRY)), &
				"CUSTOMER_ADDRESSES", &
				"7", &
				"3", &
				MESSAGE("P_82258"), &
				"", &
				"", &
				"", &
				"", &
				#R1, &
				#R2, &
				#R3, &
				#R4, &
				#R5)
		END_IF
	END_BLOCK

	OUTPUT_BLOCK CUSTOMER_NAME_1 /ROW=1 /COL=29 /LEN=23 &
			/PROMPT=(FIELD_SHORT_PROMPT(CUSTOMER_NAME)) &
			/SOURCE=(CUSTOMER_ADDRESSES(CUSTOMER_NAME))

	OUTPUT_BLOCK PHONE_1 /ROW=6 /COL=57 /LEN=21 &
			/PROMPT=(FIELD_PROMPT(PHONE)) &
			/SOURCE=(CUSTOMER_ADDRESSES(PHONE)) &
			/OUTPUT_MASK=(#PHONE_MASK)

	OUTPUT_BLOCK FAX_NUMBER_1 /ROW=7 /COL=57 /LEN=21 &
			/PROMPT=(FIELD_PROMPT(FAX_NUMBER)) &
			/SOURCE=(CUSTOMER_ADDRESSES(FAX_NUMBER)) &
			/OUTPUT_MASK=(#PHONE_MASK)
	
	BEGIN_BLOCK DELIVERY_ADDR_VALIDATION
	
		IF(#LINE_DELIVERY_ADDR_FLAG = #YES)
		
			PERFORM "GEMSOP:SOP_S_L_CONTROL_MAINTENANCE" JUDGMENT_SOP_CONTROLS( &
							#COMPANY_CODE, &
							#DIVISION, &
							(#CUSTOMER_NUMBER), &
							(#DEL_ADDR_CODE), &
							(SALES_ORDER_LINES(PART_CODE)),"","","","", &
							#ERROR_OCCURRED, #ERROR_MESSAGE,#SALES_REACH_RETURN_FLAG,#RESTRICT_MODE)
																				
			IF ( #ERROR_OCCURRED = "1")
				ERROR/TEXT_ONLY/BELL #ERROR_MESSAGE
			END_IF
				
			IF ( #SALES_REACH_RETURN_FLAG = #NO ) 
				PERFORM GET_FINAL_RETURN_MSG (#COMPANY_CODE,#DIVISION,#CUSTOMER_NUMBER, &
						(#DEL_ADDR_CODE),#RETURN_PARA_MSG)
				MESSAGE/IDENTIFIER/BELL P_37128
				MESSAGE/IDENTIFIER/BELL P_37118, (SALES_ORDER_LINES(PART_CODE)),#RETURN_PARA_MSG
				
				GOTO DELIVERY_ADDRESS_CODE	
			END_IF
		END_IF
		
		SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE) = #DEL_ADDR_CODE
		
		DISPLAY DEFAULTS
	END_BLOCK
	
	OUTPUT_BLOCK DISP_DELIVERY_ADDRESS_CODE /ROW=1 /COL=11 &
		/PROMPT=(MESSAGE("P_00318")) &
		/SOURCE=(SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE))
	
	BEGIN_BLOCK /DISPLAY_ONLY SHOW_FINAL_ADDRESS 
		IF ( #LINE_DELIVERY_ADDR_FLAG = #YES ) 
			#LINE_FINAL_ADDRESS_CODE = SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE)
		ELSE
			#LINE_FINAL_ADDRESS_CODE = SALES_ORDER_LINES(FINAL_ADDRESS_CODE)	
		END_IF
		
		OUTPUT_BLOCK FINAL_ADDRESS_CODE_O /ROW=1 /COL=66 /LEN = 10 &
			/SOURCE=#LINE_FINAL_ADDRESS_CODE &
			/PROMPT=FIELD_SHORT_PROMPT(FINAL_ADDRESS_CODE) &
			/USE_IF=(SALES_ORDER_LINES(ORDER_LINE_TYPE)= #SO_LINE_TYPE_STOCK)
						
		FIND IN CUSTOMER_ADDRESSES &
				/LOCK=NONE &
				/SECONDARY &
				/STREAM_NAME=CU6 &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=CUSTOMER_NUMBER=#CUSTOMER_NUMBER &
				/WITH=ADDRESS_CODE=#LINE_FINAL_ADDRESS_CODE
		
		FIND IN SYS_COUNTRIES &
			/LOCK=NONE &
			/WITH=SYS_COUNTRY=CU6:CUSTOMER_ADDRESSES(SYS_COUNTRY)
		
		#LINE_COUNTRY_CODE   = CU6:CUSTOMER_ADDRESSES(SYS_COUNTRY)
		#LINE_CITY           = CU6:CUSTOMER_ADDRESSES(SYS_CITY)
		
		IF ( CU6:CUSTOMER_ADDRESSES(SYS_STATE) <> "" ) 
			#LINE_STATE_PROVINCE = CU6:CUSTOMER_ADDRESSES(SYS_STATE)
		ELSE
			#LINE_STATE_PROVINCE = CU6:CUSTOMER_ADDRESSES(SYS_PROVINCE)
		END_IF

		OUTPUT_BLOCK FINAL_CITY_O3 /ROW=2 /COL=66 /LEN = 12 &
			/SOURCE=#LINE_CITY &
			/PROMPT=MESSAGE("P_85010") &
			/USE_IF=(SALES_ORDER_LINES(ORDER_LINE_TYPE)= #SO_LINE_TYPE_STOCK)

		OUTPUT_BLOCK FINAL_ADDRESS_STATE_PROV_O3 /ROW=3 /COL=66 /LEN = 12 &
			/SOURCE=#LINE_STATE_PROVINCE &
			/PROMPT=MESSAGE("P_37127") &
			/USE_IF=(SALES_ORDER_LINES(ORDER_LINE_TYPE)= #SO_LINE_TYPE_STOCK)
		
		OUTPUT_BLOCK FINAL_ADDRESS_COUNTRY_O3 /ROW=4 /COL=66 /LEN=12 &
			/SOURCE=#LINE_COUNTRY_CODE &
			/PROMPT=FIELD_PROMPT(COUNTRY_CODE) &
			/USE_IF=(SALES_ORDER_LINES(ORDER_LINE_TYPE)= #SO_LINE_TYPE_STOCK)	
	END_BLOCK  

	BEGIN_BLOCK FINAL_ADDRESS_CODE 

		#ORG_LINE_FINAL_ADDRESS_CODE = SALES_ORDER_LINES(FINAL_ADDRESS_CODE)

		IF ( #LINE_DELIVERY_ADDR_FLAG = #YES ) 
			#LINE_FINAL_ADDRESS_CODE = SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE)
		ELSE
			#LINE_FINAL_ADDRESS_CODE = SALES_ORDER_LINES(FINAL_ADDRESS_CODE)	
		END_IF 

		OUTPUT_BLOCK FINAL_ADDRESS_CODE_O1 /ROW=1 /COL=66 /LEN=10 &
			/SOURCE=#LINE_FINAL_ADDRESS_CODE &
			/PROMPT=FIELD_SHORT_PROMPT(FINAL_ADDRESS_CODE) &
			/USE_IF=(SALES_ORDER_LINES(ORDER_LINE_TYPE)= #SO_LINE_TYPE_STOCK)
		
		FIND IN CUSTOMER_ADDRESSES &
				/LOCK=NONE &
				/SECONDARY &
				/STREAM_NAME=CU7 &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=CUSTOMER_NUMBER=#CUSTOMER_NUMBER &
				/WITH=ADDRESS_CODE=#LINE_FINAL_ADDRESS_CODE 		
			
		#LINE_COUNTRY_CODE   = CU7:CUSTOMER_ADDRESSES(SYS_COUNTRY)
		#LINE_CITY           = CU7:CUSTOMER_ADDRESSES(SYS_CITY)
		
		IF ( CU7:CUSTOMER_ADDRESSES(SYS_STATE) <> "" ) 
			#LINE_STATE_PROVINCE = CU7:CUSTOMER_ADDRESSES(SYS_STATE)
		ELSE
			#LINE_STATE_PROVINCE = CU7:CUSTOMER_ADDRESSES(SYS_PROVINCE)
		END_IF

		OUTPUT_BLOCK FINAL_CITY_O1 /ROW=2 /COL=66 /LEN = 12 &
			/SOURCE=#LINE_CITY &
			/PROMPT=MESSAGE("P_85010") &
			/USE_IF=(SALES_ORDER_LINES(ORDER_LINE_TYPE)= #SO_LINE_TYPE_STOCK)

		OUTPUT_BLOCK FINAL_ADDRESS_STATE_PROV_O1 /ROW=3 /COL=66 /LEN = 12 &
			/SOURCE=#LINE_STATE_PROVINCE &
			/PROMPT=MESSAGE("P_37127") &
			/USE_IF=(SALES_ORDER_LINES(ORDER_LINE_TYPE)= #SO_LINE_TYPE_STOCK)
		
		OUTPUT_BLOCK FINAL_ADDRESS_COUNTRY_O1 /ROW=4 /COL=66 /LEN=12 &
			/SOURCE=#LINE_COUNTRY_CODE &
			/PROMPT=FIELD_PROMPT(COUNTRY_CODE) &
			/USE_IF=(SALES_ORDER_LINES(ORDER_LINE_TYPE)= #SO_LINE_TYPE_STOCK)

		IF ( SALES_ORDER_LINES(ORDER_LINE_TYPE)= #SO_LINE_TYPE_STOCK ) 
			IF ( #LINE_DELIVERY_ADDR_FLAG <> #YES ) 
				IF ( #LINE_DELIVERY_CHANGE_FLAG = #YES ) 
					PERFORM OVERRIDE_LINE_FINAL_ADDRESS
			
					IF ( %STATUS = %SUCCESS ) 
						GOTO FINAL_ADDRESS_CODE_I
					ELSE
						GOTO SALES_REACH_CONTROLS
					END_IF
				ELSE
					GOTO FINAL_ADDRESS_CODE_I				
				END_IF
			ELSE
				GOTO SALES_REACH_CONTROLS	 
			END_IF
		ELSE
			GOTO DELIVERY_INSTRUCTIONS
		END_IF
				
		INPUT_BLOCK FINAL_ADDRESS_CODE_I /ROW=1 /COL=66 /LEN = 10 &
			/TARGET=#LINE_FINAL_ADDRESS_CODE &
			/PROMPT=FIELD_SHORT_PROMPT(FINAL_ADDRESS_CODE) &
			/USING=REQUIRED &
			/USE_IF=(SALES_ORDER_LINES(ORDER_LINE_TYPE)= #SO_LINE_TYPE_STOCK) &
			/LOV=CUSTOMER_ADDRESSES(ADDRESS_CODE,CUSTOMER_NAME,SYS_POSTAL_CODE) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=DIVISION=#DIVISION &
			/LOV_WITH=CUSTOMER_NUMBER=#CUSTOMER_NUMBER &
			/LOV_WITH=ACTIVATION_STATUS = (PARAMETER("STATUS_ACTIVE")) &
			/LOV_WITH=SYS_FINAL_DESTINATION = "1" &
			/USER_KEY1=(PERFORM "GEMSYS:SYS_M_ADD_CUSTOMER_ADDRESSES" &
					(#DIVISION,#CUSTOMER_NUMBER,SALES_ORDER_HEADERS(FINAL_ADDRESS_CODE),#TAX_FLAG))
			
		PERFORM VALIDATE_ADDRESS (#LINE_FINAL_ADDRESS_CODE,#LINE_FINAL_ADDR_FLAG)
		
		IF ( #LINE_FINAL_ADDR_FLAG <> #YES ) 
			MESSAGE/IDENTIFIER/BELL P_37116
			GOTO FINAL_ADDRESS_CODE_I
		END_IF
		
		FIND IN CUSTOMER_ADDRESSES &
			/LOCK=NONE &
			/SECONDARY &
			/STREAM_NAME=CU8 &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=#CUSTOMER_NUMBER &
			/WITH=ADDRESS_CODE=#LINE_FINAL_ADDRESS_CODE
		
		#LINE_COUNTRY_CODE   = CU8:CUSTOMER_ADDRESSES(SYS_COUNTRY)
		#LINE_CITY           = CU8:CUSTOMER_ADDRESSES(SYS_CITY)
		
		IF ( CU8:CUSTOMER_ADDRESSES(SYS_STATE) <> "" ) 
			#LINE_STATE_PROVINCE = CU8:CUSTOMER_ADDRESSES(SYS_STATE)
		ELSE
			#LINE_STATE_PROVINCE = CU8:CUSTOMER_ADDRESSES(SYS_PROVINCE)
		END_IF

		OUTPUT_BLOCK FINAL_CITY_O2 /ROW=2 /COL=66 /LEN = 12 &
			/SOURCE=#LINE_CITY &
			/PROMPT=MESSAGE("P_85010") &
			/USE_IF=(SALES_ORDER_LINES(ORDER_LINE_TYPE)= #SO_LINE_TYPE_STOCK)

		OUTPUT_BLOCK FINAL_ADDRESS_STATE_PROV_O2 /ROW=3 /COL=66 /LEN = 12 &
			/SOURCE=#LINE_STATE_PROVINCE &
			/PROMPT=MESSAGE("P_37127") &
			/USE_IF=(SALES_ORDER_LINES(ORDER_LINE_TYPE)= #SO_LINE_TYPE_STOCK)
		
		OUTPUT_BLOCK FINAL_ADDRESS_COUNTRY_O2 /ROW=4 /COL=66 /LEN=12 &
			/SOURCE=#LINE_COUNTRY_CODE &
			/PROMPT=FIELD_PROMPT(COUNTRY_CODE) &
			/USE_IF=(SALES_ORDER_LINES(ORDER_LINE_TYPE)= #SO_LINE_TYPE_STOCK)
		
	END_BLOCK
	
	BEGIN_BLOCK SALES_REACH_CONTROLS 
			
		IF ( #ORG_LINE_FINAL_ADDRESS_CODE <> #LINE_FINAL_ADDRESS_CODE ) 
			#FINAL_ADDR_CHANGE_FLAG	= #YES
		ELSE
!			#FINAL_ADDR_CHANGE_FLAG = #NO	
		END_IF 
			
		IF ( #FINAL_ADDR_CHANGE_FLAG = #YES OR #COPY_REACH_CHECK_FALG = #YES )
				
			PERFORM "GEMSOP:SOP_S_L_CONTROL_MAINTENANCE" JUDGMENT_SOP_CONTROLS (#COMPANY_CODE, &
																				#DIVISION, &
																				(#CUSTOMER_NUMBER), &
																				#LINE_FINAL_ADDRESS_CODE, &
																				(SALES_ORDER_LINES(PART_CODE)),"","","","", &
																				#ERROR_OCCURRED, #ERROR_MESSAGE,#SALES_REACH_RETURN_FLAG,#RESTRICT_MODE)
																				
			IF ( #ERROR_OCCURRED = "1")
				ERROR/TEXT_ONLY/BELL #ERROR_MESSAGE
			END_IF
				
			IF ( #SALES_REACH_RETURN_FLAG = #NO ) 
				PERFORM GET_FINAL_RETURN_MSG (#COMPANY_CODE,#DIVISION,#CUSTOMER_NUMBER,#LINE_FINAL_ADDRESS_CODE,#RETURN_PARA_MSG)
				MESSAGE/IDENTIFIER/BELL P_37128
				MESSAGE/IDENTIFIER/BELL P_37118,#PART_CODE,#RETURN_PARA_MSG
				
				IF ( #LINE_DELIVERY_ADDR_FLAG = #YES ) 
					GOTO DELIVERY_ADDRESS_CODE	
				ELSE
					GOTO FINAL_ADDRESS_CODE_I
				END_IF
			END_IF				
		END_IF	
		SALES_ORDER_LINES(FINAL_ADDRESS_CODE) = #LINE_FINAL_ADDRESS_CODE
	END_BLOCK

	INPUT_BLOCK DELIVERY_INSTRUCTIONS /ROW=8 /COL=27 &
			/PROMPT=(FIELD_PROMPT(DELIVERY_INSTRUCTIONS)) &
			/TARGET=SALES_ORDER_LINES(DELIVERY_INSTRUCTIONS)

	INPUT_BLOCK SHIP_METHOD /ROW=9 /COL=27 &
			!Change 006
			!/PROMPT=(FIELD_PROMPT(SHIP_METHOD)) &
			!/TARGET=SALES_ORDER_LINES(SHIP_METHOD)
			/PROMPT=(FIELD_PROMPT(SHIPPING_TERMS_CODE)) &
			/TARGET=SALES_ORDER_LINES(SOP_SHIPPING_TERMS_CODE) &
			/LOV=SOP_SHIPPING_TERMS(SOP_SHIPPING_TERMS_CODE,DESCRIPTION,SOP_FREIGHT_INCLUSIVE) &
			/LOV_WITH=COMPANY_CODE=SALES_ORDER_LINES(COMPANY_CODE)
			!Change 006 End
			
	BEGIN_BLOCK /DISPLAY_ONLY FREIGHT_MODE_DES_DISP
		FIND IN SYS_FREIGHT_MODES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=SYS_FREIGHT_MODE = SALES_ORDER_LINES(SYS_FREIGHT_MODE)
	END_BLOCK

	INPUT_BLOCK SYS_FREIGHT_MODE /ROW=10 /COL=27 &
			/PROMPT=(FIELD_PROMPT(SYS_FREIGHT_MODE)) &
			/SOURCE=(SALES_ORDER_LINES(SYS_FREIGHT_MODE)) &
			/TARGET=SALES_ORDER_LINES(SYS_FREIGHT_MODE) &
			/LOV=SYS_FREIGHT_MODES(SYS_FREIGHT_MODE,DESCRIPTION) &
			/LOV_WITH=COMPANY_CODE = #COMPANY_CODE &
			!Change 006
			!/USE_IF=((#SYS_TM_IN_USE = #YES) &
			!	AND (#AR_FREIGHT_IN_USE <> #YES))
			!Change 006 End

	BEGIN_BLOCK VALIDATE_SYS_FREIGHT_MODE
		! If AR Freight is in use, this value will be maintained on the
		! maintain line freight screen.
		!Change 006
		!IF ((#SYS_TM_IN_USE = #YES) AND (#AR_FREIGHT_IN_USE <> #YES))
		!Change 06 End
			IF (SALES_ORDER_LINES(SYS_FREIGHT_MODE) <> "")
				FIND IN SYS_FREIGHT_MODES &
					/LOCK=NONE &
					/WITH=COMPANY_CODE = #COMPANY_CODE &
					/WITH=SYS_FREIGHT_MODE = SALES_ORDER_LINES(SYS_FREIGHT_MODE)

				IF (%STATUS = %FAILURE)
					MESSAGE/IDENTIFIER/BELL/WAIT P_93074
					GOTO SYS_FREIGHT_MODE
				END_IF
			END_IF
		!Change 006
		!END_IF
		!Change 06 End
	END_BLOCK

	OUTPUT_BLOCK DISP_FREIGHT_MODE_DESC /ROW=10 /COL=37 &
			/SOURCE=(SYS_FREIGHT_MODES(DESCRIPTION)) &
			!Change 006
			!/USE_IF=((#SYS_TM_IN_USE = #YES) &
			!	AND (#AR_FREIGHT_IN_USE <> #YES))
			!Change 06 End

	BEGIN_BLOCK /DISPLAY_ONLY SALES_COMM_DES_DISP
		FIND IN SALES_COMMISSION_CODES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=SALES_COMMISSION_CODE=SALES_ORDER_LINES(SALES_COMMISSION_CODE)
	END_BLOCK

	BEGIN_BLOCK SALES_COMMISSION_CODE
		INPUT_BLOCK  /ROW=11 /COL=27 &
			/PROMPT=(FIELD_PROMPT(SALES_COMMISSION_CODE)) &
			/TARGET=SALES_ORDER_LINES(SALES_COMMISSION_CODE) &
			/LOV=SALES_COMMISSION_CODES(SALES_COMMISSION_CODE,DESCRIPTION) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE

		IF (SALES_ORDER_LINES(SALES_COMMISSION_CODE) <> "")
			FIND IN SALES_COMMISSION_CODES &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=SALES_COMMISSION_CODE=SALES_ORDER_LINES(SALES_COMMISSION_CODE)

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_22204
				GOTO SALES_COMMISSION_CODE
			END_IF
		END_IF
	END_BLOCK

	OUTPUT_BLOCK SALES_COMM_DESC /ROW=11 /COL=37 &
			/SOURCE=(SALES_COMMISSION_CODES(DESCRIPTION))

	BEGIN_BLOCK /DISPLAY_ONLY PROD_GROUP_DESC_DISP
		FIND IN PRODUCT_GROUPS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PRODUCT_GROUP=SALES_ORDER_LINES(PRODUCT_GROUP)
		#ORIGINAL_PRODUCT_GROUP = SALES_ORDER_LINES(PRODUCT_GROUP)
	END_BLOCK

	BEGIN_BLOCK PRODUCT_GROUP
		INPUT_BLOCK  /ROW=12 /COL=27 &
			/PROMPT=(FIELD_PROMPT(PRODUCT_GROUP)) &
			/TARGET=SALES_ORDER_LINES(PRODUCT_GROUP) &
			/LOV=PRODUCT_GROUPS(PRODUCT_GROUP,CODE_DESCRIPTION) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE

		IF (SALES_ORDER_LINES(PRODUCT_GROUP) <> "")
			FIND IN PRODUCT_GROUPS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=PRODUCT_GROUP=SALES_ORDER_LINES(PRODUCT_GROUP)

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_22201
				GOTO PRODUCT_GROUP
			END_IF
		END_IF
		IF ( #ORIGINAL_PRODUCT_GROUP <> SALES_ORDER_LINES(PRODUCT_GROUP) )
			#ASSOCIATION_VALUE_CHANGE = #YES
		END_IF
	END_BLOCK

	OUTPUT_BLOCK PROD_GROUP_DESC /ROW=12 /COL=37 &
			/SOURCE=(PRODUCT_GROUPS(CODE_DESCRIPTION))

	BEGIN_BLOCK /DISPLAY_ONLY SALESPERSON_DESC_DISP
		FIND IN SALESPERSONS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=SALESPERSON_CODE=SALES_ORDER_LINES(SALESPERSON_CODE)
	END_BLOCK

	BEGIN_BLOCK SALESPERSON_CODE
		INPUT_BLOCK  /ROW=13 /COL=27 &
			/PROMPT=(FIELD_PROMPT(SALESPERSON_CODE)) &
			/TARGET=SALES_ORDER_LINES(SALESPERSON_CODE) &
			/LOV=SALESPERSONS(SALESPERSON_CODE,CODE_DESCRIPTION) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE

		IF (SALES_ORDER_LINES(SALESPERSON_CODE) <> "")
			FIND IN SALESPERSONS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=SALESPERSON_CODE=SALES_ORDER_LINES(SALESPERSON_CODE)

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_22205
				GOTO SALESPERSON_CODE
			END_IF
		END_IF
	END_BLOCK

	OUTPUT_BLOCK SALESPERSON_DESC /ROW=13 /COL=37 &
			/SOURCE=(SALESPERSONS(CODE_DESCRIPTION))

	BEGIN_BLOCK /DISPLAY_ONLY LOCATION_DESC_DISP
		FIND IN LOCATIONS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=LOCATION=SALES_ORDER_LINES(LOCATION)
	END_BLOCK

	BEGIN_BLOCK LOCATION
		INPUT_BLOCK  /ROW=14 /COL=27 &
			/PROMPT=(FIELD_PROMPT(LOCATION)) &
			/TARGET=SALES_ORDER_LINES(LOCATION) &
			/LOV=LOCATIONS(LOCATION,CODE_DESCRIPTION) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE

		IF (SALES_ORDER_LINES(LOCATION) <> "")
			FIND IN LOCATIONS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=LOCATION=SALES_ORDER_LINES(LOCATION)

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_22196
				GOTO LOCATION
			END_IF
		END_IF
	END_BLOCK

	OUTPUT_BLOCK LOCATION_DESC /ROW=14 /COL=37 &
			/SOURCE=(LOCATIONS(CODE_DESCRIPTION))

	BEGIN_BLOCK /DISPLAY_ONLY CUST_GROUP_DESC_DISP
		FIND IN CUSTOMER_GROUPS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=CUSTOMER_GROUP=SALES_ORDER_LINES(SALES_ANALYSIS_GROUP)
	END_BLOCK

	BEGIN_BLOCK SALES_ANALYSIS_GROUP
		INPUT_BLOCK  /ROW=15 /COL=27 &
			/PROMPT=(FIELD_PROMPT(SALES_ANALYSIS_GROUP)) &
			/TARGET=SALES_ORDER_LINES(SALES_ANALYSIS_GROUP) &
			/LOV=CUSTOMER_GROUPS(CUSTOMER_GROUP,CODE_DESCRIPTION) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE

		IF (SALES_ORDER_LINES(SALES_ANALYSIS_GROUP) <> "")
			FIND IN CUSTOMER_GROUPS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=CUSTOMER_GROUP=SALES_ORDER_LINES(SALES_ANALYSIS_GROUP)

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_22202
				GOTO SALES_ANALYSIS_GROUP
			END_IF
		END_IF
	END_BLOCK

	OUTPUT_BLOCK CUST_GROUP_DESC /ROW=15 /COL=37 &
			/SOURCE=(CUSTOMER_GROUPS(CODE_DESCRIPTION))

	BEGIN_BLOCK /DISPLAY_ONLY COST_CENTER_DESC_DISP
		FIND IN COST_CENTERS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=SOURCE_MODULE=(PARAMETER("LOCAL_SOURCE_MODULE")) &
			/WITH=COST_CENTER=SALES_ORDER_LINES(COST_CENTER)
	END_BLOCK

	BEGIN_BLOCK COST_CENTER
		INPUT_BLOCK  /ROW=16 /COL=27 &
			/PROMPT=(FIELD_PROMPT(COST_CENTER)) &
			/TARGET=SALES_ORDER_LINES(COST_CENTER) &
			/LOV=COST_CENTERS(COST_CENTER,DESCRIPTION) &
			/LOV_SORTED_BY=(COST_CENTER) &
 			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=SOURCE_MODULE=(PARAMETER("LOCAL_SOURCE_MODULE"))

		IF (SALES_ORDER_LINES(COST_CENTER) <> "")
			FIND IN COST_CENTERS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=SOURCE_MODULE=(PARAMETER("LOCAL_SOURCE_MODULE")) &
				/WITH=COST_CENTER=SALES_ORDER_LINES(COST_CENTER)

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_00347
				GOTO COST_CENTER
			END_IF
		END_IF
	END_BLOCK

	OUTPUT_BLOCK COST_CENTER_DESC /ROW=16 /COL=37 &
			/SOURCE=(COST_CENTERS(DESCRIPTION))

	BEGIN_BLOCK SHOW_ADDRESS_CODE
		#DEL_ADDR_CODE = SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE)

		OUTPUT_BLOCK /ROW=1 /COL=11 &
				/PROMPT=(MESSAGE("P_00318")) &
				/SOURCE=SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE)
	END_BLOCK

	BEGIN_BLOCK /DISPLAY_ONLY BROKER_CODE_DISP
		FIND IN BROKER_CODES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=BROKER_CODE=SALES_ORDER_LINES(BROKER_CODE)
	END_BLOCK

	BEGIN_BLOCK BROKER_CODE
		INPUT_BLOCK  /ROW=17 /COL=27 &
			/PROMPT=(FIELD_PROMPT(BROKER_CODE)) &
			/TARGET=SALES_ORDER_LINES(BROKER_CODE) &
			/LOV=BROKER_CODES(BROKER_CODE,CODE_DESCRIPTION) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE

		IF ( SALES_ORDER_LINES(BROKER_CODE) <> ""  )
			FIND IN BROKER_CODES &
				/LOCK=NONE &
				/WITH=COMPANY_CODE= #COMPANY_CODE &
				/WITH=BROKER_CODE=SALES_ORDER_LINES(BROKER_CODE)
				IF (%STATUS = %FAILURE)
					MESSAGE/IDENTIFIER/BELL/WAIT P_13823, SALES_ORDER_LINES(BROKER_CODE)
					GOTO BROKER_CODE
				END_IF
		END_IF
	END_BLOCK

	OUTPUT_BLOCK BROKER_CODE_DESC /ROW=17 /COL=39 &
			/SOURCE=(BROKER_CODES(CODE_DESCRIPTION)) 

	INPUT_BLOCK PART_PRINT /ROW=18 /COL=27 &
			/PROMPT=(FIELD_PROMPT(SYS_PRINT_PART_DETAIL)) &
			/SOURCE_IF=(SALES_ORDER_LINES(SYS_PRINT_PART_DETAIL)=""),(#NO) &
			/SOURCE=(SALES_ORDER_LINES(SYS_PRINT_PART_DETAIL)) &
			/TARGET=SALES_ORDER_LINES(SYS_PRINT_PART_DETAIL) &
			/USE_IF=(SALES_ORDER_LINES(ORDER_LINE_TYPE) <> #SO_LINE_TYPE_NONSTOCK)

	YESNO_BLOCK CONFIRM /ROW=18 /COL=73 &
			/PROMPT=(MESSAGE("P_00149")) &
			/FAILURE=(GOTO DELIVERY_ADDRESS_CODE)

	BEGIN_BLOCK RESET_PROMOTIONS
		FIND IN TP_PROMOTION_CUSTOMER_INPUT_VT
		IF ( TP_PROMOTION_CUSTOMER_INPUT_VT(ADDRESS_CODE) <> SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE) &
			OR TP_PROMOTION_CUSTOMER_INPUT_VT(BROKER_CODE) <> SALES_ORDER_LINES(BROKER_CODE) &
			OR TP_PROMOTION_CUSTOMER_INPUT_VT(SALESPERSON_CODE) <> SALES_ORDER_LINES(SALESPERSON_CODE) &
			OR TP_PROMOTION_CUSTOMER_INPUT_VT(CUSTOMER_GROUP) <> SALES_ORDER_LINES(SALES_ANALYSIS_GROUP) &
			OR TP_PROMOTION_CUSTOMER_INPUT_VT(LOCATION) <> SALES_ORDER_LINES(LOCATION) )

			#ASSOCIATION_VALUE_CHANGE = #YES
			TP_PROMOTION_CUSTOMER_INPUT_VT(ADDRESS_CODE)		= SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE)
			TP_PROMOTION_CUSTOMER_INPUT_VT(FINAL_ADDRESS_CODE)  = #HEADER_FINAL_ADDRESS_CODE
			TP_PROMOTION_CUSTOMER_INPUT_VT(BROKER_CODE)		    = SALES_ORDER_LINES(BROKER_CODE)
			TP_PROMOTION_CUSTOMER_INPUT_VT(SALESPERSON_CODE)	= SALES_ORDER_LINES(SALESPERSON_CODE)
			TP_PROMOTION_CUSTOMER_INPUT_VT(LOCATION)			= SALES_ORDER_LINES(LOCATION)
			TP_PROMOTION_CUSTOMER_INPUT_VT(CUSTOMER_GROUP)		= SALES_ORDER_LINES(SALES_ANALYSIS_GROUP)

			PERFORM "GEMTP:TP_L_PROMOTION_DISCOUNTS" ( "INITIALIZE", #R_STATUS, #R_MSG, #DMMY1, #DMMY2, #DMMY3 )

		END_IF
	END_BLOCK

	BEGIN_BLOCK RESET_CODES
		IF ( #ASSOCIATION_VALUE_CHANGE = #YES )
			#OPT = "DISCOUNTS"
		ELSE
			#OPT = "MENU"
		END_IF

		IF (#OLD_ADDRESS_CODE <> SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE))

			#ADDRESS_CODE = SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE)
			#OLD_TAXABLE	    = #TAXABLE

			PERFORM LOAD_LINE_CODES_FROM_ADDRESSES

			#LINE_DIST_BOD_CODE = CUSTOMER_ADDRESSES(SYS_BOD_CODE)
			#DEF_ORDER_COUNTRY = CUSTOMER_ADDRESSES(SYS_COUNTRY)
			#DEF_ORDER_DIST_ZONE = CUSTOMER_ADDRESSES(SYS_DISTRIBUTION_ZONE)

			PERFORM GET_DIST_ZONE_DETAILS ( &
					#DEF_ORDER_COUNTRY, &
					#DEF_ORDER_DIST_ZONE)

			IF (%STATUS = %FAILURE)
				IF ((#SYS_TM_IN_USE = #YES) OR (#AR_FREIGHT_IN_USE = #YES))
					MESSAGE/IDENTIFIER/BELL/WAIT P_93564
					IF (#SYS_TM_IN_USE = #YES)
						! Can't use TM for this delivery address
						MESSAGE/IDENTIFIER/BELL/WAIT P_93567
					ELSE
						! Can't use AR freight for this delivery address
						MESSAGE/IDENTIFIER/BELL/WAIT P_93569
					END_IF
				END_IF
			ELSE
				IF (#LINE_DIST_BOD_CODE = "")
					IF (#ADDR_DIST_BOD_CODE <> "")
						! only if the Customer Addresses BOD code is blank and
						! the distribution zone bill of distribution is non-blank
						! use the distribution zone BOD code as the default BOD
						! code for the order.
						#LINE_DIST_BOD_CODE = #ADDR_DIST_BOD_CODE
					ELSE
						#LINE_DIST_BOD_CODE = #DEF_BOD_CODE
					END_IF
				END_IF
			END_IF

			IF (#AR_FREIGHT_IN_USE = #YES)

				#RE_CALC_FREIGHT = #YES
				#LINE_PRICE_FREIGHT_INCLUSIVE = #NO

				FIND IN PRICE_CODES &
					/LOCK=NONE &
					/WITH=COMPANY_CODE = #COMPANY_CODE &
					/WITH=DIVISION = #DIVISION &
					/WITH=PRICE_CODE = #PRICE_CODE

				IF (%STATUS <> %FAILURE)
					#LINE_PRICE_FREIGHT_INCLUSIVE = PRICE_CODES(SOP_FREIGHT_INCLUSIVE)
					#LINE_PRICE_CODE_DESCRIPTION = PRICE_CODES(DESCRIPTION)
				END_IF
				IF (#LINE_PRICE_FREIGHT_INCLUSIVE = "")
					#LINE_PRICE_FREIGHT_INCLUSIVE = #NO
				END_IF

				! Re-evaluate DorC indicator
				PERFORM GET_FREIGHT_DORC_IND_VALUE ( &
						#LINE_PRICE_FREIGHT_INCLUSIVE, &
						#LINE_CUST_PAYS_FREIGHT, &
						(#WAREHOUSED_FLAG), &
						SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR), &
						#FREIGHT_PREFIX, &
						#LINE_FREIGHT_APPLICABLE)
			END_IF

			IF (#COMPANY_EC_REPORT_TYPE <> "")
				PERFORM GET_CUSTOMER_STATE

				#LINE_EC_REPORT_TYPE = #EC_REPORT_TYPE

				IF (#ORIG_LINE_EC_REPORT_TYPE <> #LINE_EC_REPORT_TYPE)
					IF (#ORIG_LINE_EC_REPORT_TYPE = "")
						#OPT="EC_REP"
						#EC_MODE = "A"
						PERFORM CLEAR_EC_VARIABLES
						#PART_CODE = SALES_ORDER_LINES(PART_CODE)
						IF (#SALES_ORDER_QTY="") #SALES_ORDER_QTY=SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)
						#EC_TRANSACTION_TYPE = CUSTOMER_ADDRESSES(SYS_EC_TRANSACTION_TYPE)
						#EC_MODE_TRANSPORT = CUSTOMER_ADDRESSES(SYS_EC_MODE_OF_TRANSPORT)
						#EC_DELIVERY_TERMS = CUSTOMER_ADDRESSES(SYS_EC_DELIVERY_TERMS)
						SALES_ORDER_LINES(SYS_EC_STATISTICS_APPLICABLE) = ""
						#EC_STAT_FACTOR = CUSTOMER_ADDRESSES(SYS_EC_FACTOR)
					ELSE
						MESSAGE/IDENTIFIER/BELL/WAIT P_02052
						SALES_ORDER_LINES(SYS_EC_STATISTICS_APPLICABLE) = ""
						SALES_ORDER_LINES(SYS_EC_PROCESSED_INDICATOR)   = ""
						SALES_ORDER_LINES(SYS_EC_TRANSACTION_TYPE)      = ""
						SALES_ORDER_LINES(SYS_TARIFF_CODE)      = ""
						SALES_ORDER_LINES(SYS_COUNTRY_OF_ORIGIN) = ""
						SALES_ORDER_LINES(SYS_EC_SUPP_UNIT_QTY) = ""
						SALES_ORDER_LINES(SYS_EC_WEIGHT)	= ""
						SALES_ORDER_LINES(SYS_EC_MODE_OF_TRANSPORT) = ""
						SALES_ORDER_LINES(SYS_EC_DELIVERY_TERMS) = ""
						SALES_ORDER_LINES(SYS_EC_STATISTICAL_VALUE) = ""
						SALES_ORDER_LINES(SYS_EC_ANALYSIS_1) = ""
						SALES_ORDER_LINES(SYS_EC_ANALYSIS_2) = ""
						SALES_ORDER_LINES(SYS_EC_ANALYSIS_3) = ""
						SALES_ORDER_LINES(SYS_EC_ANALYSIS_4) = ""
						SALES_ORDER_LINES(SYS_EC_ANALYSIS_5) = ""
					END_IF
				END_IF
			END_IF

			IF (#CUSTOMER_TAX_CODE <> SALES_ORDER_LINES(CUSTOMER_TAX_CODE) OR &
				#OLD_TAXABLE <> #TAXABLE)
				#OPT = "TAX"
			END_IF
		END_IF
			! Determine if the sales tax needs recalculating
	END_BLOCK
END_FORM


PROCEDURE_FORM LOAD_LINE_CODES_FROM_ADDRESSES

	BEGIN_BLOCK GET_RECORD
		FIND IN CUSTOMER_ADDRESSES &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=#CUSTOMER_NUMBER &
			/WITH=ADDRESS_CODE=#ADDRESS_CODE

		! this find does not have a /lock=none on purpose!  This is
		! because you can add a customer address using the F17 key
		! and you need to be able to see the address within the same
		! transaction.  PLEASE do not add a /lock=none to these finds.

		IF (CUSTOMER_ADDRESSES(PRICE_CODE) <> "")
			#PRICE_CODE = CUSTOMER_ADDRESSES(PRICE_CODE)
		ELSE
			#PRICE_CODE = #CUST_PRICE_CODE
		END_IF

		IF (%STATUS = %FAILURE) EXIT

		IF (#MAIN_OPT <> "MODIFY")
			SALES_ORDER_LINES(LOCATION)			= CUSTOMER_ADDRESSES(LOCATION)
			SALES_ORDER_LINES(BROKER_CODE)		= CUSTOMER_ADDRESSES(BROKER_CODE)
			SALES_ORDER_LINES(SALESPERSON_CODE)	= CUSTOMER_ADDRESSES(SALESPERSON_CODE)
			SALES_ORDER_LINES(SALES_ANALYSIS_GROUP) = CUSTOMER_ADDRESSES(CUSTOMER_GROUP)

			FIND IN SALESPERSONS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=SALESPERSON_CODE=SALES_ORDER_LINES(SALESPERSON_CODE)

			IF (%STATUS = %SUCCESS)
				SALES_ORDER_LINES(SALES_COMMISSION_CODE)=SALESPERSONS(SALES_COMMISSION_CODE)
			END_IF
		END_IF

		#CUSTOMER_TAX_CODE	  = CUSTOMER_ADDRESSES(TAX_CODE)
		#TAXABLE		= CUSTOMER_ADDRESSES(SALES_TAXABLE)

		IF (#DIV_TAX_ON_CASH = #YES AND #CO_TAX_ON_CASH = #YES AND CUSTOMER_ADDRESSES(SYS_TAX_ON_CASH) =#YES)
			#TAX_ON_CASH = #YES
		ELSE
			#TAX_ON_CASH = #NO
		END_IF

		IF (#TAXABLE = #YES AND #PART_TAXABLE <> #NO)
			IF (#WAREHOUSED_FLAG = #YES)
				#PRODUCT_TAX_CODE = PRODUCT_WAREHOUSE(PRODUCT_TAX_CODE)
			ELSE
				#PRODUCT_TAX_CODE = PRODUCT_MASTER(PRODUCT_TAX_CODE)
			END_IF

			IF (#PRODUCT_TAX_CODE = "")
				#PRODUCT_TAX_CODE  = #DEF_PART_TAX_CODE
			END_IF
			IF (#CUSTOMER_TAX_CODE = "")
				#CUSTOMER_TAX_CODE = #DEF_CUST_TAX_CODE
			END_IF

			PERFORM SETUP_TAX_CONTROL_VT

			LB_TAX_CONTROL_VT(PART_CODE) = SALES_ORDER_LINES(PART_CODE)
			LB_TAX_CONTROL_VT(WAREHOUSE) = SALES_ORDER_LINES(WAREHOUSE)
			LB_TAX_CONTROL_VT(CUSTOMER_NUMBER) = SALES_ORDER_HEADERS(CUSTOMER_NUMBER)
			LB_TAX_CONTROL_VT(INVOICE_ADDRESS_CODE) = SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)
			LB_TAX_CONTROL_VT(DELIVERY_ADDRESS_CODE) = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
			LB_TAX_CONTROL_VT(TRANSACTION_NUMBER) = SALES_ORDER_HEADERS(ORDER_NUMBER)
			LB_TAX_CONTROL_VT(TRANSACTION_TYPE) = PARAMETER("TTYPE_SO")
			LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE) = #PRODUCT_TAX_CODE
			LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE) = #CUSTOMER_TAX_CODE
			LB_TAX_CONTROL_VT(ORDER_LINE_TYPE) = ""
			LB_TAX_CONTROL_VT(FORM_TITLE) = ""
			LB_TAX_CONTROL_VT(PRICE_ORDER_QTY) = #PRICE_ORDER_QTY
			LB_TAX_CONTROL_VT(SALES_PRICE) = #PRICE
			LB_TAX_CONTROL_VT(LINE_DISCOUNT) = #LINE_DISCOUNT

	        PERFORM "GEMLB:LB_L_TAX_CONTROL" ( "C", #ERROR_OCCURRED, #ERROR_MESSAGE )

			IF ( #ERROR_OCCURRED ) ERROR/TEXT_ONLY #ERROR_MESSAGE

			FIND IN LB_TAX_CONTROL_VT

			#LINE_TAX = LB_TAX_CONTROL_VT(TOTAL_TAX_AMOUNT)
			#PRODUCT_TAX_CODE = LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE)
			#CUSTOMER_TAX_CODE = LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE)
			#TAX_ON_CASH = LB_TAX_CONTROL_VT(TAX_ON_CASH)

!			PERFORM "GEMLB:LB_TAX_ANALYSIS" &
!				("C", &
!				 #TAX_FLAG, &
!				 #PRODUCT_TAX_CODE, &
!				 #CUSTOMER_TAX_CODE, &
!				 (#LINE_VALUE-#LINE_DISCOUNT), &
!				 #COMPANY_CODE, &
!				 #CURRENCY_DECIMAL, &
!				 #CURRENCY_MASK, &
!				 (PARAMETER("MODULE_AR")), &
!				 "", &
!				 (SALES_ORDER_LINES(PART_CODE)), &
!				 (SALES_ORDER_LINES(WAREHOUSE)), &
!				 "", &
!				 "", &
!				 "", &
!				 #TAX_ON_CASH, &
!				 #DIVISION, &
!				 #LINE_TAX)
		END_IF
	END_BLOCK

END_FORM


FORM COMMENTS /ROW=17 /COL=7 /HEIGHT=7 /WIDTH=69 &
	/TITLE=(MESSAGE("P_93559")) &

	BEGIN_BLOCK MAINT_AND_SET_FLAG
		PERFORM ORDER_LINE_COMMENTS

! 		Detail Description field is no longer to be used for order
!		line comments - the structured order line comments table will
!		be used instead.

		FIND IN SOP_ORDER_LINE_COMMENTS &
			/LOCK=WRITE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=DIVISION = #DIVISION &
			/WITH=ORDER_NUMBER = #ORDER_NUMBER &
			/WITH=ORDER_LINE_NUMBER = SALES_ORDER_LINES(ORDER_LINE_NUMBER)

		IF (%STATUS <> %FAILURE)
			#COMMENTS=#YES
		ELSE
			#COMMENTS=#NO
		END_IF

		#OPT="MENU"
	END_BLOCK

END_FORM


TABLE_FORM ORDER_LINE_COMMENTS /ROW=17 /COL=7 /HEIGHT=7 /WIDTH=69 &
	/TABLE=SOP_ORDER_LINE_COMMENTS &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION=#DIVISION &
	/WITH=ORDER_NUMBER=#ORDER_NUMBER &
	/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER) &
	/SEQUENCE=SOP_ORDER_LINE_COMMENT_SEQ &
	/SEQUENCE_INCREMENT=(10) &
	/LOCK=WRITE

	BEGIN_BLOCK SETUP
		#LINE_COMMENTS_EDIT_MODE = %EDIT_MODE
		IF (#LINE_COMMENTS_EDIT_MODE = %ADD)
			SOP_ORDER_LINE_COMMENTS(COMPANY_CODE) = #COMPANY_CODE
			SOP_ORDER_LINE_COMMENTS(DIVISION) = #DIVISION
			SOP_ORDER_LINE_COMMENTS(ORDER_NUMBER) = #ORDER_NUMBER
			SOP_ORDER_LINE_COMMENTS(ORDER_LINE_NUMBER) = SALES_ORDER_LINES(ORDER_LINE_NUMBER)
		END_IF
	END_BLOCK

	INPUT_BLOCK SEQUENCE /ROW=1 /COL=2 /NEW &
			/DOMAIN=SOP_ORDER_LINE_COMMENTS &
			/SOURCE=(SOP_ORDER_LINE_COMMENTS(SOP_ORDER_LINE_COMMENT_SEQ)) &
			/TARGET=SOP_ORDER_LINE_COMMENTS(SOP_ORDER_LINE_COMMENT_SEQ) &
			/HEADING=FIELD_HEADING(SOP_ORDER_LINE_COMMENTS,SOP_ORDER_LINE_COMMENT_SEQ) &

	INPUT_BLOCK TM_COMMENT /ROW=1 /COL=7 &
			/TARGET=SOP_ORDER_LINE_COMMENTS(SOP_COMMENT) &
			/USING=REQUIRED &
			/HEADING=FIELD_HEADING(SOP_ORDER_LINE_COMMENTS,SOP_COMMENT)

	INPUT_BLOCK SOP_PRINT_ON_ORDER_ACK /ROW=1 /COL=49 /LEN=3 &
			/TARGET=SOP_ORDER_LINE_COMMENTS(SOP_PRINT_ON_ORDER_ACK) &
			/USING=REQUIRED &
			/HEADING=FIELD_HEADING(SOP_ORDER_LINE_COMMENTS,SOP_PRINT_ON_ORDER_ACK)

	INPUT_BLOCK SOP_PRINT_ON_SHIP_LIST /ROW=1 /COL=53 /LEN=3 &
			/TARGET=SOP_ORDER_LINE_COMMENTS(SOP_PRINT_ON_SHIP_LIST) &
			/USING=REQUIRED &
			/HEADING=FIELD_HEADING(SOP_ORDER_LINE_COMMENTS,SOP_PRINT_ON_SHIP_LIST)

	INPUT_BLOCK SOP_PRINT_ON_CON_NOTE /ROW=1 /COL=57 /LEN=3 &
			/TARGET=SOP_ORDER_LINE_COMMENTS(SOP_PRINT_ON_CON_NOTE) &
			/USING=REQUIRED &
			/HEADING=FIELD_HEADING(SOP_ORDER_LINE_COMMENTS,SOP_PRINT_ON_CON_NOTE)

	INPUT_BLOCK SOP_PRINT_ON_INVOICE /ROW=1 /COL=61 /LEN=3 &
			/TARGET=SOP_ORDER_LINE_COMMENTS(SOP_PRINT_ON_INVOICE) &
			/USING=REQUIRED &
			/HEADING=FIELD_HEADING(SOP_ORDER_LINE_COMMENTS,SOP_PRINT_ON_INVOICE)

	BEGIN_BLOCK CONTROL_INFO
		IF (#LINE_COMMENTS_EDIT_MODE = %ADD)
			SOP_ORDER_LINE_COMMENTS(USERNAME) = %USERNAME
			SOP_ORDER_LINE_COMMENTS(SYSTEM_DATE) = %NOW
		END_IF
	END_BLOCK

END_FORM


FORM ADDITIONAL_DESCRIPTION /ROW=10 /COL=8 /HEIGHT=14 /WIDTH=32 &
	/TITLE=(MESSAGE("P_00036"))


	INPUT_BLOCK DETAIL_DESCRIPTION /ROW=2 /COL=2 &
			/TARGET=SALES_ORDER_LINES(SALES_ORDER_DETAIL_DESCRIPTION)

	BEGIN_BLOCK SETUP_OPT
		IF (SALES_ORDER_LINES(SALES_ORDER_DETAIL_DESCRIPTION) <> "")
			#ADD_DESC=#YES
		ELSE
			#ADD_DESC=#NO
		END_IF

		#OPT="DESC"
	END_BLOCK

END_FORM


FORM MAINTAIN_STOCK_LINE /ROW=8 /COL=2 /HEIGHT=16 /WIDTH=78 &
	/TITLE=(MESSAGE("P_01192"))

	BEGIN_BLOCK INITIALIZE

		#FINAL_ADDR_CHANGE_FLAG = #NO
		
		IF ((#EDIT_MODE <> "ADD") OR (#DO_LINE_DETAILS = #YES))

			DISPLAY DEFAULTS

			IF (#WAREHOUSED_FLAG = #YES)
				PERFORM VALIDATE_REQUESTED_DATE
				PERFORM STOCK_AVAILABILITY
			END_IF

			GOTO LINE_MENU
		END_IF
	END_BLOCK

	BEGIN_BLOCK /DISPLAY_ONLY COMMENTS_SETUP
		FIND IN SOP_ORDER_LINE_COMMENTS &
			/LOCK=WRITE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=ORDER_NUMBER=#ORDER_NUMBER &
			/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER)

		IF (%STATUS <> %FAILURE)
			#COMMENTS=#YES
		ELSE
			#COMMENTS=#NO
		END_IF
	END_BLOCK

	BEGIN_BLOCK /DISPLAY_ONLY ADD_DESC_SETUP
		IF (SALES_ORDER_LINES(SALES_ORDER_DETAIL_DESCRIPTION) <> "")
			#ADD_DESC=#YES
		ELSE
			#ADD_DESC=#NO
		END_IF
	END_BLOCK
	
	BEGIN_BLOCK PART_CODE
		OUTPUT_BLOCK PART_CODE_OUT /ROW=1 /COL=21 &
				/PROMPT=(FIELD_PROMPT(PART_CODE)) &
				/SOURCE=#PART_CODE &
				/USING=SALES_ORDER_LINES(PART_CODE) &
				/USE_IF=(#TEMP_PART_CODE<>'' OR #ORDER_BY_CPC = #SOE_BY_PART OR #EDIT_MODE="MODIFY")

		INPUT_BLOCK PART_CODE_IN /ROW=1 /COL=21 &
					/PROMPT=(FIELD_PROMPT(PART_CODE)) &
					/TARGET=#PART_CODE &
					/USING=SALES_ORDER_LINES(PART_CODE),REQUIRED &					
					/LOV=PRODUCT_MASTER(PART_CODE,PART_DESC_1) &					
					/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &					
					/LOV_WITH=ACTIVATION_STATUS =(PARAMETER("STATUS_ACTIVE")) &
					/USE_IF=(#TEMP_PART_CODE='' AND #ORDER_BY_CPC <>#SOE_BY_PART AND #EDIT_MODE="ADD" )	
	END_BLOCK
				
	BEGIN_BLOCK CHECK_PART 
		PERFORM VALIDATE_PRODUCT
		IF (%STATUS = %FAILURE) 			
			GOTO PART_CODE_IN		
		END_IF
				
		IF (#ORDER_BY_CPC <> #SOE_BY_PART)	
			FIND IN PART_MASTER_BY_CUSTOMER &
					/LOCK=NONE &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=DIVISION=#DIVISION &
					/WITH=CUSTOMER_NUMBER=#CUSTOMER_NUMBER &
					/WITH=PART_CODE=#PART_CODE &
					/WITH=CUSTOMERS_PART_CODE=SALES_ORDER_LINES(CUSTOMERS_PART_CODE)
					
			IF (%STATUS <> %FAILURE)				
				#CPC_DESC=PART_MASTER_BY_CUSTOMER(DESCRIPTION)
			ELSE				
				#CPC_DESC=""
			END_IF
			
			OUTPUT_BLOCK CUSTOMERS_PART_CODE /ROW=3 /COL=21 &
					/PROMPT=(MESSAGE("P_2OS_TRAN_BALANCE_3")) &
					/SOURCE=SALES_ORDER_LINES(CUSTOMERS_PART_CODE) &
					/USING=SALES_ORDER_LINES(CUSTOMERS_PART_CODE) &
					/USE_IF=(#ORDER_BY_CPC <>#SOE_BY_PART)
				
			OUTPUT_BLOCK CUSTOMERS_PART_DESC /ROW=3 /COL=42 /LEN=30 &				
					/SOURCE=#CPC_DESC &
					/USE_IF=(#ORDER_BY_CPC <>#SOE_BY_PART)
		END_IF
	END_BLOCK

	
	!Change 007
	OUTPUT_BLOCK SPEC_CODE /ROW=2 /COL=21 &
			/PROMPT=(FIELD_PROMPT(SPECIFICATION_CODE)) &
			/SOURCE=SALES_ORDER_LINES(SPECIFICATION_CODE) &
			/USING=SALES_ORDER_LINES(SPECIFICATION_CODE) 
	!End Change 007


	BEGIN_BLOCK VALIDATE_PRODUCT
		! Leave this call in to setup variables
		! and streams needed later		
		
		SALES_ORDER_LINES(PART_CODE) = #PART_CODE		
		
		IF (#PART_CODE <> #OLD_PART_CODE)
			#PART_CHANGE= #YES

			OUTPUT_BLOCK BLANK_PACK_UOM /ROW=7 /COL=21 &
				/PROMPT = MESSAGE("P_90703") &
				/SOURCE="    " &
				/USE_IF=(#IC_PACKAGED_PRODUCT=#YES)

			#ZERO_VALUE = 0

			OUTPUT_BLOCK BLANK_PACK_QTY /ROW=7 /COL=47 /LEN=14 &
				/PROMPT = (FIELD_PROMPT(IC_PACK_QUANTITY)) &
				/SOURCE=#ZERO_VALUE &
				/USE_IF=(#IC_PACKAGED_PRODUCT=#YES)

			DISPLAY DEFAULTS

! 			IF (#WAREHOUSE <> "")
! 				PERFORM STOCK_AVAILABILITY
! 			END_IF
		END_IF
	END_BLOCK

	OUTPUT_BLOCK PART_DESC_1 /ROW=1 /COL=37 &
			/SOURCE=(PRODUCT_MASTER(PART_DESC_1))

	OUTPUT_BLOCK PART_DESC_2 /ROW=2 /COL=37 &
			/SOURCE=(PRODUCT_MASTER(PART_DESC_2))

	OUTPUT_BLOCK DISP_AR_FREIGHT_PREFIX /ROW=11 /COL=4 /LEN=9 &
			/ATTRIBUTES=NONE &
			/SOURCE=(#FREIGHT_PREFIX)

	OUTPUT_BLOCK DISP_AR_FREIGHT_PROMPT /ROW=12 /COL=6 /LEN=7 &
			/ATTRIBUTES=NONE &
			/SOURCE=(FIELD_SHORT_PROMPT(FREIGHT)) &
			/USE_IF=(#LINE_FREIGHT_APPLICABLE = #YES)

	OUTPUT_BLOCK DISP_AR_FREIGHT_VALUE /ROW=12 /COL=15 /LEN=(#CURRENCY_LEN) &
			/SOURCE=(SALES_ORDER_LINES(FREIGHT)) &
			/OUTPUT_MASK=#CURRENCY_MASK &
			/USE_IF=(#LINE_FREIGHT_APPLICABLE = #YES)

	!Change 003 - DBM - 3-9-2007
	BEGIN_BLOCK CREATE_MINBAL_RECORD
		PERFORM COPY_MINBAL_RECORD
	END_BLOCK
	!Change 003 End
	
	BEGIN_BLOCK WAREHOUSE

		IF ( #EDIT_MODE = "ADD" OR #COPY_REACH_CHECK_FALG = #YES) 
			PERFORM "GEMSOP:SOP_S_L_CONTROL_MAINTENANCE" JUDGMENT_SOP_CONTROLS (#COMPANY_CODE, &
																				#DIVISION, &
																				(#CUSTOMER_NUMBER), &
																				(#HEADER_FINAL_ADDRESS_CODE), &
																				#PART_CODE,"","","","", &
																				#ERROR_OCCURRED, #ERROR_MESSAGE,#SALES_REACH_RETURN_FLAG,#RESTRICT_MODE)
																				
			IF ( #ERROR_OCCURRED = "1")
				ERROR/TEXT_ONLY/BELL #ERROR_MESSAGE
			END_IF
			
			IF ( #SALES_REACH_RETURN_FLAG = #NO ) 
				PERFORM GET_FINAL_RETURN_MSG (#COMPANY_CODE,#DIVISION,#CUSTOMER_NUMBER,#HEADER_FINAL_ADDRESS_CODE,#RETURN_PARA_MSG)
				MESSAGE/IDENTIFIER/BELL P_37128
				MESSAGE/IDENTIFIER/BELL P_37118,#PART_CODE,#RETURN_PARA_MSG
			END_IF		
		END_IF

		IF (#WAREHOUSED_FLAG=#YES)

			FIND IN DESPATCH_NOTES &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=SALES_ORDER_LINES(COMPANY_CODE) &
				/WITH=DIVISION=SALES_ORDER_LINES(DIVISION) &
				/WITH=ORDER_NUMBER=SALES_ORDER_LINES(ORDER_NUMBER) &
				/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER)

			IF (%STATUS = %SUCCESS)
				GOTO LINE_REF
			END_IF

			INPUT_BLOCK /ROW=4 /COL=21 &
				/PROMPT=(MESSAGE("P_91457")) &
				/BACK=(GOTO PART_CODE) &
				/TARGET=#WAREHOUSE &
				/USING=SALES_ORDER_LINES(WAREHOUSE),REQUIRED &
				/LOV=WAREHOUSE_DESC(WAREHOUSE,WAREHOUSE_DESCRIPTION,QTY_AVAILABLE) &
				/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
				/LOV_WITH=PART_CODE=#PART_CODE &
				/LOV_WITH=IC_STATUS_CODE = (PARAMETER("IC_STATUS_QOH")) &
				/LOV_WITH=WAREHOUSE AMONG #ACCESSIBLE_WAREHOUSES &
				/LOV_SORTED_BY=(WAREHOUSE) &
				/LOV_REDUCED_TO=(WAREHOUSE)

			PERFORM VALIDATE_WAREHOUSE
			IF (%STATUS=%FAILURE)
				GOTO WAREHOUSE
			END_IF

			OUTPUT_BLOCK /ROW=4 /COL=24 &
				/SOURCE=(#WAREHOUSE_DESCRIPTION) &
				/USING=WAREHOUSE_CONTROLS(WAREHOUSE_DESCRIPTION)

			PERFORM VALIDATE_PRODUCT_WAREHOUSE
			IF (%STATUS=%FAILURE)
				EXIT (%EXIT)
			ELSE
				#SHIP_WAREHOUSE = #WAREHOUSE

				! This field needs to be set for Freight Calculation
				SALES_ORDER_LINES(WAREHOUSE) 	= #WAREHOUSE
			END_IF


			PERFORM INITIALIZE_CHARACTERISTICS

			FIND IN SOP_ORDER_CHARS_VT

			IF (%STATUS = %SUCCESS)
				IF (#SPEC_CODE_MANDATORY = #YES)
					PERFORM LOT_CHARACTERISTICS
				ELSE
					! gets spec code
					PERFORM BATCH_CHARACTERISTICS
				END_IF
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK LINE_CPANEL 
			PERFORM	 LINE_CPANEL ("",(SALES_ORDER_LINES(ORDER_LINE_TYPE)),#DIVISION,#PART_CODE,#WAREHOUSE)
	END_BLOCK 

	!INPUT_BLOCK LINE_REF /ROW=5 /COL=21 &
		!/PROMPT=(FIELD_SHORT_PROMPT(ORDER_LINE_REFERENCE)) &
		!/TARGET=SALES_ORDER_LINES(ORDER_LINE_REFERENCE)
	!Change 019
	INPUT_BLOCK LINE_REF /ROW=5 /COL=21 &
		/PROMPT=(FIELD_SHORT_PROMPT(ORDER_LINE_REFERENCE)) &
		/TARGET=SALES_ORDER_LINES(ORDER_LINE_REFERENCE) &
		/LOV=SALES_ORDER_LINES(ORDER_LINE_NUMBER) &
		/LOV_WITH=ORDER_NUMBER=SALES_ORDER_LINES(ORDER_NUMBER)&
		/USING=NUMERIC
	!End Change 019

	!Change 005 - If the part code is a charge (e.g. >=900000), then make the order line reference be required
	BEGIN_BLOCK CHECK_IF_REQUIRED 
		IF (SALES_ORDER_LINES(ORDER_LINE_REFERENCE)="" AND SALES_ORDER_LINES(PART_CODE)>="901000")
			ERROR /TEXT_ONLY "Line Reference is required for all non-finished goods."
			GOTO LINE_REF
		END_IF
	END_BLOCK
	!Change 005 End


	INPUT_BLOCK REQUESTED_DATE /ROW=4 /COL=47 &
		/PROMPT=#REQUESTED_DATE_PROMPT &
		/TARGET=#LINE_REQUESTED_DATE &
		/USING=SALES_ORDER_HEADERS(SYS_REQUESTED_DATE) &
		/INPUT_MASK=(#DEFAULT_DATE_MASK)

	BEGIN_BLOCK VALIDATE_REQUESTED_DATE
		PERFORM VALIDATE_REQUESTED_DATE
	END_BLOCK

	BEGIN_BLOCK EDIT_MODE
		IF (#EDIT_MODE = "MODIFY" AND &
			(#PART_CODE <> SALES_ORDER_LINES(PART_CODE) OR &
			#WAREHOUSE <> #OLD_WAREHOUSE))

			PERFORM MODIFICATION_NOTICE
			IF (%STATUS = %FAILURE)
				EXIT (%EXIT)
			END_IF

			#PART_CHANGE = #YES
		END_IF
			! If we are in modification mode and we have
			! changed the part or WH code  perform the modification
			! notice (which warns about pending changes to inventory
			! and then carries these out if OK. Set the part change
			! flag for later use when checking changes to prices etc.
		IF ((#EDIT_MODE = "ADD") AND (#LINE_EDIT_MODE = "MODIFY"))
			IF (#OPT= "LINE" AND &
				(#PART_CODE <> SALES_ORDER_LINES(PART_CODE) OR &
				 #WAREHOUSE <> #OLD_WAREHOUSE))

				PERFORM MODIFICATION_NOTICE
				IF (%STATUS = %FAILURE)
					EXIT (%EXIT)
				END_IF

				#PART_CHANGE = #YES
			END_IF
		END_IF
			! It is possible to still be in "ADD" mode (#EDIT_MODE="ADD")
			! and go to the line details, exit out to the popup menu and
			! then choose the "Line" menu option.  With the possibility of
			! changing the part or WH code, a check must be done for any
			! changes so the #PART_CHANGE flag can be set correctly.

		#OLD_PART_CODE_WAREHOUSED_FLAG = #WAREHOUSED_FLAG
		#OLD_WAREHOUSE	= SALES_ORDER_LINES(WAREHOUSE)

		IF (#IC_PACKAGED_PRODUCT = #YES)

			FIND IN IC_PRODUCT_MASTER_UNITS &
					/LOCK=NONE &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=PART_CODE=#PART_CODE &
					/WITH=UNIT_OF_MEASURE=#SALES_UOM &
					/WITH=IC_PRODUCT_UOM_TYPE=(PARAMETER("IC_PACKAGED_UOM"))

			IF (%STATUS = %SUCCESS)
				#PACK_UOM = #SALES_UOM
			END_IF
		END_IF

! 		IF (#WAREHOUSED_FLAG=#YES)
! 			PERFORM STOCK_AVAILABILITY
! 		END_IF
	END_BLOCK

	OUTPUT_BLOCK UNIT_SALE_DISPLAY /ROW=6 /COL=21 &
			/PROMPT=MESSAGE("P_91231") &
			/SOURCE=#SALES_UOM &
			/USING=SALES_ORDER_LINES(UNIT_SALES)

	BEGIN_BLOCK INPUT_SALES_UOM
		! Don't change UOM if modify and part code not changed or
		! modify and sales quantity not zero
		IF (#EDIT_MODE = "MODIFY" AND #SALES_ORDER_QTY <> 0 AND &
		    #PART_CHANGE <> #YES)
			GOTO PRICING_UOM_BATCHES
		END_IF

		INPUT_BLOCK GET_SALES_UNIT /ROW=6 /COL=21 &
			/USING=SALES_ORDER_LINES(UNIT_SALES) &
			/PROMPT=MESSAGE("P_91231") &
			/TARGET=#SALES_UOM &
			/LOV=IC_PRODUCT_MASTER_UNITS(UNIT_OF_MEASURE) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=PART_CODE=#PART_CODE &
			/USE_IF=(#IC_PACKAGED_PRODUCT <> #YES)
		
		INPUT_BLOCK GET_SALES_UNIT_1 /ROW=6 /COL=21 &
			/USING=SALES_ORDER_LINES(UNIT_SALES) &
			/PROMPT=MESSAGE("P_91231") &
			/TARGET=#SALES_UOM &
			/LOV=IC_PRODUCT_MASTER_UNITS(UNIT_OF_MEASURE) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=PART_CODE=#PART_CODE	&
			/LOV_WITH=IC_PRODUCT_UOM_TYPE=(PARAMETER("IC_PACKAGED_UOM")) &
			/USE_IF=(#IC_PACKAGED_PRODUCT = #YES)

		PERFORM VERIFY_UOMS
		IF (%STATUS <> %SUCCESS)
			GOTO INPUT_SALES_UOM
		END_IF

		! SOP_L_UPDATE_SO_QTYS requires these fields; have to update now
		SALES_ORDER_LINES(UNIT_SALES) = #SALES_UOM
		SALES_ORDER_LINES(SOP_NOMINATED_UNIT) = #NOMI_UOM
	END_BLOCK

	BEGIN_BLOCK PACKAGE_UNIT
		IF (#IC_PACKAGED_PRODUCT = #YES)

			FIND IN IC_PRODUCT_MASTER_UNITS &
					/LOCK=NONE &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=PART_CODE=#PART_CODE &
					/WITH=UNIT_OF_MEASURE=#SALES_UOM &
					/WITH=IC_PRODUCT_UOM_TYPE=(PARAMETER("IC_PACKAGED_UOM"))

			IF (%STATUS = %SUCCESS)
				#PACK_UOM = #SALES_UOM
			END_IF

			IF (#PACK_UOM <> #SALES_UOM)
				INPUT_BLOCK PACK_UNIT /ROW=7 /COL=21 &
					/USING=SALES_ORDER_LINES(IC_PACK_UNIT) &
					/PROMPT=MESSAGE("P_90703") &
					/TARGET=#PACK_UOM &
					/LOV=IC_PRODUCT_MASTER_UNITS(UNIT_OF_MEASURE) &
					/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
					/LOV_WITH=PART_CODE=#PART_CODE &
					/LOV_WITH=IC_PRODUCT_UOM_TYPE=(PARAMETER("IC_PACKAGED_UOM"))

				! verify package unit was entered
				PERFORM VERIFY_PACK_UNIT
				IF (%STATUS <> %SUCCESS)
					GOTO PACK_UNIT
				END_IF
			END_IF

			! SOP_L_RESERVATION and SOP_L_UPDATED_SO_QTYS
			! require this field; have to assign now
			SALES_ORDER_LINES(IC_PACK_UNIT) = #PACK_UOM
		ELSE
			#PACK_UOM = ""
		END_IF
	END_BLOCK

	OUTPUT_BLOCK PACK_UNIT_OUT /ROW=7 /COL=21 &
			/USING=SALES_ORDER_LINES(IC_PACK_UNIT) &
			/PROMPT=MESSAGE("P_90703") &
			/SOURCE=#PACK_UOM &
			/USE_IF=(#IC_PACKAGED_PRODUCT=#YES)

	BEGIN_BLOCK DISPLAY_AVAIL
!		IF ((#EDIT_MODE <> "MODIFY") &
!			OR (#EDIT_MODE = "MODIFY" AND #PART_CHANGE =  #YES)	&
!			OR (#EDIT_MODE = "MODIFY" AND (#PACK_UOM <> "" AND #PACK_UOM <> #SALES_UOM)))
			IF (#WAREHOUSED_FLAG=#YES)
				PERFORM STOCK_AVAILABILITY
			END_IF
!		END_IF
	END_BLOCK

	BEGIN_BLOCK PRICING_UOM_BATCHES
		!If batches at sales orders the price qty must be determined at detail (lot) level
		!due to possible specific uom conversions using a formula including lot chararcteristics
		!therefore ask for the price uom before going into batch details and don't allow the
		!price unit to be changed afterwards.
		PERFORM GET_NON_NOMINATED_UOM(#PART_CODE, #NOMI_UOM, #NON_NOMI_UOM)

		IF (#BATCHES_REQD = #YES)
			IF (#EDIT_MODE = "MODIFY" AND #PART_CHANGE <> #YES)
				GOTO DISPLAY_PRICING_UOM_BATCHES
			END_IF

			INPUT_BLOCK /ROW=8 /COL=21 &
				/PROMPT=MESSAGE("P_56107") &
				/TARGET=#PRICE_UOM &
				/USING=SALES_ORDER_LINES(UNIT_PRICE),REQUIRED &
				/LOV=UNITS_OF_MEASURE(UNIT_OF_MEASURE,UNIT_OF_MEASURE_DESC)

			IF (#PRICE_UOM <> #OLD_PRICE_UOM AND &
				#PRICE_UOM <> #SALES_UOM AND &
				#PRICE_UOM <> #NOMI_UOM AND &
				#PRICE_UOM <> #NON_NOMI_UOM)

				! If the Pricing UOM has changed from the default value, or
				! is not equal to a previously entered UOM, validate it.
				FIND IN UNITS_OF_MEASURE &
					/LOCK=NONE &
					/WITH=UNIT_OF_MEASURE=#PRICE_UOM

				IF (%STATUS<>%SUCCESS)
					MESSAGE/IDENTIFIER/BELL/WAIT P_00365
					GOTO PRICING_UOM_BATCHES
				END_IF
			END_IF

			! SOP_L_UPDATE_SO_QTYS requires this field; update now
			SALES_ORDER_LINES(UNIT_PRICE) = #PRICE_UOM
	END_BLOCK

	BEGIN_BLOCK DISPLAY_PRICING_UOM_BATCHES

			#OLD_PRICE_UOM = #PRICE_UOM

			OUTPUT_BLOCK /ROW=8 /COL=21 &
				/PROMPT=MESSAGE("P_56107") &
				/SOURCE=#PRICE_UOM

		END_IF
	END_BLOCK

	BEGIN_BLOCK ORDER_QTY_BATCHES
		IF (#TP_GIFT_LINE)
			GOTO SALES_PRICE_DISPLAY
		END_IF

		IF (#BATCHES_REQD = #YES)
			#CHARACTERISTICS = PRODUCT_MASTER(CHARACTERISTICS_AT_ORDER_ENTRY)

			#OLD_LOT_NUM = ""
			#START_QTY_AVAILABLE = 0.0
			#START_QTY_AVAILABLE_BACK = 0.0
			PERFORM BATCHES

			PERFORM FIND_CURRENT_SO_LINE_QTY( #NOMI_UOM, #R1)
			#NOMI_ORDER_QTY=SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)

			#NON_NOMI_ORDER_QTY = 0.0
			IF (#NON_NOMI_UOM <> "")
				PERFORM FIND_CURRENT_SO_LINE_QTY( #NON_NOMI_UOM, #R1)
				#NON_NOMI_ORDER_QTY=SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)
			END_IF

			PERFORM FIND_CURRENT_SO_LINE_QTY( #SALES_UOM, #R1)
			#SALES_ORDER_QTY=SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)

			PERFORM FIND_CURRENT_SO_LINE_QTY( #PRICE_UOM, #R1)
			#PRICE_ORDER_QTY=SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)

			OUTPUT_BLOCK	    /ROW=6 /COL=47 /LEN=14 &
				/PROMPT=(MESSAGE("P_5CUSTOMERS_PART_CODE_1")) &
				/OUTPUT_MASK=#SALES_UOM_MASK &
				/SOURCE=#SALES_ORDER_QTY

			IF (#IC_PACKAGED_PRODUCT = #YES)
				BEGIN_CASE (#PACK_UOM)
					CASE (#SALES_UOM)
						#PACK_ORDER_QTY = #SALES_ORDER_QTY
					CASE (#NOMI_UOM)
						#PACK_ORDER_QTY = #NOMI_ORDER_QTY
					CASE (#NON_NOMI_UOM)
						#PACK_ORDER_QTY = #NON_NOMI_ORDER_QTY
					CASE ELSE
						IF (PRODUCT_MASTER(IC_UNIT_CAPACITY)  = #NOMI_UOM)
							#CAP_QTY	= #NOMI_ORDER_QTY
						ELSE
							#CAP_QTY	= #NON_NOMI_ORDER_QTY
						END_IF
						#PACK_QTY = 0.0
						PERFORM CONVERT_QTYS (#WAREHOUSE, &
							(SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER)), &
							(#PART_CODE), &
							(PRODUCT_MASTER(IC_UNIT_CAPACITY)), &
							#CAP_QTY, &
							#PACK_UOM,      &
							#PACK_ORDER_QTY, &
							#R1)
				END_CASE

				PERFORM 'GEMLB:LB_GET_QUANTITY_MASK' (#COMPANY_CODE, #PART_CODE, #PACK_UOM, #R1, #R2)
				IF (%STATUS = %SUCCESS)
					#PACK_UOM_MASK  = #R1
				ELSE
					EXIT (%FAILURE)
				END_IF
			ELSE
				#PACK_ORDER_QTY = 0
			END_IF

			OUTPUT_BLOCK	    /ROW=7 /COL=47 /LEN=14 &
				/OUTPUT_MASK=#PACK_UOM_MASK &
				/SOURCE=#PACK_ORDER_QTY &
				/PROMPT=(FIELD_PROMPT(IC_PACK_QUANTITY))
		ELSE
	END_BLOCK

	BEGIN_BLOCK ORDER_QTY_NO_BATCHES

			INPUT_BLOCK		  /ROW=6 /COL=47 /LEN=14 &
				/PROMPT=(MESSAGE("P_5CUSTOMERS_PART_CODE_1")) &
				/USING=SALES_ORDER_LINE_QTYS(ORDER_QUANTITY),NONEGATIVE &
				/TARGET=#SALES_ORDER_QTY &
				/INPUT_MASK=#SALES_UOM_MASK

			PERFORM SET_QTIES_NO_LOTS_AT_SO
			IF (%STATUS <> %SUCCESS)
				IF ((#IC_PACKAGED_PRODUCT = #YES) &
					AND (%STATUS = %FAILURE))
					EXIT (%FAILURE)
				ELSE
					GOTO ORDER_QTY_NO_BATCHES
				END_IF
			END_IF

			OUTPUT_BLOCK	    /ROW=7 /COL=47 /LEN=14 &
				/OUTPUT_MASK=#PACK_UOM_MASK &
				/SOURCE=#PACK_ORDER_QTY &
				/PROMPT=(FIELD_PROMPT(IC_PACK_QUANTITY))
		END_IF

		PERFORM FIND_CURRENT_SO_LINE_QTY( #SALES_UOM, #R1)

		IF ((#EDIT_MODE = "MODIFY") &
		AND (#SALES_ORDER_QTY < SALES_ORDER_LINE_QTYS(ORDER_QUANTITY_PROCESSED)))
			MESSAGE/IDENTIFIER/BELL/WAIT P_52086,MASK(#SALES_UOM_MASK, SALES_ORDER_LINE_QTYS(ORDER_QUANTITY_PROCESSED))
			GOTO ORDER_QTY_BATCHES
			! If we are modifying make sure that the quantity has not
			! reduced below what has already been processed by other
			! options
		END_IF

		IF (#ORIG_SALES_ORDER_QTY <> #SALES_ORDER_QTY)
			#QTY_VALUE_CHANGE = #YES
			#TP_VALUE_CHANGE = #YES
			#BALANCE = #SALES_ORDER_QTY - #ORIG_SALES_ORDER_QTY
			IF (#EDIT_MODE = "MODIFY" AND #BATCHES_REQD <> #YES)
				IF (#BALANCE > 0)
					MESSAGE/IDENTIFIER/BELL/WAIT P_52440, LTRIM(MASK(#SALES_UOM_MASK,#BALANCE))
				END_IF

				IF (#BALANCE < 0)
					MESSAGE/IDENTIFIER/BELL/WAIT P_52291
				END_IF

				PERFORM REQUIRED_DATES

			END_IF
		END_IF

		PERFORM SET_UP_ATP_NO_LOTS_AT_SALES
		IF (%STATUS <> %SUCCESS)
			IF (#LINE_EDIT_MODE = "ADD")
				EXIT (%EXIT)
			ELSE
				GOTO PART_CODE
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK PRICING_UOM
		IF ((#EDIT_MODE = "MODIFY" AND #PART_CHANGE <> #YES) OR #BATCHES_REQD = #YES)
			GOTO DISPLAY_PRICING_UOM
		END_IF

		INPUT_BLOCK /ROW=8 /COL=21 &
			/PROMPT=MESSAGE("P_56107") &
			/TARGET=#PRICE_UOM &
			/USING=SALES_ORDER_LINES(UNIT_PRICE),REQUIRED &
			/LOV=UNITS_OF_MEASURE(UNIT_OF_MEASURE,UNIT_OF_MEASURE_DESC)

		IF (#PRICE_UOM <> #OLD_PRICE_UOM AND &
		    #PRICE_UOM <> #SALES_UOM AND &
		    #PRICE_UOM <> #NOMI_UOM AND &
		    #PRICE_UOM <> #NON_NOMI_UOM)

			! If the Pricing UOM has changed from the default value, or
			! is not equal to a previously entered UOM, validate it.
			FIND IN UNITS_OF_MEASURE &
				/LOCK=NONE &
				/WITH=UNIT_OF_MEASURE=#PRICE_UOM

			IF (%STATUS<>%SUCCESS)
				MESSAGE/IDENTIFIER/BELL/WAIT P_00365
				GOTO PRICING_UOM
			END_IF

			#NOMI_PRICE_ORDER_QTY = 0
			! just check for valid conversion between entered price uom and sop nominated price uom
			PERFORM CONVERT_QTYS (#WAREHOUSE, "", #PART_CODE, #PRICE_UOM, "0",  &
						#NOMI_PRICE_UOM, #NOMI_PRICE_ORDER_QTY, #R_MESSAGE)
			IF (%STATUS <> %SUCCESS)
				GOTO PRICING_UOM
			END_IF
		END_IF

		! SOP_L_UPDATE_SO_QTYS requires this field; update now
		SALES_ORDER_LINES(UNIT_PRICE) = #PRICE_UOM
	END_BLOCK

	BEGIN_BLOCK DISPLAY_PRICING_UOM
		! re-calculate the price per pricing unit

		#OLD_PRICE_UOM = #PRICE_UOM

		OUTPUT_BLOCK /ROW=8 /COL=21 &
			/PROMPT=MESSAGE("P_56107") &
			/SOURCE=#PRICE_UOM
	END_BLOCK

	BEGIN_BLOCK SALES_PRICING_ROUTINE

		IF ( #PRICE = 0 )
			#PRICE_VALUE_CHANGE = #YES
		ELSE
			#PRICE_VALUE_CHANGE = #NO
		END_IF

		PERFORM SET_PART_TAXABLE

		PERFORM SALES_PRICING_ROUTINE(#RSP_STATUS, #RSP_MESSAGE)
		BEGIN_CASE (#RSP_STATUS)
		CASE (#YES)
			IF (#RSP_MESSAGE <> "")
				ERROR/TEXT_ONLY/NOBELL #RSP_MESSAGE
			END_IF
		CASE ELSE
			BEGIN_CASE (%STATUS)

			CASE (%SUCCESS)
				ERROR/BELL/TEXT_ONLY/WAIT #RSP_MESSAGE
				GOTO PRICING_UOM

			CASE (%FAILURE)
				ERROR/BELL/TEXT_ONLY/WAIT #RSP_MESSAGE
				EXIT (%FAILURE)

			END_CASE
		END_CASE
	END_BLOCK

	BEGIN_BLOCK SALES_PRICE

		IF ( (#FREIGHT_INVOICED_QTY = 0.0) &
			AND (#TP_INVOICED_QTY = 0.0) &
			AND ((#CONTRACT_OVERRIDE=#YES AND #PRICE_STATUS = (PARAMETER("SOP_PRICE_STATUS_CONTRACT"))) &
			OR (#PROMOTION_OVERRIDE=#YES AND #PRICE_STATUS = (PARAMETER("SOP_PRICE_STATUS_PROMOTION"))) &
			OR (#PRICE_OVERRIDE=#YES AND #PRICE_STATUS = (PARAMETER("SOP_PRICE_STATUS_PRICE"))) &
			OR (#PRICE_STATUS = (PARAMETER("SOP_PRICE_STATUS_CUST_PART")))))

			INPUT_BLOCK	/ROW=8 /COL=47 &
				/PROMPT=(FIELD_PROMPT(SALES_PRICE)) &
				/USING=SALES_ORDER_LINES(SALES_PRICE) &
				/TARGET=#TEMP_PRICE &
				/SOURCE=#PRICE &
				/INPUT_MASK=#SALES_PRICE_MASK &
				/USE_IF=(#PRICING_METHOD_OPTIONAL=#NO)

			INPUT_BLOCK	/ROW=8 /COL=47 &
				/PROMPT=(#PRICE_PROMPT) &
				/USING=SALES_ORDER_LINES(SALES_PRICE) &
				/TARGET=#TEMP_PRICE &
				/SOURCE=#PRICE &
				/INPUT_MASK=#SALES_PRICE_MASK &
				/USE_IF=(#PRICING_METHOD_OPTIONAL=#YES)

			IF (#TEMP_PRICE <> #PRICE &
				OR #PRICE_CHANGE = #YES)
				PERFORM EXTRACT_HISTORY_CODE((PARAMETER("AUDIT_CHANGE_CODE_PRICE")))
				! Extracts the audit history code and gets
				! the description etc from user.
				! if #history = #NO then history for this type
				! not in use, skip update

				IF (#HISTORY=#YES)
					PERFORM WRITE_SALES_ORDER_HISTORY ( &
						(PARAMETER("AUDIT_CHANGE_CODE_PRICE")), &
						#SALES_ORDER_QTY, &
						0.0)
				END_IF

				#PRICE_CHANGE = #NO
				#PRICE = #TEMP_PRICE
				#PRICE_VALUE_CHANGE = #YES

			END_IF

			#PRICE_OVERRIDE=#YES
			! If the override flag for price is OK and we enter
			! a new price perform the audit history routine
		ELSE
	END_BLOCK

	BEGIN_BLOCK SALES_PRICE_DISPLAY
		! Otherwise display the price

			OUTPUT_BLOCK /ROW=8 /COL=47 &
				/PROMPT=(FIELD_PROMPT(SALES_PRICE)) &
				/SOURCE=#PRICE &
				/USING=SALES_ORDER_LINES(SALES_PRICE) &
				/OUTPUT_MASK=#SALES_PRICE_MASK &
				/USE_IF=(#PRICING_METHOD_OPTIONAL=#NO)

			OUTPUT_BLOCK /ROW=8 /COL=47 &
				/PROMPT=(#PRICE_PROMPT) &
				/SOURCE=#PRICE &
				/USING=SALES_ORDER_LINES(SALES_PRICE) &
				/OUTPUT_MASK=#SALES_PRICE_MASK &
				/USE_IF=(#PRICING_METHOD_OPTIONAL=#YES)

		END_IF

		IF ( #PRICING_METHOD = #TAX_INCLUSIVE )

			IF (#WAREHOUSED_FLAG = #YES)
				#PRODUCT_TAX_CODE = PRODUCT_WAREHOUSE(PRODUCT_TAX_CODE)
			ELSE
				#PRODUCT_TAX_CODE = PRODUCT_MASTER(PRODUCT_TAX_CODE)
			END_IF
			IF (#PRODUCT_TAX_CODE = "")
				#PRODUCT_TAX_CODE = #DEF_PART_TAX_CODE
			END_IF
			IF (#CUSTOMER_TAX_CODE = "")
				#CUSTOMER_TAX_CODE = #DEF_CUST_TAX_CODE
			END_IF

			PERFORM SETUP_TAX_CONTROL_VT

			IF ( #TAXABLE = #NO OR #PART_TAXABLE = #NO )
				LB_TAX_CONTROL_VT(PRICING_METHOD) = #TAX_EXCLUSIVE
			END_IF

			LB_TAX_CONTROL_VT(PART_CODE) = SALES_ORDER_LINES(PART_CODE)
			LB_TAX_CONTROL_VT(WAREHOUSE) = SALES_ORDER_LINES(WAREHOUSE)
			LB_TAX_CONTROL_VT(CUSTOMER_NUMBER) = SALES_ORDER_HEADERS(CUSTOMER_NUMBER)
			LB_TAX_CONTROL_VT(INVOICE_ADDRESS_CODE) = SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)
			LB_TAX_CONTROL_VT(DELIVERY_ADDRESS_CODE) = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
			LB_TAX_CONTROL_VT(TRANSACTION_NUMBER) = SALES_ORDER_HEADERS(ORDER_NUMBER)
			LB_TAX_CONTROL_VT(TRANSACTION_TYPE) = PARAMETER("TTYPE_SO")
			LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE) = #PRODUCT_TAX_CODE
			LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE) = #CUSTOMER_TAX_CODE
			LB_TAX_CONTROL_VT(ORDER_LINE_TYPE) = ""
			LB_TAX_CONTROL_VT(FORM_TITLE) = ""
			LB_TAX_CONTROL_VT(PRICE_ORDER_QTY) = #PRICE_ORDER_QTY
			LB_TAX_CONTROL_VT(SALES_PRICE) = #PRICE
			LB_TAX_CONTROL_VT(LINE_DISCOUNT) = 0

	        PERFORM "GEMLB:LB_L_TAX_CONTROL" ( "T", #ERROR_OCCURRED, #ERROR_MESSAGE )

			IF (%STATUS = %BACK OR %STATUS = %EXIT)
				EXIT (%STATUS)
			END_IF

			IF ( #ERROR_OCCURRED ) ERROR/TEXT_ONLY #ERROR_MESSAGE

			FIND IN LB_TAX_CONTROL_VT

			#NET_PRICE = LB_TAX_CONTROL_VT(NET_PRICE)
			#NET_LINE_VALUE = LB_TAX_CONTROL_VT(NET_LINE_VALUE)

			#QTY_TIMES_PRICE = #NET_LINE_VALUE

		ELSE

			#QTY_TIMES_PRICE = ROUND(#PRICE_ORDER_QTY * #PRICE,#CURRENCY_DECIMAL)

		END_IF

		IF (#OLD_ORDER_VALUE <> #QTY_TIMES_PRICE)
			#QTY_VALUE_CHANGE = #YES
			#TP_VALUE_CHANGE = #YES
		END_IF

	END_BLOCK

	OUTPUT_BLOCK NET_VALUE /ROW=9 /COL=47 /LEN=(#CURRENCY_LEN) &
			/PROMPT=(MESSAGE("P_16150")) &
			/SOURCE=(#QTY_TIMES_PRICE) &
			/USING=SALES_ORDER_INVOICE_LINES(SOP_INVOICE_TOTAL_CURRENCY) &
			/OUTPUT_MASK=#CURRENCY_MASK

	BEGIN_BLOCK CALC_WEIGHT_VOL
		! This processing was previously completed at the end of
		! line processing when the 'Next' menu option was chosen.
		! However, the Freight calculation requires that the weight
		! and volume for the line already be stored on the
		! SALES_ORDER_LINES record.

		PERFORM CALC_WEIGHT_VOL
		IF (%STATUS = %FAILURE)
			EXIT (%FAILURE)
		END_IF
	END_BLOCK

	BEGIN_BLOCK CALC_FREIGHT_FROM_QTY
		! Freight calculation needs SALES_ORDER_LINES(WAREHOUSE)
		! This is set just after entering the warehouse.

		PERFORM CALC_FREIGHT_FROM_QTY
		IF (%STATUS = %SUCCESS)
			IF (#AR_FREIGHT_IN_USE <> #YES) GOTO INIT_AR_FREIGHT_PREFIX
			IF (#LINE_FREIGHT_APPLICABLE <> #YES) GOTO INIT_AR_FREIGHT_PREFIX
			IF (#WAREHOUSED_FLAG <> #YES) GOTO NON_WAREHOUSED_FREIGHT
		ELSE_IF (%STATUS = %FAILURE)
			EXIT (%FAILURE)
		END_IF
	END_BLOCK

	BEGIN_BLOCK NON_WAREHOUSED_FREIGHT
		IF (#AR_FREIGHT_IN_USE <> #YES) GOTO INIT_AR_FREIGHT_PREFIX
		IF (#LINE_FREIGHT_APPLICABLE <> #YES) GOTO INIT_AR_FREIGHT_PREFIX
		IF (#WAREHOUSED_FLAG = #YES) GOTO INIT_AR_FREIGHT_PREFIX

		PERFORM NON_WAREHOUSED_FREIGHT
	END_BLOCK

	OUTPUT_BLOCK INIT_AR_FREIGHT_PREFIX /ROW=11 /COL=4 /LEN=9 &
			/ATTRIBUTES=NONE &
			/SOURCE=(#FREIGHT_PREFIX)

	OUTPUT_BLOCK INIT_AR_FREIGHT_PROMPT /ROW=12 /COL=6 /LEN=7 &
			/ATTRIBUTES=NONE &
			/SOURCE=(FIELD_SHORT_PROMPT(FREIGHT)) &
			/USE_IF=(#LINE_FREIGHT_APPLICABLE = #YES)

	OUTPUT_BLOCK INIT_WH_AR_FREIGHT_VALUE /ROW=12 /COL=15 /LEN=(#CURRENCY_LEN) &
			/SOURCE=(SALES_ORDER_LINES(FREIGHT)) &
			/OUTPUT_MASK=#CURRENCY_MASK &
			/USE_IF=((#LINE_FREIGHT_APPLICABLE = #YES) &
				AND (#WAREHOUSED_FLAG = #YES))

	OUTPUT_BLOCK INIT_NONWH_AR_FRT_VALUE /ROW=12 /COL=15 /LEN=(#CURRENCY_LEN) &
			/SOURCE=(SALES_ORDER_LINES(FREIGHT)) &
			/OUTPUT_MASK=#CURRENCY_MASK &
			/USE_IF=((#LINE_FREIGHT_APPLICABLE = #YES) &
				AND (#WAREHOUSED_FLAG <> #YES) &
				AND (SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR) <> 0))

	TEXT /ROW=9 /COL=75 "%"

	BEGIN_BLOCK DISCOUNTING_ROUTINE

		PERFORM DISCOUNTING_ROUTINE
		IF (%STATUS <> %SUCCESS)
			#DISCOUNT_BASIS = #QTY_TIMES_PRICE
		END_IF

		IF ( #TP_PROMOTIONS_IN_USE= #YES )

			PERFORM PROMOTION_DISCOUNTS
			IF ( %STATUS = %EMPTY )
				IF ( #OPT = "DISCOUNTS" )
					MESSAGE/IDENTIFIER/WAIT P_13871
					GOTO LINE_MENU
				END_IF
			ELSE

				IF ((#AR_FREIGHT_IN_USE = #YES) &
				AND (SALES_ORDER_LINES(FREIGHT) > 0.0) &
				AND (#LINE_CUST_PAYS_FREIGHT = #YES) &
				AND (#LINE_DISCOUNT > 0.0))
					IF (#DIV_LINE_DISC_FREIGHT_INC = #YES)
						MESSAGE/IDENTIFIER/WAIT P_93389
					ELSE
						MESSAGE/IDENTIFIER/WAIT P_93390
					END_IF
				END_IF

				OUTPUT_BLOCK    /ROW=10 /COL=47 /LEN=(#CURRENCY_LEN) &
					/PROMPT=(FIELD_PROMPT(DISCOUNT)) &
					/SOURCE=(#LINE_DISCOUNT) &
					/USING=SALES_ORDER_LINES(LINE_DISCOUNT) &
					/OUTPUT_MASK=(#CURRENCY_MASK)

			END_IF

			IF ( #OPT = "DISCOUNTS" AND #ALLOW_DISC_MODIFY = #NO ) GOTO LINE_MENU

		END_IF

		IF (#LD_IN_USE <> #YES) GOTO SALES_TAX

	END_BLOCK

	BEGIN_BLOCK LINE_DISCOUNT
		IF (#LD_IN_USE = #YES)

			IF (#LD_OVERRIDE=#YES)
				IF (#LD_CALC = #DISCOUNT_BREAK_AMOUNT)
					GOTO LINE_DISCOUNT_1
				END_IF

				INPUT_BLOCK	 /ROW=10 /COL=67 &
					/TARGET=#PERCENT_DISCOUNT &
					/USING=SALES_DISCOUNT_LINES(BREAK_DISCOUNT) &
					/INPUT_MASK="!-@@0.0@@@"

				IF (#PERCENT_DISCOUNT <> 0)
					IF (#PERCENT_DISCOUNT < 0 OR #PERCENT_DISCOUNT > 100)
						MESSAGE/IDENTIFIER/BELL/WAIT P_00353
						GOTO LINE_DISCOUNT
					END_IF

					#LINE_DISCOUNT = ROUND(#DISCOUNT_BASIS * #PERCENT_DISCOUNT/100,#CURRENCY_DECIMAL)

					IF ((#AR_FREIGHT_IN_USE = #YES) &
					AND (SALES_ORDER_LINES(FREIGHT) > 0.0) &
					AND (#LINE_CUST_PAYS_FREIGHT = #YES))
						IF (#DIV_LINE_DISC_FREIGHT_INC	= #YES)
							MESSAGE/IDENTIFIER/WAIT P_93389
						ELSE
							MESSAGE/IDENTIFIER/WAIT P_93390
						END_IF
					END_IF

					#OLD_TEMP_DISC = #LINE_DISCOUNT
				ELSE
					#LINE_DISCOUNT = 0
					#OLD_TEMP_DISC = 0
				END_IF
	END_BLOCK

	BEGIN_BLOCK LINE_DISCOUNT_1
				INPUT_BLOCK	 /ROW=10 /COL=47 /LEN=(#CURRENCY_LEN) &
					/TARGET=#LINE_DISCOUNT &
					/INPUT_MASK=(#CURRENCY_MASK)

				#LINE_DISCOUNT = ROUND(#LINE_DISCOUNT,#CURRENCY_DECIMAL)

				IF ((#LINE_DISCOUNT * 1.0) > (#DISCOUNT_BASIS * 1.0))
					MESSAGE/IDENTIFIER/BELL/WAIT P_52071
					GOTO LINE_DISCOUNT_1
				END_IF

				IF (#LINE_DISCOUNT = 0.0)
					IF (#DISCOUNT_BASIS <> 0.0)
						#PERCENT_DISCOUNT = 0.0
						OUTPUT_BLOCK    /ROW=9 /COL=67 &
							/SOURCE=(#PERCENT_DISCOUNT) &
							/OUTPUT_MASK="!-@@0.0@@@"
					END_IF
				END_IF

				IF (#LINE_DISCOUNT * 1.0 <> #LINE_DISCOUNT_OLD * 1.0 OR (#PERCENT_DISCOUNT = 0 AND #LINE_DISCOUNT <> 0))
					IF (#LINE_DISCOUNT * 1.0 <> #OLD_TEMP_DISC * 1.0)
						#PERCENT_DISCOUNT = ROUND(#LINE_DISCOUNT/#DISCOUNT_BASIS*100,2)

						IF ((#AR_FREIGHT_IN_USE = #YES) &
						AND (SALES_ORDER_LINES(FREIGHT) > 0.0) &
						AND (#LINE_CUST_PAYS_FREIGHT = #YES))
							IF (#DIV_LINE_DISC_FREIGHT_INC	= #YES)
								IF (#LD_CALC <> #DISCOUNT_BREAK_AMOUNT)
									! This is the first discount value entered by the
									! user so display a message because it will not
									! already have been displayed.
									MESSAGE/IDENTIFIER/WAIT P_93389
								END_IF
							ELSE
								IF (#LD_CALC <> #DISCOUNT_BREAK_AMOUNT)
									MESSAGE/IDENTIFIER/WAIT P_93390
								END_IF
							END_IF
						END_IF
					! Recalc the percentage
					END_IF
	END_BLOCK

	BEGIN_BLOCK LINE_DISCOUNT_2
					OUTPUT_BLOCK    /ROW=10 /COL=67 &
						/SOURCE=(#PERCENT_DISCOUNT) &
						/OUTPUT_MASK="!-@@0.0@@@"

					IF (#EDIT_MODE = "MODIFY")
						PERFORM EXTRACT_HISTORY_CODE((PARAMETER("AUDIT_CHANGE_CODE_DISCOUNT")))
						IF (#HISTORY = #YES)
							PERFORM WRITE_SALES_ORDER_HISTORY ( &
								(PARAMETER("AUDIT_CHANGE_CODE_DISCOUNT")), &
								#SALES_ORDER_QTY, &
								0.0)
						END_IF
					END_IF
	       			END_IF
				! If the line discount override flag is set to yes
				! Save the old discount and let them put in a new one
				! test to see if they've changed it (or merely accepted
				! the old value). If they have changed it go and get the
				! relevant history record. It history is being recorded for
				! these changes, write a record.

			ELSE
				! line discount override is not allowed
				! so display the values only
	END_BLOCK

	OUTPUT_BLOCK PERCENT /ROW=10 /COL=67 &
			/SOURCE=(#PERCENT_DISCOUNT) &
			/OUTPUT_MASK="!-@@0.0@@@"

	BEGIN_BLOCK LINE_DISCOUNT_DISPLAY_1
				IF ((#AR_FREIGHT_IN_USE = #YES) &
				AND (SALES_ORDER_LINES(FREIGHT) > 0.0) &
				AND (#LINE_CUST_PAYS_FREIGHT = #YES) &
				AND ((#PERCENT_DISCOUNT > 0.0) &
				   OR (#LINE_DISCOUNT > 0.0)))
					IF (#DIV_LINE_DISC_FREIGHT_INC = #YES)
						MESSAGE/IDENTIFIER/WAIT P_93389
					ELSE
						MESSAGE/IDENTIFIER/WAIT P_93390
					END_IF
				END_IF

				OUTPUT_BLOCK    /ROW=10 /COL=47 /LEN=(#CURRENCY_LEN) &
					/PROMPT=(FIELD_PROMPT(DISCOUNT)) &
					/SOURCE=(#LINE_DISCOUNT) &
					/USING=SALES_ORDER_LINES(LINE_DISCOUNT) &
					/OUTPUT_MASK=(#CURRENCY_MASK)

			END_IF
		END_IF
		! Line discounts in use
	END_BLOCK

	!Change 001 - DBM - 1/11/2007 - Added booked date
	INPUT_BLOCK BOOKED_DATE /ROW=10 /COL=21 /LEN=11 &
			/PROMPT=(MESSAGE("VOL_2013")) &
			/SOURCE_IF=(SALES_ORDER_LINES(SYS_RECOMMENDED_DATE)=""),(%TODAY) &
			/SOURCE_IF=(SALES_ORDER_LINES(SYS_RECOMMENDED_DATE)<>""),(SALES_ORDER_LINES(SYS_RECOMMENDED_DATE)) &
			/TARGET=#BOOKED_DATE &
			/USING=SALES_ORDER_LINES(SYS_RECOMMENDED_DATE)

	SALES_ORDER_LINES(SYS_RECOMMENDED_DATE) = #BOOKED_DATE
	!Change 001 End
			
	!Change 008
	OUTPUT_BLOCK SOLD_CYLINDER /ROW=11 /COL=21 &
			/PROMPT=("Sold Cylinder") &
			/SOURCE=SALES_ORDER_LINES(VOL_SOLD_LINE) &
			/USE_IF=(PRODUCT_MASTER(BATCHES_EXIST)="Y")

	START_TRANSACTION


	PERFORM VOL_SOLD_STOCK_LINE
	COMMIT
	!Change 008 End 

	BEGIN_BLOCK SALES_TAX
		PERFORM SET_PART_TAXABLE

		PERFORM SALES_TAX
		IF (%STATUS = %BACK OR %STATUS = %EXIT)
			IF (#LD_IN_USE = #YES)
				GOTO LINE_DISCOUNT
			ELSE
				GOTO ORDER_QTY_BATCHES
			END_IF
		END_IF

		IF ( #PRICING_METHOD = #TAX_INCLUSIVE AND #TAX_RATE_CHANGED = #TRUE )
			! P_23370	INFORM	Tax Rate Changed
            MESSAGE/IDENTIFIER P_23370
			GOTO SALES_PRICE
		END_IF

	END_BLOCK

	OUTPUT_BLOCK TAX /ROW=11 /COL=47 /LEN=(#CURRENCY_LEN) &
			/PROMPT=(MESSAGE("P_00648")) &
			/SOURCE=(#LINE_TAX) &
			/USING=SALES_ORDER_TAX_DETAILS(TAX) &
			/OUTPUT_MASK=(#CURRENCY_MASK)

	BEGIN_BLOCK CALC_LINE_TOTAL
		PERFORM CALC_LINE_TOTAL
		PERFORM MISC_ADJUSTMENTS("RECALC")
	END_BLOCK

	OUTPUT_BLOCK LINE_TOTAL /ROW=12 /COL=47 /LEN=(#CURRENCY_LEN) &
			/PROMPT=(MESSAGE("P_00680")) &
			/SOURCE=(#LINE_TOTAL) &
			/USING=SALES_ORDER_LINES(SOP_ORDER_TOTAL_CURRENCY) &
			/OUTPUT_MASK=(#CURRENCY_MASK)

	BEGIN_BLOCK EC_REPORTING
		PERFORM EC_REPORTING
	END_BLOCK

	BEGIN_BLOCK LINE_MENU
		#LINE_EDIT_MODE = "MODIFY"
		#OLD_PART_CODE = #PART_CODE
		#OLD_WAREHOUSE = #WAREHOUSE

		#OLD_SPECIFICATION_CODE = #SPECIFICATION_CODE
		#OLD_PRICE_UOM  		= #PRICE_UOM
		#OLD_CONTRACT_NUMBER	= #CONTRACT_NUMBER

		#PART_CHANGE = ""
		IF ( #PRICING_METHOD = #TAX_INCLUSIVE )
			SALES_ORDER_LINES(SALES_PRICE) = #NET_PRICE
			SALES_ORDER_LINES(SALES_PRICE_INC_TAX) = #PRICE
		ELSE
			SALES_ORDER_LINES(SALES_PRICE) = #PRICE
			SALES_ORDER_LINES(SALES_PRICE_INC_TAX) = 0
		END_IF

		PERFORM CONVERT_VALUE_TO_BASE (#LINE_TOTAL,#NET_VALUE_BASE)
		IF (%STATUS = %FAILURE)
			EXIT (%FAILURE)
		END_IF

		IF (#SECURITY_ACTIVE = #YES AND #NET_VALUE_BASE > #TRANSACTION_MAX)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00872
			GOTO ORDER_QTY_BATCHES
		END_IF

		#RE_CALC_FREIGHT = #NO

		PERFORM LINE_MENU
		
		IF ( #OPT = "NEXT" AND (#SALES_REACH_CONTROL_FLAG = #YES OR #COPY_REACH_CHECK_FALG = #YES OR #FINAL_ADDR_CHANGE_FLAG = #YES)) 
			PERFORM "GEMSOP:SOP_S_L_CONTROL_MAINTENANCE" JUDGMENT_SOP_CONTROLS (#COMPANY_CODE, &
																					#DIVISION, &
																					(#CUSTOMER_NUMBER), &
																					(SALES_ORDER_LINES(FINAL_ADDRESS_CODE)), &
																					(SALES_ORDER_LINES(PART_CODE)),"","","","", &
																					#ERROR_OCCURRED, #ERROR_MESSAGE,#SALES_REACH_RETURN_FLAG,#RESTRICT_MODE)
																				
			IF ( #ERROR_OCCURRED = "1")
				ERROR/TEXT_ONLY/BELL #ERROR_MESSAGE
			END_IF
			
			IF ( #SALES_REACH_RETURN_FLAG = #NO ) 
				PERFORM GET_FINAL_RETURN_MSG (#COMPANY_CODE,#DIVISION,#CUSTOMER_NUMBER,(SALES_ORDER_LINES(FINAL_ADDRESS_CODE)),#RETURN_PARA_MSG)
				MESSAGE/IDENTIFIER/BELL P_37128
				MESSAGE/IDENTIFIER/BELL P_37118,(SALES_ORDER_LINES(PART_CODE)),#RETURN_PARA_MSG
				
				GOTO LINE_MENU
			END_IF		
		END_IF 

		IF (%STATUS = %BACK OR %STATUS =%EXIT)
			EXIT(%BACK)
		END_IF

		#LINE_MENU_SOURCE=MESSAGE("P_00432")

		IF ((#OPT = "TAX") OR (#OPT = "EC_REP")) GOTO DELIVERY_ADDRESS_CODE

		IF ((#OPT = "FREIGHT") OR (#RE_CALC_FREIGHT = #YES)) GOTO RE_CALC_FREIGHT

		IF (#OPT = "LINE")
			IF (SALES_ORDER_LINES(STATUS_FLAG) = PARAMETER("STATUS_CLOSED"))
				MESSAGE/IDENTIFIER/BELL/WAIT P_03221
			ELSE
				IF ((SALES_ORDER_LINE_QTYS(ORDER_QUANTITY_PROCESSED)="0") &
				AND  (NOT(#TP_GIFT_LINE)) )
					GOTO PART_CODE
				ELSE
					IF ( #TP_GIFT_LINE )
						MESSAGE/IDENTIFIER/BELL/WAIT P_23555
					END_IF
					GOTO LINE_REF
				END_IF
			END_IF
		END_IF

		IF (#OPT= "DISCOUNTS") GOTO DISCOUNTING_ROUTINE
		IF (#OPT= "NEXT") GOTO NEXT
		IF (#OPT = "MENU") GOTO LINE_MENU
		IF (#OPT= "COMMENTS") GOTO COMMENTS
		IF (#OPT = "DESC") GOTO ADD_DESC
		IF (#OPT = "PRICE") GOTO SALES_PRICE
		IF (#OPT = "DATES") GOTO DATES
		IF (#OPT = "BATCHES") GOTO LOTS
		IF (#OPT = "COST_CENTER") GOTO CC
		IF (#OPT = "PROJECTED") PERFORM PROJECTED
		
		!Change 003 - DBM - 3-9-2007 - Handle component menu
		IF (#OPT="MINBAL")
			!Time to choose specs for the minor/balance
			PERFORM VOL_DISPLAY_MINBAL
		END_IF
		!Change 003 End
		
		GOTO LINE_MENU
		!Perform the end of line menu and based on the results
		! charge off and perform the relevant routine
	END_BLOCK

	BEGIN_BLOCK NEXT
		PERFORM COMPLETE_ORDER_LINE
		BEGIN_CASE (%STATUS)
			CASE (%BACK)
				GOTO LINE_MENU
			CASE (%FAILURE)
				EXIT (%FAILURE)
			CASE (%SUCCESS)
				EXIT(%SUCCESS)
		END_CASE
	END_BLOCK

	BEGIN_BLOCK LOTS
		IF (#ATP_IN_USE_FOR_PART <> #YES OR #ATP_IN_USE_FOR_PW <> #YES)
			GOTO ORDER_QTY_BATCHES
		ELSE
			PERFORM "GEMLB:LB_L_ATP_AUTO" UPDATE &
							(#DIVISION, &
							#PART_CODE, &
							#ORDER_NUMBER, &
							SALES_ORDER_LINES(ORDER_LINE_NUMBER), &
							"", &
							#SALES_UOM, &
							#PACK_UOM, &
							#NOMI_UOM, &
							#NON_NOMI_UOM, &
							#PRICE_UOM, &
							#NOMI_PRICE_UOM, &
							SALES_ORDER_LINES(ORDER_LINE_REFERENCE), &
							SALES_ORDER_HEADERS(ORDER_DATE))
			#OLD_LOT_NUM = ""
			#START_QTY_AVAILABLE = 0.0
			#START_QTY_AVAILABLE_BACK = 0.0
			PERFORM BATCHES

			PERFORM FIND_CURRENT_SO_LINE_QTY( #NOMI_UOM, #R1)
			#NOMI_ORDER_QTY=SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)

			PERFORM FIND_CURRENT_SO_LINE_QTY( #SALES_UOM, #R1)
			#SALES_ORDER_QTY=SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)

			#ORIG_SALES_ORDER_QTY = #SALES_ORDER_QTY

			OUTPUT_BLOCK	    /ROW=6 /COL=47 /LEN=14 &
				/PROMPT=(MESSAGE("P_5CUSTOMERS_PART_CODE_1")) &
				/OUTPUT_MASK=#SALES_UOM_MASK &
				/SOURCE=#SALES_ORDER_QTY

			OUTPUT_BLOCK LOTS_REQD_DATE /ROW=5 /COL=47 &
				/PROMPT=#REQUESTED_DATE_PROMPT &
				/SOURCE=#LINE_REQUESTED_DATE &
				/USING=SALES_ORDER_HEADERS(SYS_REQUESTED_DATE)

			IF ((#TP_PROMOTIONS_IN_USE = #YES) &
			AND (DAYS(#LINE_REQUESTED_DATE) <> DAYS(#OLD_LINE_REQUESTED_DATE)))
				GOTO DISCOUNTING_ROUTINE
			END_IF

			GOTO PRICING_UOM
		END_IF
	END_BLOCK

	BEGIN_BLOCK DATES

		PERFORM "GEMLB:LB_L_ATP_AUTO" UPDATE (#DIVISION, &
							#PART_CODE, &
							#ORDER_NUMBER, &
							SALES_ORDER_LINES(ORDER_LINE_NUMBER), &
							"", &
							#SALES_UOM, &
							#PACK_UOM, &
							#NOMI_UOM, &
							#NON_NOMI_UOM, &
							#PRICE_UOM, &
							#NOMI_PRICE_UOM, &
							SALES_ORDER_LINES(ORDER_LINE_REFERENCE), &
							SALES_ORDER_HEADERS(ORDER_DATE))

		IF (#EDIT_MODE = "ADD" OR #COPY_UPDATE = #YES)
			IF (#SYS_TM_IN_USE = #YES)
				PERFORM UPDATE_TM_SOLD_FIELDS
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK REQUIRED_DATES_OPTION
		PERFORM REQUIRED_DATES

		IF ( #TP_GIFT_LINE )

			PERFORM SUM_CURRENT_SO_LINE_DETAIL_QTYS ((SALES_ORDER_LINES(UNIT_SALES)))

			IF (#SALES_ORDER_QTY <> #TOTAL_DETAIL_ORDER_QTY)

				#GIFT_BALANCE = #SALES_ORDER_QTY - #TOTAL_DETAIL_ORDER_QTY

				IF (#GIFT_BALANCE > 0)
					MESSAGE/IDENTIFIER/BELL/WAIT P_52440, LTRIM(MASK(#SALES_UOM_MASK,#GIFT_BALANCE))
				END_IF

				IF (#GIFT_BALANCE < 0)
					MESSAGE/IDENTIFIER/BELL/WAIT P_52291
				END_IF

				GOTO REQUIRED_DATES_OPTION
			END_IF
		END_IF

		OUTPUT_BLOCK  /ROW=5 /COL=47 &
			/PROMPT=#REQUESTED_DATE_PROMPT &
			/SOURCE=#LINE_REQUESTED_DATE &
			/USING=SALES_ORDER_HEADERS(SYS_REQUESTED_DATE)

		IF ((#TP_PROMOTIONS_IN_USE = #YES) &
		AND (DAYS(#LINE_REQUESTED_DATE) <> DAYS(#OLD_LINE_REQUESTED_DATE)))
			GOTO DISCOUNTING_ROUTINE
		END_IF

		GOTO LINE_MENU
	END_BLOCK

	BEGIN_BLOCK ADD_DESC
		OUTPUT_BLOCK		 /ROW=1 /COL=76 /LEN=1 &
			/PROMPT=(MESSAGE("P_00031")) &
			/SOURCE=(#ADD_DESC)

		GOTO LINE_MENU
	END_BLOCK

	BEGIN_BLOCK COMMENTS
		OUTPUT_BLOCK		 /ROW=2 /COL=76 /LEN=1 &
			/PROMPT=(MESSAGE("P_00137")) &
			/SOURCE=(#COMMENTS)

		GOTO LINE_MENU
	END_BLOCK

	BEGIN_BLOCK CC_CHANGED_CODE
		OUTPUT_BLOCK		 /ROW=9 /COL=21 &
			/PROMPT=(FIELD_PROMPT(COST_CENTER)) &
			/SOURCE=(SALES_ORDER_LINES(COST_CENTER))
	END_BLOCK

	OUTPUT_BLOCK DELIVERY_ADDRESS_CODE /ROW=10 /COL=21 &
			/PROMPT=(MESSAGE("P_00214")) &
			/SOURCE=(SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE))

	BEGIN_BLOCK RE_CALC_FREIGHT
		! Re-calc only required if delivery address code details
		! changed for the line as part of the sales_order_line_codes
		! form.
		IF (#RE_CALC_FREIGHT = #NO)
			GOTO MAINT_FREIGHT
		END_IF

		IF ((#WAREHOUSED_FLAG = #YES) &
		AND (#DIV_ALLOWS_FREIGHT_OVERRIDE = #YES))
			#OPT = "FREIGHT"
			! To force user into line freight screen later even if
			! option not selected, because need to confirm that
			! new calculated value is the required value when
			! override is allowed, otherwise re-calculated value
			! will be taken without user having to confirm it.
			! Not necessary for non-warehoused lines because freight
			! is never re-calculated, it is only user-defined.
		END_IF

		IF (#LINE_FREIGHT_APPLICABLE <> #YES)
			! This variable set in sales_order_line_codes form.
			!
			SALES_ORDER_LINES(SOP_FREIGHT_CALCULATED) = 0.0
			SALES_ORDER_LINES(FREIGHT) = 0.0
			SALES_ORDER_LINES(SOP_FREIGHT_OVERRIDDEN) = #NO
		ELSE
			IF (#WAREHOUSED_FLAG <> #YES)
				! only would reach this point if delivery address
				! code changed and re_calc_freight flag set.
				SALES_ORDER_LINES(SOP_FREIGHT_CALCULATED) = 0.0

				IF ((#LINE_FREIGHT_APPLICABLE <> #YES) &
				   OR (SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR) = 0) &
				   OR (#DIV_ALLOWS_FREIGHT_OVERRIDE = #NO))
					SALES_ORDER_LINES(FREIGHT) = 0.0
					SALES_ORDER_LINES(SOP_FREIGHT_OVERRIDDEN) = #NO
				END_IF

				GOTO INIT_AR_FREIGHT_PREFIX
			END_IF

			#CALCULATED_FREIGHT = 0.0

			PERFORM "GEMSYS:SYS_L_FREIGHT_CALCULATION" ( &
					"SOLINE", &
					#PLANNED_DELIVERY_DATE, &
					"", &
					0.0, &
					(SALES_ORDER_LINES(SYS_FREIGHT_MODE)), &
					#UPDATE_FREIGHT_DETAILS, &
					#PACK_ORDER_QTY, &
					#PACK_UOM, &
					#NOMI_ORDER_QTY, &
					#NOMI_UOM, &
					#NON_NOMI_ORDER_QTY, &
					#NON_NOMI_UOM, &
					"", &
					#CALCULATED_FREIGHT, &
					#FREIGHT_CURRENCY_CODE, &
					#FREIGHT_BASE, &
					#FREIGHT_CUBIC, &
					"", &
					(#WEIGHT), &
					(#WEIGHT_UOM), &
					(#VOLUME), &
					(#VOLUME_UOM))

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_93401
				SALES_ORDER_LINES(SOP_FREIGHT_CALCULATED) = 0.0
			ELSE
				IF (#FREIGHT_CURRENCY_CODE <> #CURRENCY_CODE)
					! do currency conversion here using freight value in base
					! currency returned by the library routine.
					DELETE ALL FROM SYS_CURRENCY_VALUES_VT

					SYS_CURRENCY_VALUES_VT(BASE_VALUE) = #FREIGHT_BASE

					ADD TO SYS_CURRENCY_VALUES_VT

					PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
					IF (#R_STATUS <> #YES)
						ERROR/WAIT #R_MESSAGE
						EXIT (%FAILURE)
					END_IF

					FIND IN SYS_CURRENCY_VALUES_VT

					#CALCULATED_FREIGHT	= SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE)
				END_IF

				SALES_ORDER_LINES(SOP_FREIGHT_CALCULATED) = #CALCULATED_FREIGHT
			END_IF

			IF ((#DIV_ALLOWS_FREIGHT_OVERRIDE = #NO) &
			   OR (SALES_ORDER_LINES(SOP_FREIGHT_OVERRIDDEN) = #NO) &
			   OR (SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR) = 0))

				SALES_ORDER_LINES(FREIGHT) = #CALCULATED_FREIGHT
				! ensure that freight override is not allowed
				! or freight has not already been overridden
				! before storing calculated freight as freight
				! line value.
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK MAINT_FREIGHT
		IF (#OPT = "FREIGHT")
			PERFORM MAINTAIN_LINE_FREIGHT

			! Re-display freight and force user through discount,
			! tax and EC reporting entry because these values
			! may have been impacted.
			GOTO INIT_AR_FREIGHT_PREFIX
		END_IF
	END_BLOCK

	BEGIN_BLOCK CONT_DELIV_ADDR
		! Tax and EC reporting data may also need to be
		! updated when customer address data has changed
		! (with no freight impact because that is handled
		! above), so return to the appropriate
		! point in the line screen.
		IF (#OPT="TAX") GOTO SALES_TAX
		IF (#OPT="EC_REP") GOTO EC_REPORTING
		GOTO LINE_MENU
	END_BLOCK

	BEGIN_BLOCK CC
		INPUT_BLOCK  /ROW=9 /COL=21 &
			/PROMPT=(FIELD_PROMPT(COST_CENTER)) &
			/TARGET=SALES_ORDER_LINES(COST_CENTER) &
			/LOV=COST_CENTERS(COST_CENTER,DESCRIPTION) &
			/LOV_SORTED_BY=(COST_CENTER) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=SOURCE_MODULE=(PARAMETER("LOCAL_SOURCE_MODULE"))

		GOTO LINE_MENU
	END_BLOCK

	OUTPUT_BLOCK COST_CENTER /ROW=9 /COL=21 &
			/PROMPT=(FIELD_PROMPT(COST_CENTER)) &
			/SOURCE=(SALES_ORDER_LINES(COST_CENTER))
END_FORM


PROCEDURE_FORM VALIDATE_REQUESTED_DATE

	BEGIN_BLOCK VALIDATE_REQUESTED_DATE
		IF (#LINE_REQUESTED_DATE = "")
			#LINE_REQUESTED_DATE = %TODAY
		END_IF

		PERFORM "GEMLB:LB_L_ATP_AUTO" CALCULATE_DATES ((#COMPANY_CODE), &
					(#DIVISION), &
					(#WAREHOUSE), &
					(#CUSTOMER_NUMBER), &
					(SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE)), &
					(#LINE_REQUESTED_DATE), &
					#TEMP_RECOMMENDED_DATE, &
					#TEMP_SHIPPING_DATE, &
					#TEMP_DELIVERY_DATE, &
					#TEMP_DISTRIBUTION_CALENDAR)

		IF (DAYS(#LINE_REQUESTED_DATE) <> DAYS(#TEMP_RECOMMENDED_DATE))

			IF (#TEMP_DISTRIBUTION_CALENDAR <> "")
				IF (#SOP_REQUIRED_DATE_METHOD = #METHOD_DESPATCH)
					#LINE_REQ_DIST_ZONE = #LINE_WH_DIST_ZONE
				ELSE
					#LINE_REQ_DIST_ZONE = #DEST_ZONE
				END_IF
				MESSAGE/IDENTIFIER/BELL P_93533, &
						(MASK(#DEFAULT_DATE_MASK, #LINE_REQUESTED_DATE)), #LINE_REQ_DIST_ZONE
			ELSE
				MESSAGE/IDENTIFIER/BELL P_93568, &
						(MASK(#DEFAULT_DATE_MASK, #LINE_REQUESTED_DATE)), #COMPANY_CODE
			END_IF
		END_IF

		IF (((DAYS(#LINE_REQUESTED_DATE) < DAYS(%TODAY)) OR (DAYS(#TEMP_SHIPPING_DATE) < DAYS(%TODAY))) &
			AND (#WAREHOUSED_FLAG = #YES))
			MESSAGE/IDENTIFIER/BELL/WAIT P_91540
		END_IF

		IF (#SOP_REQUIRED_DATE_METHOD = #METHOD_DESPATCH)
			#PLANNED_DELIVERY_DATE = #TEMP_DELIVERY_DATE
			#SYS_SHIPPING_DATE = #LINE_REQUESTED_DATE
			#SYS_DELIVERY_DATE = #TEMP_DELIVERY_DATE
		ELSE
			#PLANNED_DELIVERY_DATE =#LINE_REQUESTED_DATE
			#SYS_DELIVERY_DATE = #LINE_REQUESTED_DATE
			#SYS_SHIPPING_DATE = #TEMP_SHIPPING_DATE
		END_IF
	END_BLOCK
END_FORM


PROCEDURE_FORM SALES_PRICING_ROUTINE (#OUT_STATUS, #OUT_MESSAGE)

	BEGIN_BLOCK SALES_PRICING_ROUTINE

		#TRANSACTION_TAXABLE = #TAXABLE
		IF ( #PART_TAXABLE = #NO ) #TRANSACTION_TAXABLE = #NO

		#CHECK_ORDERED_TD	  = #YES

		!  Get Pricing Quantity
		IF (#BATCHES_REQD <> #YES)
			PERFORM "GEMLB:SOP_L_SALES_PRICE_QTY" &
					(#COMPANY_CODE, &
					#PART_CODE, &
					#WAREHOUSE, &
					"", &
					#SALES_UOM, &
					#SALES_ORDER_QTY, &
					#NOMI_UOM, &
					#NOMI_ORDER_QTY, &
					#NON_NOMI_UOM, &
					#NON_NOMI_ORDER_QTY, &
					#PRICE_UOM, &
					#NOMI_PRICE_UOM, &
					"", &
					"", &
					#PRICE_ORDER_QTY, &
					#PQ_STATUS, &
					#PQ_MESSAGE)

			IF (#PQ_STATUS = #NO)
				#OUT_STATUS = #PQ_STATUS
				#OUT_MESSAGE = #PQ_MESSAGE
				EXIT (%SUCCESS)
			END_IF
		END_IF

		IF ((#EDIT_MODE = "ADD") &
		OR  (#COPY_UPDATE = #YES) &
		OR  (#EDIT_MODE = "MODIFY" &
					AND (#RECALC_PRICE_ON_MODIFY = #YES &
						 OR #PRICE_UOM <> #OLD_PRICE_UOM &
						 OR #QTY_VALUE_CHANGE = #YES) &
					AND (#FREIGHT_INVOICED_QTY = 0.0) &
					AND (#TP_INVOICED_QTY = 0.0) &
			))

			PERFORM "GEMLB:SOP_L_SALES_PRICING" &
				(#DIVISION, &
				#CUSTOMER_NUMBER, &
				#PRICE_CODE, &
				#PART_CODE, &
				#WAREHOUSE, &
				#PRICE_ORDER_QTY, &
				#ORDER_DATE, &
				#CONTRACT_PRICES, &
				#PROMOTION_PRICES, &
				#PROM_OVER_CONTRACTS, &
				#CURRENCY_CODE, &
				#CHECK_ORDERED_TD, &
				#COMPANY_CODE, &
				#ORIG_PRICE_ORDER_QTY, &
				#OLD_CONTRACT_NUMBER, &
				#PRICE_UOM, &
 				#PRICING_METHOD, &
 				#TRANSACTION_TAXABLE, &
				"", &
				"", &
				"", &
			    #R1, &
			    #R2, &
			    #R3, &
			    #R4, &
				#R5, &
				#R6 )

			#PRICE		  = #R1
			#PRICE_STATUS	   = #R2
			#MESSAGE		= #R3
			#CONTRACT_NUMBER	= #R4
			#PRICING_METHOD_USED = #R6

			IF ( #PRICE_STATUS = PARAMETER("STATUS_FAIL") &
			OR ( #TRANSACTION_TAXABLE = #NO AND #PRICING_METHOD_USED = #TAX_INCLUSIVE AND #PRICE<>0 ) )

				#PRICE_INC_TAX = #PRICE

				IF ( #PRICE_STATUS = PARAMETER("STATUS_FAIL") )
					#PRICE_STATUS = PARAMETER("SOP_PRICE_STATUS_PRICE")
				END_IF

				IF (#WAREHOUSED_FLAG = #YES)
					#PRICE_CURRENCY_CODE = WAREHOUSE_CONTROLS(SYS_CURRENCY_CODE)
				ELSE
					#PRICE_CURRENCY_CODE = PRODUCT_MASTER(SYS_CURRENCY_CODE)
				END_IF

				PERFORM "GEMLB:SOP_L_GET_DEFAULT_SALES_PRICE" ( &
					#COMPANY_CODE, &
					#WAREHOUSE, &
					#PART_CODE, &
					#PRICING_METHOD, &
					(#TRANSACTION_TAXABLE), &
					#RETURN_STATUS, &
					#RETURN_MESSAGE, &
					#PRICE, &
					#DEFAULT_SOURCE_USED )

				IF ( #TRANSACTION_TAXABLE = #NO )
					IF ( #PRICING_METHOD = #TAX_INCLUSIVE AND  #PRICE = 0 )
						#PRICE = #PRICE_INC_TAX
						#PRICE_CURRENCY_CODE = #CURRENCY_CODE
					ELSE
						#PRICE_STATUS = PARAMETER("SOP_PRICE_STATUS_PRICE")
						BEGIN_CASE (#DEFAULT_SOURCE_USED)
						CASE "WT", "MT"
							#PRICING_METHOD_USED = #TAX_INCLUSIVE
						CASE "WN", "MN"
							#PRICING_METHOD_USED = #TAX_EXCLUSIVE
						END_CASE
					END_IF
				END_IF

				IF (#PRICE_CURRENCY_CODE <> #CURRENCY_CODE &
				AND #CURRENCY_METHOD  <> "0")

					! Use currency control if price currency
					! matches any of the (possibly 3) transaction
					! currencies, but use the costing VT instead
					! of the transaction values VT.

					IF (#PRICE_CURRENCY_CODE = #BASE_CURRENCY_CODE)

						DELETE ALL FROM SYS_CURRENCY_COST_VT

						SYS_CURRENCY_COST_VT(COST_BASE_VALUE)	= #PRICE
						SYS_CURRENCY_COST_VT(COST_DECIMALS)	= PARAMETER("SYS_COST_ROUND")

						ADD TO SYS_CURRENCY_COST_VT

						PERFORM "GEMLB:LB_S_L_COST_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
						IF (#R_STATUS <> #YES)
							#OUT_STATUS	= #R_STATUS
							#OUT_MESSAGE	= #R_MESSAGE
							EXIT (%FAILURE)
						END_IF

						FIND IN SYS_CURRENCY_COST_VT

						#PRICE	= SYS_CURRENCY_COST_VT(COST_TRANS_VALUE)
					END_IF

					IF (#PRICE_CURRENCY_CODE = #BASE_2_CURRENCY_CODE)

						DELETE ALL FROM SYS_CURRENCY_COST_VT

						SYS_CURRENCY_COST_VT(COST_BASE_2_VALUE)	= #PRICE
						SYS_CURRENCY_COST_VT(COST_DECIMALS)	= PARAMETER("SYS_COST_ROUND")

						ADD TO SYS_CURRENCY_COST_VT

						PERFORM "GEMLB:LB_S_L_COST_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
						IF (#R_STATUS <> #YES)
							#OUT_STATUS	= #R_STATUS
							#OUT_MESSAGE	= #R_MESSAGE
							EXIT (%FAILURE)
						END_IF

						FIND IN SYS_CURRENCY_COST_VT

						#PRICE	= SYS_CURRENCY_COST_VT(COST_TRANS_VALUE)

					END_IF

					IF ((#PRICE_CURRENCY_CODE <> #BASE_CURRENCY_CODE) &
					AND (#PRICE_CURRENCY_CODE <> #BASE_2_CURRENCY_CODE))

						PERFORM SAVE_SYS_CURRENCY_CONTROL_VT
						DELETE ALL FROM SYS_CURRENCY_CONTROL_VT
						CLEAR_BUFFER SYS_CURRENCY_CONTROL_VT

						SYS_CURRENCY_CONTROL_VT(COMPANY_CODE)	= #COMPANY_CODE
						SYS_CURRENCY_CONTROL_VT(DIVISION)	= #DIVISION
						SYS_CURRENCY_CONTROL_VT(SOURCE_MODULE)	= PARAMETER("MODULE_SO")
						SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE)	= #CURRENCY_CODE
						SYS_CURRENCY_CONTROL_VT(TRANS_2_CURRENCY_CODE)	= #PRICE_CURRENCY_CODE
						SYS_CURRENCY_CONTROL_VT(RATE_OVERRIDE)	= #NO
						SYS_CURRENCY_CONTROL_VT(CODE_RATE_INPUT_FLAG)	= "C"
						SYS_CURRENCY_CONTROL_VT(CURRENCY_DATE)	= #CURRENCY_DATE

						ADD TO SYS_CURRENCY_CONTROL_VT

						PERFORM "GEMLB:LB_S_L_CURRENCY_RATES" (#R_STATUS, #R_MESSAGE)
						IF (#R_STATUS <> #YES)
							#OUT_STATUS	= #R_STATUS
							#OUT_MESSAGE	= #R_MESSAGE
							EXIT(%FAILURE)
						END_IF

						FIND IN SYS_CURRENCY_CONTROL_VT

						DELETE ALL FROM SYS_CURRENCY_COST_VT

						SYS_CURRENCY_COST_VT(COST_TRANS_2_VALUE)	= #PRICE
						SYS_CURRENCY_COST_VT(COST_DECIMALS)		= PARAMETER("SYS_COST_ROUND")

						ADD TO SYS_CURRENCY_COST_VT

						PERFORM "GEMLB:LB_S_L_COST_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
						IF (#R_STATUS <> #YES)
							#OUT_STATUS	= #R_STATUS
							#OUT_MESSAGE	= #R_MESSAGE
							EXIT (%FAILURE)
						END_IF

						FIND IN SYS_CURRENCY_COST_VT

						#PRICE	= SYS_CURRENCY_COST_VT(COST_TRANS_VALUE)

						PERFORM RESTOR_SYS_CURRENCY_CONTROL_VT
					END_IF
				END_IF

				IF (#PRICE <> 0)
					#MESSAGE = MESSAGE("P_00949")
				END_IF

			END_IF

		ELSE

			IF ( #PRICING_METHOD = #TAX_INCLUSIVE )
				#PRICE = SALES_ORDER_LINES(SALES_PRICE_INC_TAX)
				#NET_PRICE = SALES_ORDER_LINES(SALES_PRICE)
			ELSE
				#PRICE = SALES_ORDER_LINES(SALES_PRICE)
				#NET_PRICE = SALES_ORDER_LINES(SALES_PRICE)
			END_IF

		END_IF
		#OLD_CONTRACT = ""

				! Get the price (see library routine for details)

		IF ( #TRANSACTION_TAXABLE = #NO AND #PRICING_METHOD_USED = #TAX_INCLUSIVE )
			#MESSAGE = ( COMPRESS(#MESSAGE) &" - Tax Inclusive" )
		END_IF

		IF (#PRICE_STATUS  = PARAMETER("SOP_PRICE_STATUS_CONTRACT"))
			SALES_ORDER_LINES(CONTRACT_NUMBER) = #CONTRACT_NUMBER
		ELSE
			#OLD_CONTRACT =	SALES_ORDER_LINES(CONTRACT_NUMBER)
			SALES_ORDER_LINES(CONTRACT_NUMBER) = ""
		END_IF

		#PRICE_CHANGE = #NO

		IF (#LINE_EDIT_MODE = "MODIFY" AND #PART_CHANGE <> #YES AND #COPY_UPDATE <> #YES)

			IF ( (#PRICING_METHOD = #TAX_INCLUSIVE &
				AND SALES_ORDER_LINES(SALES_PRICE_INC_TAX) <> #PRICE) &
			OR   (#PRICING_METHOD <> #TAX_INCLUSIVE &
				AND SALES_ORDER_LINES(SALES_PRICE) <> #PRICE) )

				PERFORM PRICE_MODIFICATION_NOTICE
				IF (%STATUS = %FAILURE)

					IF ( #PRICING_METHOD = #TAX_INCLUSIVE )
						#PRICE = SALES_ORDER_LINES(SALES_PRICE_INC_TAX)
						#NET_PRICE = SALES_ORDER_LINES(SALES_PRICE)
					ELSE
						#PRICE = SALES_ORDER_LINES(SALES_PRICE)
						#NET_PRICE = SALES_ORDER_LINES(SALES_PRICE)
					END_IF

					#OUT_STATUS = #YES
					#OUT_MESSAGE = ""

					EXIT (%SUCCESS)
				END_IF
				! If were modifying the line and we have not changed
				! the part code nor are we changing a copied line (where the price is
				! zero) and the price has changed perform the modification notice
				#PRICE_CHANGE = #YES

			END_IF
		END_IF

		#OUT_STATUS = #YES
		#OUT_MESSAGE = #MESSAGE
		EXIT (%SUCCESS)
	END_BLOCK
END_FORM


PROCEDURE_FORM SET_PART_TAXABLE
	BEGIN_BLOCK LIQUOR_TAX
		IF (#WAREHOUSED_FLAG = #YES)
			FIND IN PRODUCT_WAREHOUSE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=WAREHOUSE=#WAREHOUSE &
				/WITH=PART_CODE=#PART_CODE &
				/LOCK=NONE

			#PART_TAXABLE = PRODUCT_WAREHOUSE(TAXABLE)
		ELSE
			#PART_TAXABLE = PRODUCT_MASTER(TAXABLE)
		END_IF
	END_BLOCK
END_FORM


PROCEDURE_FORM SALES_TAX
	BEGIN_BLOCK SALES_TAX
		IF (#TAXABLE = #YES AND #PART_TAXABLE <> #NO)
			! If we are using sales tax then get the relevant
			! tax from the library routine (see library routine for
			! details of parameters.

			DELETE ALL FROM TAX_TRANSACTIONS_VT

			#TAX_TYPE  = PARAMETER("TAX_TYPE_LINE")

			IF (#WAREHOUSED_FLAG = #YES)
				#PRODUCT_TAX_CODE = PRODUCT_WAREHOUSE(PRODUCT_TAX_CODE)
			ELSE
				#PRODUCT_TAX_CODE = PRODUCT_MASTER(PRODUCT_TAX_CODE)
			END_IF
			IF (#PRODUCT_TAX_CODE = "")
				#PRODUCT_TAX_CODE = #DEF_PART_TAX_CODE
			END_IF
			IF (#CUSTOMER_TAX_CODE = "")
				#CUSTOMER_TAX_CODE = #DEF_CUST_TAX_CODE
			END_IF

			PERFORM LOAD_TAX_VT (#TAX_TYPE)
			 IF (%STATUS = %EMPTY)
				#TAX_MODE = "C"
			ELSE
			 	#TAX_MODE = "R"
			END_IF
			IF (#PART_CHANGE = #YES) #TAX_MODE = "C"
			IF (#OPT = "TAX") #TAX_MODE = "R"

			PERFORM SETUP_TAX_CONTROL_VT

			LB_TAX_CONTROL_VT(PART_CODE) = SALES_ORDER_LINES(PART_CODE)
			LB_TAX_CONTROL_VT(WAREHOUSE) = SALES_ORDER_LINES(WAREHOUSE)
			LB_TAX_CONTROL_VT(CUSTOMER_NUMBER) = SALES_ORDER_HEADERS(CUSTOMER_NUMBER)
			LB_TAX_CONTROL_VT(INVOICE_ADDRESS_CODE) = SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)
			LB_TAX_CONTROL_VT(DELIVERY_ADDRESS_CODE) = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
			LB_TAX_CONTROL_VT(TRANSACTION_NUMBER) = SALES_ORDER_HEADERS(ORDER_NUMBER)
			LB_TAX_CONTROL_VT(TRANSACTION_TYPE) = PARAMETER("TTYPE_SO")
			LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE) = #PRODUCT_TAX_CODE
			LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE) = #CUSTOMER_TAX_CODE
			LB_TAX_CONTROL_VT(ORDER_LINE_TYPE) = ""
			LB_TAX_CONTROL_VT(FORM_TITLE) = MESSAGE("P_93572")
			LB_TAX_CONTROL_VT(PRICE_ORDER_QTY) = #PRICE_ORDER_QTY
			LB_TAX_CONTROL_VT(SALES_PRICE) = #PRICE
			LB_TAX_CONTROL_VT(LINE_DISCOUNT) = #LINE_DISCOUNT

	        PERFORM "GEMLB:LB_L_TAX_CONTROL" ( #TAX_MODE, #ERROR_OCCURRED, #ERROR_MESSAGE, #TAX_RATE_CHANGED )

			IF (%STATUS = %BACK OR %STATUS = %EXIT)
				EXIT (%STATUS)
			END_IF

			IF ( #ERROR_OCCURRED ) ERROR/TEXT_ONLY #ERROR_MESSAGE

			FIND IN LB_TAX_CONTROL_VT

			#LINE_DISCOUNTED_TAX = LB_TAX_CONTROL_VT(TOTAL_TAX_AMOUNT)
			#PRODUCT_TAX_CODE = LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE)
			#CUSTOMER_TAX_CODE = LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE)
			#TAX_ON_CASH = LB_TAX_CONTROL_VT(TAX_ON_CASH)

!			PERFORM "GEMLB:LB_TAX_ANALYSIS" &
!				(#TAX_MODE, &
!				 #TAX_FLAG, &
!				 #PRODUCT_TAX_CODE, &
!				 #CUSTOMER_TAX_CODE, &
!				 (#LINE_GOODS_VALUE-#LINE_DISCOUNT), &
!				 #COMPANY_CODE, &
!				 #CURRENCY_DECIMAL, &
!				 #CURRENCY_MASK, &
!				 (PARAMETER("MODULE_AR")), &
!				 (MESSAGE("P_93572")), &
!				 (SALES_ORDER_LINES(PART_CODE)), &
!				 (SALES_ORDER_LINES(WAREHOUSE)), &
!				 "", &
!				 "", &
!				 #PRICE_ORDER_QTY, &
!				 #TAX_ON_CASH, &
!				 #DIVISION, &
!				 #LINE_DISCOUNTED_TAX)

			PERFORM DELETE_PREVIOUS_TAX_RECORDS (#TAX_TYPE)
			PERFORM CREATE_TAX_DETAIL_FROM_VT (#TAX_TYPE)

			! AR Freight tax?
			IF ((#AR_FREIGHT_IN_USE = #YES) &
			AND (#FREIGHT_TAXABLE = #YES) &
			AND (SALES_ORDER_LINES(FREIGHT) <> 0.0) &
			AND (SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR) =1))
				! AR Freight Tax on line on applies if freight is
				! taxable for this division and the goods price
				! does not include freight but the customer pays
				! freight.

				DELETE ALL FROM TAX_TRANSACTIONS_VT

				#TAX_TYPE  = PARAMETER("TAX_TYPE_FREIGHT")
				PERFORM LOAD_TAX_VT (#TAX_TYPE)

				#FREIGHT_TAX_CODE = #DEF_FREIGHT_TAX_CODE

				PERFORM SETUP_TAX_CONTROL_VT

				LB_TAX_CONTROL_VT(PART_CODE) = SALES_ORDER_LINES(PART_CODE)
				LB_TAX_CONTROL_VT(WAREHOUSE) = SALES_ORDER_LINES(WAREHOUSE)
				LB_TAX_CONTROL_VT(CUSTOMER_NUMBER) = SALES_ORDER_HEADERS(CUSTOMER_NUMBER)
				LB_TAX_CONTROL_VT(INVOICE_ADDRESS_CODE) = SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)
				LB_TAX_CONTROL_VT(DELIVERY_ADDRESS_CODE) = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
				LB_TAX_CONTROL_VT(TRANSACTION_NUMBER) = SALES_ORDER_HEADERS(ORDER_NUMBER)
				LB_TAX_CONTROL_VT(TRANSACTION_TYPE) = PARAMETER("TTYPE_SO")
				LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE) = #FREIGHT_TAX_CODE
				LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE) = #CUSTOMER_TAX_CODE
				LB_TAX_CONTROL_VT(ORDER_LINE_TYPE) = "F"
				LB_TAX_CONTROL_VT(FORM_TITLE) = MESSAGE("P_93391")
				LB_TAX_CONTROL_VT(PRICE_ORDER_QTY) = 1
				LB_TAX_CONTROL_VT(SALES_PRICE) = SALES_ORDER_LINES(FREIGHT)
				LB_TAX_CONTROL_VT(LINE_DISCOUNT) = 0

		        PERFORM "GEMLB:LB_L_TAX_CONTROL" ( #TAX_MODE, #ERROR_OCCURRED, #ERROR_MESSAGE, #TAX_RATE_CHANGED )

				IF (%STATUS = %BACK OR %STATUS = %EXIT)
					EXIT (%STATUS)
				END_IF

				IF ( #ERROR_OCCURRED ) ERROR/TEXT_ONLY #ERROR_MESSAGE

				FIND IN LB_TAX_CONTROL_VT

				#LINE_FREIGHT_TAX = LB_TAX_CONTROL_VT(TOTAL_TAX_AMOUNT)
				#FREIGHT_TAX_CODE = LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE)
				#CUSTOMER_TAX_CODE = LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE)
				#TAX_ON_CASH = LB_TAX_CONTROL_VT(TAX_ON_CASH)

				! use same tax mode as assigned for sales tax
!				PERFORM "GEMLB:LB_TAX_ANALYSIS" &
!						(#TAX_MODE, &
!						 #TAX_FLAG, &
!						 #FREIGHT_TAX_CODE, &
!						 #CUSTOMER_TAX_CODE, &
!				 		(SALES_ORDER_LINES(FREIGHT)), &
!						 #COMPANY_CODE, &
!						 #CURRENCY_DECIMAL, &
!						 #CURRENCY_MASK, &
!						 (PARAMETER("MODULE_AR")), &
!						 (MESSAGE("P_93391")), &
!						 (SALES_ORDER_LINES(PART_CODE)), &
!						 (SALES_ORDER_LINES(WAREHOUSE)), &
!						 "", &
!						 "F", &
!						 "", &
!						 #TAX_ON_CASH, &
!						 #DIVISION, &
!						 #LINE_FREIGHT_TAX)

				PERFORM DELETE_PREVIOUS_TAX_RECORDS (#TAX_TYPE)
				PERFORM CREATE_TAX_DETAIL_FROM_VT (#TAX_TYPE)

			ELSE
				#TAX_TYPE  = PARAMETER("TAX_TYPE_FREIGHT")
				PERFORM DELETE_PREVIOUS_TAX_RECORDS (#TAX_TYPE)

				#LINE_FREIGHT_TAX = 0.0
			END_IF

			#TAX_MODE = "R"

		ELSE
			#TAX_TYPE  = PARAMETER("TAX_TYPE_LINE")
			PERFORM DELETE_PREVIOUS_TAX_RECORDS (#TAX_TYPE)

			#TAX_TYPE  = PARAMETER("TAX_TYPE_FREIGHT")
			PERFORM DELETE_PREVIOUS_TAX_RECORDS (#TAX_TYPE)

			#LINE_DISCOUNTED_TAX = 0.0
			#LINE_FREIGHT_TAX = 0.0
			MESSAGE/IDENTIFIER/WAIT P_22104
		END_IF

		#LINE_TAX = #LINE_DISCOUNTED_TAX + #LINE_FREIGHT_TAX
	END_BLOCK
END_FORM


PROCEDURE_FORM CALC_LINE_TOTAL
	BEGIN_BLOCK CALC_LINE_TOTAL
		#LINE_VALUE = #QTY_TIMES_PRICE &
				+ (SALES_ORDER_LINES(FREIGHT) * SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR))
		#LINE_TOTAL = #LINE_VALUE - #LINE_DISCOUNT + #LINE_TAX
	END_BLOCK
END_FORM


PROCEDURE_FORM CONVERT_VALUE_TO_BASE (#IN_CURR_VALUE, #OUT_BASE_VALUE)

	BEGIN_BLOCK CONVERT_VALUE_TO_BASE
		IF (#CURRENCY_METHOD <> 0)

			PERFORM RESTOR_SYS_CURRENCY_CONTROL_VT

			DELETE ALL FROM SYS_CURRENCY_VALUES_VT

			SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE)	= #IN_CURR_VALUE

			ADD TO SYS_CURRENCY_VALUES_VT

			PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)

			IF (#R_STATUS <> #YES)
				ERROR/WAIT #R_MESSAGE
				EXIT (%FAILURE)
			END_IF

			FIND IN SYS_CURRENCY_VALUES_VT

			#OUT_BASE_VALUE	= SYS_CURRENCY_VALUES_VT(BASE_VALUE)
		ELSE
			#OUT_BASE_VALUE = #IN_CURR_VALUE
		END_IF
	END_BLOCK

END_FORM


PROCEDURE_FORM CONVERT_BASE_TO_VALUE (#IN_BASE_VALUE, #OUT_CURR_VALUE)

	BEGIN_BLOCK CONVERT_BASE_TO_VALUE
		IF (#CURRENCY_METHOD <> 0)

			PERFORM RESTOR_SYS_CURRENCY_CONTROL_VT

			DELETE ALL FROM SYS_CURRENCY_VALUES_VT

			SYS_CURRENCY_VALUES_VT(BASE_VALUE)	= #IN_BASE_VALUE

			ADD TO SYS_CURRENCY_VALUES_VT

			PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)

			IF (#R_STATUS <> #YES)
				ERROR/WAIT #R_MESSAGE
				EXIT (%FAILURE)
			END_IF

			FIND IN SYS_CURRENCY_VALUES_VT

			#OUT_CURR_VALUE	= SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE)
		ELSE
			#OUT_CURR_VALUE = #IN_BASE_VALUE
		END_IF
	END_BLOCK

END_FORM


PROCEDURE_FORM DISCOUNTING_ROUTINE

	BEGIN_BLOCK DISCOUNTING_ROUTINE
		IF ((#AR_FREIGHT_IN_USE = #YES) &
		AND (#LINE_PRICE_FREIGHT_INCLUSIVE = #YES))
			IF (#FREIGHT_TAXABLE = #YES)
				#LINE_GOODS_VALUE = #QTY_TIMES_PRICE
			ELSE
				#LINE_GOODS_VALUE = #QTY_TIMES_PRICE - SALES_ORDER_LINES(FREIGHT)
			END_IF
		ELSE
			#LINE_GOODS_VALUE = #QTY_TIMES_PRICE
		END_IF

		IF ((#AR_FREIGHT_IN_USE = #YES) &
		AND (#DIV_LINE_DISC_FREIGHT_INC	= #YES) &
		AND (#LINE_CUST_PAYS_FREIGHT = #YES))
			#DISCOUNT_BASIS = #LINE_GOODS_VALUE + SALES_ORDER_LINES(FREIGHT)
		ELSE
			#DISCOUNT_BASIS = #LINE_GOODS_VALUE
		END_IF

		IF (#LD_IN_USE <> #YES) EXIT (%SUCCESS)

		IF ((#EDIT_MODE = "ADD") &
		OR (#EDIT_MODE = "MODIFY" AND (#PART_CHANGE = #YES &
						OR #COPY_UPDATE = #YES &
						OR #QTY_VALUE_CHANGE = #YES &
						OR #RE_CALC_FREIGHT = #YES)))

			! Because line discounts can be freight inclusive or exclusive,
			! if freight value is re-calculated, need to re-calculate
			! line discount value too.

			#PRODUCT_DISCOUNT_GROUP=PRODUCT_MASTER(PRODUCT_DISCOUNT_GROUP)
			IF (#LD_BREAK =PARAMETER("DISCOUNT_BREAK_QTY"))

				! SALES_DISCOUNT_LINES table stores allways the currency,
				! wheather applicable or not. So when QTY based the base
				! currency is used.
				#PAR_CURRENCY_CODE =#BASE_CURRENCY_CODE
			ELSE
				#PAR_CURRENCY_CODE =#CURRENCY_CODE
			END_IF

			IF (#LD_OVERRIDE=#YES)
				#LINE_DISCOUNT_OLD		 = #LINE_DISCOUNT
				#PERCENT_DISCOUNT_OLD = #PERCENT_DISCOUNT
			END_IF

			PERFORM CONVERT_QTYS ((SALES_ORDER_LINES(WAREHOUSE)), &
				"", &
				(SALES_ORDER_LINES(PART_CODE)), &
				#SALES_UOM, &
				#SALES_ORDER_QTY, &
				(PRODUCT_MASTER(UNIT_SALES)), &
				#DISCOUNT_QTY, &
				#R1)

			IF (%STATUS <> %SUCCESS)
				#DISCOUNT_QTY = 0
			END_IF

			PERFORM "GEMLB:SOP_L_LINE_DISCOUNTS" &
				(#COMPANY_CODE, &
				#DIVISION, &
				#LD_INV, &
				#LD_CUS, &
				#CUSTOMER_NUMBER, &
				#LD_CUST_GROUP, &
				#PART_CODE, &
				#WAREHOUSE, &
				#PRODUCT_DISCOUNT_GROUP, &
				#LD_BREAK, &
				#LD_CALC, &
				#DISCOUNT_QTY, &
				#DISCOUNT_BASIS, &
				#ORDER_DATE, &
				#PAR_CURRENCY_CODE, &
				#R1, &
				#R2, &
				#R3)

			#LD_STATUS		= #R3
			#LINE_DISCOUNT		= #R1
			#PERCENT_DISCOUNT	= #R2

				! Peform the library routine for line discounts
				! See routine for details of parameters

			IF (#EDIT_MODE = "MODIFY" &
			AND SALES_ORDER_LINES(LINE_DISCOUNT) <> #LINE_DISCOUNT &
			AND #PART_CHANGE <> #YES &
			AND #COPY_UPDATE <> #YES)

				IF (#LD_CALC = #DISCOUNT_BREAK_AMOUNT)
					#TEXT1 = #CURRENCY_CODE
					#TEXT2 = "%"
				ELSE
					#TEXT1 = "%"
					#TEXT2 = #CURRENCY_CODE
				END_IF

				IF (#LD_OVERRIDE = #YES)
					PERFORM DISCOUNT_MODIFICATION_NOTICE
					IF (%STATUS = %FAILURE)
						#LINE_DISCOUNT=SALES_ORDER_LINES(LINE_DISCOUNT)
						#PERCENT_DISCOUNT = #PERCENT_DISCOUNT_OLD
	                                        IF ((#DISCOUNT_BASIS - #LINE_DISCOUNT) <0)
        	                                        MESSAGE/IDENTIFIER/BELL/WAIT P_59121
                	                                EXIT (%SUCCESS)
                        	                END_IF
						EXIT (%SUCCESS)
					END_IF
				END_IF
			END_IF
				! If were modifying the calculated discount has changed
				! but not as a result of changing the part or updating a
				! copied line, perform the modification notice. If this
				! fails reset the line discount to what it was before

			IF (#LD_STATUS = (PARAMETER("STATUS_SUCCESS")) &
			AND #LD_CALC=(PARAMETER("DISCOUNT_BREAK_PERCEN")))
				#MESSAGE= MESSAGE("P_00850",#PERCENT_DISCOUNT)
				ERROR/TEXT_ONLY/NOBELL (#MESSAGE)
			END_IF
			! Print a message to say what the discount calc was based on
		END_IF
	END_BLOCK
END_FORM


PROCEDURE_FORM VALIDATE_PRODUCT

	BEGIN_BLOCK VALIDATE_PRODUCT
		FIND IN PRODUCT_MASTER &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PART_CODE=#PART_CODE

		IF (%STATUS<>%SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_42014
			EXIT (%FAILURE)
		END_IF

		IF (PRODUCT_MASTER(ACTIVATION_STATUS) <> (PARAMETER("STATUS_ACTIVE")))
			MESSAGE/IDENTIFIER/BELL/WAIT P_02197
			EXIT (%FAILURE)
		END_IF

		#WAREHOUSED_FLAG	= PRODUCT_MASTER(WAREHOUSED_FLAG)
		#BATCH_EXPIRY		= PRODUCT_MASTER(BATCH_EXPIRY)
		#EC_PROCESSED_INDICATOR	= PRODUCT_MASTER(SYS_EC_PROCESSED_INDICATOR)
		#EC_TARIFF_CODE		= PRODUCT_MASTER(SYS_TARIFF_CODE)
		#IC_UOM_CONTROL		= PRODUCT_MASTER(IC_PRODUCT_UOM_CONTROL)
		#IC_PACKAGED_PRODUCT	= PRODUCT_MASTER(IC_PACKAGED_PRODUCT)
		#PART_DESCRIPTION_1     = PRODUCT_MASTER(PART_DESC_1)
		#PART_DESCRIPTION_2     = PRODUCT_MASTER(PART_DESC_2)
		#IC_UNIT_CAPACITY       = PRODUCT_MASTER(IC_UNIT_CAPACITY)
		#MAKE_BUY               = ""

		#TP_FLOOR_PRICE 	= PRODUCT_MASTER(TP_PRODUCT_FLOOR_PRICE)
		#TP_FLOOR_PERCENT	= PRODUCT_MASTER(TP_PRODUCT_FLOOR_PERCENT)
		IF (#TP_FLOOR_PRICE > 0.0)
			#TP_BASE_PRICE = #TP_FLOOR_PRICE
			PERFORM CONVERT_BASE_TO_VALUE (#TP_BASE_PRICE,#TP_FLOOR_PRICE)
		END_IF

		#ATP_IN_USE_FOR_PART = #NO
		IF (#ATP_AT_ORDER_ENTRY = #YES AND PRODUCT_MASTER(ATP_IN_USE) = #YES)
			#ATP_IN_USE_FOR_PART = #YES
		END_IF

		IF (#BATCH_EXPIRY = "") #BATCH_EXPIRY = #NO

		#BATCHES_REQD = #NO

		IF (#WAREHOUSED_FLAG=#YES &
			AND PRODUCT_MASTER(BATCHES_AT_SALES_ORDERS)=#YES &
			AND PRODUCT_MASTER(BATCHES_EXIST)=#YES)

			#BATCHES_REQD = #YES
		END_IF

		IF (PRODUCT_MASTER(BATCHES_EXIST) = #YES)
			IF (PRODUCT_MASTER(BATCHES_AT_SALES_ORDERS) <> #YES &
			AND PRODUCT_MASTER(BATCHES_AT_PICK_SELECT) <> #YES &
			AND PRODUCT_MASTER(BATCHES_AT_PICK_CONFIRM) <> #YES &
			AND PRODUCT_MASTER(BATCHES_AT_DESPATCH_CONFIRM) <> #YES &
			AND PRODUCT_MASTER(BATCHES_AT_INVOICING) <> #YES)

				MESSAGE/IDENTIFIER/BELL/WAIT P_82191
				EXIT (%FAILURE)
			END_IF
		END_IF

		IF ((#PHYSICAL_IN_USE = #YES) &
		   OR  (#LINE_EC_REPORT_TYPE <> "") &
		   OR  ((#WAREHOUSED_FLAG = #YES) AND (#AR_FREIGHT_IN_USE = #YES)))
			#WEIGHT_UOM = PRODUCT_MASTER(WEIGHT_UOM)
			#VOLUME_UOM = PRODUCT_MASTER(CUBIC_SIZE_UOM)
		END_IF
	END_BLOCK

	BEGIN_BLOCK BOD
		IF (#WAREHOUSED_FLAG=#YES)

			IF (#LINE_DIST_BOD_CODE = "")
				#LINE_DIST_BOD_CODE = #DEF_BOD_CODE
			END_IF
			! Try to find a default pricing/supply warehouse
			! in the BOD for the order line, with the order header
			! BOD used if the line BOD has not yet been stored.

			IF (#WAREHOUSE = "" OR #OLD_PART_CODE <> #PART_CODE)

				START_STREAM PRICING_WH &
					/TABLE=SYS_BILL_OF_DISTRIBUTION,PRODUCT_WAREHOUSE &
					/LOCK=NONE &
					/WITH=A.COMPANY_CODE=#COMPANY_CODE &
					/WITH=A.SYS_BOD_CODE=#LINE_DIST_BOD_CODE &
					/WITH=B.COMPANY_CODE=A.COMPANY_CODE &
					/WITH=B.PART_CODE=#PART_CODE &
					/WITH=B.WAREHOUSE=A.WAREHOUSE &
					/SORTED_BY=SYS_PREFERENCE_RANKING &
					/FIRST=1

				FETCH PRICING_WH

				#WAREHOUSE = PRICING_WH:SYS_BILL_OF_DISTRIBUTION(WAREHOUSE)

				FIND IN WAREHOUSE_CONTROLS &
					/LOCK=NONE &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=WAREHOUSE=#WAREHOUSE

				IF (%STATUS <> %SUCCESS)
					MESSAGE/IDENTIFIER/BELL/WAIT P_00366,#WAREHOUSE
				END_IF
			END_IF
		ELSE
			#PART_TAXABLE   = PRODUCT_MASTER(TAXABLE)
			#LINE_TM_IN_USE = #NO
			#WAREHOUSE		 = ""
		END_IF
	END_BLOCK

	BEGIN_BLOCK RE_GET_FREIGHT_PREFIX
		IF (#AR_FREIGHT_IN_USE = #YES)
			PERFORM GET_FREIGHT_DORC_IND_VALUE ( &
					#LINE_PRICE_FREIGHT_INCLUSIVE, &
					#LINE_CUST_PAYS_FREIGHT, &
					(#WAREHOUSED_FLAG), &
					SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR), &
					#FREIGHT_PREFIX, &
					#LINE_FREIGHT_APPLICABLE)

			! #line_price_freight_inclusive and #line_cust_pays_freight
			! values are assigned as part of the record Add variable
			! setup.
		ELSE
			SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR) = ""
			#FREIGHT_PREFIX = ""
			#LINE_FREIGHT_APPLICABLE = #NO
		END_IF
	END_BLOCK

	BEGIN_BLOCK GET_UNITS
		FIND IN PART_MASTER_BY_CUSTOMER &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=PART_CODE=#PART_CODE &
				/WITH=CUSTOMER_NUMBER=#CUSTOMER_NUMBER &
				/WITH=DIVISION=#DIVISION &
				/WITH=SYS_CURRENCY_CODE=#CURRENCY_CODE

		IF (%STATUS=%SUCCESS)
			#SPEC_CODE_MANDATORY = PART_MASTER_BY_CUSTOMER(MANDATORY_SPECIFICATION)

			!Change 009
			IF (#LINE_EDIT_MODE = "ADD") 
				#SPECIFICATION_CODE = PART_MASTER_BY_CUSTOMER(SPECIFICATION_CODE)
			ELSE
				!Change 009
				!IF (PART_MASTER_BY_CUSTOMER(SPECIFICATION_CODE) <> "")
				IF (PART_MASTER_BY_CUSTOMER(SPECIFICATION_CODE) <> "" AND #SPEC_CODE_MANDATORY )
					#SPECIFICATION_CODE = PART_MASTER_BY_CUSTOMER(SPECIFICATION_CODE)
				END_IF
			END_IF
			!Change 009 End

			IF (#OLD_PART_CODE <> #PART_CODE)
				SALES_ORDER_LINES(CUSTOMERS_PART_CODE) = PART_MASTER_BY_CUSTOMER(CUSTOMERS_PART_CODE)
				#SALES_UOM = PART_MASTER_BY_CUSTOMER(UNIT_SALES)
				#NOMI_UOM = PART_MASTER_BY_CUSTOMER(SOP_NOMINATED_UNIT)
				#PRICE_UOM = PART_MASTER_BY_CUSTOMER(UNIT_PRICE)
				#NOMI_PRICE_UOM = PART_MASTER_BY_CUSTOMER(SOP_NOMINATED_PRICE_UNIT)
			END_IF
		ELSE
			!Change 009
			!#SPEC_CODE_MANDATORY	= ""
			!#SPECIFICATION_CODE	= ""
			IF ( #SPECIFICATION_CODE = "" ) 

				FIND IN SPECIFICATION_CODES &
					/LOCK=NONE &
					/WITH=COMPANY_CODE = #COMPANY_CODE &
					/WITH=PART_CODE = #PART_CODE &
					/WITH=SPECIFICATION_CODE = 1
			
				IF ( %STATUS = %SUCCESS ) 
					#SPEC_CODE_MANDATORY	= PARAMETER("LANGUAGE_NO")
					#SPECIFICATION_CODE	= 1
				ELSE
			!Change 009 End
				
					#SPEC_CODE_MANDATORY	= ""
					#SPECIFICATION_CODE	= ""

			!Change 009
				END_IF  
			END_IF 
			!Change 009 End

			IF (#OLD_PART_CODE <> #PART_CODE)
				SALES_ORDER_LINES(CUSTOMERS_PART_CODE) = ""
				#SALES_UOM		= PRODUCT_MASTER(UNIT_SALES)
				#NOMI_UOM		= PRODUCT_MASTER(SOP_NOMINATED_UNIT)
				#PRICE_UOM		= PRODUCT_MASTER(UNIT_PRICE)
				#NOMI_PRICE_UOM		= PRODUCT_MASTER(SOP_NOMINATED_PRICE_UNIT)
			END_IF
		END_IF

		IF (#OLD_PART_CODE <> #PART_CODE)
			PERFORM GET_NON_NOMINATED_UOM (#PART_CODE, #NOMI_UOM, #NON_NOMI_UOM)

			SALES_ORDER_LINES(UNIT_SALES) = #SALES_UOM
			SALES_ORDER_LINES(SOP_NOMINATED_PRICE_UNIT) = #NOMI_PRICE_UOM
			SALES_ORDER_LINES(UNIT_PRICE)=#PRICE_UOM
			SALES_ORDER_LINES(SOP_NOMINATED_UNIT) = #NOMI_UOM

			#OLD_PRICE_UOM = #PRICE_UOM

			PERFORM "GEMLB:LB_GET_QUANTITY_MASK"(#COMPANY_CODE, &
					(#PART_CODE), &
					#SALES_UOM,     &
					#SALES_UOM_MASK,	&
					#SALES_UOM_NOD)

			IF (%STATUS <> %SUCCESS)
				MESSAGE/IDENTIFIER/BELL/WAIT P_62355
				EXIT (%FAILURE)
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK OTHER_CODES
		IF (#OLD_PART_CODE <> #PART_CODE)
			SALES_ORDER_LINES(PRODUCT_GROUP) = PRODUCT_MASTER(PRODUCT_GROUP)
		END_IF
	END_BLOCK
END_FORM


PROCEDURE_FORM VALIDATE_WAREHOUSE

	BEGIN_BLOCK VALIDATE_WAREHOUSE
		FIND IN WAREHOUSE_CONTROLS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=WAREHOUSE=#WAREHOUSE

		IF (%STATUS <> %SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00366,#WAREHOUSE
			EXIT (%FAILURE)
		END_IF

		IF (WAREHOUSE_CONTROLS(ACTIVATE_MODULE) <> #YES)
			MESSAGE/IDENTIFIER/BELL/WAIT P_42027
			EXIT (%FAILURE)
		END_IF

		!must use temp variable or get bad description if BOD not found
		#WAREHOUSE_DESCRIPTION = WAREHOUSE_CONTROLS(WAREHOUSE_DESCRIPTION)

		IF 	(#LEGAL_POSTING_CODE = #JAPAN_LEGAL_POSTING AND &
			WAREHOUSE_CONTROLS(DIVISION) <> SALES_ORDER_HEADERS(DIVISION))
				MESSAGE/IDENTIFIER/BELL/WAIT P_06007
				EXIT (%FAILURE)
		END_IF

		IF (#SECURITY_ACTIVE = #YES AND #WAREHOUSE <> "")
			FIND IN SECURITY_PERIOD_ACCESS_VT &
				/WITH=SYS_ACCESS_TYPE=(PARAMETER("ACCESS_TYPE_WAREHOUSE")) &
				/WITH=SYS_ACCESS_CODE= #WAREHOUSE &
				/WITH=SOURCE_MODULE=(PARAMETER("MODULE_SO"))

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_10631,(PARAMETER("MODULE_SO"))
				EXIT (%FAILURE)
			END_IF

			IF (SECURITY_PERIOD_ACCESS_VT(SYS_ALLOW_ACCESS) <> #YES)
				MESSAGE/IDENTIFIER/BELL/WAIT P_10631,(PARAMETER("MODULE_SO"))
				EXIT (%FAILURE)
			END_IF
		END_IF

		#LINE_WH_DIST_ZONE = WAREHOUSE_CONTROLS(SYS_DISTRIBUTION_ZONE)
		#LINE_WH_COUNTRY = WAREHOUSE_CONTROLS(SYS_COUNTRY)

		IF ((#LINE_WH_COUNTRY = "") AND (#LINE_TM_IN_USE = #YES))
			#LINE_TM_IN_USE = #NO
		END_IF
		IF ((#LINE_WH_DIST_ZONE = "") AND (#LINE_TM_IN_USE = #YES))
			#LINE_TM_IN_USE = #NO
		END_IF
		PERFORM GET_DIST_ZONE_DETAILS (#LINE_WH_COUNTRY, #LINE_WH_DIST_ZONE)
		IF (%STATUS = %FAILURE)
			#LINE_TM_IN_USE = #NO
		END_IF

		#WHSE_IN_BOD = #YES
		FIND IN SYS_BILL_OF_DISTRIBUTION &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=SYS_BOD_CODE=#LINE_DIST_BOD_CODE &
			/WITH=WAREHOUSE=#WAREHOUSE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/WAIT P_93557, #WAREHOUSE, #LINE_DIST_BOD_CODE
			#WHSE_IN_BOD = #NO
		END_IF

	END_BLOCK
END_FORM


PROCEDURE_FORM VALIDATE_PRODUCT_WAREHOUSE

	BEGIN_BLOCK VALIDATE_PRODUCT_WAREHOUSE

		FIND IN PRODUCT_WAREHOUSE &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=WAREHOUSE=#WAREHOUSE &
			/WITH=PART_CODE=#PART_CODE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_42024
			EXIT (%FAILURE)
		END_IF
		! Validate the part code

		IF (PRODUCT_WAREHOUSE(ACTIVATION_STATUS) <> (PARAMETER("STATUS_ACTIVE")) )
			MESSAGE/IDENTIFIER/BELL/WAIT P_02198
			EXIT (%FAILURE)
		END_IF

		IF (PRODUCT_WAREHOUSE(SALES_ORDERS_FLAG)<>#YES)
			MESSAGE/IDENTIFIER/BELL/WAIT P_52342
			EXIT (%FAILURE)
		END_IF

		#PART_TAXABLE		= PRODUCT_WAREHOUSE(TAXABLE)
		#ATP_IN_USE_FOR_PW		 = PRODUCT_WAREHOUSE(ATP_IN_USE)
	 	IF (#SYS_TM_IN_USE = #YES)
			#LINE_TM_IN_USE = WAREHOUSE_CONTROLS(TM_LOAD_PLANNING)
		ELSE
			#LINE_TM_IN_USE = #NO
		END_IF
		IF (#LINE_TM_IN_USE = "")
			#LINE_TM_IN_USE = #NO
		END_IF

		#EC_PROCESSED_INDICATOR	= PRODUCT_WAREHOUSE(SYS_EC_PROCESSED_INDICATOR)
		#EC_TARIFF_CODE		= PRODUCT_WAREHOUSE(SYS_TARIFF_CODE)
		#MAKE_BUY       = PRODUCT_WAREHOUSE(MAKE_BUY)
	END_BLOCK
END_FORM


PROCEDURE_FORM INITIALIZE_CHARACTERISTICS

	BEGIN_BLOCK INITIALIZE_CHARACTERISTICS
		IF (PRODUCT_MASTER(BATCHES_EXIST)=#YES &
			AND PRODUCT_MASTER(CHARACTERISTICS_AT_ORDER_ENTRY) = #YES)

			DELETE ALL FROM SOP_ORDER_CHARS_VT

			IF (#EDIT_MODE <> "MODIFY")
				PERFORM LOAD_DEFAULT_CHARS
			ELSE
				IF (#PART_CODE <> #OLD_PART_CODE)
					PERFORM DELETE_CHAR_LIMITS
					PERFORM LOAD_DEFAULT_CHARS
					! load the chars for this sales order line on modify
				ELSE
					PERFORM LOAD_CHARS
				END_IF
			END_IF

			FIND IN SOP_ORDER_CHARS_VT

			IF (%STATUS = %SUCCESS)
				PERFORM SPECIFICATION_CODE
			END_IF
		END_IF
	END_BLOCK
END_FORM


PROCEDURE_FORM LOAD_DEFAULT_CHARS &
	/LOCK=NONE &
	/TABLE=IC_PRODUCT_CHARACTERISTICS &
	/WITH=COMPANY_CODE = #COMPANY_CODE &
	/WITH=PART_CODE=#PART_CODE &
	/WITH=IC_ACTIVE_AT_SO_ENTRY=#YES	&
	/WITH=IC_CHARACTERISTIC_TYPE = PARAMETER("MP_CHARACTERISTIC_TYPE_LOT")

	BEGIN_BLOCK ADD_RECORD

			FIND IN SOP_ORDER_CHARS_VT &
				/LOCK=WRITE &
				/WITH=CHARACTERISTIC_CODE = IC_PRODUCT_CHARACTERISTICS(CHARACTERISTIC_CODE)

			IF (%STATUS <> %SUCCESS)
				CLEAR_BUFFER SOP_ORDER_CHARS_VT

				SOP_ORDER_CHARS_VT(CHARACTERISTIC_CODE) = IC_PRODUCT_CHARACTERISTICS(CHARACTERISTIC_CODE)
				SOP_ORDER_CHARS_VT(IC_HIGH_LIMIT_NUMERIC) = IC_PRODUCT_CHARACTERISTICS(IC_DEF_CHAR_NUMERIC)
				SOP_ORDER_CHARS_VT(IC_HIGH_LIMIT_TEXT) = IC_PRODUCT_CHARACTERISTICS(IC_DEF_CHAR_TEXT)
				SOP_ORDER_CHARS_VT(IC_LOW_LIMIT_NUMERIC) = IC_PRODUCT_CHARACTERISTICS(IC_DEF_CHAR_NUMERIC)
				SOP_ORDER_CHARS_VT(IC_LOW_LIMIT_TEXT) = IC_PRODUCT_CHARACTERISTICS(IC_DEF_CHAR_TEXT)

				!Change 010 - 27-Jan-2005	PTD		Greenwich Engineering, LLC
				! Add Sort order to VT so that is can be used in the maintenance table form
				SOP_ORDER_CHARS_VT(SORT_ORDER) = IC_PRODUCT_CHARACTERISTICS(VOL_SORT_ORDER)
				!Change 010 End

				ADD TO SOP_ORDER_CHARS_VT
			END_IF

	END_BLOCK

END_FORM


PROCEDURE_FORM DELETE_CHAR_LIMITS &
	/LOCK=WRITE &
	/TABLE=SOP_CHARACTERISTIC_LIMITS &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION=SALES_ORDER_LINES(DIVISION) &
	/WITH=ORDER_NUMBER=SALES_ORDER_LINES(ORDER_NUMBER) &
	/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER)


	BEGIN_BLOCK DELETE
		DELETE FROM SOP_CHARACTERISTIC_LIMITS
	END_BLOCK

END_FORM


PROCEDURE_FORM LOAD_CHARS &
	/LOCK=NONE &
	/TABLE=SOP_CHARACTERISTIC_LIMITS &
	/WITH=COMPANY_CODE = #COMPANY_CODE &
	/WITH=DIVISION = #DIVISION &
	/WITH=ORDER_NUMBER = SALES_ORDER_LINES(ORDER_NUMBER) &
	/WITH=ORDER_LINE_NUMBER = SALES_ORDER_LINES(ORDER_LINE_NUMBER)

	BEGIN_BLOCK ADD_RECORD

		FIND IN SOP_ORDER_CHARS_VT &
			/LOCK=WRITE &
			/WITH=CHARACTERISTIC_CODE = SOP_CHARACTERISTIC_LIMITS(CHARACTERISTIC_CODE)

		IF (%STATUS <> %SUCCESS)
			CLEAR_BUFFER SOP_ORDER_CHARS_VT

			SOP_ORDER_CHARS_VT(CHARACTERISTIC_CODE) = SOP_CHARACTERISTIC_LIMITS(CHARACTERISTIC_CODE)
			SOP_ORDER_CHARS_VT(IC_HIGH_LIMIT_NUMERIC) = SOP_CHARACTERISTIC_LIMITS(IC_HIGH_LIMIT_NUMERIC)
			SOP_ORDER_CHARS_VT(IC_HIGH_LIMIT_TEXT) = SOP_CHARACTERISTIC_LIMITS(IC_HIGH_LIMIT_TEXT)
			SOP_ORDER_CHARS_VT(IC_LOW_LIMIT_NUMERIC) = SOP_CHARACTERISTIC_LIMITS(IC_LOW_LIMIT_NUMERIC)
			SOP_ORDER_CHARS_VT(IC_LOW_LIMIT_TEXT) = SOP_CHARACTERISTIC_LIMITS(IC_LOW_LIMIT_TEXT)

			!Change 010
			! 27-Jan-2005	PTD		Greenwich Engineering, LLC
			! Get the Sort Order from the Product Characteristic
			FIND IN GETSORT:IC_PRODUCT_CHARACTERISTICS &
				/SECONDARY &
				/LOCK=NONE &
				/WITH=COMPANY_CODE = #COMPANY_CODE &
				/WITH=PART_CODE = #PART_CODE &
				/WITH=CHARACTERISTIC_CODE = SOP_CHARACTERISTIC_LIMITS(CHARACTERISTIC_CODE)

			IF ( %STATUS = %SUCCESS )
				SOP_ORDER_CHARS_VT(SORT_ORDER) = GETSORT:IC_PRODUCT_CHARACTERISTICS(VOL_SORT_ORDER)

			END_IF
			!Change 010 End


			ADD TO SOP_ORDER_CHARS_VT
		END_IF

	END_BLOCK
END_FORM

PROCEDURE_FORM SPECIFICATION_CODE


	BEGIN_BLOCK CHECK_FOR_EXISTING_CODE
		#SPEC_CODE_EXISTS		= #NO
		#SPECIFICATION_CODE		= ""
		#SPEC_CODE_MANDATORY		= #NO

		START_STREAM SPC &
			/TABLE=SPECIFICATION_CODES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PART_CODE=#PART_CODE
		FETCH SPC

		IF (%STATUS = %FAILURE)
			EXIT(%NORMAL)
		END_IF

		#SPEC_CODE_EXISTS = #YES

		!Change 009 - We always want to see the option to change the characteristic. This flag controls whether we will or not.
		!#CHARACTERISTIC_NEEDS_LIMIT = #NO
		#CHARACTERISTIC_NEEDS_LIMIT = #YES
		!Change 009 End

		FIND IN PART_MASTER_BY_CUSTOMER &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PART_CODE=#PART_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=#CUSTOMER_NUMBER &
			/WITH = SYS_CURRENCY_CODE = #CURRENCY_CODE
		IF (%STATUS <> %SUCCESS)
			#SPECIFICATION_CODE = SALES_ORDER_LINES(SPECIFICATION_CODE)

			!Change 009 - We want the specification code to default to 1 if there's nothing in PART_MASTER_BY_CUSTOMER
			IF (#SPECIFICATION_CODE="") 
				#SPECIFICATION_CODE="1"
			END_IF
			!Change 009 End
			EXIT(%NORMAL)
		ELSE
			IF (PART_MASTER_BY_CUSTOMER(MANDATORY_SPECIFICATION) = #NO)
				IF (#ADD_MODE = #YES)

					!Change 009 - If the PART_MASTER_BY_CUSTOMER spec is blank, it still needs to default to 1
					IF (PART_MASTER_BY_CUSTOMER(SPECIFICATION_CODE)="")
						#SPECIFICATION_CODE = 1
					ELSE
					!Change 009 End	
						#SPECIFICATION_CODE = PART_MASTER_BY_CUSTOMER(SPECIFICATION_CODE)
					!Change 009						
					END_IF
					!Change 009 End	
				ELSE
					#SPECIFICATION_CODE = SALES_ORDER_LINES(SPECIFICATION_CODE)
				END_IF
				EXIT(%NORMAL)
			ELSE
				FIND IN SPECIFICATION_CODES &
					/LOCK=NONE &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=PART_CODE=#PART_CODE &
					/WITH=SPECIFICATION_CODE=PART_MASTER_BY_CUSTOMER(SPECIFICATION_CODE)

				IF (%STATUS <> %SUCCESS)
					MESSAGE/IDENTIFIER/BELL/WAIT P_52437,PART_MASTER_BY_CUSTOMER(SPECIFICATION_CODE)
					#SPECIFICATION_CODE     = PART_MASTER_BY_CUSTOMER(SPECIFICATION_CODE)
					#SPEC_CODE_MANDATORY	= #NO
					EXIT(%NORMAL)

!Change 011				
				ELSE
					SALES_ORDER_LINES(SALES_ORDER_DETAIL_DESCRIPTION) = SPECIFICATION_CODES(DETAIL_DESCRIPTION)
					IF (SALES_ORDER_LINES(SALES_ORDER_DETAIL_DESCRIPTION) <> "")
						#ADD_DESC=#YES
					ELSE
						#ADD_DESC=#NO
					END_IF
!End Change 011
				END_IF

				IF (#ADD_MODE = #YES)
					#SPECIFICATION_CODE = PART_MASTER_BY_CUSTOMER(SPECIFICATION_CODE)
					PERFORM COPY_SPEC
					SALES_ORDER_LINES(SPECIFICATION_CODE) = PART_MASTER_BY_CUSTOMER(SPECIFICATION_CODE)	
					MESSAGE/IDENTIFIER P_56201,PART_MASTER_BY_CUSTOMER(SPECIFICATION_CODE)			
				ELSE
					#SPECIFICATION_CODE = SALES_ORDER_LINES(SPECIFICATION_CODE)		
				END_IF
				#SPEC_CODE_MANDATORY = #YES
			END_IF
		END_IF
	END_BLOCK

END_FORM


PROCEDURE_FORM COPY_SPEC &
	/TABLE=SOP_ORDER_CHARS_VT

	BEGIN_BLOCK GET_SPEC_LIMIT
		FIND IN IC_SPECIFICATION_LIMITS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PART_CODE=#PART_CODE &
			/WITH=SPECIFICATION_CODE=#SPECIFICATION_CODE &
			/WITH=CHARACTERISTIC_CODE=SOP_ORDER_CHARS_VT(CHARACTERISTIC_CODE)

		IF (%STATUS = %SUCCESS)
			SOP_ORDER_CHARS_VT(IC_HIGH_LIMIT_TEXT)  = IC_SPECIFICATION_LIMITS(IC_HIGH_LIMIT_TEXT)
			SOP_ORDER_CHARS_VT(IC_LOW_LIMIT_TEXT)   = IC_SPECIFICATION_LIMITS(IC_LOW_LIMIT_TEXT)
			SOP_ORDER_CHARS_VT(IC_HIGH_LIMIT_NUMERIC)= IC_SPECIFICATION_LIMITS(IC_HIGH_LIMIT_NUMERIC)
			SOP_ORDER_CHARS_VT(IC_LOW_LIMIT_NUMERIC) = IC_SPECIFICATION_LIMITS(IC_LOW_LIMIT_NUMERIC)
		ELSE
			#CHARACTERISTIC_NEEDS_LIMIT = #YES
		END_IF
	END_BLOCK

END_FORM


PROCEDURE_FORM UPDATE_TM_SOLD_FIELDS &
	/TABLE=SALES_ORDER_LINE_DETAILS &
	/LOCK=WRITE &
	/WITH=COMPANY_CODE = #COMPANY_CODE    &
	/WITH=DIVISION = #DIVISION    &
	/WITH=ORDER_NUMBER = SALES_ORDER_LINES(ORDER_NUMBER)  &
	/WITH=ORDER_LINE_NUMBER = SALES_ORDER_LINES(ORDER_LINE_NUMBER)

	BEGIN_BLOCK UPDATE_NEW_RECS
		SALES_ORDER_LINE_DETAILS(ORIGINAL_SEQUENCE) = "1"
		SALES_ORDER_LINE_DETAILS(TM_LOAD_PLANNING) = #LINE_TM_IN_USE
	END_BLOCK

END_FORM


FORM MAINTAIN_LINE_FREIGHT /ROW=10 /COL=2 /HEIGHT=14 /WIDTH=78 &
	/TITLE=(MESSAGE("P_93391"))

	TEXT /ROW=2 /COL=60	(MESSAGE("P_93392"))

	BEGIN_BLOCK FREIGHT_SETUP
		FIND IN WAREHOUSE_CONTROLS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=WAREHOUSE = #WAREHOUSE

		FIND IN SOP_SHIPPING_TERMS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=SOP_SHIPPING_TERMS_CODE = SALES_ORDER_LINES(SOP_SHIPPING_TERMS_CODE)

		#ORIGINAL_SHIPPING_TERMS = SALES_ORDER_LINES(SOP_SHIPPING_TERMS_CODE)
		#OLD_LINE_SHIPPING_TERMS = SALES_ORDER_LINES(SOP_SHIPPING_TERMS_CODE)
		! Maintain original and old variables in order to process
		! changes in value correctly.
		#LINE_CUST_PAYS_FREIGHT = SOP_SHIPPING_TERMS(SOP_FREIGHT_INCLUSIVE)

		#LINE_FREIGHT_APPLICABLE = #YES
		#ORIGINAL_FRT_DORC_IND = SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR)
		IF (SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR) > 0)
			#FREIGHT_INDICATOR = MESSAGE("P_93393")
		END_IF
		IF (SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR) < 0)
			#FREIGHT_INDICATOR = MESSAGE("P_93394")
		END_IF
		IF (SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR) = 0)
			IF (#LINE_PRICE_FREIGHT_INCLUSIVE = #YES)
				#FREIGHT_INDICATOR = MESSAGE("P_93395")
			ELSE
				#FREIGHT_INDICATOR = MESSAGE("P_93396")
				#LINE_FREIGHT_APPLICABLE = #NO
			END_IF
		END_IF

		FIND IN SYS_FREIGHT_MODES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=SYS_FREIGHT_MODE = SALES_ORDER_LINES(SYS_FREIGHT_MODE)

		#OLD_LINE_FREIGHT_MODE = SALES_ORDER_LINES(SYS_FREIGHT_MODE)

		FIND IN SYS_FREIGHT_CONTRACTS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=AP_DIVISION = #AR_CONTRACT_KEY_DEFAULT &
			/WITH=VENDOR_NUMBER = #AR_CONTRACT_KEY_DEFAULT &
			/WITH=SYS_FREIGHT_CONTRACT_NUMBER = SALES_ORDER_LINES(SYS_FREIGHT_CONTRACT_NUMBER)

		#OLD_LINE_FREIGHT_CONTRACT = SALES_ORDER_LINES(SYS_FREIGHT_CONTRACT_NUMBER)
		IF ((#OLD_LINE_FREIGHT_CONTRACT = "") &
		OR  (#OLD_LINE_FREIGHT_CONTRACT = PARAMETER("TM_FREIGHT_CALC_AT_COST")))
			#FREIGHT_CONTRACT_DESCRIPTION = ""
		ELSE
			#FREIGHT_CONTRACT_DESCRIPTION = SYS_FREIGHT_CONTRACTS(DESCRIPTION)
		END_IF
		
		#MODIFY_SHIPPING_TERMS_CODE=#YES
		
		FIND IN DESPATCH_NOTES   &
		/LOCK=NONE   &
		/WITH=COMPANY_CODE=#COMPANY_CODE  &
		/WITH=DIVISION=#DIVISION   &
		/WITH=ORDER_NUMBER=#ORDER_NUMBER  &
		/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER) 
		
		IF(%STATUS=%SUCCESS)
		
		#MODIFY_SHIPPING_TERMS_CODE=#NO
		
		END_IF
		

		DISPLAY DEFAULTS

		GOTO CONFIRM
	END_BLOCK

	OUTPUT_BLOCK PRICE_CODE /ROW=3 /COL=21 &
			/SOURCE=(#PRICE_CODE) &
			/PROMPT=(FIELD_PROMPT(PRICE_CODE)) &
			/USING=PRICE_CODES(PRICE_CODE)

	OUTPUT_BLOCK PRICE_CODE_DESC /ROW=3 /COL=31 &
			/SOURCE=(#LINE_PRICE_CODE_DESCRIPTION) &
			/USING=PRICE_CODES(DESCRIPTION)

	OUTPUT_BLOCK LINE_PRICE_FREIGHT_INCL /ROW=3 /COL=68 &
			/SOURCE=(#LINE_PRICE_FREIGHT_INCLUSIVE) &
			/USING=PRICE_CODES(SOP_FREIGHT_INCLUSIVE)

	INPUT_BLOCK SHIPPING_TERMS /ROW=4 /COL=21 &
			/TARGET=SALES_ORDER_LINES(SOP_SHIPPING_TERMS_CODE) &
			/PROMPT=FIELD_SHORT_PROMPT(SHIPPING_TERMS_CODE) &
			/LOV=SOP_SHIPPING_TERMS(SOP_SHIPPING_TERMS_CODE,DESCRIPTION,SOP_FREIGHT_INCLUSIVE) &
			/LOV_WITH=COMPANY_CODE = #COMPANY_CODE &
			/USE_IF=(#FREIGHT_INVOICED_QTY = 0.0 AND #MODIFY_SHIPPING_TERMS_CODE=#YES)

	BEGIN_BLOCK VALIDATE_SHIPPING_TERMS
		IF (SALES_ORDER_LINES(SOP_SHIPPING_TERMS_CODE) = "")
			MESSAGE/IDENTIFIER/BELL/WAIT P_93385
			SALES_ORDER_LINES(SOP_SHIPPING_TERMS_CODE) = #OLD_LINE_SHIPPING_TERMS
			GOTO SHIPPING_TERMS
		END_IF

		FIND IN SOP_SHIPPING_TERMS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=SOP_SHIPPING_TERMS_CODE = SALES_ORDER_LINES(SOP_SHIPPING_TERMS_CODE)

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00835
			SALES_ORDER_LINES(SOP_SHIPPING_TERMS_CODE) = #OLD_LINE_SHIPPING_TERMS
			GOTO SHIPPING_TERMS
		END_IF

		IF (SALES_ORDER_LINES(SOP_SHIPPING_TERMS_CODE) <> #OLD_LINE_SHIPPING_TERMS)
			! shipping terms code has been changed

			IF (#LINE_CUST_PAYS_FREIGHT <> SOP_SHIPPING_TERMS(SOP_FREIGHT_INCLUSIVE))
				! freight inclusive flags on old and new
				! shipping terms code are different.

				IF (#LINE_CUST_PAYS_FREIGHT = #YES)
					#SHIP_TERMS_FREIGHT_MESS = MESSAGE("P_93397")
				ELSE
					#SHIP_TERMS_FREIGHT_MESS = MESSAGE("P_93398")
				END_IF
				#SHIP_TERMS_MOD_MESSAGE = &
					MESSAGE("P_93399") &
					& #SHIP_TERMS_FREIGHT_MESS

				PERFORM SHIP_TERMS_MODIFICATION_NOTICE
				IF (%STATUS = %FAILURE)
					SALES_ORDER_LINES(SOP_SHIPPING_TERMS_CODE) = #OLD_LINE_SHIPPING_TERMS
					GOTO SHIPPING_TERMS
				END_IF

				#LINE_CUST_PAYS_FREIGHT = SOP_SHIPPING_TERMS(SOP_FREIGHT_INCLUSIVE)

				! need to re-evaluate DorC indicator when
				! SOP shipping terms changes
				PERFORM GET_FREIGHT_DORC_IND_VALUE ( &
					#LINE_PRICE_FREIGHT_INCLUSIVE, &
					#LINE_CUST_PAYS_FREIGHT, &
					(#WAREHOUSED_FLAG), &
					SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR), &
					#FREIGHT_PREFIX, &
					#LINE_FREIGHT_APPLICABLE)

			END_IF

			#OLD_LINE_SHIPPING_TERMS = SALES_ORDER_LINES(SOP_SHIPPING_TERMS_CODE)
		END_IF
	END_BLOCK

	OUTPUT_BLOCK DISP_SHIPPING_TERMS /ROW=4 /COL=21 &
			/SOURCE=(SALES_ORDER_LINES(SOP_SHIPPING_TERMS_CODE)) &
			/PROMPT=FIELD_SHORT_PROMPT(SHIPPING_TERMS_CODE)

	OUTPUT_BLOCK SHIPPING_TERMS_DESC /ROW=4 /COL=31 &
			/SOURCE=(SOP_SHIPPING_TERMS(DESCRIPTION))

	OUTPUT_BLOCK LINE_CUST_PAYS_FREIGHT /ROW=4 /COL=68 &
			/SOURCE=(#LINE_CUST_PAYS_FREIGHT) &
			/USING=SOP_SHIPPING_TERMS(SOP_FREIGHT_INCLUSIVE)

	INPUT_BLOCK FREIGHT_MODE /ROW=6 /COL=21 &
			/TARGET=SALES_ORDER_LINES(SYS_FREIGHT_MODE) &
			/PROMPT=FIELD_PROMPT(SYS_FREIGHT_MODE) &
			/LOV=SYS_FREIGHT_MODES(SYS_FREIGHT_MODE,DESCRIPTION) &
			/LOV_WITH=COMPANY_CODE = #COMPANY_CODE &
			/USE_IF=(#WAREHOUSED_FLAG = #YES)

	BEGIN_BLOCK VALIDATE_FREIGHT_MODE
		IF (#WAREHOUSED_FLAG = #YES)
			FIND IN SYS_FREIGHT_MODES &
				/LOCK=NONE &
				/WITH=COMPANY_CODE = #COMPANY_CODE &
				/WITH=SYS_FREIGHT_MODE = SALES_ORDER_LINES(SYS_FREIGHT_MODE)

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_93074
				SALES_ORDER_LINES(SYS_FREIGHT_MODE) = #OLD_LINE_FREIGHT_MODE
				GOTO FREIGHT_MODE
			END_IF
		END_IF
	END_BLOCK

	OUTPUT_BLOCK DISP_FREIGHT_MODE_DESC /ROW=6 /COL=35 &
			/SOURCE=(SYS_FREIGHT_MODES(DESCRIPTION)) &
			/USE_IF=(#WAREHOUSED_FLAG = #YES)

	INPUT_BLOCK FREIGHT_CONTRACT /ROW=7 /COL=21 &
			/TARGET=SALES_ORDER_LINES(SYS_FREIGHT_CONTRACT_NUMBER) &
			/PROMPT=FIELD_PROMPT(SYS_FREIGHT_CONTRACT_NUMBER) &
			/LOV=SYS_FREIGHT_CONTRACTS(SYS_FREIGHT_CONTRACT_NUMBER,DESCRIPTION) &
			/LOV_WITH=COMPANY_CODE = #COMPANY_CODE &
			/LOV_WITH=AP_DIVISION = #AR_CONTRACT_KEY_DEFAULT &
			/LOV_WITH=VENDOR_NUMBER = #AR_CONTRACT_KEY_DEFAULT &
			/USE_IF=((#WAREHOUSED_FLAG = #YES) &
				AND (#FREIGHT_INVOICED_QTY = 0.0))

	BEGIN_BLOCK VALIDATE_FREIGHT_CONTRACT
		IF ((#WAREHOUSED_FLAG = #YES) &
		AND (#FREIGHT_INVOICED_QTY = 0.0))

			FIND IN SYS_FREIGHT_CONTRACTS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE = #COMPANY_CODE &
				/WITH=AP_DIVISION = #AR_CONTRACT_KEY_DEFAULT &
				/WITH=VENDOR_NUMBER = #AR_CONTRACT_KEY_DEFAULT &
				/WITH=SYS_FREIGHT_CONTRACT_NUMBER = SALES_ORDER_LINES(SYS_FREIGHT_CONTRACT_NUMBER)

			IF (%STATUS = %FAILURE)
				IF (SALES_ORDER_LINES(SYS_FREIGHT_CONTRACT_NUMBER) = PARAMETER("TM_FREIGHT_CALC_AT_COST"))
					#FREIGHT_CONTRACT_DESCRIPTION = ""
				ELSE
					MESSAGE/IDENTIFIER/BELL/WAIT P_93400
					SALES_ORDER_LINES(SYS_FREIGHT_CONTRACT_NUMBER) = #OLD_LINE_FREIGHT_CONTRACT
					GOTO FREIGHT_CONTRACT
				END_IF
			ELSE
				#CURRENT_FREIGHT_CONTRACT = SALES_ORDER_LINES(SYS_FREIGHT_CONTRACT_NUMBER)
				#FREIGHT_CONTRACT_DESCRIPTION = SYS_FREIGHT_CONTRACTS(DESCRIPTION)
			END_IF

			IF (SALES_ORDER_LINES(SYS_FREIGHT_CONTRACT_NUMBER) <> #OLD_LINE_FREIGHT_CONTRACT)
				! Changed freight contract

				IF ((SALES_ORDER_LINES(SYS_FREIGHT_CONTRACT_NUMBER) = PARAMETER("TM_FREIGHT_CALC_AT_COST")) &
				AND (#LINE_FREIGHT_APPLICABLE = #YES) &
				AND (SALES_ORDER_LINES(FREIGHT)> 0.0))
					! This condition was set because it was possible to create a TM Order
					! using a Freight contract on the sales order line; but then go back
					! and select that line (modify) and change the freight contract to an
					! "AT COST" type and override the freight value.

					SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR) = 0
					#LINE_FREIGHT_APPLICABLE = #NO

					PERFORM FREIGHT_CONTRACT_MOD_NOTICE

					IF (%STATUS = %FAILURE)
						SALES_ORDER_LINES(SYS_FREIGHT_CONTRACT_NUMBER) = #OLD_LINE_FREIGHT_CONTRACT
						GOTO FREIGHT_CONTRACT
					END_IF
				END_IF

				IF ((#OLD_LINE_FREIGHT_CONTRACT = PARAMETER("TM_FREIGHT_CALC_AT_COST")) &
				AND (#CURRENT_FREIGHT_CONTRACT <> PARAMETER("TM_FREIGHT_CALC_AT_COST")))
					! need to re-evaluate DorC indicator when
					! Freight Contract changes as you don't know
					! if the last freight contract was an "AT COST" type
					PERFORM GET_FREIGHT_DORC_IND_VALUE ( &
						#LINE_PRICE_FREIGHT_INCLUSIVE, &
						#LINE_CUST_PAYS_FREIGHT, &
						(#WAREHOUSED_FLAG), &
						SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR), &
						#FREIGHT_PREFIX, &
						#LINE_FREIGHT_APPLICABLE)

				END_IF

				IF ((#LINE_FREIGHT_APPLICABLE = #YES) &
				AND (SALES_ORDER_LINES(FREIGHT) > 0.0))
					! change may mean change to existing freight values
					! so get user to confirm change.

					PERFORM FREIGHT_CONTRACT_MOD_NOTICE

					IF (%STATUS = %FAILURE)
						SALES_ORDER_LINES(SYS_FREIGHT_CONTRACT_NUMBER) = #OLD_LINE_FREIGHT_CONTRACT
						GOTO FREIGHT_CONTRACT
					END_IF
				END_IF
			END_IF
		END_IF
	END_BLOCK

	OUTPUT_BLOCK DISP_FREIGHT_CONTRACT /ROW=7 /COL=21 &
			/SOURCE=(SALES_ORDER_LINES(SYS_FREIGHT_CONTRACT_NUMBER)) &
			/PROMPT=FIELD_PROMPT(SYS_FREIGHT_CONTRACT_NUMBER) &
			/USE_IF=(#WAREHOUSED_FLAG = #YES)

	OUTPUT_BLOCK DISP_FREIGHT_CONTRACT_DESC /ROW=7 /COL=35 &
			/SOURCE=(#FREIGHT_CONTRACT_DESCRIPTION) &
			/USING=SYS_FREIGHT_CONTRACTS(DESCRIPTION) &
			/USE_IF=(#WAREHOUSED_FLAG = #YES)

	BEGIN_BLOCK RE_CALC_FREIGHT
		! re-assign #freight_indicator based on new dorc_indicator value
		IF (SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR) > 0)
			#FREIGHT_INDICATOR = MESSAGE("P_93393")
		END_IF
		IF (SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR) < 0)
			#FREIGHT_INDICATOR = MESSAGE("P_93394")
		END_IF
		IF (SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR) = 0)
			IF (#WAREHOUSED_FLAG <> #YES)
				#FREIGHT_INDICATOR = MESSAGE("P_93396")
			ELSE
				IF (#LINE_FREIGHT_APPLICABLE = #YES)
					#FREIGHT_INDICATOR = MESSAGE("P_93395")
				ELSE
					! message is not applicable
					#FREIGHT_INDICATOR = MESSAGE("P_93396")
				END_IF
			END_IF
		END_IF

		IF ((#LINE_FREIGHT_APPLICABLE = #NO) &
		OR  (#WAREHOUSED_FLAG <> #YES))
			SALES_ORDER_LINES(SOP_FREIGHT_CALCULATED) = 0.0
			GOTO UPDATE_VARIABLES
		END_IF

		IF ((#ORIGINAL_SHIPPING_TERMS <> SALES_ORDER_LINES(SOP_SHIPPING_TERMS_CODE)) &
		OR  (#OLD_LINE_FREIGHT_MODE <> SALES_ORDER_LINES(SYS_FREIGHT_MODE)) &
		OR  (#OLD_LINE_FREIGHT_CONTRACT <> SALES_ORDER_LINES(SYS_FREIGHT_CONTRACT_NUMBER)) &
		OR  (#ORIGINAL_FRT_DORC_IND <> SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR)) &
		OR  (#QTY_VALUE_CHANGE = #YES))

			#CALCULATED_FREIGHT = 0.0

			PERFORM "GEMSYS:SYS_L_FREIGHT_CALCULATION" &
						("SOLINE", &
						 #PLANNED_DELIVERY_DATE, &
						 "", &
						 0.0, &
						 (SALES_ORDER_LINES(SYS_FREIGHT_MODE)), &
						 #UPDATE_FREIGHT_DETAILS, &
						 #PACK_ORDER_QTY, &
						 #PACK_UOM, &
						 #NOMI_ORDER_QTY, &
						 #NOMI_UOM, &
						 #NON_NOMI_ORDER_QTY, &
						 #NON_NOMI_UOM, &
						 "", &
						 #CALCULATED_FREIGHT, &
						 #FREIGHT_CURRENCY_CODE, &
						 #FREIGHT_BASE, &
						 #FREIGHT_CUBIC, &
						 "", &
						 (#WEIGHT), &
						 (#WEIGHT_UOM), &
						 (#VOLUME), &
						 (#VOLUME_UOM))

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_93401
				SALES_ORDER_LINES(SOP_FREIGHT_CALCULATED) = 0.0
				GOTO DISP_CALC_FREIGHT
			END_IF

			IF (#FREIGHT_CURRENCY_CODE <> #CURRENCY_CODE)
				! do currency conversion here using freight value in base
				! currency returned by the library routine.
				DELETE ALL FROM SYS_CURRENCY_VALUES_VT

				SYS_CURRENCY_VALUES_VT(BASE_VALUE) = #FREIGHT_BASE

				ADD TO SYS_CURRENCY_VALUES_VT

				PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
				IF (#R_STATUS <> #YES)
					ERROR/WAIT #R_MESSAGE
					EXIT (%FAILURE)
				END_IF

				FIND IN SYS_CURRENCY_VALUES_VT

				#CALCULATED_FREIGHT	= SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE)
			END_IF

			SALES_ORDER_LINES(SOP_FREIGHT_CALCULATED) = #CALCULATED_FREIGHT
		END_IF
	END_BLOCK

	BEGIN_BLOCK UPDATE_VARIABLES

		#ORIGINAL_SHIPPING_TERMS = SALES_ORDER_LINES(SOP_SHIPPING_TERMS_CODE)
		#ORIGINAL_FRT_DORC_IND = SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR)
		#OLD_LINE_FREIGHT_MODE = SALES_ORDER_LINES(SYS_FREIGHT_MODE)
		#OLD_LINE_FREIGHT_CONTRACT = SALES_ORDER_LINES(SYS_FREIGHT_CONTRACT_NUMBER)

	END_BLOCK

	OUTPUT_BLOCK DISP_CALC_FREIGHT /ROW=9 /COL=32 /LEN=(#CURRENCY_LEN) &
			/PROMPT=(MESSAGE("P_93402")) &
			/SOURCE=(SALES_ORDER_LINES(SOP_FREIGHT_CALCULATED)) &
			/OUTPUT_MASK=(#CURRENCY_MASK) &
			/USE_IF=(#WAREHOUSED_FLAG = #YES)

	OUTPUT_BLOCK DISP_WH_FREIGHT_INDICATOR /ROW=9 /COL=50 /LEN=16 &
			/ATTRIBUTES=NONE &
			/SOURCE=(#FREIGHT_INDICATOR)

	BEGIN_BLOCK PROC_OVERRIDE
		IF ((#DIV_ALLOWS_FREIGHT_OVERRIDE = #NO) &
		OR  (SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR) = 0))
			! If freight override is not allowed or line freight
			! DorC indicator is zero - the line freight value will
			! always equal the calculated value and cannot be
			! overridden by the user.
			! True for both warehoused and non-warehoused lines.

			SALES_ORDER_LINES(SOP_FREIGHT_OVERRIDDEN) = #NO
			SALES_ORDER_LINES(FREIGHT) = SALES_ORDER_LINES(SOP_FREIGHT_CALCULATED)
		END_IF
	END_BLOCK

	OUTPUT_BLOCK DISP_FREIGHT_OVERRIDDEN /ROW=11 /COL=32 &
			/SOURCE=(SALES_ORDER_LINES(SOP_FREIGHT_OVERRIDDEN)) &
			/PROMPT=(MESSAGE("P_59036")) &
			/USE_IF=(#WAREHOUSED_FLAG = #YES)

	YESNO_BLOCK GET_OVERRIDE_FLAG /ROW=11 /COL=32 &
			/SUCCESS=(SALES_ORDER_LINES(SOP_FREIGHT_OVERRIDDEN)=#YES) &
			/FAILURE=(SALES_ORDER_LINES(SOP_FREIGHT_OVERRIDDEN)=#NO) &
			/USE_IF=((#DIV_ALLOWS_FREIGHT_OVERRIDE = #YES) &
			   AND (SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR) <> 0) &
			   AND (#WAREHOUSED_FLAG = #YES))

	BEGIN_BLOCK CHECK_USER_OVERRIDE
		IF ((SALES_ORDER_LINES(SOP_FREIGHT_OVERRIDDEN) = #NO) &
		AND (#WAREHOUSED_FLAG = #YES))
			SALES_ORDER_LINES(FREIGHT)  = SALES_ORDER_LINES(SOP_FREIGHT_CALCULATED)
		END_IF
	END_BLOCK

	OUTPUT_BLOCK DISP_NONWH_LINE_FREIGHT /ROW=9 /COL=32 /LEN=(#CURRENCY_LEN) &
			/PROMPT=(FIELD_SHORT_PROMPT(FREIGHT)) &
			/SOURCE=(SALES_ORDER_LINES(FREIGHT)) &
			/OUTPUT_MASK=(#CURRENCY_MASK) &
			/USE_IF=(#WAREHOUSED_FLAG <> #YES)

	INPUT_BLOCK GET_NONWH_LINE_FREIGHT /ROW=9 /COL=32 /LEN=(#CURRENCY_LEN) &
			/PROMPT=(FIELD_SHORT_PROMPT(FREIGHT)) &
			/TARGET=SALES_ORDER_LINES(FREIGHT) &
			/INPUT_MASK=(#CURRENCY_MASK) &
			/USE_IF=((#WAREHOUSED_FLAG <> #YES) &
			AND (#DIV_ALLOWS_FREIGHT_OVERRIDE = #YES) &
			AND (SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR) <> 0))

	OUTPUT_BLOCK DISP_WH_LINE_FREIGHT /ROW=12 /COL=32 /LEN=(#CURRENCY_LEN) &
			/PROMPT=(FIELD_SHORT_PROMPT(FREIGHT)) &
			/SOURCE=(SALES_ORDER_LINES(FREIGHT)) &
			/OUTPUT_MASK=(#CURRENCY_MASK) &
			/USE_IF=(#WAREHOUSED_FLAG = #YES)

	INPUT_BLOCK GET_WH_LINE_FREIGHT /ROW=12 /COL=32 /LEN=(#CURRENCY_LEN) &
			/PROMPT=(FIELD_SHORT_PROMPT(FREIGHT)) &
			/TARGET=SALES_ORDER_LINES(FREIGHT) &
			/INPUT_MASK=(#CURRENCY_MASK) &
			/USE_IF=((#WAREHOUSED_FLAG = #YES) &
			AND (#DIV_ALLOWS_FREIGHT_OVERRIDE = #YES) &
			AND (SALES_ORDER_LINES(SOP_FREIGHT_OVERRIDDEN) = #YES) &
			AND (#LINE_FREIGHT_APPLICABLE = #YES))

	YESNO_BLOCK CONFIRM /ROW=13 /COL=66 &
			/PROMPT=(MESSAGE("P_00149")) &
			/BACK=(GOTO CONFIRM) &
			/EXIT=(GOTO CONFIRM) &
			/FAILURE=(GOTO SHIPPING_TERMS)

	BEGIN_BLOCK LINE_SCREEN_REDISPLAY
		IF (SALES_ORDER_LINES(FREIGHT) <> SALES_ORDER_LINES(SOP_FREIGHT_CALCULATED))
			SALES_ORDER_LINES(SOP_FREIGHT_OVERRIDDEN) = #YES
		END_IF
	END_BLOCK

END_FORM


FORM NON_STOCK_ENTRY /ROW=9 /COL=2 /HEIGHT=15 /WIDTH=78 &
	/TITLE=(MESSAGE("P_20275"))

	BEGIN_BLOCK INIT
		#IC_PACKAGED_PRODUCT = #NO
		#IC_UOM_CONTROL = ""

		IF (#AR_FREIGHT_IN_USE = #YES)
			#LINE_PRICE_FREIGHT_INCLUSIVE = ""
			#LINE_PRICE_CODE_DESCRIPTION = ""

			FIND IN PRICE_CODES &
				/LOCK=NONE &
				/WITH=COMPANY_CODE = #COMPANY_CODE &
				/WITH=DIVISION = #DIVISION &
				/WITH=PRICE_CODE = #PRICE_CODE

			IF (%STATUS <> %FAILURE)
				#LINE_PRICE_FREIGHT_INCLUSIVE = PRICE_CODES(SOP_FREIGHT_INCLUSIVE)
				#LINE_PRICE_CODE_DESCRIPTION = PRICE_CODES(DESCRIPTION)
			END_IF
			IF (#LINE_PRICE_FREIGHT_INCLUSIVE = "")
				#LINE_PRICE_FREIGHT_INCLUSIVE = #NO
			END_IF
		END_IF
	END_BLOCK

	OUTPUT_BLOCK TEXT_UNIT /ROW=11 /COL=25 &
			/SOURCE=(MESSAGE("P_00737")) &
			/ATTRIBUTES=NONE &
			/USE_IF=(#PHYSICAL_IN_USE=#YES)

	OUTPUT_BLOCK DISP_AR_FREIGHT_PREFIX /ROW=9 /COL=27 /LEN=9 &
			/ATTRIBUTES=NONE &
			/SOURCE=(#FREIGHT_PREFIX)

	OUTPUT_BLOCK DISP_AR_FREIGHT_PROMPT /ROW=9 /COL=34 /LEN=7 &
			/ATTRIBUTES=NONE &
			/SOURCE=(FIELD_SHORT_PROMPT(FREIGHT)) &
			/USE_IF=(#LINE_FREIGHT_APPLICABLE = #YES)

	OUTPUT_BLOCK DISP_AR_FREIGHT_VALUE /ROW=9 /COL=43 /LEN=(#CURRENCY_LEN) &
			/SOURCE=(SALES_ORDER_LINES(FREIGHT)) &
			/OUTPUT_MASK=#CURRENCY_MASK &
			/USE_IF=(#LINE_FREIGHT_APPLICABLE = #YES)

	INPUT_BLOCK SALES_ORDER_DETAIL_DESCRIPTION /ROW=2 /COL=18 &
			/PROMPT=(FIELD_PROMPT(SALES_ORDER_DETAIL_DESCRIPTION)) &
			/TARGET=SALES_ORDER_LINES(SALES_ORDER_DETAIL_DESCRIPTION) &
			/BACK=(EXIT(%EXIT)) &
			/EXIT=(EXIT(%EXIT)) &
			/EXIT_FORWARD=(GOTO DETAIL_DESC_2)

	OUTPUT_BLOCK DETAIL_DESC_2 /ROW=2 /COL=18 /HEIGHT=2 &
			/SOURCE=(SALES_ORDER_LINES(SALES_ORDER_DETAIL_DESCRIPTION))

	INPUT_BLOCK ORDER_LINE_REFERENCE /ROW=4 /COL=18 &
			/PROMPT=(FIELD_SHORT_PROMPT(ORDER_LINE_REFERENCE)) &
			/TARGET=SALES_ORDER_LINES(ORDER_LINE_REFERENCE)

	!Change 005 - If the part code is a charge(e.g. >=900000), then make the order line reference be required
	BEGIN_BLOCK CHECK_IF_REQUIRED 
		IF (SALES_ORDER_LINES(ORDER_LINE_REFERENCE)="" AND SALES_ORDER_LINES(PART_CODE)>="901000")
			ERROR /TEXT_ONLY "Line Reference is required for all non-finished goods."
			GOTO ORDER_LINE_REFERENCE
		END_IF
	END_BLOCK
	!Change 005 End

	INPUT_BLOCK CUSTOMER_PART_CODE /ROW=5 /COL=18 &
			/PROMPT=(MESSAGE("P_2OS_TRAN_BALANCE_3")) &
			/TARGET=SALES_ORDER_LINES(CUSTOMERS_PART_CODE)

	INPUT_BLOCK UNIT_SALES /ROW=6 /COL=18 &
			/PROMPT=(MESSAGE("P_91231")) &
			/TARGET=#SALES_UOM &
			/USING=SALES_ORDER_LINES(UNIT_SALES),REQUIRED &
			/LOV=UNITS_OF_MEASURE(UNIT_OF_MEASURE,UNIT_OF_MEASURE_DESC)

	BEGIN_BLOCK VALID_SALES_UOM
		FIND IN UNITS_OF_MEASURE &
			/LOCK=NONE &
			/WITH=UNIT_OF_MEASURE = #SALES_UOM

		IF (%STATUS <> %SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_62355
			GOTO UNIT_SALES
		END_IF

		PERFORM "GEMLB:LB_GET_QUANTITY_MASK" (#COMPANY_CODE,    &
						"", &
						#SALES_UOM, &
						#R1,    &
						#R2)

		IF (%STATUS = %SUCCESS)
			#SALES_UOM_MASK = #R1
			#SALES_UOM_NOD  = #R2
			SALES_ORDER_LINES(UNIT_SALES) = #SALES_UOM
		ELSE
			GOTO UNIT_SALES
		END_IF
	END_BLOCK

	INPUT_BLOCK ORDER_QUANTITY /ROW=6 /COL=43 /LEN=14 &
			/PROMPT=(MESSAGE("P_5CUSTOMERS_PART_CODE_1")) &
			/USING=SALES_ORDER_LINE_QTYS(ORDER_QUANTITY),NONEGATIVE &
			/TARGET=#SALES_ORDER_QTY &
			/INPUT_MASK=#SALES_UOM_MASK

	BEGIN_BLOCK UNIT_PRICE
		IF (#PRICE_UOM = "")
			#PRICE_UOM = #SALES_UOM
		END_IF

		INPUT_BLOCK  /ROW=7 /COL=18 &
			/PROMPT=(MESSAGE("P_56107")) &
			/TARGET=#PRICE_UOM &
			/USING=SALES_ORDER_LINES(UNIT_PRICE),REQUIRED &
			/LOV=UNITS_OF_MEASURE(UNIT_OF_MEASURE,UNIT_OF_MEASURE_DESC)

			PERFORM CONVERT_QTYS ("", &
				"", &
				"", &
				#SALES_UOM, &
				#SALES_ORDER_QTY, &
				#PRICE_UOM, &
				#PRICE_ORDER_QTY, &
				#R1)

			IF (%STATUS <> %SUCCESS)
				GOTO UNIT_PRICE
			END_IF
	END_BLOCK

	INPUT_BLOCK SALES_PRICE /ROW=7 /COL=43 &
			/PROMPT=(MESSAGE("P_00594")) &
			/TARGET=SALES_ORDER_LINES(SALES_PRICE) &
			/INPUT_MASK=(#SALES_PRICE_MASK) &
			/USE_IF=(#PRICING_METHOD_OPTIONAL=#NO)

	INPUT_BLOCK TIP_SALES_PRICE /ROW=7 /COL=43 &
			/PROMPT=(#PRICE_PROMPT) &
			/TARGET=SALES_ORDER_LINES(SALES_PRICE) &
			/INPUT_MASK=(#SALES_PRICE_MASK) &
			/USE_IF=(#PRICING_METHOD_OPTIONAL=#YES AND #PRICING_METHOD<>#TAX_INCLUSIVE)

	INPUT_BLOCK TIP_SALES_PRICE_1 /ROW=7 /COL=43 &
			/PROMPT=(#PRICE_PROMPT) &
			/TARGET=SALES_ORDER_LINES(SALES_PRICE_INC_TAX) &
			/INPUT_MASK=(#SALES_PRICE_MASK) &
			/USE_IF=(#PRICING_METHOD_OPTIONAL=#YES AND #PRICING_METHOD=#TAX_INCLUSIVE)

	INPUT_BLOCK UNIT_COST /ROW=8 /COL=43 &
			/PROMPT=(FIELD_PROMPT(UNIT_COST)) &
			/TARGET=SALES_ORDER_LINES(UNIT_COST)

	BEGIN_BLOCK CALC_LINE_VALUE
		SALES_ORDER_LINES(UNIT_PRICE) = #PRICE_UOM

		IF (#PRICE_UOM = #SALES_UOM)
			#PRICE_ORDER_QTY = #SALES_ORDER_QTY
		ELSE
			#PRICE_ORDER_QTY = 0.0
			PERFORM CONVERT_QTYS ("", &
				"", &
				"", &
				#SALES_UOM, &
				#SALES_ORDER_QTY, &
				#PRICE_UOM, &
				#PRICE_ORDER_QTY, &
				#R1)
			IF (%STATUS <> %SUCCESS)
				EXIT (%FAILURE)
			END_IF
		END_IF

		IF ( #PRICING_METHOD = #TAX_INCLUSIVE )

			IF (#CUSTOMER_TAX_CODE = "") #CUSTOMER_TAX_CODE = #DEF_CUST_TAX_CODE

			PERFORM SETUP_TAX_CONTROL_VT

			IF ( #TAXABLE = #NO OR #TAX_FLAG = #NO )
				LB_TAX_CONTROL_VT(PRICING_METHOD) = #TAX_EXCLUSIVE
			END_IF

			LB_TAX_CONTROL_VT(PART_CODE) = SALES_ORDER_LINES(PART_CODE)
			LB_TAX_CONTROL_VT(WAREHOUSE) = SALES_ORDER_LINES(WAREHOUSE)
			LB_TAX_CONTROL_VT(CUSTOMER_NUMBER) = SALES_ORDER_HEADERS(CUSTOMER_NUMBER)
			LB_TAX_CONTROL_VT(INVOICE_ADDRESS_CODE) = SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)
			LB_TAX_CONTROL_VT(DELIVERY_ADDRESS_CODE) = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
			LB_TAX_CONTROL_VT(TRANSACTION_NUMBER) = SALES_ORDER_HEADERS(ORDER_NUMBER)
			LB_TAX_CONTROL_VT(TRANSACTION_TYPE) = PARAMETER("TTYPE_SO")
			LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE) = #DEF_PART_TAX_CODE
			LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE) = #CUSTOMER_TAX_CODE
			LB_TAX_CONTROL_VT(ORDER_LINE_TYPE) = "N"
			LB_TAX_CONTROL_VT(FORM_TITLE) = ""
			LB_TAX_CONTROL_VT(PRICE_ORDER_QTY) = #PRICE_ORDER_QTY
			LB_TAX_CONTROL_VT(SALES_PRICE) = SALES_ORDER_LINES(SALES_PRICE_INC_TAX)
			LB_TAX_CONTROL_VT(LINE_DISCOUNT) = 0

	        PERFORM "GEMLB:LB_L_TAX_CONTROL" ( "T", #ERROR_OCCURRED, #ERROR_MESSAGE )

			IF (%STATUS = %BACK OR %STATUS = %EXIT)
				EXIT (%STATUS)
			END_IF

			IF ( #ERROR_OCCURRED ) ERROR/TEXT_ONLY #ERROR_MESSAGE

			FIND IN LB_TAX_CONTROL_VT

			#NET_PRICE = LB_TAX_CONTROL_VT(NET_PRICE)
			#NET_LINE_VALUE = LB_TAX_CONTROL_VT(NET_LINE_VALUE)

			#QTY_TIMES_PRICE = #NET_LINE_VALUE

		ELSE

			#QTY_TIMES_PRICE = &
				ROUND( #PRICE_ORDER_QTY * SALES_ORDER_LINES(SALES_PRICE), #CURRENCY_DECIMAL )

		END_IF

	END_BLOCK

	OUTPUT_BLOCK VALUE /ROW=10 /COL=43 /LEN=(#CURRENCY_LEN) &
		/PROMPT=(MESSAGE("P_16150")) &
		/SOURCE=#QTY_TIMES_PRICE &
		/USING=SALES_ORDER_INVOICE_LINES(SOP_INVOICE_TOTAL_CURRENCY) &
		/OUTPUT_MASK=(#CURRENCY_MASK)

	BEGIN_BLOCK GET_AR_FREIGHT_VARS
		IF (#AR_FREIGHT_IN_USE = #YES)
			PERFORM GET_FREIGHT_DORC_IND_VALUE ( &
					#LINE_PRICE_FREIGHT_INCLUSIVE, &
					#LINE_CUST_PAYS_FREIGHT, &
					(#WAREHOUSED_FLAG), &
					SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR), &
					#FREIGHT_PREFIX, &
					#LINE_FREIGHT_APPLICABLE)

			! #line_price_freight_inclusive and #line_cust_pays_freight
			! values are assigned as part of the record Add variable
			! setup.
		ELSE
			SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR) = ""
			#FREIGHT_PREFIX = ""
			#LINE_FREIGHT_APPLICABLE = #NO
		END_IF

		IF (#AR_FREIGHT_IN_USE <> #YES) GOTO INIT_AR_FREIGHT_PREFIX

		IF (#LINE_FREIGHT_APPLICABLE <> #YES)
			! AR Freight may be in use, but
			! if DORC indicator is zero, line freight is not
			! applicable.
			!
			SALES_ORDER_LINES(SOP_FREIGHT_CALCULATED) = 0.0
			SALES_ORDER_LINES(FREIGHT) = 0.0
			SALES_ORDER_LINES(SOP_FREIGHT_OVERRIDDEN) = #NO
			GOTO INIT_AR_FREIGHT_PREFIX
		END_IF

		SALES_ORDER_LINES(SOP_FREIGHT_CALCULATED) = 0.0

		! For non-stocked parts, if AR Freight is in use, do not
		! calculate freight, but if DorC indicator is non-zero
		! (freight inclusive price but customer doesn't pay freight, or
		! freight exclusive price but customers pays freight) and
		! freight override is allowed, allow the user to enter a
		! freight value later.
		IF (#DIV_ALLOWS_FREIGHT_OVERRIDE = #NO)
			SALES_ORDER_LINES(FREIGHT) = 0.0
			SALES_ORDER_LINES(SOP_FREIGHT_OVERRIDDEN) = #NO
		END_IF
	END_BLOCK

	OUTPUT_BLOCK INIT_AR_FREIGHT_PREFIX /ROW=9 /COL=27 /LEN=9 &
			/ATTRIBUTES=NONE &
			/SOURCE=(#FREIGHT_PREFIX)

	OUTPUT_BLOCK INIT_AR_FREIGHT_PROMPT /ROW=9 /COL=34 /LEN=7 &
			/ATTRIBUTES=NONE &
			/SOURCE=(FIELD_SHORT_PROMPT(FREIGHT)) &
			/USE_IF=(#LINE_FREIGHT_APPLICABLE = #YES)

	OUTPUT_BLOCK INIT_AR_FREIGHT_VALUE /ROW=9 /COL=43 /LEN=(#CURRENCY_LEN) &
			/SOURCE=(SALES_ORDER_LINES(FREIGHT)) &
			/OUTPUT_MASK=#CURRENCY_MASK &
			/USE_IF=(#LINE_FREIGHT_APPLICABLE = #YES)

	TEXT /ROW=11 /COL=70 "%"

	BEGIN_BLOCK PERCENT_DISCOUNT
		IF ((#AR_FREIGHT_IN_USE = #YES) AND (#LINE_PRICE_FREIGHT_INCLUSIVE = #YES))
			#LINE_GOODS_VALUE = #QTY_TIMES_PRICE - SALES_ORDER_LINES(FREIGHT)
		ELSE
			#LINE_GOODS_VALUE = #QTY_TIMES_PRICE
		END_IF

		IF ((#AR_FREIGHT_IN_USE = #YES) &
		AND (#DIV_LINE_DISC_FREIGHT_INC	= #YES) &
		AND (#LINE_CUST_PAYS_FREIGHT = #YES))
			#DISCOUNT_BASIS = #LINE_GOODS_VALUE + SALES_ORDER_LINES(FREIGHT)
		ELSE
			#DISCOUNT_BASIS = #LINE_GOODS_VALUE
		END_IF

		IF (#LD_IN_USE <> #YES) GOTO SALES_TAX

		INPUT_BLOCK  /ROW=11 /COL=63 &
			/TARGET=#PERCENT_DISCOUNT &
			/USING=SALES_ORDER_HEADERS(ORDER_DISCOUNT_PERCENT) &
			/INPUT_MASK="!-@@0.0@"

		IF (#PERCENT_DISCOUNT <> 0.0)
			IF (#PERCENT_DISCOUNT < 0.0 OR #PERCENT_DISCOUNT > 100.0)
				MESSAGE/IDENTIFIER/BELL/WAIT P_00353
				GOTO PERCENT_DISCOUNT
			END_IF

			IF ((#AR_FREIGHT_IN_USE = #YES) &
			AND (SALES_ORDER_LINES(FREIGHT) > 0.0) &
			AND (#LINE_CUST_PAYS_FREIGHT = #YES))
				IF (#DIV_LINE_DISC_FREIGHT_INC	= #YES)
					MESSAGE/IDENTIFIER/WAIT P_93389
				ELSE
					MESSAGE/IDENTIFIER/WAIT P_93390
				END_IF
			END_IF

			#LINE_DISCOUNT = ROUND(#DISCOUNT_BASIS*#PERCENT_DISCOUNT/100,#CURRENCY_DECIMAL) * 1.0
		ELSE
			#LINE_DISCOUNT = 0.0
		END_IF

		#LINE_DISCOUNT_OLD = #LINE_DISCOUNT

	END_BLOCK

	BEGIN_BLOCK LINE_DISCOUNT
		INPUT_BLOCK /ROW=11 /COL=43 /LEN=(#CURRENCY_LEN) &
			/PROMPT=(FIELD_PROMPT(DISCOUNT)) &
			/TARGET=#LINE_DISCOUNT &
			/INPUT_MASK=(#CURRENCY_MASK)

		#LINE_DISCOUNT = ROUND(#LINE_DISCOUNT,#CURRENCY_DECIMAL) * 1.0

		IF ((#LINE_DISCOUNT * 1.0) > (#DISCOUNT_BASIS * 1.0))
			MESSAGE/IDENTIFIER/BELL/WAIT P_52071
			GOTO LINE_DISCOUNT
		END_IF

		IF (#LINE_DISCOUNT <> #LINE_DISCOUNT_OLD)
			! Recalc the percentage if discount has been overridden

			#PERCENT_DISCOUNT = ROUND(#LINE_DISCOUNT/#DISCOUNT_BASIS * 100, 2)

			IF ((#AR_FREIGHT_IN_USE = #YES) &
			AND (SALES_ORDER_LINES(FREIGHT) > 0.0) &
			AND (#LINE_CUST_PAYS_FREIGHT = #YES))
				IF (#DIV_LINE_DISC_FREIGHT_INC	= #YES)
					IF (#LINE_DISCOUNT_OLD = 0.0)
						MESSAGE/IDENTIFIER/WAIT P_93389
					END_IF
				ELSE
					IF (#LINE_DISCOUNT_OLD = 0.0)
						MESSAGE/IDENTIFIER/WAIT P_93390
					END_IF
				END_IF
			END_IF
	END_BLOCK

	BEGIN_BLOCK PERCENT_DISCOUNT_2
			OUTPUT_BLOCK	   /ROW=11 /COL=63 &
				/SOURCE=#PERCENT_DISCOUNT &
				/USING=SALES_ORDER_INVOICE_LINES(LINE_DISCOUNT_PERCENT) &
				/OUTPUT_MASK="!-@@0.0@"
		END_IF
	END_BLOCK

	BEGIN_BLOCK SALES_TAX
		IF (#TAXABLE = #YES AND #TAX_FLAG <> #NO)

			DELETE ALL FROM TAX_TRANSACTIONS_VT

			#TAX_TYPE  = PARAMETER("TAX_TYPE_LINE")

			PERFORM LOAD_TAX_VT (#TAX_TYPE)
			 IF (%STATUS = %EMPTY)
				#TAX_MODE = "C"
			ELSE
			 	#TAX_MODE = "R"
			END_IF
			IF (#OPT = "TAX") #TAX_MODE = "R"

			PERFORM SETUP_TAX_CONTROL_VT

			LB_TAX_CONTROL_VT(PART_CODE) = SALES_ORDER_LINES(PART_CODE)
			LB_TAX_CONTROL_VT(WAREHOUSE) = SALES_ORDER_LINES(WAREHOUSE)
			LB_TAX_CONTROL_VT(CUSTOMER_NUMBER) = SALES_ORDER_HEADERS(CUSTOMER_NUMBER)
			LB_TAX_CONTROL_VT(INVOICE_ADDRESS_CODE) = SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)
			LB_TAX_CONTROL_VT(DELIVERY_ADDRESS_CODE) = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
			LB_TAX_CONTROL_VT(TRANSACTION_NUMBER) = SALES_ORDER_HEADERS(ORDER_NUMBER)
			LB_TAX_CONTROL_VT(TRANSACTION_TYPE) = PARAMETER("TTYPE_SO")
			LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE) = #DEF_PART_TAX_CODE
			LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE) = #CUSTOMER_TAX_CODE
			LB_TAX_CONTROL_VT(ORDER_LINE_TYPE) = "N"
			LB_TAX_CONTROL_VT(FORM_TITLE) = MESSAGE("P_93572")
			LB_TAX_CONTROL_VT(PRICE_ORDER_QTY) = #PRICE_ORDER_QTY
			IF ( #PRICING_METHOD = #TAX_INCLUSIVE )
				LB_TAX_CONTROL_VT(SALES_PRICE) = SALES_ORDER_LINES(SALES_PRICE_INC_TAX)
			ELSE
				LB_TAX_CONTROL_VT(SALES_PRICE) = SALES_ORDER_LINES(SALES_PRICE)
			END_IF
			LB_TAX_CONTROL_VT(LINE_DISCOUNT) = #LINE_DISCOUNT

	        PERFORM "GEMLB:LB_L_TAX_CONTROL" ( #TAX_MODE, #ERROR_OCCURRED, #ERROR_MESSAGE )

			IF (%STATUS = %BACK OR %STATUS = %EXIT OR #ERROR_OCCURRED = #TRUE)
				IF ( #ERROR_OCCURRED ) ERROR/TEXT_ONLY/BELL #ERROR_MESSAGE
				IF (#LD_IN_USE = #YES)
					GOTO PERCENT_DISCOUNT
				ELSE
					GOTO UNIT_COST
				END_IF
			END_IF

			FIND IN LB_TAX_CONTROL_VT

			#LINE_DISCOUNTED_TAX = LB_TAX_CONTROL_VT(TOTAL_TAX_AMOUNT)
			#DEF_PART_TAX_CODE = LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE)
			#CUSTOMER_TAX_CODE = LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE)
			#TAX_ON_CASH = LB_TAX_CONTROL_VT(TAX_ON_CASH)

!			PERFORM "GEMLB:LB_TAX_ANALYSIS" &
!				(#TAX_MODE, &
!				 #TAX_FLAG, &
!				 #DEF_PART_TAX_CODE, &
!				 #CUSTOMER_TAX_CODE, &
!				 (#LINE_GOODS_VALUE-#LINE_DISCOUNT), &
!				 #COMPANY_CODE, &
!				 #CURRENCY_DECIMAL, &
!				 #CURRENCY_MASK, &
!				 (PARAMETER("MODULE_AR")), &
!				 (MESSAGE("P_93572")), &
!				 "", &
!				 "", &
!				 "", &
!				 "N", &
!				 "", &
!				 #TAX_ON_CASH, &
!				 #DIVISION, &
!				 #LINE_DISCOUNTED_TAX)

			PERFORM DELETE_PREVIOUS_TAX_RECORDS (#TAX_TYPE)
			PERFORM CREATE_TAX_DETAIL_FROM_VT (#TAX_TYPE)

			IF ( #PRICING_METHOD = #TAX_INCLUSIVE AND #TAX_RATE_CHANGED = #TRUE )
				GOTO CALC_LINE_VALUE
			END_IF

			! AR Freight tax
			IF ((#AR_FREIGHT_IN_USE = #YES) &
			AND (#FREIGHT_TAXABLE = #YES) &
			AND (SALES_ORDER_LINES(FREIGHT) <> 0.0) &
			AND (SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR) =1))
				! AR Freight Tax on line on applies if freight is
				! taxable for this division and the goods price
				! does not include freight but the customer pays
				! freight.

				DELETE ALL FROM TAX_TRANSACTIONS_VT

				#TAX_TYPE  = PARAMETER("TAX_TYPE_FREIGHT")
				PERFORM LOAD_TAX_VT (#TAX_TYPE)

				#FREIGHT_TAX_CODE = #DEF_FREIGHT_TAX_CODE

				PERFORM SETUP_TAX_CONTROL_VT

				LB_TAX_CONTROL_VT(PART_CODE) = SALES_ORDER_LINES(PART_CODE)
				LB_TAX_CONTROL_VT(WAREHOUSE) = SALES_ORDER_LINES(WAREHOUSE)
				LB_TAX_CONTROL_VT(CUSTOMER_NUMBER) = SALES_ORDER_HEADERS(CUSTOMER_NUMBER)
				LB_TAX_CONTROL_VT(INVOICE_ADDRESS_CODE) = SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)
				LB_TAX_CONTROL_VT(DELIVERY_ADDRESS_CODE) = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
				LB_TAX_CONTROL_VT(TRANSACTION_NUMBER) = SALES_ORDER_HEADERS(ORDER_NUMBER)
				LB_TAX_CONTROL_VT(TRANSACTION_TYPE) = PARAMETER("TTYPE_SO")
				LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE) = #FREIGHT_TAX_CODE
				LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE) = #CUSTOMER_TAX_CODE
				LB_TAX_CONTROL_VT(ORDER_LINE_TYPE) = "F"
				LB_TAX_CONTROL_VT(FORM_TITLE) = MESSAGE("P_93391")
				LB_TAX_CONTROL_VT(PRICE_ORDER_QTY) = 1
				LB_TAX_CONTROL_VT(SALES_PRICE) = SALES_ORDER_LINES(FREIGHT)
				LB_TAX_CONTROL_VT(LINE_DISCOUNT) = 0

		        PERFORM "GEMLB:LB_L_TAX_CONTROL" ( #TAX_MODE, #ERROR_OCCURRED, #ERROR_MESSAGE, #TAX_RATE_CHANGED )

				IF (%STATUS = %BACK OR %STATUS = %EXIT OR #ERROR_OCCURRED = #TRUE)
					IF ( #ERROR_OCCURRED ) ERROR/TEXT_ONLY/BELL #ERROR_MESSAGE
					IF (#LD_IN_USE = #YES)
						GOTO PERCENT_DISCOUNT
					ELSE
						GOTO UNIT_COST
					END_IF
				END_IF

				FIND IN LB_TAX_CONTROL_VT

				#LINE_FREIGHT_TAX = LB_TAX_CONTROL_VT(TOTAL_TAX_AMOUNT)
				#FREIGHT_TAX_CODE = LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE)
				#CUSTOMER_TAX_CODE = LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE)
				#TAX_ON_CASH = LB_TAX_CONTROL_VT(TAX_ON_CASH)

				! use same tax mode as assigned for sales tax
!				PERFORM "GEMLB:LB_TAX_ANALYSIS" &
!						(#TAX_MODE, &
!						 #TAX_FLAG, &
!						 #FREIGHT_TAX_CODE, &
!						 #CUSTOMER_TAX_CODE, &
!				 		(SALES_ORDER_LINES(FREIGHT)), &
!						 #COMPANY_CODE, &
!						 #CURRENCY_DECIMAL, &
!						 #CURRENCY_MASK, &
!						 (PARAMETER("MODULE_AR")), &
!						 (MESSAGE("P_93391")), &
!						 "", &
!						 "", &
!						 "", &
!						 "F", &
!						 "", &
!						 #TAX_ON_CASH, &
!						 #DIVISION, &
!						 #LINE_FREIGHT_TAX)

				PERFORM DELETE_PREVIOUS_TAX_RECORDS (#TAX_TYPE)
				PERFORM CREATE_TAX_DETAIL_FROM_VT (#TAX_TYPE)

			ELSE
				! No tax on freight.  Try to delete records
				! in case there was freight but it is no
				! longer applicable.
				#TAX_TYPE  = PARAMETER("TAX_TYPE_FREIGHT")
				PERFORM DELETE_PREVIOUS_TAX_RECORDS (#TAX_TYPE)

				#LINE_FREIGHT_TAX = 0.0
			END_IF

			#TAX_MODE = "R"

		ELSE
			#TAX_TYPE  = PARAMETER("TAX_TYPE_LINE")
			PERFORM DELETE_PREVIOUS_TAX_RECORDS (#TAX_TYPE)

			#TAX_TYPE  = PARAMETER("TAX_TYPE_FREIGHT")
			PERFORM DELETE_PREVIOUS_TAX_RECORDS (#TAX_TYPE)

			#LINE_DISCOUNTED_TAX = 0.0
			#LINE_FREIGHT_TAX = 0.0
			MESSAGE/IDENTIFIER/WAIT P_22104
		END_IF

		#LINE_TAX = #LINE_DISCOUNTED_TAX + #LINE_FREIGHT_TAX
	END_BLOCK

	OUTPUT_BLOCK LINE_TAX /ROW=12 /COL=43 /LEN=(#CURRENCY_LEN) &
			/PROMPT=(MESSAGE("P_00648")) &
			/SOURCE=(#LINE_TAX) &
			/USING=SALES_ORDER_LINES(LINE_TAX) &
			/OUTPUT_MASK=(#CURRENCY_MASK)

	BEGIN_BLOCK CALC_LINE_TOTAL
		#LINE_VALUE = #QTY_TIMES_PRICE &
				+ (SALES_ORDER_LINES(FREIGHT) * SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR))
		#LINE_TOTAL = #LINE_VALUE - #LINE_DISCOUNT + #LINE_TAX
	END_BLOCK

	OUTPUT_BLOCK LINE_VALUE /ROW=13 /COL=43 /LEN=(#CURRENCY_LEN) &
			/PROMPT=(MESSAGE("P_00680")) &
			/SOURCE=(#LINE_TOTAL) &
			/USING=SALES_ORDER_LINES(SOP_ORDER_TOTAL_CURRENCY) &
			/OUTPUT_MASK=(#CURRENCY_MASK)

	BEGIN_BLOCK WEIGHT
		IF (#PHYSICAL_IN_USE <> #YES)
			GOTO CONFIRM
		END_IF

		INPUT_BLOCK  /ROW=12 /COL=12 &
			/PROMPT=(MESSAGE("P_00751")) &
			/TARGET=#WEIGHT &
			/USING=SALES_ORDER_LINES(WEIGHT) &
			/USE_IF=(#PHYSICAL_IN_USE=#YES)
	END_BLOCK

	INPUT_BLOCK WEIGHT_UOM /ROW=12 /COL=25 &
			/OPTIONS=DOMAIN_LOCK_NONE &
			/DOMAIN=UNITS_OF_MEASURE &
			/SOURCE=(#DEF_WEIGHT_UNIT) &
			/TARGET= #WEIGHT_UOM &
			/USING=SALES_ORDER_LINES(WEIGHT_UOM), REQUIRED &
			/LOV=UNITS_OF_MEASURE(UNIT_OF_MEASURE,UNIT_OF_MEASURE_DESC) &
			/USE_IF=(#PHYSICAL_IN_USE=#YES)

	INPUT_BLOCK VOLUME /ROW=13 /COL=12 &
			/PROMPT=(FIELD_PROMPT(VOLUME)) &
			/TARGET=#VOLUME &
			/USING=SALES_ORDER_LINES(VOLUME) &
			/USE_IF=(#PHYSICAL_IN_USE=#YES)

	INPUT_BLOCK VOLUME_UOM_1 /ROW=13 /COL=25 &
			/OPTIONS=DOMAIN_LOCK_NONE &
			/DOMAIN=UNITS_OF_MEASURE &
			/SOURCE=(#DEF_VOLUME_UNIT) &
			/TARGET=#VOLUME_UOM &
			/USING=SALES_ORDER_LINES(VOLUME_UOM), REQUIRED &
			/LOV = UNITS_OF_MEASURE(UNIT_OF_MEASURE,UNIT_OF_MEASURE_DESC) &
			/USE_IF=(#PHYSICAL_IN_USE=#YES)


	!Change 001 - DBM - 5/7/2007 - Add booked date
	INPUT_BLOCK BOOKED_DATE /ROW=14 /COL=12 /LEN=11 &
			/PROMPT=(MESSAGE("VOL_2013")) &
			/SOURCE_IF=(SALES_ORDER_LINES(SYS_RECOMMENDED_DATE)=""),(%TODAY) &
			/SOURCE_IF=(SALES_ORDER_LINES(SYS_RECOMMENDED_DATE)<>""),(SALES_ORDER_LINES(SYS_RECOMMENDED_DATE)) &
			/TARGET=#BOOKED_DATE &
			/USING=SALES_ORDER_LINES(SYS_RECOMMENDED_DATE)

	SALES_ORDER_LINES(SYS_RECOMMENDED_DATE)=#BOOKED_DATE
	!Change 001 End

	BEGIN_BLOCK EC_REPORTING
		#LINE_WEIGHT = #WEIGHT * #SALES_ORDER_QTY

		IF (#LINE_EC_REPORT_TYPE <> "")
			IF (#EC_STATISTICAL_VALUE = "") #EC_STATISTICAL_VALUE = ((#LINE_VALUE - #LINE_DISCOUNT) *#EC_STAT_FACTOR)

			PERFORM "GEMLB:LB_EC_REPORTING" &
				(#EC_MODE, &
				 #EC_REPORT_TYPE, &
				 (SALES_ORDER_LINES(UNIT_SALES)), &
				 #COMPANY_CODE, &
				 "", &
				 (#SALES_ORDER_QTY), &
				 "", &
				 (SALES_ORDER_LINES(WEIGHT_UOM)), &
				 (#LINE_WEIGHT), &
				 (#CORPORATE_ADDRESS_CODE), &
				 (#CURRENCY_MASK), &
				 "", &
				 #EC_PROCESSED_INDICATOR, &
				 #EC_TRANSACTION_TYPE, &
				 #EC_TARIFF_CODE, &
				 #EC_COUNTRY_OF_ORIGIN, &
				 #EC_SUPP_UNIT_QTY, &
				 #EC_WEIGHT, &
				 #EC_MODE_TRANSPORT, &
				 #EC_DELIVERY_TERMS, &
				 #EC_STATISTICAL_VALUE, &
				 #EC_ANALYSIS_1, &
				 #EC_ANALYSIS_2, &
				 #EC_ANALYSIS_3, &
				 #EC_ANALYSIS_4, &
				 #EC_ANALYSIS_5, &
				 "","","")

			SALES_ORDER_LINES(SYS_EC_STATISTICS_APPLICABLE) = #YES
			SALES_ORDER_LINES(SYS_EC_PROCESSED_INDICATOR)   = #EC_PROCESSED_INDICATOR
			SALES_ORDER_LINES(SYS_EC_TRANSACTION_TYPE)		 = #EC_TRANSACTION_TYPE
			IF (#LINE_EC_REPORT_TYPE = "B")
				IF (#EC_TARIFF_CODE = "00000000000")
					SALES_ORDER_LINES(SYS_EC_STATISTICS_APPLICABLE) = #NO
					GOTO CONFIRM
				END_IF
				SALES_ORDER_LINES(SYS_TARIFF_CODE)		   = #EC_TARIFF_CODE
				SALES_ORDER_LINES(SYS_COUNTRY_OF_ORIGIN) = #EC_COUNTRY_OF_ORIGIN
				SALES_ORDER_LINES(SYS_EC_SUPP_UNIT_QTY) = #EC_SUPP_UNIT_QTY
				SALES_ORDER_LINES(SYS_EC_WEIGHT)	= #EC_WEIGHT
				SALES_ORDER_LINES(SYS_EC_MODE_OF_TRANSPORT) = #EC_MODE_TRANSPORT
				SALES_ORDER_LINES(SYS_EC_DELIVERY_TERMS) = #EC_DELIVERY_TERMS
				SALES_ORDER_LINES(SYS_EC_STATISTICAL_VALUE)	    = #EC_STATISTICAL_VALUE
				SALES_ORDER_LINES(SYS_EC_ANALYSIS_1)	    = #EC_ANALYSIS_1
				SALES_ORDER_LINES(SYS_EC_ANALYSIS_2)	    = #EC_ANALYSIS_2
				SALES_ORDER_LINES(SYS_EC_ANALYSIS_3)	    = #EC_ANALYSIS_3
				SALES_ORDER_LINES(SYS_EC_ANALYSIS_4)	    = #EC_ANALYSIS_4
				SALES_ORDER_LINES(SYS_EC_ANALYSIS_5)	    = #EC_ANALYSIS_5
				SALES_ORDER_LINES(CUSTOMER_TAX_CODE) = #CUSTOMER_TAX_CODE
				SALES_ORDER_LINES(PRODUCT_TAX_CODE) = #PRODUCT_TAX_CODE
			END_IF
			#EC_MODE = "M"
		END_IF
	END_BLOCK

	YESNO_BLOCK CONFIRM /ROW=14 /COL=70 &
			/PROMPT=(MESSAGE("P_00149")) &
			/FAILURE=(GOTO SALES_ORDER_DETAIL_DESCRIPTION)

	BEGIN_BLOCK LINE_MENU
		#LINE_EDIT_MODE = "MODIFY"

		IF (#CURRENCY_METHOD <> 0)

			DELETE ALL FROM SYS_CURRENCY_VALUES_VT

			SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE)	= #LINE_TOTAL

			ADD TO SYS_CURRENCY_VALUES_VT

			PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)

			IF (#R_STATUS <> #YES)
				ERROR/WAIT #R_MESSAGE
				EXIT (%FAILURE)
			END_IF

			FIND IN SYS_CURRENCY_VALUES_VT

			#NET_VALUE_BASE	= SYS_CURRENCY_VALUES_VT(BASE_VALUE)
		ELSE
			#NET_VALUE_BASE = #LINE_TOTAL
		END_IF

		IF (#SECURITY_ACTIVE = #YES AND #NET_VALUE_BASE > #TRANSACTION_MAX)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00872
			GOTO CONFIRM
		END_IF

		PERFORM LINE_MENU
		IF (%STATUS = %BACK) GOTO CONFIRM
		IF (%STATUS = %EXIT) EXIT(%STATUS)
		IF (#OPT="EC_REP") GOTO EC_REPORTING
		IF (#OPT="TAX") GOTO SALES_TAX
		IF ((#OPT = "FREIGHT") OR (#RE_CALC_FREIGHT = #YES)) GOTO MAINTAIN_LINE_FREIGHT
		IF (#OPT="NEXT")
			EXIT(%SUCCESS)
		ELSE
			GOTO LINE_MENU
		END_IF
	END_BLOCK

	BEGIN_BLOCK MAINTAIN_LINE_FREIGHT
		PERFORM MAINTAIN_LINE_FREIGHT
		#RE_CALC_FREIGHT = #NO

		! Re-display freight and force user through discount,
		! tax and EC reporting entry because these values
		! may have been impacted.
		GOTO GET_AR_FREIGHT_VARS
	END_BLOCK

END_FORM


FORM NON_STOCK_MODIFY /ROW=9 /COL=2 /HEIGHT=15 /WIDTH=78 &
	/REMAIN &
	/TITLE=(MESSAGE("P_20276"))

	BEGIN_BLOCK INIT
		#IC_PACKAGED_PRODUCT = #NO
		#IC_UOM_CONTROL = ""
		#ALLOW_ORDER_LINE_CLOSE	= #ALLOW_ORDER_CLOSE

		IF (#AR_FREIGHT_IN_USE = #YES)
			#LINE_PRICE_FREIGHT_INCLUSIVE = ""
			#LINE_PRICE_CODE_DESCRIPTION = ""

			FIND IN PRICE_CODES &
				/LOCK=NONE &
				/WITH=COMPANY_CODE = #COMPANY_CODE &
				/WITH=DIVISION = #DIVISION &
				/WITH=PRICE_CODE = #PRICE_CODE

			IF (%STATUS <> %FAILURE)
				#LINE_PRICE_FREIGHT_INCLUSIVE = PRICE_CODES(SOP_FREIGHT_INCLUSIVE)
				#LINE_PRICE_CODE_DESCRIPTION = PRICE_CODES(DESCRIPTION)
			END_IF
			IF (#LINE_PRICE_FREIGHT_INCLUSIVE = "")
				#LINE_PRICE_FREIGHT_INCLUSIVE = #NO
			END_IF
		END_IF
	END_BLOCK

	OUTPUT_BLOCK BLOCK_Y /ROW=10 /COL=25 &
			/SOURCE=(MESSAGE("P_00737")) &
			/ATTRIBUTES=NONE &
			/USE_IF=(#PHYSICAL_IN_USE=#YES)

	BEGIN_BLOCK DEFAULTS
		#ORIG_SALES_UOM = SALES_ORDER_LINES(UNIT_SALES)

		PERFORM FIND_CURRENT_SO_LINE_QTY( (SALES_ORDER_LINES(UNIT_SALES)), #R1)

		IF (%STATUS = %SUCCESS)
			#ORIG_SALES_ORDER_QTY   = SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)
			#SALES_ORDER_QTY	= SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)
		ELSE
			#SALES_ORDER_QTY	= 0
			#ORIG_SALES_ORDER_QTY   = 0
		END_IF

		#ORIG_PRICE_UOM = SALES_ORDER_LINES(UNIT_PRICE)

		IF (#ORIG_PRICE_UOM = #ORIG_SALES_UOM)
			#ORIG_PRICE_ORDER_QTY   = #ORIG_SALES_ORDER_QTY
			#PRICE_ORDER_QTY	= #SALES_ORDER_QTY
			#DESPATCH_QTY = SALES_ORDER_LINE_QTYS(IC_QTY_IN_DESPATCH) + SALES_ORDER_LINE_QTYS(QTY_DESPATCHED)
		ELSE
			PERFORM FIND_CURRENT_SO_LINE_QTY( (SALES_ORDER_LINES(UNIT_PRICE)), #R1)

			IF (%STATUS = %SUCCESS)
				#ORIG_PRICE_ORDER_QTY   = SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)
				#PRICE_ORDER_QTY	= SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)
				#DESPATCH_QTY = SALES_ORDER_LINE_QTYS(IC_QTY_IN_DESPATCH) + SALES_ORDER_LINE_QTYS(QTY_DESPATCHED)
			ELSE
				#PRICE_ORDER_QTY	= 0
				#ORIG_PRICE_ORDER_QTY   = 0
				#DESPATCH_QTY = 0
			END_IF
		END_IF

		#ORIG_DESP_VALUE = (#DESPATCH_QTY * SALES_ORDER_LINES(SALES_PRICE))

		PERFORM "GEMLB:LB_GET_QUANTITY_MASK" (#COMPANY_CODE,    &
					"",     &
					(SALES_ORDER_LINES(UNIT_SALES)),	&
					#R1,    &
					#R2)

		IF (%STATUS = %SUCCESS)
			#SALES_UOM_MASK = #R1
			#SALES_UOM_NOD  = #R2
		ELSE
			#SALES_UOM_MASK = ""
			#SALES_UOM_NOD  = ""
		END_IF

		#WEIGHT 	= SALES_ORDER_LINES(WEIGHT)
		#WEIGHT_UOM		= SALES_ORDER_LINES(WEIGHT_UOM)
		#VOLUME 	= SALES_ORDER_LINES(VOLUME)
		#VOLUME_UOM 	= SALES_ORDER_LINES(VOLUME_UOM)

		DISPLAY DEFAULTS
		GOTO CONFIRM
	END_BLOCK

	INPUT_BLOCK SALES_ORDER_DETAIL_DESCRIPTION /ROW=2 /COL=18 &
			/PROMPT=(FIELD_PROMPT(SALES_ORDER_DETAIL_DESCRIPTION)) &
			/TARGET=SALES_ORDER_LINES(SALES_ORDER_DETAIL_DESCRIPTION) &
			/BACK=(EXIT(%EXIT)) &
			/EXIT=(EXIT(%EXIT)) &
			/EXIT_FORWARD=(GOTO DETAIL_DESC_2)

	OUTPUT_BLOCK DETAIL_DESC_2 /ROW=2 /COL=18 /HEIGHT=2 &
			/SOURCE=(SALES_ORDER_LINES(SALES_ORDER_DETAIL_DESCRIPTION))

	INPUT_BLOCK ORDER_LINE_REFERENCE /ROW=4 /COL=18 &
			/PROMPT=(FIELD_SHORT_PROMPT(ORDER_LINE_REFERENCE)) &
			/TARGET=SALES_ORDER_LINES(ORDER_LINE_REFERENCE)

	!Change 005 - If the part code is a charge (e.g. >=900000), then make the order line reference be required
	BEGIN_BLOCK CHECK_IF_REQUIRED 
		IF (SALES_ORDER_LINES(ORDER_LINE_REFERENCE)="" AND SALES_ORDER_LINES(PART_CODE)>="901000")
			ERROR /TEXT_ONLY "Line Reference is required for all non-finished goods."
			GOTO ORDER_LINE_REFERENCE
		END_IF
	END_BLOCK
	!Change 005 End

	INPUT_BLOCK CUSTOMER_PART_CODE /ROW=5 /COL=18 &
			/PROMPT=(MESSAGE("P_2OS_TRAN_BALANCE_3")) &
			/TARGET=SALES_ORDER_LINES(CUSTOMERS_PART_CODE)

	OUTPUT_BLOCK UNIT_SALES /ROW=6 /COL=18	 &
			/PROMPT=(MESSAGE("P_91231")) &
			/SOURCE=#SALES_UOM &
			/USING=SALES_ORDER_LINES(UNIT_SALES)

	BEGIN_BLOCK VALID_SALES_UOM
		FIND IN UNITS_OF_MEASURE &
			/LOCK=NONE &
			/WITH=UNIT_OF_MEASURE = #SALES_UOM

		IF (%STATUS <> %SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_62355
			GOTO UNIT_SALES
		END_IF

		PERFORM 'GEMLB:LB_GET_QUANTITY_MASK' (#COMPANY_CODE, "", &
						#SALES_UOM,     &
						#SALES_UOM_MASK,	&
						#UOM_NOD)

		IF (%STATUS <> %SUCCESS)
			GOTO UNIT_SALES
		END_IF

		SALES_ORDER_LINES(UNIT_SALES) = #SALES_UOM
	END_BLOCK

	BEGIN_BLOCK ORDER_QTY
		INPUT_BLOCK  /ROW=6 /COL=43 /LEN=14 &
			/PROMPT=(MESSAGE("P_5CUSTOMERS_PART_CODE_1")) &
			/TARGET=#SALES_ORDER_QTY &
			/INPUT_MASK = #SALES_UOM_MASK

		IF ((#ORIG_SALES_ORDER_QTY <> 0 ) AND &
			(SALES_ORDER_LINE_QTYS(ORDER_QUANTITY_PROCESSED) > #SALES_ORDER_QTY))
				MESSAGE /IDENTIFIER /BELL /WAIT P_52086,	&
					MASK(#SALES_UOM_MASK, SALES_ORDER_LINE_QTYS(ORDER_QUANTITY_PROCESSED))
				GOTO ORDER_QTY
		END_IF
	END_BLOCK

	BEGIN_BLOCK INPUT_UNIT_PRICE
		INPUT_BLOCK UNIT_PRICE /ROW=7 /COL=18 &
			/PROMPT=(MESSAGE("P_56107")) &
			/TARGET=#PRICE_UOM &
			/USING=SALES_ORDER_LINES(UNIT_PRICE),REQUIRED &
			/LOV=UNITS_OF_MEASURE(UNIT_OF_MEASURE,UNIT_OF_MEASURE_DESC)

			PERFORM CONVERT_QTYS("", &
					"", &
					"", &
					#SALES_UOM, &
					#SALES_ORDER_QTY, &
					(SALES_ORDER_LINES(UNIT_PRICE)), &
					#PRICE_ORDER_QTY, &
					#R1)
			IF (%STATUS <> %SUCCESS)
				GOTO INPUT_UNIT_PRICE
			END_IF
	END_BLOCK

	INPUT_BLOCK SALES_PRICE /ROW=7 /COL=43 &
			/PROMPT=(MESSAGE("P_00594")) &
			/TARGET=SALES_ORDER_LINES(SALES_PRICE) &
			/INPUT_MASK=(#SALES_PRICE_MASK) &
			/USE_IF=(#PRICING_METHOD_OPTIONAL=#NO)

	INPUT_BLOCK TIP_SALES_PRICE /ROW=7 /COL=43 &
			/PROMPT=(#PRICE_PROMPT) &
			/TARGET=SALES_ORDER_LINES(SALES_PRICE) &
			/INPUT_MASK=(#SALES_PRICE_MASK) &
			/USE_IF=(#PRICING_METHOD_OPTIONAL=#YES AND #PRICING_METHOD<>#TAX_INCLUSIVE)

	INPUT_BLOCK TIP_SALES_PRICE_1 /ROW=7 /COL=43 &
			/PROMPT=(#PRICE_PROMPT) &
			/TARGET=SALES_ORDER_LINES(SALES_PRICE_INC_TAX) &
			/INPUT_MASK=(#SALES_PRICE_MASK) &
			/USE_IF=(#PRICING_METHOD_OPTIONAL=#YES AND #PRICING_METHOD=#TAX_INCLUSIVE)

	INPUT_BLOCK UNIT_COST /ROW=8 /COL=43 &
			/PROMPT=(FIELD_PROMPT(UNIT_COST)) &
			/TARGET=SALES_ORDER_LINES(UNIT_COST)

	BEGIN_BLOCK CALC_LINE_VALUE
		SALES_ORDER_LINES(UNIT_PRICE) = #PRICE_UOM
		IF (SALES_ORDER_LINES(UNIT_SALES)=SALES_ORDER_LINES(UNIT_PRICE))
			#PRICE_ORDER_QTY	= #SALES_ORDER_QTY
		ELSE
			#PRICE_ORDER_QTY	= 0.0
			PERFORM CONVERT_QTYS("", &
					"", &
					"", &
					#SALES_UOM, &
					#SALES_ORDER_QTY, &
					(SALES_ORDER_LINES(UNIT_PRICE)), &
					#PRICE_ORDER_QTY, &
					#R1)
		END_IF

		IF ( #PRICING_METHOD = #TAX_INCLUSIVE )

			IF (#CUSTOMER_TAX_CODE = "") #CUSTOMER_TAX_CODE = #DEF_CUST_TAX_CODE

			PERFORM SETUP_TAX_CONTROL_VT

			IF ( #TAXABLE = #NO OR #TAX_FLAG = #NO )
				LB_TAX_CONTROL_VT(PRICING_METHOD) = #TAX_EXCLUSIVE
			END_IF

			LB_TAX_CONTROL_VT(PART_CODE) = SALES_ORDER_LINES(PART_CODE)
			LB_TAX_CONTROL_VT(WAREHOUSE) = SALES_ORDER_LINES(WAREHOUSE)
			LB_TAX_CONTROL_VT(CUSTOMER_NUMBER) = SALES_ORDER_HEADERS(CUSTOMER_NUMBER)
			LB_TAX_CONTROL_VT(INVOICE_ADDRESS_CODE) = SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)
			LB_TAX_CONTROL_VT(DELIVERY_ADDRESS_CODE) = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
			LB_TAX_CONTROL_VT(TRANSACTION_NUMBER) = SALES_ORDER_HEADERS(ORDER_NUMBER)
			LB_TAX_CONTROL_VT(TRANSACTION_TYPE) = PARAMETER("TTYPE_SO")
			LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE) = #DEF_PART_TAX_CODE
			LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE) = #CUSTOMER_TAX_CODE
			LB_TAX_CONTROL_VT(ORDER_LINE_TYPE) = "N"
			LB_TAX_CONTROL_VT(FORM_TITLE) = ""
			LB_TAX_CONTROL_VT(PRICE_ORDER_QTY) = #PRICE_ORDER_QTY
			LB_TAX_CONTROL_VT(SALES_PRICE) = SALES_ORDER_LINES(SALES_PRICE_INC_TAX)
			LB_TAX_CONTROL_VT(LINE_DISCOUNT) = 0

	        PERFORM "GEMLB:LB_L_TAX_CONTROL" ( "T", #ERROR_OCCURRED, #ERROR_MESSAGE )

			IF (%STATUS = %BACK OR %STATUS = %EXIT)
				EXIT (%STATUS)
			END_IF

			IF ( #ERROR_OCCURRED ) ERROR/TEXT_ONLY #ERROR_MESSAGE

			FIND IN LB_TAX_CONTROL_VT

			#NET_PRICE = LB_TAX_CONTROL_VT(NET_PRICE)
			#NET_LINE_VALUE = LB_TAX_CONTROL_VT(NET_LINE_VALUE)

			#QTY_TIMES_PRICE = #NET_LINE_VALUE

		ELSE

			#QTY_TIMES_PRICE = &
				ROUND( #PRICE_ORDER_QTY * SALES_ORDER_LINES(SALES_PRICE), #CURRENCY_DECIMAL )

		END_IF

	END_BLOCK

	OUTPUT_BLOCK VALUE /ROW=10 /COL=43 /LEN=(#CURRENCY_LEN) &
		/PROMPT=(MESSAGE("P_16150")) &
		/SOURCE=#QTY_TIMES_PRICE &
		/USING=SALES_ORDER_INVOICE_LINES(SOP_INVOICE_TOTAL_CURRENCY) &
		/OUTPUT_MASK=(#CURRENCY_MASK)

	BEGIN_BLOCK GET_AR_FREIGHT_VARS
		IF (#AR_FREIGHT_IN_USE = #YES)
			PERFORM GET_FREIGHT_DORC_IND_VALUE ( &
					#LINE_PRICE_FREIGHT_INCLUSIVE, &
					#LINE_CUST_PAYS_FREIGHT, &
					(#WAREHOUSED_FLAG), &
					SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR), &
					#FREIGHT_PREFIX, &
					#LINE_FREIGHT_APPLICABLE)

			! #line_price_freight_inclusive and #line_cust_pays_freight
			! values are assigned as part of the record Add variable
			! setup.
		ELSE
			SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR) = ""
			#FREIGHT_PREFIX = ""
			#LINE_FREIGHT_APPLICABLE = #NO
		END_IF

		IF (#AR_FREIGHT_IN_USE <> #YES) GOTO INIT_AR_FREIGHT_PREFIX

		IF (#LINE_FREIGHT_APPLICABLE <> #YES)
			! AR Freight may be in use, but
			! if DORC indicator is zero, line freight is not
			! applicable for non-stock (and non-warehoused) lines.
			!
			SALES_ORDER_LINES(SOP_FREIGHT_CALCULATED) = 0.0
			SALES_ORDER_LINES(FREIGHT) = 0.0
			SALES_ORDER_LINES(SOP_FREIGHT_OVERRIDDEN) = #NO
			GOTO INIT_AR_FREIGHT_PREFIX
		END_IF

		SALES_ORDER_LINES(SOP_FREIGHT_CALCULATED) = 0.0

		! For non-stocked parts, if AR Freight is in use, do not
		! calculate freight, but if DorC indicator is non-zero
		! (freight inclusive price but customer doesn't pay freight, or
		! freight exclusive price but customers pays freight) and
		! freight override is allowed, allow the user to enter a
		! freight value later.
		IF (#DIV_ALLOWS_FREIGHT_OVERRIDE = #NO)
			SALES_ORDER_LINES(FREIGHT) = 0.0
			SALES_ORDER_LINES(SOP_FREIGHT_OVERRIDDEN) = #NO
		END_IF
	END_BLOCK

	OUTPUT_BLOCK INIT_AR_FREIGHT_PREFIX /ROW=9 /COL=27 /LEN=9 &
			/ATTRIBUTES=NONE &
			/SOURCE=(#FREIGHT_PREFIX)

	OUTPUT_BLOCK INIT_AR_FREIGHT_PROMPT /ROW=9 /COL=34 /LEN=7 &
			/ATTRIBUTES=NONE &
			/SOURCE=(FIELD_SHORT_PROMPT(FREIGHT)) &
			/USE_IF=(#LINE_FREIGHT_APPLICABLE = #YES)

	OUTPUT_BLOCK INIT_AR_FREIGHT_VALUE /ROW=9 /COL=43 /LEN=(#CURRENCY_LEN) &
			/SOURCE=(SALES_ORDER_LINES(FREIGHT)) &
			/OUTPUT_MASK=#CURRENCY_MASK &
			/USE_IF=(#LINE_FREIGHT_APPLICABLE = #YES)

	TEXT /ROW=11 /COL=70 "%"

	BEGIN_BLOCK PERCENT_DISCOUNT
		IF ((#AR_FREIGHT_IN_USE = #YES) AND (#LINE_PRICE_FREIGHT_INCLUSIVE = #YES))
			#LINE_GOODS_VALUE = #QTY_TIMES_PRICE - SALES_ORDER_LINES(FREIGHT)
		ELSE
			#LINE_GOODS_VALUE = #QTY_TIMES_PRICE
		END_IF

		IF ((#AR_FREIGHT_IN_USE = #YES) &
		AND (#DIV_LINE_DISC_FREIGHT_INC	= #YES) &
		AND (#LINE_CUST_PAYS_FREIGHT = #YES))
			#DISCOUNT_BASIS = #LINE_GOODS_VALUE + SALES_ORDER_LINES(FREIGHT)
		ELSE
			#DISCOUNT_BASIS = #LINE_GOODS_VALUE
		END_IF

		IF (#LD_IN_USE<>#YES) GOTO SALES_TAX

		INPUT_BLOCK  /ROW=11 /COL=63 &
			/TARGET=#PERCENT_DISCOUNT &
			/USING=SALES_ORDER_HEADERS(ORDER_DISCOUNT_PERCENT) &
			/INPUT_MASK="!-@@0.0@"

		IF (#PERCENT_DISCOUNT <> 0.0)
			IF (#PERCENT_DISCOUNT < 0.0 OR #PERCENT_DISCOUNT > 100.0)
				MESSAGE/IDENTIFIER/BELL/WAIT P_00353
				GOTO PERCENT_DISCOUNT
			END_IF

			IF ((#AR_FREIGHT_IN_USE = #YES) &
			AND (SALES_ORDER_LINES(FREIGHT) > 0.0) &
			AND (#LINE_CUST_PAYS_FREIGHT = #YES))
				IF (#DIV_LINE_DISC_FREIGHT_INC	= #YES)
					MESSAGE/IDENTIFIER/WAIT P_93389
				ELSE
					MESSAGE/IDENTIFIER/WAIT P_93390
				END_IF
			END_IF

			#LINE_DISCOUNT = ROUND(#DISCOUNT_BASIS*#PERCENT_DISCOUNT/100,#CURRENCY_DECIMAL) * 1.0
		ELSE
			#LINE_DISCOUNT = 0.0
		END_IF

		#LINE_DISCOUNT_OLD = #LINE_DISCOUNT
	END_BLOCK

	BEGIN_BLOCK LINE_DISCOUNT
		INPUT_BLOCK /ROW=11 /COL=43 /LEN=(#CURRENCY_LEN) &
			/PROMPT=(FIELD_PROMPT(DISCOUNT)) &
			/TARGET=#LINE_DISCOUNT &
			/INPUT_MASK=(#CURRENCY_MASK)

		#LINE_DISCOUNT = ROUND(#LINE_DISCOUNT,#CURRENCY_DECIMAL) * 1.0

		IF ((#LINE_DISCOUNT * 1.0) > (#DISCOUNT_BASIS * 1.0))
			MESSAGE/IDENTIFIER/BELL/WAIT P_52071
			GOTO LINE_DISCOUNT
		END_IF

		IF (#LINE_DISCOUNT <> #LINE_DISCOUNT_OLD)
			! Recalc the percentage if discount has been overridden

			#PERCENT_DISCOUNT = ROUND(#LINE_DISCOUNT/#DISCOUNT_BASIS * 100, 2)

			IF ((#AR_FREIGHT_IN_USE = #YES) &
			AND (SALES_ORDER_LINES(FREIGHT) > 0.0) &
			AND (#LINE_CUST_PAYS_FREIGHT = #YES))
				IF (#DIV_LINE_DISC_FREIGHT_INC	= #YES)
					IF (#LINE_DISCOUNT_OLD = 0.0)
						MESSAGE/IDENTIFIER/WAIT P_93389
					END_IF
				ELSE
					IF (#LINE_DISCOUNT_OLD = 0.0)
						MESSAGE/IDENTIFIER/WAIT P_93390
					END_IF
				END_IF
			END_IF
	END_BLOCK

	BEGIN_BLOCK PERCENT_DISCOUNT_2
		OUTPUT_BLOCK		 /ROW=11 /COL=63 &
			/SOURCE=#PERCENT_DISCOUNT &
			/USING=SALES_ORDER_INVOICE_LINES(LINE_DISCOUNT_PERCENT) &
			/OUTPUT_MASK="!-@@0.0@"
		END_IF
	END_BLOCK

	BEGIN_BLOCK SALES_TAX
		IF (#TAXABLE = #YES AND #TAX_FLAG <> #NO)

			IF ((#AR_FREIGHT_IN_USE = #YES) &
			AND (#FREIGHT_TAXABLE = #YES) &
			AND (SALES_ORDER_LINES(FREIGHT) <> 0.0) &
			AND (SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR) =1))
				! Assign these values here in case the line
				! tax update fails so the sales order lines
				! field is overwritten with the correct
				! current value.

				#FREIGHT_TAX_CODE = #DEF_FREIGHT_TAX_CODE
			END_IF

			DELETE ALL FROM TAX_TRANSACTIONS_VT

			#TAX_TYPE  = PARAMETER("TAX_TYPE_LINE")

			PERFORM LOAD_TAX_VT (#TAX_TYPE)
			 IF (%STATUS = %EMPTY)
				#TAX_MODE = "C"
			ELSE
			 	#TAX_MODE = "R"
			END_IF
			IF (#OPT = "TAX") #TAX_MODE = "R"

			PERFORM SETUP_TAX_CONTROL_VT

			LB_TAX_CONTROL_VT(PART_CODE) = SALES_ORDER_LINES(PART_CODE)
			LB_TAX_CONTROL_VT(WAREHOUSE) = SALES_ORDER_LINES(WAREHOUSE)
			LB_TAX_CONTROL_VT(CUSTOMER_NUMBER) = SALES_ORDER_HEADERS(CUSTOMER_NUMBER)
			LB_TAX_CONTROL_VT(INVOICE_ADDRESS_CODE) = SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)
			LB_TAX_CONTROL_VT(DELIVERY_ADDRESS_CODE) = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
			LB_TAX_CONTROL_VT(TRANSACTION_NUMBER) = SALES_ORDER_HEADERS(ORDER_NUMBER)
			LB_TAX_CONTROL_VT(TRANSACTION_TYPE) = PARAMETER("TTYPE_SO")
			LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE) = #DEF_PART_TAX_CODE
			LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE) = #CUSTOMER_TAX_CODE
			LB_TAX_CONTROL_VT(ORDER_LINE_TYPE) = "N"
			LB_TAX_CONTROL_VT(FORM_TITLE) = MESSAGE("P_93572")
			LB_TAX_CONTROL_VT(PRICE_ORDER_QTY) = #PRICE_ORDER_QTY
			IF ( #PRICING_METHOD = #TAX_INCLUSIVE )
				LB_TAX_CONTROL_VT(SALES_PRICE) = SALES_ORDER_LINES(SALES_PRICE_INC_TAX)
			ELSE
				LB_TAX_CONTROL_VT(SALES_PRICE) = SALES_ORDER_LINES(SALES_PRICE)
			END_IF
			LB_TAX_CONTROL_VT(LINE_DISCOUNT) = #LINE_DISCOUNT

	        PERFORM "GEMLB:LB_L_TAX_CONTROL" ( #TAX_MODE, #ERROR_OCCURRED, #ERROR_MESSAGE, #TAX_RATE_CHANGED )

			IF (%STATUS = %BACK OR %STATUS = %EXIT OR #ERROR_OCCURRED = #TRUE)
				IF ( #ERROR_OCCURRED ) ERROR/TEXT_ONLY/BELL #ERROR_MESSAGE
				IF (#LD_IN_USE = #YES)
					GOTO PERCENT_DISCOUNT
				ELSE
					GOTO UNIT_COST
				END_IF
			END_IF

			FIND IN LB_TAX_CONTROL_VT

			#LINE_DISCOUNTED_TAX = LB_TAX_CONTROL_VT(TOTAL_TAX_AMOUNT)
			#DEF_PART_TAX_CODE = LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE)
			#CUSTOMER_TAX_CODE = LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE)
			#TAX_ON_CASH = LB_TAX_CONTROL_VT(TAX_ON_CASH)

!			PERFORM "GEMLB:LB_TAX_ANALYSIS" &
!				(#TAX_MODE, &
!				 #TAX_FLAG, &
!				 #DEF_PART_TAX_CODE, &
!				 #CUSTOMER_TAX_CODE, &
!				 (#LINE_GOODS_VALUE-#LINE_DISCOUNT), &
!				 #COMPANY_CODE, &
!				 #CURRENCY_DECIMAL, &
!				 #CURRENCY_MASK, &
!				 (PARAMETER("MODULE_AR")), &
!				 (MESSAGE("P_93572")), &
!				 "", &
!				 "", &
!				 "", &
!				 "N", &
!				 "", &
!				 #TAX_ON_CASH, &
!				 #DIVISION, &
!				 #LINE_DISCOUNTED_TAX)

			PERFORM DELETE_PREVIOUS_TAX_RECORDS (#TAX_TYPE)
			PERFORM CREATE_TAX_DETAIL_FROM_VT (#TAX_TYPE)

			IF ( #PRICING_METHOD = #TAX_INCLUSIVE AND #TAX_RATE_CHANGED = #TRUE )
				GOTO CALC_LINE_VALUE
			END_IF

			! AR Freight tax
			IF ((#AR_FREIGHT_IN_USE = #YES) &
			AND (#FREIGHT_TAXABLE = #YES) &
			AND (SALES_ORDER_LINES(FREIGHT) <> 0.0) &
			AND (SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR) =1))
				! AR Freight Tax on line on applies if freight is
				! taxable for this division and the goods price
				! does not include freight but the customer pays
				! freight.

				DELETE ALL FROM TAX_TRANSACTIONS_VT

				#TAX_TYPE  = PARAMETER("TAX_TYPE_FREIGHT")
				PERFORM LOAD_TAX_VT (#TAX_TYPE)

				PERFORM SETUP_TAX_CONTROL_VT

				LB_TAX_CONTROL_VT(PART_CODE) = SALES_ORDER_LINES(PART_CODE)
				LB_TAX_CONTROL_VT(WAREHOUSE) = SALES_ORDER_LINES(WAREHOUSE)
				LB_TAX_CONTROL_VT(CUSTOMER_NUMBER) = SALES_ORDER_HEADERS(CUSTOMER_NUMBER)
				LB_TAX_CONTROL_VT(INVOICE_ADDRESS_CODE) = SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)
				LB_TAX_CONTROL_VT(DELIVERY_ADDRESS_CODE) = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
				LB_TAX_CONTROL_VT(TRANSACTION_NUMBER) = SALES_ORDER_HEADERS(ORDER_NUMBER)
				LB_TAX_CONTROL_VT(TRANSACTION_TYPE) = PARAMETER("TTYPE_SO")
				LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE) = #FREIGHT_TAX_CODE
				LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE) = #CUSTOMER_TAX_CODE
				LB_TAX_CONTROL_VT(ORDER_LINE_TYPE) = "F"
				LB_TAX_CONTROL_VT(FORM_TITLE) = MESSAGE("P_93391")
				LB_TAX_CONTROL_VT(PRICE_ORDER_QTY) = 1
				LB_TAX_CONTROL_VT(SALES_PRICE) = SALES_ORDER_LINES(FREIGHT)
				LB_TAX_CONTROL_VT(LINE_DISCOUNT) = 0

		        PERFORM "GEMLB:LB_L_TAX_CONTROL" ( #TAX_MODE, #ERROR_OCCURRED, #ERROR_MESSAGE )

				IF (%STATUS = %BACK OR %STATUS = %EXIT OR #ERROR_OCCURRED = #TRUE)
					IF ( #ERROR_OCCURRED ) ERROR/TEXT_ONLY/BELL #ERROR_MESSAGE
					IF (#LD_IN_USE = #YES)
						GOTO PERCENT_DISCOUNT
					ELSE
						GOTO UNIT_COST
					END_IF
				END_IF

				FIND IN LB_TAX_CONTROL_VT

				#LINE_FREIGHT_TAX = LB_TAX_CONTROL_VT(TOTAL_TAX_AMOUNT)
				#FREIGHT_TAX_CODE = LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE)
				#CUSTOMER_TAX_CODE = LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE)
				#TAX_ON_CASH = LB_TAX_CONTROL_VT(TAX_ON_CASH)

				! use same tax mode as assigned for sales tax
!				PERFORM "GEMLB:LB_TAX_ANALYSIS" &
!						(#TAX_MODE, &
!						 #TAX_FLAG, &
!						 #FREIGHT_TAX_CODE, &
!						 #CUSTOMER_TAX_CODE, &
!				 		(SALES_ORDER_LINES(FREIGHT)), &
!						 #COMPANY_CODE, &
!						 #CURRENCY_DECIMAL, &
!						 #CURRENCY_MASK, &
!						 (PARAMETER("MODULE_AR")), &
!						 (MESSAGE("P_93391")), &
!						 "", &
!						 "", &
!						 "", &
!						 "F", &
!						 "", &
!						 #TAX_ON_CASH, &
!						 #DIVISION, &
!						 #LINE_FREIGHT_TAX)

				PERFORM DELETE_PREVIOUS_TAX_RECORDS (#TAX_TYPE)
				PERFORM CREATE_TAX_DETAIL_FROM_VT (#TAX_TYPE)

			ELSE
				! No tax on freight.  Try to delete records
				! in case there was freight but it is no
				! longer applicable.
				#TAX_TYPE  = PARAMETER("TAX_TYPE_FREIGHT")
				PERFORM DELETE_PREVIOUS_TAX_RECORDS (#TAX_TYPE)

				#LINE_FREIGHT_TAX = 0.0
			END_IF

			#TAX_MODE = "R"
		ELSE
			#TAX_TYPE  = PARAMETER("TAX_TYPE_LINE")
			PERFORM DELETE_PREVIOUS_TAX_RECORDS (#TAX_TYPE)

			#TAX_TYPE  = PARAMETER("TAX_TYPE_FREIGHT")
			PERFORM DELETE_PREVIOUS_TAX_RECORDS (#TAX_TYPE)

			#LINE_DISCOUNTED_TAX = 0.0
			#LINE_FREIGHT_TAX = 0.0
			MESSAGE/IDENTIFIER/BELL/WAIT P_22098
		END_IF

		#LINE_TAX = #LINE_DISCOUNTED_TAX + #LINE_FREIGHT_TAX
	END_BLOCK

	OUTPUT_BLOCK LINE_TAX /ROW=12 /COL=43 /LEN=(#CURRENCY_LEN) &
			/PROMPT=(MESSAGE("P_00648")) &
			/SOURCE=(#LINE_TAX) &
			/USING=SALES_ORDER_LINES(LINE_TAX) &
			/OUTPUT_MASK=(#CURRENCY_MASK)

	BEGIN_BLOCK CALC_LINE_TOTAL
		#LINE_VALUE = #QTY_TIMES_PRICE &
				+ (SALES_ORDER_LINES(FREIGHT) * SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR))
		#LINE_TOTAL = #LINE_VALUE - #LINE_DISCOUNT + #LINE_TAX
	END_BLOCK

	OUTPUT_BLOCK LINE_VALUE /ROW=13 /COL=43 /LEN=(#CURRENCY_LEN) &
			/PROMPT=(MESSAGE("P_00680")) &
			/SOURCE=(#LINE_TOTAL) &
			/USING=SALES_ORDER_LINES(SOP_ORDER_TOTAL_CURRENCY) &
			/OUTPUT_MASK=(#CURRENCY_MASK)

	BEGIN_BLOCK WEIGHT
		IF (#PHYSICAL_IN_USE <> #YES)
			GOTO CONFIRM
		END_IF

		INPUT_BLOCK  /ROW=11 /COL=12 &
			/PROMPT=(MESSAGE("P_00751")) &
			/TARGET=#WEIGHT &
			/USING=SALES_ORDER_LINES(WEIGHT) &
			/USE_IF=(#PHYSICAL_IN_USE = #YES)
	END_BLOCK

	INPUT_BLOCK WEIGHT_UOM /ROW=11 /COL=25 &
			/OPTIONS=DOMAIN_LOCK_NONE &
			/DOMAIN=UNITS_OF_MEASURE &
			/TARGET=#WEIGHT_UOM &
			/USING=SALES_ORDER_LINES(WEIGHT_UOM), REQUIRED &
			/LOV = UNITS_OF_MEASURE(UNIT_OF_MEASURE,UNIT_OF_MEASURE_DESC) &
			/USE_IF=(#PHYSICAL_IN_USE = #YES)


	INPUT_BLOCK VOLUME /ROW=12 /COL=12 &
			/PROMPT=(FIELD_PROMPT(VOLUME)) &
			/TARGET=#VOLUME &
			/USING=SALES_ORDER_LINES(VOLUME) &
			/USE_IF=(#PHYSICAL_IN_USE = #YES)

	INPUT_BLOCK VOLUME_UOM_1 /ROW=12 /COL=25 &
			/OPTIONS=DOMAIN_LOCK_NONE &
			/DOMAIN=UNITS_OF_MEASURE &
			/TARGET=#VOLUME_UOM &
			/USING=SALES_ORDER_LINES(VOLUME_UOM), REQUIRED &
			/LOV = UNITS_OF_MEASURE(UNIT_OF_MEASURE,UNIT_OF_MEASURE_DESC) &
			/USE_IF=(#PHYSICAL_IN_USE = #YES)

	!Change 001 - DBM - 5/7/2007 - Add booked date
	INPUT_BLOCK BOOKED_DATE /ROW=14 /COL=12 /LEN=11 &
			/PROMPT=(MESSAGE("VOL_2013")) &
			/SOURCE_IF=(SALES_ORDER_LINES(SYS_RECOMMENDED_DATE)=""),(%TODAY) &
			/SOURCE_IF=(SALES_ORDER_LINES(SYS_RECOMMENDED_DATE)<>""),(SALES_ORDER_LINES(SYS_RECOMMENDED_DATE)) &
			/TARGET=#BOOKED_DATE &
			/USING=SALES_ORDER_LINES(SYS_RECOMMENDED_DATE)

	SALES_ORDER_LINES(SYS_RECOMMENDED_DATE)=#BOOKED_DATE
	!Change 001 End

	BEGIN_BLOCK EC_REPORTING
		#LINE_WEIGHT = #WEIGHT * #SALES_ORDER_QTY

		IF (#LINE_EC_REPORT_TYPE <> "")
			IF (#EC_STATISTICAL_VALUE = "") #EC_STATISTICAL_VALUE = ((#LINE_VALUE-#LINE_DISCOUNT) *#EC_STAT_FACTOR)

			PERFORM "GEMLB:LB_EC_REPORTING" &
				(#EC_MODE, &
				 #EC_REPORT_TYPE, &
				 (SALES_ORDER_LINES(UNIT_SALES)), &
				 #COMPANY_CODE, &
				 "", &
				 (#SALES_ORDER_QTY), &
				 "", &
				 (SALES_ORDER_LINES(WEIGHT_UOM)), &
				 (#LINE_WEIGHT), &
				 (#CORPORATE_ADDRESS_CODE), &
				 (#CURRENCY_MASK), &
				 "", &
				 #EC_PROCESSED_INDICATOR, &
				 #EC_TRANSACTION_TYPE, &
				 #EC_TARIFF_CODE, &
				 #EC_COUNTRY_OF_ORIGIN, &
				 #EC_SUPP_UNIT_QTY, &
				 #EC_WEIGHT, &
				 #EC_MODE_TRANSPORT, &
				 #EC_DELIVERY_TERMS, &
				 #EC_STATISTICAL_VALUE, &
				 #EC_ANALYSIS_1, &
				 #EC_ANALYSIS_2, &
				 #EC_ANALYSIS_3, &
				 #EC_ANALYSIS_4, &
				 #EC_ANALYSIS_5, &
				 "","","")

			SALES_ORDER_LINES(SYS_EC_STATISTICS_APPLICABLE) = #YES
			SALES_ORDER_LINES(SYS_EC_PROCESSED_INDICATOR)   = #EC_PROCESSED_INDICATOR
			SALES_ORDER_LINES(SYS_EC_TRANSACTION_TYPE)		 = #EC_TRANSACTION_TYPE
			IF (#LINE_EC_REPORT_TYPE = "B")
				IF (#EC_TARIFF_CODE = "00000000000")
					SALES_ORDER_LINES(SYS_EC_STATISTICS_APPLICABLE) = #NO
					GOTO CONFIRM
				END_IF
				SALES_ORDER_LINES(SYS_TARIFF_CODE)		   = #EC_TARIFF_CODE
				SALES_ORDER_LINES(SYS_COUNTRY_OF_ORIGIN) = #EC_COUNTRY_OF_ORIGIN
				SALES_ORDER_LINES(SYS_EC_SUPP_UNIT_QTY) = #EC_SUPP_UNIT_QTY
				SALES_ORDER_LINES(SYS_EC_WEIGHT)	= #EC_WEIGHT
				SALES_ORDER_LINES(SYS_EC_MODE_OF_TRANSPORT) = #EC_MODE_TRANSPORT
				SALES_ORDER_LINES(SYS_EC_DELIVERY_TERMS) = #EC_DELIVERY_TERMS
				SALES_ORDER_LINES(SYS_EC_STATISTICAL_VALUE)	    = #EC_STATISTICAL_VALUE
				SALES_ORDER_LINES(SYS_EC_ANALYSIS_1)	    = #EC_ANALYSIS_1
				SALES_ORDER_LINES(SYS_EC_ANALYSIS_2)	    = #EC_ANALYSIS_2
				SALES_ORDER_LINES(SYS_EC_ANALYSIS_3)	    = #EC_ANALYSIS_3
				SALES_ORDER_LINES(SYS_EC_ANALYSIS_4)	    = #EC_ANALYSIS_4
				SALES_ORDER_LINES(SYS_EC_ANALYSIS_5)	    = #EC_ANALYSIS_5

			END_IF
			#EC_MODE = "M"
		END_IF
	END_BLOCK

	YESNO_BLOCK CONFIRM /ROW=14 /COL=70 &
			/PROMPT=(MESSAGE("P_00149")) &
			/SUCCESS=(GOTO LINE_MENU)

	BEGIN_BLOCK REVERSE_WEIGHT_VOLUME
		GOTO SALES_ORDER_DETAIL_DESCRIPTION
	END_BLOCK

	BEGIN_BLOCK LINE_MENU
		#LINE_EDIT_MODE = "MODIFY"

		IF (#CURRENCY_METHOD <> 0)
			DELETE ALL FROM SYS_CURRENCY_VALUES_VT

			SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE)	= #LINE_TOTAL

			ADD TO SYS_CURRENCY_VALUES_VT

			PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)

			IF (#R_STATUS <> #YES)
				ERROR/WAIT #R_MESSAGE
				EXIT (%FAILURE)
			END_IF

			FIND IN SYS_CURRENCY_VALUES_VT

			#NET_VALUE_BASE	= SYS_CURRENCY_VALUES_VT(BASE_VALUE)
		ELSE
			#NET_VALUE_BASE = #LINE_TOTAL
		END_IF

		IF (#SECURITY_ACTIVE = #YES AND #NET_VALUE_BASE > #TRANSACTION_MAX)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00872
			GOTO CONFIRM
		END_IF

		PERFORM LINE_MENU

		IF (%STATUS = %BACK) GOTO CONFIRM
		IF (#OPT = "MENU") GOTO LINE_MENU
		IF (#OPT="EC_REP") GOTO EC_REPORTING
		IF (#OPT="TAX") GOTO SALES_TAX
		IF ((#OPT = "FREIGHT") OR (#RE_CALC_FREIGHT = #YES)) GOTO MAINTAIN_LINE_FREIGHT
		IF (#OPT="NEXT")
			!passes back #TOTAL_DETAIL_ORDER_QTY
			PERFORM SUM_CURRENT_SO_LINE_DETAIL_QTYS(#SALES_UOM)
			#BALANCE = #SALES_ORDER_QTY - #TOTAL_DETAIL_ORDER_QTY
			IF (#TOTAL_DETAIL_ORDER_QTY <> 0 AND #TOTAL_DETAIL_ORDER_QTY < #SALES_ORDER_QTY)
				MESSAGE/IDENTIFIER/BELL/WAIT P_52440,LTRIM(MASK(#SALES_UOM_MASK,#BALANCE))
				PERFORM REQUIRED_DATES
				GOTO LINE_MENU
			END_IF

			IF (#TOTAL_DETAIL_ORDER_QTY <> 0 AND #TOTAL_DETAIL_ORDER_QTY > #SALES_ORDER_QTY)
				MESSAGE/IDENTIFIER/BELL/WAIT P_52291
				PERFORM REQUIRED_DATES
				GOTO LINE_MENU
			END_IF
			IF (#COPY_UPDATE = #YES)
			! if this row is not there it means that the user has not been to the REQUIRED_DATES
			! screen.
				FIND IN SALES_ORDER_LINE_DETAIL_QTYS    &
					/LOCK = READ &
					/WITH = COMPANY_CODE = #COMPANY_CODE    &
					/WITH = DIVISION = #DIVISION    &
					/WITH = ORDER_NUMBER = SALES_ORDER_LINES(ORDER_NUMBER)  &
					/WITH = ORDER_LINE_NUMBER = SALES_ORDER_LINES(ORDER_LINE_NUMBER)	&
					/WITH = UNIT_OF_MEASURE = #SALES_UOM
				IF (%STATUS <> %SUCCESS)
				! add the line qty row - the line detail qty row is created when the default
				! sales order line detail row is created (SALES_ORDER_LINES form)
					PERFORM ADD_SO_LINE_ORDER_QTY (#SALES_UOM, #SALES_ORDER_QTY, #YES, #R1)
					IF (%STATUS <> %SUCCESS)
						ERROR/WAIT #R1
						EXIT (%FAILURE)
					END_IF
				END_IF
				IF (#PRICE_UOM <> #SALES_UOM)
					FIND IN SALES_ORDER_LINE_DETAIL_QTYS    &
						/LOCK = READ &
						/WITH = COMPANY_CODE = #COMPANY_CODE    &
						/WITH = DIVISION = #DIVISION    &
						/WITH = ORDER_NUMBER = SALES_ORDER_LINES(ORDER_NUMBER)  &
						/WITH = ORDER_LINE_NUMBER = SALES_ORDER_LINES(ORDER_LINE_NUMBER)	&
						/WITH = UNIT_OF_MEASURE = #PRICE_UOM
					IF (%STATUS <> %SUCCESS)
						PERFORM ADD_SO_LINE_ORDER_QTY (#PRICE_UOM, #PRICE_ORDER_QTY, #YES, #R1)
						IF (%STATUS <> %SUCCESS)
							ERROR/WAIT #R1
							EXIT (%FAILURE)
						END_IF
					END_IF
				END_IF
			ELSE
				IF (#ORIG_SALES_UOM <> #SALES_UOM)
					! the sales uom can change
					PERFORM DELETE_SALES_LINE_QTYS
					PERFORM DELETE_SALES_LINE_DETAIL_QTYS
					PERFORM ADD_SO_LINE_ORDER_QTY (#SALES_UOM, #SALES_ORDER_QTY, #YES, #R1)
					PERFORM ADD_SO_LINE_DETAIL_ORDER_QTY("001", #SALES_UOM, #SALES_ORDER_QTY, #YES, #R1)
				ELSE
					! order qty was modified on this screen and user has not been
					! to the REQUIRED_DATES screen and it's not an update from copy.
					! this should never happen
					IF (#ORIG_SALES_ORDER_QTY <> #SALES_ORDER_QTY)
						PERFORM "GEMSOP:SOP_L_UPDATE_A_SO_QTY" ( #COMPANY_CODE, &
								#DIVISION, &
								(SALES_ORDER_LINES(ORDER_NUMBER)), &
								(SALES_ORDER_LINES(ORDER_LINE_NUMBER)), &
								"1", &
								"ORDER_QUANTITY", &
								#SALES_ORDER_QTY, &
								#SALES_UOM,	&
								#R1)
						#ORIG_SALES_ORDER_QTY = #SALES_ORDER_QTY
					END_IF
				END_IF
				IF (#ORIG_PRICE_UOM <> #PRICE_UOM)
					! the price uom can also change
					PERFORM DELETE_S_L_Q_UOM(#ORIG_PRICE_UOM)
					IF (#PRICE_UOM <> #SALES_UOM)
						PERFORM DELETE_S_L_Q_UOM(#ORIG_PRICE_UOM)
						PERFORM ADD_SO_LINE_ORDER_QTY (#PRICE_UOM, #PRICE_ORDER_QTY, #YES, #R1)
					END_IF
					#ORIG_PRICE_UOM = #PRICE_UOM
					#ORIG_PRICE_ORDER_QTY = #PRICE_ORDER_QTY
				ELSE
					! Pricing UOM remained the same, but the quantity changed.  If
					! the Price UOM is not the same as Sales, update the Line Qty.
					IF (#ORIG_PRICE_ORDER_QTY <> #PRICE_ORDER_QTY &
					AND #PRICE_UOM <> #SALES_UOM)
						PERFORM "GEMSOP:SOP_L_UPDATE_A_SO_QTY" ( #COMPANY_CODE, &
								#DIVISION, &
								(SALES_ORDER_LINES(ORDER_NUMBER)), &
								(SALES_ORDER_LINES(ORDER_LINE_NUMBER)), &
								"1", &
								"ORDER_QUANTITY", &
								#PRICE_ORDER_QTY, &
								#PRICE_UOM,	&
								#R1)
						#ORIG_PRICE_ORDER_QTY = #PRICE_ORDER_QTY
					END_IF
				END_IF
			END_IF
		END_IF

		!Check Despatch Qty; Update Value on Customers table
		IF ( #EDIT_MODE = "MODIFY" AND #DESPATCH_QTY <> 0 )
			#NEW_DESP_VALUE = (#DESPATCH_QTY * SALES_ORDER_LINES(SALES_PRICE))
			IF ( #NEW_DESP_VALUE <> #ORIG_DESP_VALUE )

				IF (#CURRENCY_METHOD > '0')
					DELETE ALL FROM SYS_CURRENCY_VALUES_VT
					SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE)	= #ORIG_DESP_VALUE
					ADD TO SYS_CURRENCY_VALUES_VT
					PERFORM "GEMLB:LB_S_L_CURRENCY_RATES" (#R_STATUS, #R_MESSAGE)
					IF (#R_STATUS <> #YES)
						ERROR/WAIT #R_MESSAGE
						EXIT (%FAILURE)
					END_IF
					PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
					IF (#R_STATUS <> #YES)
						ERROR/WAIT #R_MESSAGE
						EXIT (%FAILURE)
					END_IF
					FIND IN SYS_CURRENCY_VALUES_VT
					#ORIG_DESP_VALUE_BASE	= SYS_CURRENCY_VALUES_VT(BASE_VALUE)

					DELETE ALL FROM SYS_CURRENCY_VALUES_VT
					SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE)	= #NEW_DESP_VALUE
					ADD TO SYS_CURRENCY_VALUES_VT
					PERFORM "GEMLB:LB_S_L_CURRENCY_RATES" (#R_STATUS, #R_MESSAGE)
					IF (#R_STATUS <> #YES)
						ERROR/WAIT #R_MESSAGE
						EXIT (%FAILURE)
					END_IF
					PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
					IF (#R_STATUS <> #YES)
						ERROR/WAIT #R_MESSAGE
						EXIT (%FAILURE)
					END_IF
					FIND IN SYS_CURRENCY_VALUES_VT
					#NEW_DESP_VALUE_BASE	= SYS_CURRENCY_VALUES_VT(BASE_VALUE)
				ELSE
					#ORIG_DESP_VALUE_BASE=#ORIG_DESP_VALUE
					#NEW_DESP_VALUE_BASE=#NEW_DESP_VALUE
				END_IF

				FIND IN CUSTOMERS &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=DIVISION=#DIVISION &
					/WITH=CUSTOMER_NUMBER=#CUSTOMER_NUMBER

				IF ( %STATUS = %SUCCESS )
					CUSTOMERS(DESPATCH_VALUE) = CUSTOMERS(DESPATCH_VALUE) - #ORIG_DESP_VALUE_BASE + #NEW_DESP_VALUE_BASE
				END_IF

				START_STREAM DN &
					/TABLE=DESPATCH_NOTES &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=DIVISION=#DIVISION &
					/WITH=ORDER_NUMBER=SALES_ORDER_LINES(ORDER_NUMBER) &
					/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER)

				WHILE (1)
				FETCH DN /FAILURE=(CONTINUE OUT)
					DESPATCH_NOTES(SALES_PRICE) = SALES_ORDER_LINES(SALES_PRICE)

					FIND IN DESPATCH_NOTE_QTYS &
						/LOCK=NONE &
						/WITH=COMPANY_CODE=#COMPANY_CODE &
						/WITH=DIVISION=#DIVISION &
						/WITH=DESPATCH_NOTE=DESPATCH_NOTES(DESPATCH_NOTE) &
						/WITH=DESPATCH_LINE=DESPATCH_NOTES(DESPATCH_LINE) &
						/WITH=UNIT_OF_MEASURE=SALES_ORDER_LINES(UNIT_PRICE)

					#DESP_DESPATCH_QTY = DESPATCH_NOTE_QTYS(IC_QTY_IN_DESPATCH) + DESPATCH_NOTE_QTYS(QTY_DESPATCHED)
					#DESPATCH_VALUE = SALES_ORDER_LINES(SALES_PRICE) * #DESP_DESPATCH_QTY

					IF (#CURRENCY_METHOD > '0')
						DELETE ALL FROM SYS_CURRENCY_VALUES_VT
						SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE)	= #DESPATCH_VALUE
						ADD TO SYS_CURRENCY_VALUES_VT
						PERFORM "GEMLB:LB_S_L_CURRENCY_RATES" (#R_STATUS, #R_MESSAGE)
						IF (#R_STATUS <> #YES)
							ERROR/WAIT #R_MESSAGE
							EXIT (%FAILURE)
						END_IF
						PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
						IF (#R_STATUS <> #YES)
							ERROR/WAIT #R_MESSAGE
							EXIT (%FAILURE)
						END_IF
						FIND IN SYS_CURRENCY_VALUES_VT
						#DESPATCH_VALUE_BASE	= SYS_CURRENCY_VALUES_VT(BASE_VALUE)
					ELSE
						#DESPATCH_VALUE_BASE = #DESPATCH_VALUE
					END_IF

					DESPATCH_NOTES(DESPATCH_VALUE) = #DESPATCH_VALUE
					DESPATCH_NOTES(DESPATCH_VALUE_BASE) = #DESPATCH_VALUE_BASE

				END_WHILE
			END_IF
		END_IF

		EXIT(%SUCCESS)
	END_BLOCK

	BEGIN_BLOCK MAINTAIN_LINE_FREIGHT
		PERFORM MAINTAIN_LINE_FREIGHT
		#RE_CALC_FREIGHT = #NO

		! Re-display freight and force user through discount,
		! tax and EC reporting entry because these values
		! may have been impacted.
		GOTO GET_AR_FREIGHT_VARS
	END_BLOCK

END_FORM


!PROCEDURE_FORM TAX_CONTROL (#TAX_CODE,#VALUE,#TITLE,#PROD,#WH)
!
!	BEGIN_BLOCK CONTROL
!		PERFORM SETUP_TAX_CONTROL_VT
!
!		LB_TAX_CONTROL_VT(PART_CODE) = #PROD
!		LB_TAX_CONTROL_VT(WAREHOUSE) = #WH
!		LB_TAX_CONTROL_VT(CUSTOMER_NUMBER) = SALES_ORDER_HEADERS(CUSTOMER_NUMBER)
!		LB_TAX_CONTROL_VT(INVOICE_ADDRESS_CODE) = SALES_ORDER_HEADERS(INVOICE_ADDRESS_CODE)
!		LB_TAX_CONTROL_VT(DELIVERY_ADDRESS_CODE) = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
!		LB_TAX_CONTROL_VT(TRANSACTION_NUMBER) = SALES_ORDER_HEADERS(ORDER_NUMBER)
!		LB_TAX_CONTROL_VT(TRANSACTION_TYPE) = PARAMETER("TTYPE_SO")
!		LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE) = #TAX_CODE
!		LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE) = #CUSTOMER_TAX_CODE
!		LB_TAX_CONTROL_VT(ORDER_LINE_TYPE) = ""
!		LB_TAX_CONTROL_VT(FORM_TITLE) = #TITLE
!		LB_TAX_CONTROL_VT(PRICE_ORDER_QTY) = 1
!		LB_TAX_CONTROL_VT(SALES_PRICE) = #VALUE
!		LB_TAX_CONTROL_VT(LINE_DISCOUNT) = 0
!
!        PERFORM "GEMLB:LB_L_TAX_CONTROL" ( #TAX_MODE, #ERROR_OCCURRED, #ERROR_MESSAGE )
!
!		IF ( %STATUS = %BACK OR %STATUS = %EXIT ) EXIT(%STATUS)
!
!		IF ( #ERROR_OCCURRED ) EXIT(%FAILURE)
!
!		FIND IN LB_TAX_CONTROL_VT
!
!		#TOTAL_TAX = LB_TAX_CONTROL_VT(TOTAL_TAX_AMOUNT)
!		#TAX_CODE = LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE)
!		#CUSTOMER_TAX_CODE = LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE)
!		#TAX_ON_CASH = LB_TAX_CONTROL_VT(TAX_ON_CASH)

!		PERFORM "GEMLB:LB_TAX_ANALYSIS" &
!				(#TAX_MODE, &
!				 #TAX_FLAG, &
!				 #TAX_CODE, &
!				 #CUSTOMER_TAX_CODE, &
!				 #VALUE, &
!				 #COMPANY_CODE, &
!				 #CURRENCY_DECIMAL, &
!				 #CURRENCY_MASK, &
!				 "", &
!				 #TITLE, &
!				 #PROD, &
!				 #WH, &
!				 "", &
!				 "", &
!				 "", &
!				 #TAX_ON_CASH, &
!				 #DIVISION, &
!				 #TOTAL_TAX)

!		EXIT(%STATUS)
!	END_BLOCK
!
!END_FORM


FORM MODIFICATION_NOTICE /ROW=15 /COL=49 /HEIGHT=4 /WIDTH=30

	OUTPUT_BLOCK BLOCK_1 /ROW=1 /COL=3 &
			/SOURCE=(MESSAGE("P_36170")) &
			/ATTRIBUTES=NONE

	BEGIN_BLOCK CONFIRM_PRODUCT_CHANGE
		 IF (#OLD_PART_CODE_WAREHOUSED_FLAG = #NO AND #WAREHOUSED_FLAG = #NO)
			 GOTO YES_NO_1
		 ELSE_IF ((#OLD_PART_CODE_WAREHOUSED_FLAG ="") AND (#WAREHOUSED_FLAG ="" OR #WAREHOUSED_FLAG = #NO))
			 GOTO YES_NO_1
		ELSE_IF (#OLD_PART_CODE_WAREHOUSED_FLAG = #NO AND #WAREHOUSED_FLAG = #YES)
			GOTO YES_NO_1
		 !  If changing the Part/Warehouse on the line level where the old
		 !  part was not warehoused than there is no need to display inventory
		 !  update reversal messages.
		 END_IF
	END_BLOCK

	OUTPUT_BLOCK BLOCK_2 /ROW=2 /COL=3 &
			/SOURCE=(MESSAGE("P_36129")) &
			/ATTRIBUTES=NONE &
			/USE_IF=(#ATP_IN_USE_FOR_COMPANY=#NO)

	OUTPUT_BLOCK BLOCK_3 /ROW=3 /COL=3 &
			/SOURCE=(MESSAGE("P_36242")) &
			/ATTRIBUTES=NONE &
			/USE_IF=(#ATP_IN_USE_FOR_COMPANY=#NO)

	OUTPUT_BLOCK BLOCK_2_ATP /ROW=2 /COL=3 &
			/SOURCE=(MESSAGE("P_91534")) &
			/ATTRIBUTES=NONE &
			/USE_IF=(#ATP_IN_USE_FOR_COMPANY=#YES)

	OUTPUT_BLOCK BLOCK_ATP /ROW=3 /COL=3 &
			/SOURCE=(MESSAGE("P_91535")) &
			/ATTRIBUTES=NONE &
			/USE_IF=(#ATP_IN_USE_FOR_COMPANY=#YES)

	YESNO_BLOCK YES_NO_1 /ROW=4 /COL=16 &
			/PROMPT=(MESSAGE("P_00144")) &
			/FAILURE=(EXIT(%FAILURE)) &
			/BACK=(EXIT(%FAILURE)) &
			/EXIT=(EXIT(%FAILURE)) &
			/EXIT_FORWARD=(EXIT(%FAILURE))

	BEGIN_BLOCK RETREIVE_PRODUCT_INFORMATION

		FIND IN PRODUCT_MASTER &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PART_CODE=SALES_ORDER_LINES(PART_CODE)
		IF (%STATUS<>%SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_82043
			EXIT(%FAILURE)
		END_IF

		IF (PRODUCT_MASTER(WAREHOUSED_FLAG)=#YES)

			FIND IN PRODUCT_WAREHOUSE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=WAREHOUSE=SALES_ORDER_LINES(WAREHOUSE) &
				/WITH=PART_CODE=SALES_ORDER_LINES(PART_CODE) &
				/LOCK=WRITE
			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_00828,SALES_ORDER_LINES(PART_CODE)
				EXIT(%FAILURE)
			END_IF
			! Find the old part record
		END_IF

		FIND IN SALES_ORDER_HEADERS &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION = #DIVISION &
			/WITH=ORDER_NUMBER=#ORDER_NUMBER &
			/LOCK=WRITE
		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_52217
			EXIT(%FAILURE)
		END_IF
			! Refind the header so that fields are in
			! the buffer
			! Needed for triggers to reverse weight and
			! volume
		PERFORM DELETE_EXISTING_DETAIL_LINES
		PERFORM DELETE_SALES_ORDER_LINE_QTYS
		SALES_ORDER_LINES(WEIGHT)=0
		SALES_ORDER_LINES(VOLUME)=0
			! Force weight and volume to be reversed
			! because change of part could change the
			! units of measure and so reversal needs
			! to be made before these are reset
		FIND IN PRODUCT_MASTER &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PART_CODE=#PART_CODE &
			/LOCK=NONE
			! Refind the part record for next part code

		IF (PRODUCT_MASTER(WAREHOUSED_FLAG)=#YES)

			FIND IN PRODUCT_WAREHOUSE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=WAREHOUSE=#WAREHOUSE &
				/WITH=PART_CODE=#PART_CODE &
				/LOCK=NONE
			! Refind the part record for next part code
		END_IF
	END_BLOCK

END_FORM


PROCEDURE_FORM DELETE_EXISTING_DETAIL_LINES &
	/TABLE=SALES_ORDER_LINE_DETAILS &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION = #DIVISION &
	/WITH=ORDER_NUMBER=#ORDER_NUMBER &
	/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER)

	BEGIN_BLOCK GET_VEHICLE_ID
		FIND IN SOP_SHIPPING_REQUIREMENTS &
			/LOCK=NONE &
			/STREAM_NAME=RQMS_VE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=ORDER_NUMBER=#ORDER_NUMBER &
			/WITH=SHIPPING_REQUIREMENT_NUMBER &
					= SALES_ORDER_LINE_DETAILS(SHIPPING_REQUIREMENT_NUMBER)

		IF (%STATUS <> %SUCCESS)
			#RQMS_VEHICLE_ID = ""
		ELSE
			#RQMS_VEHICLE_ID = RQMS_VE:SOP_SHIPPING_REQUIREMENTS(TM_VEHICLE_ID)
		END_IF
	END_BLOCK

	BEGIN_BLOCK INIT
		PERFORM FIND_CURRENT_SO_LINE_DETAIL_QTY ((SALES_ORDER_LINES(UNIT_SALES)), #R1)
		#DETAIL_ORDER_QTY = SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY)
	END_BLOCK

	BEGIN_BLOCK DELETE_LINES
		IF (SALES_ORDER_LINES(ORDER_LINE_TYPE) = #SO_LINE_TYPE_STOCK)
			FIND IN PRODUCT_MASTER &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=PART_CODE = SALES_ORDER_LINES(PART_CODE) &
				/LOCK=NONE

			FIND IN PRODUCT_WAREHOUSE &
				/LOCK=NONE		   &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=WAREHOUSE=SALES_ORDER_LINE_DETAILS(WAREHOUSE) &
				/WITH=PART_CODE=SALES_ORDER_LINES(PART_CODE)

			IF (SALES_ORDER_LINE_DETAIL_QTYS(QTY_RESERVED) > 0)
				#START_QTY_AVAILABLE_BACK = 0.0

				PERFORM "GEMSOP:SOP_L_RESERVATION" (&
					#COMPANY_CODE, &
					SALES_ORDER_LINE_DETAILS(WAREHOUSE), &
					"0", &
					(SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER)), &
					#YES, &
					(SALES_ORDER_LINE_DETAIL_QTYS(SEQUENCE)),		    &
					#IC_STATUS_CODE,	&
					#START_QTY_AVAILABLE, &
					#R1,    &
					#R2,    &
					#R3,    &
					#R4,    &
					#R5,	&
					#START_QTY_AVAILABLE_BACK)

				IF (%STATUS <> %SUCCESS)
					ERROR/WAIT #R5
					EXIT(%FAILURE)
				END_IF
			END_IF

			BEGIN_BLOCK COMMITMENTS
				PERFORM FIND_CURRENT_SO_LINE_DETAIL_QTY ((SALES_ORDER_LINES(SOP_NOMINATED_UNIT)), #R1)
				#NOMI_ORDER_QTY = SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY)
				#OLD_REQ_DATE = SALES_ORDER_LINE_DETAILS(REQUIRED_DATE)

				PERFORM 'GEMSOP:SOP_L_DO_IC_COMMITMENTS' (SALES_ORDER_LINE_DETAILS(WAREHOUSE), &
								"", &
								#OLD_REQ_DATE, &
								#IC_MOVEMENT_CODE, &
								#NOMI_ORDER_QTY, &
								"0", &
								#R1)
				IF (%STATUS <> %SUCCESS)
					ERROR /WAIT #R1
				END_IF
			END_BLOCK
		END_IF
		IF (#HISTORY = #YES)
			PERFORM WRITE_SALES_ORDER_HISTORY ( &
				(PARAMETER("AUDIT_CHANGE_CODE_DEL_LINE")), &
				#SALES_ORDER_QTY, &
				#DETAIL_ORDER_QTY)
			! The variable #sales_order_qty is populated in all
			! of the forms in which this form is called.
		END_IF
	END_BLOCK

	BEGIN_BLOCK UPDATE_ATP
		IF (#ATP_IN_USE_FOR_COMPANY = #YES AND SALES_ORDER_LINES(ORDER_LINE_TYPE) = #SO_LINE_TYPE_STOCK &
			 AND PRODUCT_WAREHOUSE(ATP_IN_USE) = #YES)

			 PERFORM DELETE_ANY_PROMISES(SALES_ORDER_LINE_DETAILS(SEQUENCE))
		END_IF
	END_BLOCK

	BEGIN_BLOCK DELETE
		PERFORM DELETE_SALES_ORDER_LINE_DETAIL_QTYS(#YES)
		#EVENT_TYPE_SOL = 53
		PERFORM DELETE_DEMAND_SUPPLY
		DELETE FROM SALES_ORDER_LINE_DETAILS
	END_BLOCK

END_FORM


FORM PRICE_MODIFICATION_NOTICE /ROW=15 /COL=5 /HEIGHT=7 /WIDTH=44 &
	/TITLE=(MESSAGE("P_00535"))

	OUTPUT_BLOCK BLOCK_1 /ROW=2 /COL=25 &
			/PROMPT=(MESSAGE("P_00439")) &
			/SOURCE=(#PRICE) &
			/USING=SALES_ORDER_LINES(SALES_PRICE) &
			/OUTPUT_MASK=#SALES_PRICE_MASK

	YESNO_BLOCK YES_NO_1 /ROW=5 /COL=32 &
			/PROMPT=(MESSAGE("P_30366")) &
			/FAILURE=(EXIT(%FAILURE))

END_FORM


FORM DISCOUNT_MODIFICATION_NOTICE /ROW=15 /COL=5 /HEIGHT=7 /WIDTH=44 &
	/TITLE=(MESSAGE("P_00236"))

	TEXT /ROW=2 /COL=2 (MESSAGE("P_00438"))

	TEXT /ROW=2 /COL=38 (#TEXT1)
	TEXT /ROW=3 /COL=38 (#TEXT2)

	OUTPUT_BLOCK PERCENT_1 /ROW=2 /COL=32 &
			/SOURCE=(#PERCENT_DISCOUNT) &
			/OUTPUT_MASK="!-@@0.0@" &
			/USE_IF=(#LD_CALC <> #DISCOUNT_BREAK_AMOUNT)

	OUTPUT_BLOCK DISCOUNT_1 /ROW=2 /COL=20 /LEN=(#CURRENCY_LEN) &
			/SOURCE=(#LINE_DISCOUNT) &
			/USING=SALES_ORDER_LINES(LINE_DISCOUNT) &
			/USE_IF=(#LD_CALC = #DISCOUNT_BREAK_AMOUNT) &
			/OUTPUT_MASK=(#CURRENCY_MASK)

	OUTPUT_BLOCK PERCENT_2 /ROW=3 /COL=32 &
			/SOURCE=(#PERCENT_DISCOUNT) &
			/OUTPUT_MASK="!-@@0.0@" &
			/USE_IF=(#LD_CALC = #DISCOUNT_BREAK_AMOUNT)

	OUTPUT_BLOCK DISCOUNT_2 /ROW=3 /COL=20 /LEN=(#CURRENCY_LEN) &
			/SOURCE=(#LINE_DISCOUNT) &
			/USING=SALES_ORDER_LINES(LINE_DISCOUNT) &
			/USE_IF=(#LD_CALC <> #DISCOUNT_BREAK_AMOUNT) &
			/OUTPUT_MASK=(#CURRENCY_MASK)

	YESNO_BLOCK YES_NO_1 /ROW=5 /COL=32 &
			/PROMPT=(MESSAGE("P_30367")) &
			/FAILURE=(EXIT(%FAILURE))

END_FORM


FORM UNIT_MODIFICATION_NOTICE /ROW=15 /COL=46 /HEIGHT=4 /WIDTH=32

	OUTPUT_BLOCK BLOCK_1 /ROW=1 /COL=3 &
			/SOURCE=(MESSAGE("P_56062")) &
			/ATTRIBUTES=NONE

	OUTPUT_BLOCK BLOCK_2 /ROW=2 /COL=3 &
			/SOURCE=(MESSAGE("P_56135")) &
			/ATTRIBUTES=NONE

	YESNO_BLOCK YES_NO_1 /ROW=3 /COL=29 &
			/PROMPT=(MESSAGE("P_59028")) &
			/FAILURE=(EXIT(%FAILURE))

END_FORM


FORM SHIP_TERMS_MODIFICATION_NOTICE /ROW=11 /COL=20 /HEIGHT=4 /WIDTH=46

	OUTPUT_BLOCK MOD_MESSAGE /ROW=1 /COL=3 /LEN=43 &
			/SOURCE=(#SHIP_TERMS_MOD_MESSAGE) &
			/ATTRIBUTES=NONE

	YESNO_BLOCK YES_NO_1 /ROW=3 /COL=38 &
			/PROMPT=(MESSAGE("P_93404")) &
			/FAILURE=(EXIT(%FAILURE))

END_FORM


FORM FREIGHT_CONTRACT_MOD_NOTICE /ROW=11 /COL=20 /HEIGHT=4 /WIDTH=46

	OUTPUT_BLOCK MOD_MESSAGE /ROW=1 /COL=3 /LEN=43 &
			/SOURCE=(MESSAGE("P_93575")) &
			/ATTRIBUTES=NONE

	YESNO_BLOCK YES_NO_1 /ROW=3 /COL=38 &
			/PROMPT=(MESSAGE("P_93576")) &
			/FAILURE=(EXIT(%FAILURE))

END_FORM


PROCEDURE_FORM LINE_MODIFICATION_SETUP

	BEGIN_BLOCK FIND_CUSTOMER_ADDRESS
		! This form assigns values to variable which are required
		! when processing an order line, but which are not stored
		! on the order line record itself.

		FIND IN CUSTOMER_ADDRESSES &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=#CUSTOMER_NUMBER &
			/WITH=ADDRESS_CODE=SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE) &
			/LOCK=NONE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_22086
			EXIT(%FAILURE)
		END_IF

		IF (CUSTOMER_ADDRESSES(PRICE_CODE) <> "")
			#PRICE_CODE		   = CUSTOMER_ADDRESSES(PRICE_CODE)
			#ADDR_PRICE_CODE = CUSTOMER_ADDRESSES(PRICE_CODE)
		ELSE
			#PRICE_CODE = #CUST_PRICE_CODE
		END_IF

		PERFORM IS_LINE_FOR_TP_GIFT (#TP_GIFT_LINE, #TP_PROMOTION_VARIABLE)

		IF ((#AR_FREIGHT_IN_USE = #YES) AND (#WAREHOUSED_FLAG = #YES))
			FIND IN PRICE_CODES &
				/LOCK=NONE &
				/WITH=COMPANY_CODE = #COMPANY_CODE &
				/WITH=DIVISION = #DIVISION &
				/WITH=PRICE_CODE = #PRICE_CODE

			IF (%STATUS <> %FAILURE)
				#LINE_PRICE_FREIGHT_INCLUSIVE = PRICE_CODES(SOP_FREIGHT_INCLUSIVE)
				#LINE_PRICE_CODE_DESCRIPTION = PRICE_CODES(DESCRIPTION)
			END_IF
		END_IF

		IF (#LINE_PRICE_FREIGHT_INCLUSIVE = "")
			#LINE_PRICE_FREIGHT_INCLUSIVE = #NO
		END_IF

		PERFORM GET_ADDR_TAX_VARS
		#TAXABLE = #DEF_TAXABLE
		#CUSTOMER_TAX_CODE = #DEF_CUSTOMER_TAX_CODE

		#LINE_COUNTRY	= CUSTOMER_ADDRESSES(SYS_COUNTRY)
		#LINE_DIST_ZONE	= CUSTOMER_ADDRESSES(SYS_DISTRIBUTION_ZONE)
		#LINE_DIST_BOD_CODE = CUSTOMER_ADDRESSES(SYS_BOD_CODE)

		IF (SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE) = #DEF_DELIVERY_ADDRESS)
			! line and header delivery address
			! codes are the same, so use header
			! values for line
			#LINE_DIST_BOD_CODE 	= #DEF_BOD_CODE
			GOTO SHIP_TERMS_FREIGHT_FLAG
		END_IF

		PERFORM GET_DIST_ZONE_DETAILS (#LINE_COUNTRY, #LINE_DIST_ZONE)

		IF (%STATUS <> %FAILURE)
			IF ((#LINE_DIST_BOD_CODE = "") AND (#ADDR_DIST_BOD_CODE <> ""))
				#LINE_DIST_BOD_CODE = #ADDR_DIST_BOD_CODE
			END_IF
		END_IF
		! If no Distribution Zone found, leave line default
		! values as empty strings because customer address
		! is still the one used on the line, so values
		! associated with this address cannot be overridden
		! by those associated with the address on the order
		! header.
	END_BLOCK

	BEGIN_BLOCK SHIP_TERMS_FREIGHT_FLAG
		IF ((#AR_FREIGHT_IN_USE = #YES) OR (#SYS_TM_IN_USE = #YES))

			#LINE_CUST_PAYS_FREIGHT = #DEF_CUST_PAYS_FREIGHT
			IF (SALES_ORDER_LINES(SOP_SHIPPING_TERMS_CODE) <> #DEF_SHIP_TERMS)

				FIND IN SOP_SHIPPING_TERMS &
					/LOCK=NONE &
					/WITH=COMPANY_CODE = #COMPANY_CODE &
					/WITH=SOP_SHIPPING_TERMS_CODE = SALES_ORDER_LINES(SOP_SHIPPING_TERMS_CODE)

				IF (%STATUS <> %FAILURE)
					#LINE_CUST_PAYS_FREIGHT = SOP_SHIPPING_TERMS(SOP_FREIGHT_INCLUSIVE)
				END_IF
			END_IF
			IF (#LINE_CUST_PAYS_FREIGHT = "")
				#LINE_CUST_PAYS_FREIGHT = #NO
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK SETUP_EC_REPORT_TYPE
		#LINE_EC_REPORT_TYPE = ""
		IF (SALES_ORDER_LINES(SYS_TARIFF_CODE) <> "")
			#LINE_EC_REPORT_TYPE = #COMPANY_EC_REPORT_TYPE
			#EC_TRANSACTION_TYPE = SALES_ORDER_LINES(SYS_EC_TRANSACTION_TYPE)
			#EC_MODE_TRANSPORT = SALES_ORDER_LINES(SYS_EC_MODE_OF_TRANSPORT)
			#EC_DELIVERY_TERMS = SALES_ORDER_LINES(SYS_EC_DELIVERY_TERMS)
			#EC_PROCESSED_INDICATOR = SALES_ORDER_LINES(SYS_EC_PROCESSED_INDICATOR)
			#EC_TRANSACTION_TYPE = SALES_ORDER_LINES(SYS_EC_TRANSACTION_TYPE)
			#EC_STATISTICAL_VALUE = SALES_ORDER_LINES(SYS_EC_STATISTICAL_VALUE)
			#EC_ANALYSIS_1 = SALES_ORDER_LINES(SYS_EC_ANALYSIS_1)
			#EC_ANALYSIS_2 = SALES_ORDER_LINES(SYS_EC_ANALYSIS_2)
			#EC_ANALYSIS_3 = SALES_ORDER_LINES(SYS_EC_ANALYSIS_3)
			#EC_ANALYSIS_4 = SALES_ORDER_LINES(SYS_EC_ANALYSIS_4)
			#EC_ANALYSIS_5 = SALES_ORDER_LINES(SYS_EC_ANALYSIS_5)

			IF (#LINE_EC_REPORT_TYPE = "B")
				#EC_TARIFF_CODE = SALES_ORDER_LINES(SYS_TARIFF_CODE)
				#EC_COUNTRY_OF_ORIGIN = SALES_ORDER_LINES(SYS_COUNTRY_OF_ORIGIN)
				#EC_SUPP_UNIT_QTY = SALES_ORDER_LINES(SYS_EC_SUPP_UNIT_QTY)
				#EC_WEIGHT = SALES_ORDER_LINES(SYS_EC_WEIGHT)
			END_IF
		END_IF
	END_BLOCK

END_FORM


PROCEDURE_FORM GET_ADDR_TAX_VARS

	BEGIN_BLOCK DO_ASSIGN
		#DEF_CUSTOMER_TAX_CODE  = CUSTOMER_ADDRESSES(TAX_CODE)
		#DEF_TAXABLE		= CUSTOMER_ADDRESSES(SALES_TAXABLE)

		IF (#DIV_TAX_ON_CASH = #YES AND #CO_TAX_ON_CASH = #YES AND CUSTOMER_ADDRESSES(SYS_TAX_ON_CASH) =#YES)
			#TAX_ON_CASH = #YES
		ELSE
			#TAX_ON_CASH = #NO
		END_IF
	END_BLOCK

END_FORM


PROCEDURE_FORM DELETE_ORDER_LINE

	BEGIN_BLOCK INIT
		FIND IN SALES_ORDER_LINE_QTYS	  &
			/LOCK = NONE	   &
			/WITH = COMPANY_CODE = #COMPANY_CODE	   &
			/WITH = DIVISION = #DIVISION	   &
			/WITH = ORDER_NUMBER = SALES_ORDER_LINES(ORDER_NUMBER)  &
			/WITH = ORDER_LINE_NUMBER = SALES_ORDER_LINES(ORDER_LINE_NUMBER) &
			/WITH = UNIT_OF_MEASURE = SALES_ORDER_LINES(UNIT_SALES)

		#SALES_ORDER_QTY = SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)
		! This variable value required for the form
		! delete_existing_detail_lines to be passed into the
		! audit history record creation form.
	END_BLOCK

	BEGIN_BLOCK PART_MASTER
		IF (SALES_ORDER_LINES(ORDER_LINE_TYPE) = #SO_LINE_TYPE_STOCK)
			FIND IN PRODUCT_MASTER &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=PART_CODE=SALES_ORDER_LINES(PART_CODE)

			IF (%STATUS <> %SUCCESS)
				MESSAGE/IDENTIFIER/BELL/WAIT P_52319
				EXIT (%FAILURE)
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK CHECK_GIFT
		#TP_GIFT_LINE = 0
		PERFORM IS_LINE_FOR_TP_GIFT (#TP_GIFT_LINE, #TP_PROMOTION_VARIABLE)
		IF ((#TP_GIFT_LINE) AND (NOT(#TP_PROMOTION_VARIABLE)))
			MESSAGE/IDENTIFIER/BELL/WAIT P_23556
			EXIT(%FAILURE)
		END_IF
	END_BLOCK

	BEGIN_BLOCK DELETE_DETAILS
		IF (SALES_ORDER_LINE_QTYS(ORDER_QUANTITY_PROCESSED)<>"0")
			MESSAGE/IDENTIFIER/BELL/WAIT P_32232
			EXIT(%FAILURE)
		END_IF

		FIND IN SOP_SHIPMENT_DETAILS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=SALES_ORDER_LINES(COMPANY_CODE) &
			/WITH=DIVISION=SALES_ORDER_LINES(DIVISION) &
			/WITH=ORDER_NUMBER=SALES_ORDER_LINES(ORDER_NUMBER) &
			/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER)

		IF (%STATUS=%SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_93548
			EXIT (%FAILURE)
		END_IF

		FIND IN DESPATCH_NOTES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=SALES_ORDER_LINES(COMPANY_CODE) &
			/WITH=DIVISION=SALES_ORDER_LINES(DIVISION) &
			/WITH=ORDER_NUMBER=SALES_ORDER_LINES(ORDER_NUMBER) &
			/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER)

		IF (%STATUS = %SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_02627
			EXIT(%FAILURE)
		END_IF

		PERFORM EXTRACT_HISTORY_CODE_DEL((PARAMETER("AUDIT_CHANGE_CODE_DEL_LINE")))
		IF (%STATUS = %FAILURE)
			EXIT (%FAILURE)
		END_IF

		IF (#HISTORY = #YES)
			PERFORM WRITE_SALES_ORDER_HISTORY ( &
				(PARAMETER("AUDIT_CHANGE_CODE_DEL_LINE")), &
				#SALES_ORDER_QTY, &
				0.0)
		END_IF

		FIND IN SALES_ORDER_HEADERS &
			/LOCK=WRITE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=ORDER_NUMBER=#ORDER_NUMBER

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_52217
			EXIT(%FAILURE)
		END_IF

		IF (SALES_ORDER_LINE_QTYS(ORDER_QUANTITY) <> 0 &
		AND SALES_ORDER_LINES(CONTRACT_NUMBER) <> "")

			IF (SALES_ORDER_LINE_QTYS(UNIT_OF_MEASURE) = SALES_ORDER_LINES(UNIT_PRICE))
				#CONTRACT_UPD_QTY = SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)
			ELSE
				PERFORM FIND_CURRENT_SO_LINE_QTY (SALES_ORDER_LINES(UNIT_PRICE), #R1)
				#CONTRACT_UPD_QTY = SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)
			END_IF

			PERFORM "GEMLB:SOP_L_CONTRACT_PRICE_QTY_UPDATE" (&
				#COMPANY_CODE, &
				#DIVISION, &
				(SALES_ORDER_HEADERS(CUSTOMER_NUMBER)), &
				(SALES_ORDER_LINES(PART_CODE)), &
				(SALES_ORDER_LINES(WAREHOUSE)), &
				"", &
				(SALES_ORDER_HEADERS(ORDER_DATE)), &
				(SALES_ORDER_HEADERS(SYS_CURRENCY_CODE)), &
				"", &
				#CONTRACT_UPD_QTY, &
				(SALES_ORDER_LINES(CONTRACT_NUMBER)), &
				"", &
				"", &
				(SALES_ORDER_LINES(UNIT_PRICE)), &
				"", &
				"")

			IF (%STATUS = %FAILURE) EXIT(%FAILURE)
		END_IF

		PERFORM DELETE_EXISTING_DETAIL_LINES
		IF (%STATUS = %FAILURE) EXIT(%FAILURE)

!		PERFORM DELETE_LINE_DISCOUNTS
!		IF (%STATUS = %FAILURE) EXIT(%FAILURE)
		PERFORM "GEMTP:TP_L_CALC_PROMOTIONS"  ("DELETE_LINE", &
							"", &
							"1", &
							SALES_ORDER_LINES(COMPANY_CODE), &
							SALES_ORDER_LINES(DIVISION), &
							SALES_ORDER_LINES(ORDER_NUMBER), &
							SALES_ORDER_LINES(ORDER_LINE_NUMBER), &
							#YES, &
							#R1, &
							#R2, &
							#R3)

		IF (#R1 = %FAILURE) EXIT(%FAILURE)

		#LINE_HAS_TP_GIFTS = 0
		#TP_GIFT_LINES_STRING = ""
		PERFORM DOES_LINE_HAVE_TP_GIFTS (#LINE_HAS_TP_GIFTS, #TP_GIFT_LINES_STRING)
		IF ( #LINE_HAS_TP_GIFTS )
			MESSAGE/IDENTIFIER/BELL/WAIT P_23557, #TP_GIFT_LINES_STRING
		END_IF

		PERFORM "GEMTP:TP_L_CALC_PROMOTIONS"  ("DELETE_LINE_GIFT", &
							"", &
							"1", &
							SALES_ORDER_LINES(COMPANY_CODE), &
							SALES_ORDER_LINES(DIVISION), &
							SALES_ORDER_LINES(ORDER_NUMBER), &
							SALES_ORDER_LINES(ORDER_LINE_NUMBER), &
							#YES, &
							#R1, &
							#R2, &
							#R3)
		IF (#R1 = %FAILURE) EXIT(%FAILURE)

		PERFORM DELETE_LINE_ADJUSTMENTS
		IF (%STATUS = %FAILURE) EXIT(%FAILURE)
		PERFORM DELETE_MISC_VT_LINE

		PERFORM DELETE_LINE_COMMENTS
		IF(%STATUS = %FAILURE) EXIT(%FAILURE)

		#ORDER_LINE		= SALES_ORDER_LINES(ORDER_LINE_NUMBER)
		#TAX_TYPE  = PARAMETER("TAX_TYPE_LINE")

		PERFORM DELETE_PREVIOUS_TAX_RECORDS (#TAX_TYPE)
		IF (%STATUS = %FAILURE) EXIT(%FAILURE)
	END_BLOCK

	BEGIN_BLOCK WEIGHT_CORRECTION
		IF ((SALES_ORDER_HEADERS(WEIGHT_UOM) = "") &
		OR  (SALES_ORDER_LINES(WEIGHT_UOM) = ""))
			#TOTAL_ORDER_WEIGHT	= #TOTAL_ORDER_WEIGHT - 0.0
		ELSE_IF (SALES_ORDER_HEADERS(WEIGHT_UOM) = SALES_ORDER_LINES(WEIGHT_UOM))
			 #TOTAL_ORDER_WEIGHT	 = #TOTAL_ORDER_WEIGHT - SALES_ORDER_LINES(WEIGHT)
		ELSE
			DELETE ALL FROM SYS_DO_UOM_CONV_VT

			SYS_DO_UOM_CONV_VT(COMPANY_CODE)	 = SALES_ORDER_LINES(COMPANY_CODE)
			SYS_DO_UOM_CONV_VT(PART_CODE)	 = SALES_ORDER_LINES(PART_CODE)
			SYS_DO_UOM_CONV_VT(IC_QTY_FROM)	= SALES_ORDER_LINES(WEIGHT)
			SYS_DO_UOM_CONV_VT(UNIT_FROM)	= SALES_ORDER_LINES(WEIGHT_UOM)
			SYS_DO_UOM_CONV_VT(UNIT_TO)	= SALES_ORDER_HEADERS(WEIGHT_UOM)

			ADD TO SYS_DO_UOM_CONV_VT
			IF (%STATUS <> %SUCCESS)
				#TOTAL_ORDER_WEIGHT	= #TOTAL_ORDER_WEIGHT - 0.0
				GOTO VOLUME_CORRECTION
			END_IF

			PERFORM "GEMLB:LB_C_IC_ENGINE_CONTROLLER" (PARAMETER("IC_E_UOM_CONV_NO_MESSAGE"),     &
					#R_SUCCESS_STATUS,	&
					#R_MESSAGE)

			IF (#R_SUCCESS_STATUS	<> #YES)
				#TOTAL_ORDER_WEIGHT	= #TOTAL_ORDER_WEIGHT - 0.0
				GOTO VOLUME_CORRECTION
			END_IF

			FIND IN SYS_DO_UOM_CONV_VT
			IF (%STATUS <> %SUCCESS)
				#TOTAL_ORDER_WEIGHT	= #TOTAL_ORDER_WEIGHT - 0.0
				GOTO VOLUME_CORRECTION
			END_IF

			#TOTAL_ORDER_WEIGHT = #TOTAL_ORDER_WEIGHT - SYS_DO_UOM_CONV_VT(IC_QTY_TO)
		END_IF
	END_BLOCK

	BEGIN_BLOCK VOLUME_CORRECTION
		IF ((SALES_ORDER_HEADERS(VOLUME_UOM) = "") &
		OR  (SALES_ORDER_LINES(VOLUME_UOM) = ""))
			#TOTAL_ORDER_VOLUME	= #TOTAL_ORDER_VOLUME - 0.0
		ELSE_IF (SALES_ORDER_HEADERS(VOLUME_UOM) = SALES_ORDER_LINES(VOLUME_UOM))
			#TOTAL_ORDER_VOLUME		  = #TOTAL_ORDER_VOLUME - SALES_ORDER_LINES(VOLUME)
		ELSE
			DELETE ALL FROM SYS_DO_UOM_CONV_VT

			SYS_DO_UOM_CONV_VT(COMPANY_CODE)	 = SALES_ORDER_LINES(COMPANY_CODE)
			SYS_DO_UOM_CONV_VT(PART_CODE)	 = SALES_ORDER_LINES(PART_CODE)
			SYS_DO_UOM_CONV_VT(IC_QTY_FROM)	= SALES_ORDER_LINES(VOLUME)
			SYS_DO_UOM_CONV_VT(UNIT_FROM)	= SALES_ORDER_LINES(VOLUME_UOM)
			SYS_DO_UOM_CONV_VT(UNIT_TO)	= SALES_ORDER_HEADERS(VOLUME_UOM)

			ADD TO SYS_DO_UOM_CONV_VT
			IF (%STATUS <> %SUCCESS)
				#TOTAL_ORDER_VOLUME	= #TOTAL_ORDER_VOLUME - 0.0
				GOTO UPDATE_TOTAL_VARIABLES
			END_IF

			PERFORM "GEMLB:LB_C_IC_ENGINE_CONTROLLER" (PARAMETER("IC_E_UOM_CONV_NO_MESSAGE"),     &
					#R_SUCCESS_STATUS,	&
					#R_MESSAGE)

			IF (#R_SUCCESS_STATUS	<> #YES)
				#TOTAL_ORDER_VOLUME	= #TOTAL_ORDER_VOLUME - 0.0
				GOTO UPDATE_TOTAL_VARIABLES
			END_IF

			FIND IN SYS_DO_UOM_CONV_VT
			IF (%STATUS <> %SUCCESS)
				#TOTAL_ORDER_VOLUME	= #TOTAL_ORDER_VOLUME - 0.0
				GOTO UPDATE_TOTAL_VARIABLES
			END_IF

			#TOTAL_ORDER_VOLUME = #TOTAL_ORDER_VOLUME - SYS_DO_UOM_CONV_VT(IC_QTY_TO)
		END_IF
	END_BLOCK

	BEGIN_BLOCK UPDATE_TOTAL_VARIABLES
		#TOTAL_WEIGHT_UOM	= SALES_ORDER_HEADERS(WEIGHT_UOM)
		#TOTAL_VOLUME_UOM	= SALES_ORDER_HEADERS(VOLUME_UOM)
		#LINE_WEIGHT		= SALES_ORDER_LINES(WEIGHT)
		#PART_CODE		= SALES_ORDER_LINES(PART_CODE)
		#TOTAL_LINE_DISCOUNT	= #TOTAL_LINE_DISCOUNT - SALES_ORDER_LINES(LINE_DISCOUNT)
		#TOTAL_LINE_TAX		= #TOTAL_LINE_TAX - SALES_ORDER_LINES(LINE_TAX)
		#GRAND_TOTAL		= #GRAND_TOTAL - SALES_ORDER_LINES(SOP_ORDER_TOTAL_CURRENCY) &
						 - SALES_ORDER_LINES(LINE_TAX) + SALES_ORDER_LINES(LINE_DISCOUNT)
	END_BLOCK

	BEGIN_BLOCK DELETE_CHAR_LIMITS
		PERFORM DELETE_CHAR_LIMITS
	END_BLOCK

	BEGIN_BLOCK DELETE_QTYS
		PERFORM DELETE_SALES_ORDER_LINE_QTYS
	END_BLOCK


	!Change 003 
	BEGIN_BLOCK VOL_DELETE_MINBAL
		PERFORM VOL_DELETE_MINBAL
	END_BLOCK
	!Change 003 End
	
	FIND IN UNITS_OF_MEASURE &
		/LOCK=NONE &
		/WITH=UNIT_OF_MEASURE=#TOTAL_WEIGHT_UOM
			
	IF (%STATUS = %SUCCESS)
		#TOTAL_WEIGHT_MASK = UNITS_OF_MEASURE(IC_QUANTITY_MASK)
	ELSE
		#TOTAL_WEIGHT_MASK = ""
	END_IF

	OUTPUT_BLOCK TOTAL_WEIGHT /ROW=1 /COL=13 &
			/SOURCE=(#TOTAL_ORDER_WEIGHT) &
			/PROMPT=(MESSAGE("P_00751")) &
			/USING=SALES_ORDER_HEADERS(WEIGHT) &
			/OUTPUT_MASK=#TOTAL_WEIGHT_MASK

	OUTPUT_BLOCK WEIGHT_UNIT /ROW=1 /COL=28 &
			/SOURCE=(#TOTAL_WEIGHT_UOM) &
			/USING=SALES_ORDER_HEADERS(WEIGHT_UOM)
			
	FIND IN UNITS_OF_MEASURE &
			/LOCK=NONE &
			/WITH=UNIT_OF_MEASURE=#TOTAL_VOLUME_UOM

	IF (%STATUS = %SUCCESS)
			#TOTAL_UOM_MASK = UNITS_OF_MEASURE(IC_QUANTITY_MASK)
	ELSE
			#TOTAL_UOM_MASK = ""
	END_IF

	OUTPUT_BLOCK TOTAL_VOLUME /ROW=2 /COL=13 &
			/SOURCE=(#TOTAL_ORDER_VOLUME) &
			/PROMPT=(FIELD_PROMPT(VOLUME)) &
			/USING=SALES_ORDER_HEADERS(VOLUME) &
			/OUTPUT_MASK=#TOTAL_UOM_MASK

	OUTPUT_BLOCK VOLUME_UNIT /ROW=2 /COL=28 &
			/SOURCE=(#TOTAL_VOLUME_UOM) &
			/USING=SALES_ORDER_HEADERS(VOLUME_UOM)

	OUTPUT_BLOCK TOTAL_LINE_TOTAL /ROW=2 /COL=56 /LEN=(#CURRENCY_LEN) &
			/SOURCE=(#GRAND_TOTAL) &
			/PROMPT=(MESSAGE("P_00436")) &
			/USING=SALES_ORDER_HEADERS(SOP_ORDER_TOTAL_CURRENCY) &
			/OUTPUT_MASK=(#CURRENCY_MASK)

END_FORM


PROCEDURE_FORM EXTRACT_HISTORY_CODE (#P1)

	BEGIN_BLOCK FIND_AUDIT_CODE
		#REASON  = #P1
		#HISTORY = #NO

		FIND IN SALES_ORDER_AUDIT_CODES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=ORDER_AUDIT_CODE=#REASON

		IF (%STATUS = %SUCCESS)
			#HISTORY=SALES_ORDER_AUDIT_CODES(SO_AUDIT_LOG)
		ELSE
			EXIT
		END_IF

		IF (#HISTORY <> #YES)
			EXIT
		END_IF

		IF (SALES_ORDER_AUDIT_CODES(SO_AUDIT_MANUAL)=#YES)
			PERFORM SALES_HISTORY_AUDIT(#REASON)
		ELSE
			#AUDIT_CODE		  = SALES_ORDER_AUDIT_CODES(ORDER_AUDIT_CODE)
			#DESCRIPTION = SALES_ORDER_AUDIT_CODES(DESCRIPTION)
		END_IF
	END_BLOCK

END_FORM


PROCEDURE_FORM EXTRACT_HISTORY_CODE_DEL (#P1)

	BEGIN_BLOCK FIND_AUDIT_CODE
		#REASON  = #P1
		#HISTORY = #NO

		FIND IN SALES_ORDER_AUDIT_CODES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=ORDER_AUDIT_CODE=#REASON

		IF (%STATUS = %SUCCESS)
			#HISTORY=SALES_ORDER_AUDIT_CODES(SO_AUDIT_LOG)
		ELSE
			EXIT
		END_IF

		IF (#HISTORY <> #YES)
			EXIT
		END_IF

		IF (SALES_ORDER_AUDIT_CODES(SO_AUDIT_MANUAL) = #YES)
			PERFORM SALES_HISTORY_AUDIT_DEL(#REASON)
			IF (%STATUS = %EXIT OR %STATUS = %BACK)
				EXIT (%FAILURE)
			END_IF
		ELSE
			#AUDIT_CODE		  = SALES_ORDER_AUDIT_CODES(ORDER_AUDIT_CODE)
			#DESCRIPTION = SALES_ORDER_AUDIT_CODES(DESCRIPTION)
		END_IF
	END_BLOCK

END_FORM


FORM SALES_HISTORY_AUDIT (#P1) /ROW=15 /COL=5 /HEIGHT=7 /WIDTH=44 &
	/TITLE=(MESSAGE("P_50095"))

	BEGIN_BLOCK SETUP
		#REASON = #P1
	END_BLOCK

	INPUT_BLOCK AUDIT_CODE /ROW=2 /COL=23 &
			/PROMPT=(MESSAGE("P_5MISCELLANEOUS_1")) &
			/SOURCE=(#REASON) &
			/TARGET=#AUDIT_CODE &
			/USING=SALES_ORDER_AUDIT_CODES(ORDER_AUDIT_CODE),REQUIRED &
			/BACK=(GOTO AUDIT_CODE) &
			/EXIT=(GOTO AUDIT_CODE) &
			/LOV=SALES_ORDER_AUDIT_CODES(ORDER_AUDIT_CODE,DESCRIPTION) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE

	BEGIN_BLOCK VALIDATE_CODE
		FIND IN SALES_ORDER_AUDIT_CODES &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION = #DIVISION &
			/WITH=ORDER_AUDIT_CODE=#AUDIT_CODE &
			/LOCK=NONE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_52258
			GOTO AUDIT_CODE
		ELSE
			#DESCRIPTION = SALES_ORDER_AUDIT_CODES(DESCRIPTION)
		END_IF
	END_BLOCK

	INPUT_BLOCK DESCRIPTION /ROW=4 /COL=12 &
			/PROMPT=(FIELD_SHORT_PROMPT(CODE_DESCRIPTION)) &
			/TARGET=#DESCRIPTION &
			/USING=SALES_ORDER_AUDIT_CODES(DESCRIPTION) &
			/EXIT=(GOTO AUDIT_CODE)

	YESNO_BLOCK CONFIRM /ROW=6 /COL=23 &
			/PROMPT=(MESSAGE("P_00149")) &
			/BACK=(GOTO AUDIT_CODE) &
			/EXIT=(GOTO AUDIT_CODE) &
			/FAILURE=(GOTO AUDIT_CODE)

END_FORM


FORM SALES_HISTORY_AUDIT_DEL (#P1) /ROW=10 /COL=19 /HEIGHT=10 /WIDTH=50 &
	/TITLE=(MESSAGE("P_50095"))


	BEGIN_BLOCK SETUP
		#REASON = #P1
	END_BLOCK

	INPUT_BLOCK AUDIT_CODE /ROW=2 /COL=23 &
			/PROMPT=(MESSAGE("P_5MISCELLANEOUS_1")) &
			/SOURCE=(#REASON) &
			/TARGET=#AUDIT_CODE &
			/USING=SALES_ORDER_AUDIT_CODES(ORDER_AUDIT_CODE),REQUIRED &
			/BACK=(EXIT (%EXIT)) &
			/EXIT=(EXIT (%EXIT)) &
			/LOV=SALES_ORDER_AUDIT_CODES(ORDER_AUDIT_CODE,DESCRIPTION) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE

	BEGIN_BLOCK VALIDATE_CODE
		FIND IN SALES_ORDER_AUDIT_CODES &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=ORDER_AUDIT_CODE=#AUDIT_CODE &
			/LOCK=NONE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_52258
			GOTO AUDIT_CODE
		ELSE
			#DESCRIPTION = SALES_ORDER_AUDIT_CODES(DESCRIPTION)
		END_IF
	END_BLOCK

	INPUT_BLOCK DESCRIPTION /ROW=4 /COL=12 &
			/PROMPT=(FIELD_SHORT_PROMPT(CODE_DESCRIPTION)) &
			/TARGET=#DESCRIPTION &
			/USING=SALES_ORDER_AUDIT_CODES(DESCRIPTION) &
			/EXIT=(EXIT (%EXIT))

	YESNO_BLOCK CONFIRM /ROW=6 /COL=23 &
			/PROMPT=(MESSAGE("P_00149")) &
			/BACK=(GOTO DESCRIPTION) &
			/EXIT=(EXIT (%EXIT)) &
			/FAILURE=(GOTO AUDIT_CODE)

END_FORM


PROCEDURE_FORM WRITE_SALES_ORDER_HISTORY (#P1, #P2, #P3)

	BEGIN_BLOCK CREATE_RECORD
		#REASON = #P1
		#ORDER_QTY = #P2
		#MOVEMENT_QTY = #P3

		CLEAR_BUFFER SALES_ORDER_HISTORY

		SALES_ORDER_HISTORY(COMPANY_CODE)	  = #COMPANY_CODE
		SALES_ORDER_HISTORY(DIVISION)		= #DIVISION
		SALES_ORDER_HISTORY(ORDER_NUMBER)	  = SALES_ORDER_LINES(ORDER_NUMBER)
		SALES_ORDER_HISTORY(ORDER_LINE_NUMBER)  = SALES_ORDER_LINES(ORDER_LINE_NUMBER)
		SALES_ORDER_HISTORY(CREATION_DATE)	  = %NOW
		SALES_ORDER_HISTORY(ORDER_AUDIT_CODE)	  = #AUDIT_CODE
		SALES_ORDER_HISTORY(PRICING_METHOD)	 = #PRICING_METHOD
		SALES_ORDER_HISTORY(DESCRIPTION)	= #DESCRIPTION
		SALES_ORDER_HISTORY(USER_ID)		= #USER_ID
		SALES_ORDER_HISTORY(PART_CODE)		= SALES_ORDER_LINES(PART_CODE)
		SALES_ORDER_HISTORY(WAREHOUSE)		= SALES_ORDER_LINES(WAREHOUSE)
		SALES_ORDER_HISTORY(ORDER_QUANTITY)	= #ORDER_QTY
		SALES_ORDER_HISTORY(UNIT_SALES)		= SALES_ORDER_LINES(UNIT_SALES)
		SALES_ORDER_HISTORY(UNIT_PRICE)		= SALES_ORDER_LINES(UNIT_PRICE)
			SALES_ORDER_HISTORY(DELIVERY_ADDRESS_CODE) = SALES_ORDER_LINES(DELIVERY_ADDRESS_CODE)
		SALES_ORDER_HISTORY(CUSTOMER_NUMBER)		 = SALES_ORDER_LINES(CUSTOMER_NUMBER)
		SALES_ORDER_HISTORY(SHIPPING_REQUIREMENT_NUMBER) = SALES_ORDER_LINE_DETAILS(SHIPPING_REQUIREMENT_NUMBER)
		SALES_ORDER_HISTORY(TM_VEHICLE_ID)	= #RQMS_VEHICLE_ID

		IF (SALES_ORDER_LINES(ORDER_LINE_TYPE) <> #SO_LINE_TYPE_STOCK)
			SALES_ORDER_HISTORY(SALES_ORDER_DETAIL_DESCRIPTION) = &
				SALES_ORDER_LINES(SALES_ORDER_DETAIL_DESCRIPTION)
		END_IF

		IF (#REASON = (PARAMETER("AUDIT_CHANGE_CODE_PRICE")))
			IF ( #PRICING_METHOD = #TAX_INCLUSIVE )
				SALES_ORDER_HISTORY(SALES_PRICE)=#NET_PRICE
				SALES_ORDER_HISTORY(SALES_PRICE_INC_TAX)=#PRICE
			ELSE
				SALES_ORDER_HISTORY(SALES_PRICE)=#PRICE
				SALES_ORDER_HISTORY(SALES_PRICE_INC_TAX)=0
			END_IF
			SALES_ORDER_HISTORY(UNIT_PRICE)=SALES_ORDER_LINES(UNIT_PRICE)
		END_IF

		IF (#REASON = (PARAMETER("AUDIT_CHANGE_CODE_DISCOUNT")))
			SALES_ORDER_HISTORY(SALES_PRICE)=#LINE_DISCOUNT
		END_IF

		IF ((#REASON = (PARAMETER("AUDIT_CHANGE_CODE_REQ_DATE"))) &
		OR  (#REASON = (PARAMETER("AUDIT_CHANGE_CODE_DEL_LINE"))) &
		OR  (#REASON = (PARAMETER("AUDIT_CHANGE_CODE_CANCEL"))))
			SALES_ORDER_HISTORY(REQUIRED_DATE)=SALES_ORDER_LINE_DETAILS(TEMP_REQUIRED_DATE)
			SALES_ORDER_HISTORY(IC_LOT_NUMBER)=SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER)
			SALES_ORDER_HISTORY(MOVEMENT_QTY)=#MOVEMENT_QTY
		END_IF

		IF ((#REASON = (PARAMETER("AUDIT_CHANGE_CODE_DEL_LINE"))) &
		OR  (#REASON = (PARAMETER("AUDIT_CHANGE_CODE_CANCEL"))))
			SALES_ORDER_HISTORY(SALES_PRICE)=SALES_ORDER_LINES(SALES_PRICE)
			SALES_ORDER_HISTORY(LINE_DISCOUNT)=SALES_ORDER_LINES(LINE_DISCOUNT)
		END_IF

		ADD TO SALES_ORDER_HISTORY
	END_BLOCK

END_FORM


PROCEDURE_FORM CANCEL_ORDER

	BEGIN_BLOCK NOTICE
		PERFORM ORDER_CANCELLATION_NOTICE
		IF (%STATUS = %FAILURE)
			EXIT(%FAILURE)
		END_IF
	END_BLOCK

	BEGIN_BLOCK CHECK_ORDER_STATUS
		START_TRANSACTION

		FIND IN SALES_ORDER_HEADERS &
			/LOCK=WRITE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=ORDER_NUMBER=#ORDER_NUMBER

		IF (%STATUS=%FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_32134
			EXIT(%FAILURE)
		END_IF

		PERFORM CHECK_ORDER_STATUS
		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_52286
			EXIT(%FAILURE)
		END_IF
	END_BLOCK

	BEGIN_BLOCK WRITE_HISTORY
		PERFORM EXTRACT_HISTORY_CODE((PARAMETER("AUDIT_CHANGE_CODE_CANCEL")))
		! No need to write history here because history is stored on a
		! line basis and this routine is called for each line in the
		! CANCEL_ALL_LINES routine.

		PERFORM DELETE_ALL_ADJUSTMENTS
		DELETE ALL FROM SALES_MISC_ADJUSTMENTS_VT

		PERFORM DELETE_ALL_LINE_DISCOUNTS

		PERFORM CANCEL_ALL_LINES

		PERFORM CANCEL_TAX_DETAILS

		FIND IN CUSTOMERS &
			/LOCK=WRITE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=#CUSTOMER_NUMBER

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00187
!Delete the following lines issue#368358-20
!		ELSE
!			#VALUE_DIFF = #ORIG_ORDER_VALUE
!
!			IF (#CURRENCY_METHOD > '0')
!				DELETE ALL FROM SYS_CURRENCY_VALUES_VT
!				SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE)	= #VALUE_DIFF
!				ADD TO SYS_CURRENCY_VALUES_VT
!				PERFORM "GEMLB:LB_S_L_CURRENCY_RATES" (#R_STATUS, #R_MESSAGE)
!				IF (#R_STATUS <> #YES)
!					ERROR/WAIT #R_MESSAGE
!					EXIT (%FAILURE)
!				END_IF
!				PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
!				IF (#R_STATUS <> #YES)
!					ERROR/WAIT #R_MESSAGE
!					EXIT (%FAILURE)
!				END_IF
!				FIND IN SYS_CURRENCY_VALUES_VT
!				#BASE_VALUE_DIFF	= SYS_CURRENCY_VALUES_VT(BASE_VALUE)
!			ELSE
!				#BASE_VALUE_DIFF=#VALUE_DIFF
!			END_IF
!
!			CUSTOMERS(OS_ORDER_VALUE) = CUSTOMERS(OS_ORDER_VALUE) - #BASE_VALUE_DIFF
!End of deletes
		END_IF

		DELETE FROM SALES_ORDER_HEADERS
	
	PERFORM EXITFORM
	 	
		COMMIT
	END_BLOCK

END_FORM


PROCEDURE_FORM CANCEL_TAX_DETAILS &
	/TABLE=SALES_ORDER_TAX_DETAILS &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION=#DIVISION &
	/WITH=ORDER_NUMBER=#ORDER_NUMBER

	BEGIN_BLOCK DELETE_TAX
		DELETE FROM SALES_ORDER_TAX_DETAILS
	END_BLOCK

END_FORM


PROCEDURE_FORM CANCEL_ALL_LINES &
	/TABLE=SALES_ORDER_LINES &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION = #DIVISION &
	/WITH=ORDER_NUMBER=#ORDER_NUMBER

	BEGIN_BLOCK INIT
		FIND IN SALES_ORDER_LINE_QTYS	  &
			/LOCK = NONE	   &
			/WITH = COMPANY_CODE = #COMPANY_CODE	   &
			/WITH = DIVISION = #DIVISION	   &
			/WITH = ORDER_NUMBER = SALES_ORDER_LINES(ORDER_NUMBER)  &
			/WITH = ORDER_LINE_NUMBER = SALES_ORDER_LINES(ORDER_LINE_NUMBER) &
			/WITH = UNIT_OF_MEASURE = SALES_ORDER_LINES(UNIT_SALES)

		#SALES_ORDER_QTY = SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)
		! This variable value required for the form
		! delete_existing_detail_lines to be passed into the
		! audit history record creation form.

		IF (SALES_ORDER_LINES(UNIT_SALES) <> SALES_ORDER_LINES(UNIT_PRICE))
			FIND IN SALES_ORDER_LINE_QTYS   &
				/LOCK = NONE    &
				/WITH = COMPANY_CODE = #COMPANY_CODE    &
				/WITH = DIVISION = #DIVISION    &
				/WITH = ORDER_NUMBER = SALES_ORDER_LINES(ORDER_NUMBER)  &
				/WITH = ORDER_LINE_NUMBER = SALES_ORDER_LINES(ORDER_LINE_NUMBER) &
				/WITH = UNIT_OF_MEASURE = SALES_ORDER_LINES(UNIT_PRICE)

			! No need to repeat the FIND if unit_price record is
			! already in the buffer.
		END_IF

		#CONTRACT_UPD_QTY = SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)
		! Need to store the field value in a variable because when
		! detail lines are deleted field value will be zero - but
		! the line order quantity is needed for pricing contract
		! quantity updates.
	END_BLOCK

	BEGIN_BLOCK DELETE_DETAIL_LINES
		PERFORM DELETE_EXISTING_DETAIL_LINES

		IF (#CONTRACT_UPD_QTY <> 0 &
		AND SALES_ORDER_LINES(CONTRACT_NUMBER) <> "")

			PERFORM "GEMLB:SOP_L_CONTRACT_PRICE_QTY_UPDATE" (&
				#COMPANY_CODE, &
				#DIVISION, &
				(SALES_ORDER_HEADERS(CUSTOMER_NUMBER)), &
				(SALES_ORDER_LINES(PART_CODE)), &
				(SALES_ORDER_LINES(WAREHOUSE)), &
				"", &
				(SALES_ORDER_HEADERS(ORDER_DATE)), &
				(SALES_ORDER_HEADERS(SYS_CURRENCY_CODE)), &
				"", &
				#CONTRACT_UPD_QTY, &
				(SALES_ORDER_LINES(CONTRACT_NUMBER)), &
				"", &
				"", &
				(SALES_ORDER_LINES(UNIT_PRICE)), &
				"", &
				"")

			IF (%STATUS = %FAILURE) EXIT(%FAILURE)
		END_IF

		PERFORM DELETE_CHAR_LIMITS

!		#ORDER_LINE_NO = SALES_ORDER_LINES(ORDER_LINE_NUMBER)

		PERFORM DELETE_SALES_ORDER_LINE_QTYS

		DELETE FROM SALES_ORDER_LINES

		!Change 003 - DBM - 4/20/2007
		!Clean up minor/balance component lines in the event that the order is cancelled
		PERFORM VOL_DELETE_MINBAL
		!Change 003 End


	END_BLOCK

END_FORM


PROCEDURE_FORM CHECK_ORDER_STATUS &
	/TABLE=SALES_ORDER_LINE_DETAIL_QTYS &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION = #DIVISION &
	/WITH=ORDER_NUMBER=SALES_ORDER_HEADERS(ORDER_NUMBER)

        !If an order line(s) has been closed but no other processing
        !has been done, allow the order to be closed. ORDER_QTY_PROCESSED
        !is a computed field, check it's components separately.
        BEGIN_BLOCK CHECK

                IF ((SALES_ORDER_LINE_DETAIL_QTYS(IC_QTY_PICKED) <> "0") &
                OR (SALES_ORDER_LINE_DETAIL_QTYS(IC_QTY_IN_DESPATCH) <> "0") &
                OR (SALES_ORDER_LINE_DETAIL_QTYS(QTY_DESPATCHED) <> "0") &
                OR (SALES_ORDER_LINE_DETAIL_QTYS(QTY_INVOICED) <> "0"))
                        EXIT (%FAILURE)
                END_IF

        END_BLOCK


END_FORM


FORM ORDER_CANCELLATION_NOTICE /ROW=15 /COL=40 /HEIGHT=5 /WIDTH=37


	OUTPUT_BLOCK BLOCK_1 /ROW=1 /COL=3 &
			/SOURCE=(MESSAGE("P_56060")) &
			/ATTRIBUTES=NONE

	OUTPUT_BLOCK BLOCK_2 /ROW=2 /COL=3 &
			/SOURCE=(MESSAGE("P_56137")) &
			/ATTRIBUTES=NONE

	OUTPUT_BLOCK BLOCK_3 /ROW=3 /COL=3 &
			/SOURCE=(MESSAGE("P_56136")) &
			/ATTRIBUTES=NONE

	YESNO_BLOCK YES_NO_1 /ROW=4 /COL=29 &
			/PROMPT=(MESSAGE("P_59017")) &
			/BACK=(EXIT(%FAILURE)) &
			/EXIT=(EXIT(%FAILURE)) &
			/FAILURE=(EXIT(%FAILURE))

END_FORM


PROCEDURE_FORM RESERVATION_CHECK (#WH)
!
! verify reservation quantities and make inventory movements
!
! To use:
!	SALES_ORDER_LINE_DETAILS buffer must be set
!	SALES_ORDER_LINES buffer must be set
!	SALES_ORDER_ILNE_DETAIL_QTYS row must exist for the sales UOM
!
!	%FAILURE passed back on error
!
	BEGIN_BLOCK CHECK_CONTROLS
		#NEW_QTY_RESERVED=0
		FIND IN WAREHOUSE_CONTROLS &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=WAREHOUSE=#WH &
			/LOCK=NONE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00366,#WAREHOUSE
			EXIT (%FAILURE)
		END_IF

		FIND IN RESERVE:PRODUCT_WAREHOUSE &
			/SECONDARY &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PART_CODE=SALES_ORDER_LINES(PART_CODE) &
			/WITH=WAREHOUSE=#WH

		IF ((WAREHOUSE_CONTROLS(PERMIT_RESERVATION)<>#YES) OR &
			(RESERVE:PRODUCT_WAREHOUSE(PERMIT_RESERVATION)<>#YES) OR &
			(#PERMIT_RESERVATION<>#YES) OR &
			(#CUST_PERMIT_RESERVATION<>#YES))
			EXIT (%SUCCESS)
		END_IF


		! SET CONtext to SALES_ORDER_LINE_DETAIL_QTYS for sales UOM
		FIND IN SALES_ORDER_LINE_DETAIL_QTYS		 &
			/LOCK = READ &
			/WITH = COMPANY_CODE	   = SALES_ORDER_LINE_DETAILS(COMPANY_CODE)	&
			/WITH = DIVISION	= SALES_ORDER_LINE_DETAILS(DIVISION)    &
			/WITH = ORDER_NUMBER	   = SALES_ORDER_LINE_DETAILS(ORDER_NUMBER)	&
			/WITH = ORDER_LINE_NUMBER		= SALES_ORDER_LINE_DETAILS(ORDER_LINE_NUMBER)	&
			/WITH = SEQUENCE	= SALES_ORDER_LINE_DETAILS(SEQUENCE)    &
			/WITH = UNIT_OF_MEASURE = #NOMI_UOM

		IF (%STATUS = %SUCCESS)
			#NEW_ORDER_QTY = SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY) &
				- SALES_ORDER_LINE_DETAIL_QTYS(IC_QTY_PICKED) &
				- SALES_ORDER_LINE_DETAIL_QTYS(IC_QTY_IN_DESPATCH) &
				- SALES_ORDER_LINE_DETAIL_QTYS(QTY_DESPATCHED) &
				- SALES_ORDER_LINE_DETAIL_QTYS(QTY_INVOICED)

			#IC_LOT_NUMBER = SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER)
		ELSE
			#IC_LOT_NUMBER = ""
			#NEW_ORDER_QTY = 0
		END_IF

		PERFORM "GEMSOP:SOP_L_RESERVATION" (&
			#COMPANY_CODE, &
			#WH, &
			#NEW_ORDER_QTY, &
			#IC_LOT_NUMBER, &
			#AUTO_RESERVE, &
			(SALES_ORDER_LINE_DETAIL_QTYS(SEQUENCE)),		&
			#IC_STATUS_CODE, &
			#START_QTY_AVAILABLE, &
			#NEW_QTY_RESERVED,		 &
			#NOMI_NEW_QTY_RESERVED, &
			#NON_NOMI_NEW_QTY_RESERVED,		  &
			#PACK_NEW_QTY_RESERVED, &
			#R5,	&
			#START_QTY_AVAILABLE_BACK)

		IF (%STATUS <> %SUCCESS)
			ERROR/WAIT #R5
			EXIT(%BACK)
			! Exit differently when Stock Reservation fails
			! because the line processing should continue
			! when the error is recoverable from.
		END_IF

		#START_QTY_AVAILABLE = #START_QTY_AVAILABLE_BACK
	END_BLOCK

	BEGIN_BLOCK CONVERT_TO_PRICE_UOM
		!
		! Since SOP_L_RESERVATIONS does not handle a unique pricing UOM
		! we'll convert the NEW_QTY_RESERVED here to allow for
		! correct quantity record updates in the Price UOM
		!
		IF (#PRICE_UOM = #SALES_UOM)
			#PRICE_NEW_QTY_RESERVED = #NEW_QTY_RESERVED
		ELSE_IF (#PRICE_UOM = #NOMI_UOM)
			#PRICE_NEW_QTY_RESERVED = #NOMI_NEW_QTY_RESERVED
		ELSE_IF (#PRICE_UOM = #NON_NOMI_UOM)
			#PRICE_NEW_QTY_RESERVED = #NON_NOMI_NEW_QTY_RESERVED
		ELSE_IF (#PRICE_UOM = #PACK_UOM)
			#PRICE_NEW_QTY_RESERVED = #PACK_NEW_QTY_RESERVED
		ELSE
			PERFORM "GEMLB:SOP_L_SALES_PRICE_QTY" &
				(#COMPANY_CODE, &
				(SALES_ORDER_LINES(PART_CODE)), &
				(SALES_ORDER_LINES(WAREHOUSE)), &
				"", &
				#SALES_UOM, &
				#NEW_QTY_RESERVED, &
				#NOMI_UOM, &
				#NOMI_NEW_QTY_RESERVED, &
				#NON_NOMI_UOM, &
				#NON_NOMI_NEW_QTY_RESERVED, &
				#PRICE_UOM, &
				#NOMI_PRICE_UOM, &
				"", &
				"", &
				#PRICE_NEW_QTY_RESERVED, &
				#PQ_STATUS, &
				#PQ_MESSAGE)
			IF (#PQ_STATUS = #NO)
				ERROR/BELL/TEXT_ONLY/WAIT #PQ_MESSAGE
				EXIT(%FAILURE)
			END_IF
		END_IF
	END_BLOCK

END_FORM


PROCEDURE_FORM PRODUCE_PICK_LIST

	BEGIN_BLOCK CALL_EXTERNAL_ROUTINE
		PERFORM "GEMSOP:SOP_M_CREATE_PICK_LISTS" &
			(MESSAGE("P_36101"),#DIVISION,#ORDER_NUMBER,#PICK_LIST_NUMBER)

		PERFORM "GEMSOP:SOP_R_PICK_INSTRUCTION" &
			(MESSAGE("P_36101"),#DIVISION,#PICK_LIST_NUMBER)
	END_BLOCK

END_FORM


PROCEDURE_FORM PRODUCE_DESPATCH_NOTE

	BEGIN_BLOCK CALL_EXTERNAL_ROUTINE
		PERFORM "GEMSOP:SOP_M_DESPATCH_FROM_SALES" &
			(MESSAGE("P_36101"),#DIVISION,#ORDER_NUMBER,#DESPATCH_NUMBER)
	END_BLOCK

END_FORM


PROCEDURE_FORM PRODUCE_ORDER_PRINT

	BEGIN_BLOCK CALL_EXTERNAL_ROUTINE
		PERFORM "GEMSOP:SOP_R_ORDER_PRINT" &
			(MESSAGE("P_36101"),#DIVISION,#ORDER_NUMBER)
	END_BLOCK

END_FORM


PROCEDURE_FORM UPDATE_ORDER_LINE_COMMITMENTS	&
	/TABLE=SALES_ORDER_LINE_DETAILS &
	/WITH=COMPANY_CODE=SALES_ORDER_LINES(COMPANY_CODE) &
	/WITH=DIVISION=SALES_ORDER_LINES(DIVISION) &
	/WITH=ORDER_NUMBER=SALES_ORDER_LINES(ORDER_NUMBER) &
	/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER)

	BEGIN_BLOCK UPDATE
		SALES_ORDER_LINE_DETAILS(TEMP_REQUIRED_DATE)		 = SALES_ORDER_LINE_DETAILS(REQUIRED_DATE)
		SALES_ORDER_LINE_DETAILS(TEMP_SHIPPING_DATE)		 = SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)
	END_BLOCK

END_FORM


FORM CREDIT_STATUS_CODE /ROW=16 /COL=2 /HEIGHT=5 /WIDTH=55 &
	/TITLE=(MESSAGE("P_20154"))

	BEGIN_BLOCK CREDIT_HOLD_STATUS
		INPUT_BLOCK  /ROW=2 /COL=23 &
			/PROMPT=(FIELD_PROMPT(CREDIT_STATUS_CODE)) &
			/SOURCE=#CREDIT_STATUS_CODE &
			/TARGET=#CREDIT_STATUS_CODE &
			/USING=SALES_ORDER_HEADERS(CREDIT_STATUS_CODE),REQUIRED &
			/LOV=CREDIT_HOLD_STATUS_CODES(CREDIT_STATUS_CODE,DESCRIPTION) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE

		FIND IN CREDIT_HOLD_STATUS_CODES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=CREDIT_STATUS_CODE = #CREDIT_STATUS_CODE

		IF (%STATUS=%FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_52251
			GOTO CREDIT_HOLD_STATUS
		END_IF
	END_BLOCK

	OUTPUT_BLOCK HOLD_STATUS_DESC /ROW=3 /COL=23 &
			/SOURCE=(CREDIT_HOLD_STATUS_CODES(DESCRIPTION))

	YESNO_BLOCK BLOCK_1 /ROW=5 /COL=25 &
			/PROMPT=(MESSAGE("P_00142")) &
			/FAILURE=(GOTO CREDIT_HOLD_STATUS)

END_FORM


FORM ORDER_NOTES /ROW=8 /COL=15 /HEIGHT=15 /WIDTH=51 &
	/TITLE=(MESSAGE("P_50142"))

	INPUT_BLOCK INPUT_1 /ROW=2 /COL=10 &
			/PROMPT=(FIELD_PROMPT(NOTES)) &
			/TARGET=SALES_ORDER_HEADERS(NOTES)

END_FORM


FORM STOCK_AVAILABILITY_OLD /ROW=19 /COL=2 /HEIGHT=5 /WIDTH=50 &
	/REMAIN &
	/TITLE=(MESSAGE("P_50084"))

	BEGIN_BLOCK PRODUCT_AND_WAREHOUSE_INFO
		FIND IN PRODUCT_MASTER &
			/LOCK= NONE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=PART_CODE = #PART_CODE

		IF (%STATUS <> %SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_42014
			EXIT (%FAILURE)
		END_IF

		FIND IN PRODUCT_WAREHOUSE &
			/LOCK= NONE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=PART_CODE = #PART_CODE &
			/WITH=WAREHOUSE = #WAREHOUSE

		IF (%STATUS <> %SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_42024
			EXIT (%FAILURE)
		END_IF
	END_BLOCK

	BEGIN_BLOCK UOM
		#AVAIL_UOM	  = #NOMI_UOM
		#REQ_UOM	= PRODUCT_MASTER(IC_UNIT_REQUIRE)
		IF (#IC_PACKAGED_PRODUCT = #YES AND #PACK_UOM <> "")
			#AVAIL_UOM		 = #PACK_UOM
			#DISPLAY_UOM	   = #PACK_UOM
		ELSE
			#AVAIL_UOM		 = #NOMI_UOM
			#DISPLAY_UOM	   = #SALES_UOM
		END_IF
	END_BLOCK

	BEGIN_BLOCK INIT
		IF (PRODUCT_MASTER(IC_UNIT_CAPACITY)		 = #NOMI_UOM)
			#CAP_UOM	= #NOMI_UOM
		ELSE
			#CAP_UOM	= #NON_NOMI_UOM
		END_IF
		PERFORM "GEMLB:LB_GET_QUANTITY_MASK"( #COMPANY_CODE,    &
							(PRODUCT_WAREHOUSE(PART_CODE)), &
							#DISPLAY_UOM,   &
							#UOM_MASK,      &
							#R2)
	END_BLOCK

	BEGIN_BLOCK QTY
		FIND IN IC_PRODUCT_STATUS &
			/LOCK = NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PART_CODE=PRODUCT_WAREHOUSE(PART_CODE) &
			/WITH=WAREHOUSE=PRODUCT_WAREHOUSE(WAREHOUSE) &
			/WITH=IC_STATUS_CODE=#IC_STATUS_CODE	   &
			/WITH = UNIT_OF_MEASURE = #AVAIL_UOM

		IF (%STATUS <> %SUCCESS)
			#AVAILABLE = 0
			#ON_HAND   = 0
		ELSE
				#AVAILABLE		   = IC_PRODUCT_STATUS(IC_QTY_AVAILABLE)
				#ON_HAND = IC_PRODUCT_STATUS(IC_QUANTITY)

			IF (#DISPLAY_UOM <> #AVAIL_UOM)
			! the part is not packaged and the sales uom is not
			! equal to the sop nominated uom - convert from sop
			! nominated to sales uom (display uom)
				PERFORM CONVERT_QTYS(#WAREHOUSE, &
					"", &
					#PART_CODE, &
					#AVAIL_UOM, &
					(IC_PRODUCT_STATUS(IC_QTY_AVAILABLE)), &
					#DISPLAY_UOM,   &
					#DISP_AVAILABLE, &
					#R1)
				PERFORM CONVERT_QTYS(#WAREHOUSE, &
					"", &
					#PART_CODE, &
					#AVAIL_UOM, &
					(IC_PRODUCT_STATUS(IC_QUANTITY)), &
					#DISPLAY_UOM, &
					#DISP_ON_HAND, &
					#R1)
			ELSE
				#DISP_AVAILABLE = #AVAILABLE
				#DISP_ON_HAND = #ON_HAND
			END_IF
		END_IF

		#START_QTY_AVAILABLE = #AVAILABLE
		#TOT_COMM = PRODUCT_WAREHOUSE(QTY_COMMITTED_TOTAL)
		#DISP_TOT_COMM = #TOT_COMM
		IF (#REQ_UOM <> #DISPLAY_UOM)
		   IF (#IC_PACKAGED_PRODUCT = #YES AND #PACK_UOM <> "")
			! convert from requirements uom to capacity uom to pack uom
			PERFORM CONVERT_QTYS(#WAREHOUSE, &
				"", &
				#PART_CODE, &
				#REQ_UOM, &
				(PRODUCT_WAREHOUSE(QTY_COMMITTED_TOTAL)), &
				#CAP_UOM,			 &
				#TEMP_QTY, &
				#R1)
			PERFORM CONVERT_QTYS(#WAREHOUSE, &
				"", &
				#PART_CODE, &
				#CAP_UOM, &
				#TEMP_QTY, &
				#DISPLAY_UOM,   &
				#DISP_TOT_COMM, &
				#R1)
		   ELSE
			! else convert from the requirements uom to
			! the sop nomi uom to the sales (display) uom
			PERFORM CONVERT_QTYS(#WAREHOUSE, &
				"", &
				#PART_CODE, &
				#REQ_UOM, &
				(PRODUCT_WAREHOUSE(QTY_COMMITTED_TOTAL)), &
				#NOMI_UOM,		   &
				#TEMP_QTY, &
				#R1)
			PERFORM CONVERT_QTYS(#WAREHOUSE, &
				"", &
				#PART_CODE, &
				#NOMI_UOM, &
				#TEMP_QTY, &
				#DISPLAY_UOM,   &
				#DISP_TOT_COMM, &
				#R1)
		   END_IF
		END_IF
	END_BLOCK

	OUTPUT_BLOCK QTY_ON_HAND /ROW=1 /COL=23 &
			/PROMPT=(MESSAGE("P_44061")) &
			/SOURCE=(#DISP_ON_HAND) &
			/OUTPUT_MASK = #UOM_MASK

	OUTPUT_BLOCK OUTPUT_1_UOM /ROW=1 /COL=40 /LEN=4 &
!			/PROMPT = MESSAGE("P_91237") &
			/SOURCE=#DISPLAY_UOM	   &
			/USING = SALES_ORDER_LINE_QTYS(UNIT_OF_MEASURE)

	OUTPUT_BLOCK COMMITTED /ROW=2 /COL=23 &
			/PROMPT=(FIELD_PROMPT(PRODUCT_WAREHOUSE,QTY_COMMITTED_TOTAL)) &
			/SOURCE=(#DISP_TOT_COMM) &
			/OUTPUT_MASK = #UOM_MASK

	OUTPUT_BLOCK OUTPUT_2_UOM /ROW=2 /COL=40 /LEN=4 &
!			/PROMPT = MESSAGE("P_91237") &
			/SOURCE=#DISPLAY_UOM	   &
			/USING = SALES_ORDER_LINE_QTYS(UNIT_OF_MEASURE)

	OUTPUT_BLOCK OUTPUT_1 /ROW=3 /COL=23 &
			/PROMPT=(FIELD_PROMPT(IC_PRODUCT_STATUS,IC_QTY_AVAILABLE)) &
			/SOURCE=(#DISP_AVAILABLE) &
			/OUTPUT_MASK = #UOM_MASK

	OUTPUT_BLOCK OUTPUT_3_UOM /ROW=3 /COL=40 /LEN=4 &
!			/PROMPT = MESSAGE("P_91237") &
			/SOURCE=#DISPLAY_UOM	   &
			/USING = SALES_ORDER_LINE_QTYS(UNIT_OF_MEASURE)

	OUTPUT_BLOCK ALT_PART_CODE /ROW=4 /COL=23 &
			/PROMPT=(MESSAGE("P_02480")) &
			/SOURCE=(PRODUCT_MASTER(PART_CODE_ALT))

	OUTPUT_BLOCK PURCHASE_LEAD_TIME /ROW=5 /COL=23 &
			/PROMPT=(FIELD_PROMPT(PURCHASE_LEAD_TIME)) &
			/SOURCE=(PRODUCT_WAREHOUSE(PURCHASE_LEAD_TIME))

END_FORM


FORM STOCK_AVAILABILITY /ROW=21 /COL=2 /HEIGHT=3 /WIDTH=62 &
	/REMAIN &
	/TITLE=(MESSAGE("P_50084"))

	BEGIN_BLOCK UOM

		#AVAIL_UOM = #NOMI_UOM

		IF (#IC_PACKAGED_PRODUCT = #YES AND #PACK_UOM <> "")
			#VALID_PACK_UNIT = #YES
			#DISPLAY_UOM = #PACK_UOM
			#AVAIL_UOM   = #PACK_UOM
		ELSE
			#VALID_PACK_UNIT = #NO
			#DISPLAY_UOM = #SALES_UOM
		END_IF

		FIND IN IC_PRODUCT_MASTER_UNITS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PART_CODE=#PART_CODE &
			/WITH=UNIT_OF_MEASURE=#DISPLAY_UOM &
			/WITH=IC_QUANTITY_MASK <> ""

		IF (%STATUS <> %SUCCESS) 
			FIND IN UNITS_OF_MEASURE &
				/LOCK=NONE &
				/WITH=UNIT_OF_MEASURE=#DISPLAY_UOM

			IF (%STATUS=%NORMAL)
				#DISPLAY_MASK = UNITS_OF_MEASURE(IC_QUANTITY_MASK)
			ELSE
				#DISPLAY_MASK = ""
			END_IF
		ELSE
			#DISPLAY_MASK = IC_PRODUCT_MASTER_UNITS(IC_QUANTITY_MASK)
		END_IF 

		IF (#SYS_SHIPPING_DATE = "") 
			IF (#LINE_REQUESTED_DATE <> "") 
				#SYS_SHIPPING_DATE = #LINE_REQUESTED_DATE
			ELSE
				#SYS_SHIPPING_DATE = %TODAY 
			END_IF 
		END_IF 

	END_BLOCK

	BEGIN_BLOCK QTY

		#START_QTY_AVAILABLE = 0

		FIND IN IC_PRODUCT_STATUS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PART_CODE=#PART_CODE &
			/WITH=WAREHOUSE=#WAREHOUSE &
			/WITH=IC_STATUS_CODE=#IC_STATUS_CODE &
			/WITH=UNIT_OF_MEASURE=#AVAIL_UOM

		IF (%STATUS = %SUCCESS)
			#START_QTY_AVAILABLE = IC_PRODUCT_STATUS(IC_QTY_AVAILABLE)
		END_IF

	END_BLOCK

	BEGIN_BLOCK GET_AVAILABLE 

		#QTY_AVAILABLE      = 0.0
		#NOMI_QTY_AVAILABLE = 0.0
		#FAIL_STATUS        = #NO
		#FAIL_MESSAGE       = ""

		IF ((#DISPLAY_UOM = #NOMI_UOM) OR (#DISPLAY_UOM = #NON_NOMI_UOM) OR (#VALID_PACK_UNIT = #YES)) 
			PERFORM 'GEMLB:LB_S_L_PI_COMMON' ( &
					(#COMPANY_CODE), &
					(#WAREHOUSE), &
					(#PART_CODE), &
					(#DISPLAY_UOM), &
					(PARAMETER("IC_STATUS_QOH")), &
					(#SYS_SHIPPING_DATE), &
					(#YES), &
					(#NO), &
					(#NO), &
					(""), &
					(""), &
					(""), &
					#FAIL_STATUS, &
					#FAIL_MESSAGE, &
					#QTY_AVAILABLE)

			IF (#FAIL_STATUS = #YES) 
				ERROR/TEXT_ONLY/BELL #FAIL_MESSAGE
			END_IF 		
		ELSE
			PERFORM 'GEMLB:LB_S_L_PI_COMMON' ( &
					(#COMPANY_CODE), &
					(#WAREHOUSE), &
					(#PART_CODE), &
					(#NOMI_UOM), &
					(PARAMETER("IC_STATUS_QOH")), &
					(#SYS_SHIPPING_DATE), &
					(#YES), &
					(#NO), &
					(#NO), &
					(""), &
					(""), &
					(""), &
					#FAIL_STATUS, &
					#FAIL_MESSAGE, &
					#NOMI_QTY_AVAILABLE)

			IF (#FAIL_STATUS = #YES) 
				ERROR/TEXT_ONLY/BELL #FAIL_MESSAGE
			END_IF 		

			PERFORM CONVERT_QTYS ( &
				(#WAREHOUSE), &
				(""), &
				(#PART_CODE), &
				(#NOMI_UOM), &
				(#NOMI_QTY_AVAILABLE), &
				(#DISPLAY_UOM),   &
				#QTY_AVAILABLE, &
				#R1)
		END_IF 

	END_BLOCK 

	OUTPUT_BLOCK OUTPUT_1 /ROW=1 /COL=20 /LEN=14 &
			/PROMPT=(FIELD_PROMPT(IC_PRODUCT_STATUS,IC_QTY_AVAILABLE)) &
			/SOURCE=(#QTY_AVAILABLE) &
			/USING=IC_PRODUCT_STATUS(IC_QTY_AVAILABLE) &
			/OUTPUT_MASK=#DISPLAY_MASK

	OUTPUT_BLOCK OUTPUT_3_UOM /ROW=1 /COL=37 /LEN=4 &
			/SOURCE=#DISPLAY_UOM &
			/USING=SALES_ORDER_LINE_QTYS(UNIT_OF_MEASURE)

	OUTPUT_BLOCK SHIPPING_DATE /ROW=2 /COL=20 &
			/PROMPT=(FIELD_PROMPT(SYS_SHIPPING_DATE)) &
			/SOURCE=(#SYS_SHIPPING_DATE) &
			/USING=SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE)

	OUTPUT_BLOCK ALT_PART_CODE /ROW=3 /COL=20 &
			/PROMPT=(MESSAGE("P_02480")) &
			/SOURCE=(PRODUCT_MASTER(PART_CODE_ALT))

	OUTPUT_BLOCK PURCHASE_LEAD_TIME /ROW=3 /COL=56 &
			/PROMPT=(FIELD_PROMPT(PURCHASE_LEAD_TIME)) &
			/SOURCE=(PRODUCT_WAREHOUSE(PURCHASE_LEAD_TIME))

END_FORM


FORM BATCH_CHARACTERISTICS /ROW=15 /COL=2 /HEIGHT=9 /WIDTH=78 &
	/TITLE=(MESSAGE("P_80004"))

	BEGIN_BLOCK DISPLAY
		IF (#SPECIFICATION_CODE = "")
			CLEAR_BUFFER SPECIFICATION_CODES
		ELSE
			FIND IN SPECIFICATION_CODES &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=PART_CODE=#PART_CODE &
				/WITH=SPECIFICATION_CODE=#SPECIFICATION_CODE

			IF (%STATUS <> %SUCCESS) CLEAR_BUFFER SPECIFICATION_CODES
		END_IF

		DISPLAY DEFAULTS
	END_BLOCK

	BEGIN_BLOCK SPECIFICATION_CODE
		IF (#SPEC_CODE_EXISTS = #YES)

		INPUT_BLOCK  /ROW=1 /COL=23 &
			/PROMPT=(FIELD_PROMPT(SPECIFICATION_CODE)) &
			/TARGET=#SPECIFICATION_CODE &
			!Change 014
			/SOURCE=#SPECIFICATION_CODE &
			!Change 014 End
			/USING=SPECIFICATION_CODES(SPECIFICATION_CODE) &
			/LOV=SPECIFICATION_CODES(SPECIFICATION_CODE,CODE_DESCRIPTION) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=PART_CODE=#PART_CODE &
			/USE_IF=(#SPEC_CODE_EXISTS = #YES)

		ELSE
			#SPECIFICATION_CODE = ""
		END_IF
	END_BLOCK

	BEGIN_BLOCK SPECIFICATION_CODE_DESC
		IF (#SPECIFICATION_CODE <> "")

			FIND IN SPECIFICATION_CODES &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=PART_CODE=#PART_CODE &
				/WITH=SPECIFICATION_CODE=#SPECIFICATION_CODE

			IF (%STATUS <> %SUCCESS)
				MESSAGE/IDENTIFIER/BELL/WAIT P_52437,#SPECIFICATION_CODE
				GOTO SPECIFICATION_CODE
			END_IF

		OUTPUT_BLOCK		 /ROW=1 /COL=31 &
			/SOURCE=(SPECIFICATION_CODES(CODE_DESCRIPTION)) &
			/USE_IF=(#SPEC_CODE_EXISTS = #YES)

			IF ((#EDIT_MODE <> "MODIFY") &
			OR  (#PART_CODE <> #OLD_PART_CODE) &
			OR  (#SPECIFICATION_CODE <>	#OLD_SPECIFICATION_CODE))

				!Change 014
				DELETE ALL FROM SOP_ORDER_CHARS_VT
				PERFORM LOAD_DEFAULT_CHARS
				PERFORM VOL_ZERO_ORDER_CHARS
				!Change 014 End

				PERFORM COPY_SPEC
				! Overwrite the stored limit values with the
				! default limit values for the Specification
				! Code.


				!Change 011 - Copy over new Spec Detail to SOL
				SALES_ORDER_LINES(SALES_ORDER_DETAIL_DESCRIPTION) = SPECIFICATION_CODES(DETAIL_DESCRIPTION)

				IF (SALES_ORDER_LINES(SALES_ORDER_DETAIL_DESCRIPTION) <> "")
					#ADD_DESC=#YES
				ELSE
					#ADD_DESC=#NO
				END_IF
				! Change 011 End
				
			END_IF

			SALES_ORDER_LINES(SPECIFICATION_CODE) = #SPECIFICATION_CODE
			#OLD_SPECIFICATION_CODE = #SPECIFICATION_CODE
		END_IF
	END_BLOCK

	!Change 014
	YESNO_BLOCK SHOW_SPEC_CODE /ROW=2 /COL=35 &
		/PROMPT=("View specification code details?") &
		/SUCCESS=(PERFORM SHOW_SPECS(#PART_CODE,#SPECIFICATION_CODE)) &
		/FAILURE=(GOTO CHARS) &

	GOTO SPECIFICATION_CODE
	!Change 014 End
	
	BEGIN_BLOCK CHARS
		PERFORM LOT_CHARACTERISTICS
	END_BLOCK

END_FORM


PROCEDURE_FORM ADD_VIRTUAL_TABLE

	BEGIN_BLOCK SOP_BATCH_BIN_VT
		#A=TABLE_CHECK("SOP_BATCH_BIN_VT","")
		IF (#A=%NORMAL)
			DELETE TABLE SOP_BATCH_BIN_VT
		END_IF

		ADD TABLE SOP_BATCH_BIN_VT &
			/VIRTUAL &
			/DESCRIPTION="Inter-Routine communications table" &
			/ADD_FIELD=IC_LOT_NUMBER &
			/ADD_FIELD=IC_LOT_SEQUENCE &
			/ADD_FIELD=BIN_LOCATION &
			/ADD_FIELD=MOVEMENT_QTY &
			/ADD_FIELD=MH_NUMBER
	END_BLOCK

	BEGIN_BLOCK SOP_ORDER_CHARS_VT
		#A=TABLE_CHECK("SOP_ORDER_CHARS_VT","")
		IF (#A=%NORMAL)
			DELETE TABLE SOP_ORDER_CHARS_VT
		END_IF

		ADD TABLE SOP_ORDER_CHARS_VT &
			/VIRTUAL &
			/DESCRIPTION="Order Line Characteristc Codes" &
			/ADD_FIELD=CHARACTERISTIC_CODE &
			/ADD_FIELD=IC_HIGH_LIMIT_NUMERIC &
			/ADD_FIELD=IC_HIGH_LIMIT_TEXT &
			/ADD_FIELD=IC_LOW_LIMIT_NUMERIC &
			!Change 010
			!/ADD_FIELD=IC_LOW_LIMIT_TEXT
			/ADD_FIELD=IC_LOW_LIMIT_TEXT &
			/ADD_FIELD=SORT_ORDER
			!Change 010 End

	END_BLOCK

END_FORM


FORM CLEAR_ADDRESS /ROW=(9) /COL=(7) /HEIGHT=6 /WIDTH=40 &
	/REMAIN &
	/ATTRIBUTES=NOBORDER

END_FORM


PROCEDURE_FORM LOAD_TAX_VT (#IN_TAX_TYPE) &
	/TABLE=SALES_ORDER_TAX_DETAILS &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION=#DIVISION &
	/WITH=ORDER_NUMBER=#ORDER_NUMBER &
	/WITH=ORDER_LINE_NUMBER=#ORDER_LINE &
	/WITH=TAX_TYPE=#IN_TAX_TYPE


	BEGIN_BLOCK WRITE_RECORDS
		CLEAR_BUFFER TAX_TRANSACTIONS_VT

		TAX_TRANSACTIONS_VT(TRANSACTION_LINE_NUMBER)		 = SALES_ORDER_TAX_DETAILS(TRANSACTION_LINE_NUMBER)
		TAX_TRANSACTIONS_VT(CUSTOMER_TAX_CODE)	  = SALES_ORDER_TAX_DETAILS(CUSTOMER_TAX_CODE)
		TAX_TRANSACTIONS_VT(PRODUCT_TAX_CODE)	   = SALES_ORDER_TAX_DETAILS(PRODUCT_TAX_CODE)
		TAX_TRANSACTIONS_VT(SYS_TRAN_TOTAL_CURRENCY)		 = SALES_ORDER_TAX_DETAILS(SYS_TRAN_TOTAL_CURRENCY)
		TAX_TRANSACTIONS_VT(TAX)			= SALES_ORDER_TAX_DETAILS(TAX)
		TAX_TRANSACTIONS_VT(WAREHOUSE)		  = SALES_ORDER_TAX_DETAILS(WAREHOUSE)
		TAX_TRANSACTIONS_VT(PART_CODE)		  = SALES_ORDER_TAX_DETAILS(PART_CODE)
		TAX_TRANSACTIONS_VT(AR_TAX_FULL_ACCOUNT)	= SALES_ORDER_TAX_DETAILS(AR_TAX_FULL_ACCOUNT)
		TAX_TRANSACTIONS_VT(AR_TAX_CODE)		= SALES_ORDER_TAX_DETAILS(AR_TAX_CODE)
		TAX_TRANSACTIONS_VT(AR_POSTING_FORMAT)	  = SALES_ORDER_TAX_DETAILS(AR_POSTING_FORMAT)

		ADD TO TAX_TRANSACTIONS_VT
	END_BLOCK

END_FORM


PROCEDURE_FORM DELETE_PREVIOUS_TAX_RECORDS (#IN_TAX_TYPE) &
	/TABLE=SALES_ORDER_TAX_DETAILS &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION=#DIVISION &
	/WITH=ORDER_NUMBER=#ORDER_NUMBER &
	/WITH=ORDER_LINE_NUMBER=#ORDER_LINE &
	/WITH=TAX_TYPE=#IN_TAX_TYPE


	BEGIN_BLOCK DELETE_IT
		DELETE FROM SALES_ORDER_TAX_DETAILS
	END_BLOCK

END_FORM


PROCEDURE_FORM CREATE_TAX_DETAIL_FROM_VT (#IN_TAX_TYPE) &
	/TABLE=TAX_TRANSACTIONS_VT

	BEGIN_BLOCK WRITE_RECORDS
		CLEAR_BUFFER SALES_ORDER_TAX_DETAILS

		SALES_ORDER_TAX_DETAILS(COMPANY_CODE) = #COMPANY_CODE
		SALES_ORDER_TAX_DETAILS(DIVISION)	  = #DIVISION
		SALES_ORDER_TAX_DETAILS(ORDER_NUMBER) = #ORDER_NUMBER
		SALES_ORDER_TAX_DETAILS(ORDER_LINE_NUMBER) = #ORDER_LINE
		SALES_ORDER_TAX_DETAILS(TAX_TYPE)	  = #IN_TAX_TYPE
		SALES_ORDER_TAX_DETAILS(TRANSACTION_LINE_NUMBER) = TAX_TRANSACTIONS_VT(TRANSACTION_LINE_NUMBER)
		SALES_ORDER_TAX_DETAILS(AR_TAX_FULL_ACCOUNT) = TAX_TRANSACTIONS_VT(AR_TAX_FULL_ACCOUNT)
		SALES_ORDER_TAX_DETAILS(AR_TAX_CODE) = TAX_TRANSACTIONS_VT(AR_TAX_CODE)
		SALES_ORDER_TAX_DETAILS(AR_POSTING_FORMAT) = TAX_TRANSACTIONS_VT(AR_POSTING_FORMAT)

		SALES_ORDER_TAX_DETAILS(CUSTOMER_TAX_CODE) = TAX_TRANSACTIONS_VT(CUSTOMER_TAX_CODE)
		SALES_ORDER_TAX_DETAILS(PRODUCT_TAX_CODE) = TAX_TRANSACTIONS_VT(PRODUCT_TAX_CODE)
		SALES_ORDER_TAX_DETAILS(SYS_TRAN_TOTAL_CURRENCY) = TAX_TRANSACTIONS_VT(SYS_TRAN_TOTAL_CURRENCY)
		IF (TAX_TRANSACTIONS_VT(TAX_ADJUST) > 0.0)
			SALES_ORDER_TAX_DETAILS(TAX) = TAX_TRANSACTIONS_VT(TAX_ADJUST)
		ELSE
			SALES_ORDER_TAX_DETAILS(TAX) = TAX_TRANSACTIONS_VT(TAX)
		END_IF
		SALES_ORDER_TAX_DETAILS(WAREHOUSE)=TAX_TRANSACTIONS_VT(WAREHOUSE)
		SALES_ORDER_TAX_DETAILS(PART_CODE)=TAX_TRANSACTIONS_VT(PART_CODE)
		SALES_ORDER_TAX_DETAILS(SYS_TAX_ON_CASH)=TAX_TRANSACTIONS_VT(SYS_TAX_ON_CASH)

		ADD TO SALES_ORDER_TAX_DETAILS
	END_BLOCK

END_FORM


PROCEDURE_FORM DELETE_ANY_PROMISES (#SEQ_IN)

	BEGIN_BLOCK DELETE_PROMISE

		PERFORM "GEMLB:LB_L_ATP_AUTO" DELETE_PROMISES (#DIVISION, &
							#ORDER_NUMBER, &
							SALES_ORDER_LINES(ORDER_LINE_NUMBER), &
							#SEQ_IN)

		EXIT (%STATUS)
	END_BLOCK
END_FORM


PROCEDURE_FORM CHECK_FOR_QTY_PROCESSED &
	/TABLE=SALES_ORDER_LINE_QTYS &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION=#DIVISION &
	/WITH=ORDER_NUMBER=#ORDER_NUMBER &
	/WITH = UNIT_OF_MEASURE = SALES_ORDER_LINES(UNIT_SALES) &
	/STATISTIC=#QTY_PROCESSED=TOTAL(SALES_ORDER_LINE_QTYS(ORDER_QUANTITY_PROCESSED))

END_FORM


PROCEDURE_FORM CHANGE_CURRENCY_ON_LINES &
	/TABLE=SALES_ORDER_LINES &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION=#DIVISION &
	/WITH=ORDER_NUMBER=#ORDER_NUMBER

	BEGIN_BLOCK CHANGE_CURRENCY
		SALES_ORDER_LINES(SYS_CURRENCY_CODE)	 = #CURRENCY_CODE
		SALES_ORDER_LINES(SYS_CURRENCY_RATE)	 = #CURRENCY_RATE
		SALES_ORDER_LINES(SYS_CURRENCY_DATE)	 = #CURRENCY_DATE
		SALES_ORDER_LINES(SYS_CURRENCY_FIXED_FLAG) = #CURRENCY_FIXED
		SALES_ORDER_LINES(SYS_CURRENCY_RATIO_INDIC)= #CURRENCY_RATIO_INDIC
		SALES_ORDER_LINES(SYS_RATE_AUTHORITY)	= #RATE_AUTHORITY
		SALES_ORDER_LINES(SYS_RATE_TYPE)		= #RATE_TYPE
	END_BLOCK

	BEGIN_BLOCK CHANGE_OF_RATE
		! Recalculate the value in base currency
		DELETE ALL FROM SYS_CURRENCY_VALUES_VT
		SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE)	= SALES_ORDER_LINES(SOP_ORDER_TOTAL_CURRENCY)
		ADD TO SYS_CURRENCY_VALUES_VT
		PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
		IF (#R_STATUS <> #YES)
			ERROR/WAIT #R_MESSAGE
			EXIT (%FAILURE)
		END_IF
		FIND IN SYS_CURRENCY_VALUES_VT
		SALES_ORDER_LINES(SOP_ORDER_TOTAL_BASE)	= SYS_CURRENCY_VALUES_VT(BASE_VALUE)
		SALES_ORDER_LINES(SOP_ORDER_TOTAL_2_BASE)	= SYS_CURRENCY_VALUES_VT(BASE_2_VALUE)
	END_BLOCK
END_FORM


PROCEDURE_FORM GET_HOME_STATE

	BEGIN_BLOCK GET_STATE
		FIND IN CORPORATE_ADDRESSES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=ADDRESS_CODE=AR_CONTROLS(SYS_EC_ADDRESS_CODE)

		IF (%STATUS=%FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_02501
			EXIT	    (%FAILURE)
		ELSE
			#CORPORATE_ADDRESS_CODE = AR_CONTROLS(SYS_EC_ADDRESS_CODE)
			FIND IN SYS_COUNTRIES &
				/LOCK=NONE &
				/WITH=SYS_COUNTRY=CORPORATE_ADDRESSES(SYS_COUNTRY)

			IF (%STATUS=%FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_12202,CORPORATE_ADDRESSES(SYS_COUNTRY)
				EXIT (%FAILURE)
			ELSE
				IF (SYS_COUNTRIES(SYS_EC_MEMBER) <> #YES)
					#COMPANY_EC_REPORT_TYPE = ""
				ELSE
					#EC_DIVISION_MEMBER = SYS_COUNTRIES(SYS_EC_MEMBER_STATE_CODE)
				END_IF
			END_IF
		END_IF
	END_BLOCK

END_FORM


PROCEDURE_FORM GET_DIST_ZONE_DETAILS (#IN_COUNTRY, #IN_DIST_ZONE)

	BEGIN_BLOCK CHECK_DIST_ZONE
		! A CUSTOMER_ADDRESSES record must be in the buffer
		! which is for a header or line delivery address.

		#ADDR_DIST_BOD_CODE = ""

		IF ((#IN_COUNTRY = "") OR (#IN_DIST_ZONE = ""))
			EXIT(%FAILURE)
		END_IF
	END_BLOCK

	BEGIN_BLOCK GET_DIST_ZONE
		FIND IN SYS_DISTRIBUTION_ZONES &
			/WITH=COMPANY_CODE = SALES_ORDER_HEADERS(COMPANY_CODE) &
			/WITH=SYS_COUNTRY = #IN_COUNTRY &
			/WITH=SYS_DISTRIBUTION_ZONE = #IN_DIST_ZONE

		! Don't use lock=none in case distribution zone was added in
		! the prior transaction as part of customer address maintenance.

		IF (%STATUS = %FAILURE)
			EXIT(%FAILURE)
		END_IF

		#ADDR_DIST_BOD_CODE = SYS_DISTRIBUTION_ZONES(SYS_BOD_CODE)
	END_BLOCK

END_FORM


PROCEDURE_FORM GET_CUSTOMER_STATE

	BEGIN_BLOCK FIND_AND_SET
		FIND IN SYS_COUNTRIES &
			/LOCK=NONE &
			/WITH=SYS_COUNTRY=CUSTOMER_ADDRESSES(SYS_COUNTRY)

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_12202,CUSTOMER_ADDRESSES(SYS_COUNTRY)
			EXIT (%FAILURE)
		ELSE
			IF (SYS_COUNTRIES(SYS_EC_MEMBER) = #YES AND &
				SYS_COUNTRIES(SYS_EC_MEMBER_STATE_CODE) <> #EC_DIVISION_MEMBER)
				#EC_REPORT_TYPE = #COMPANY_EC_REPORT_TYPE
			ELSE
				#EC_REPORT_TYPE = ""
			END_IF
		END_IF
	END_BLOCK

END_FORM


PROCEDURE_FORM CLEAR_EC_VARIABLES

	BEGIN_BLOCK CLEAR_EC
		#EC_PROCESSED_INDICATOR = ""
		#EC_TARIFF_CODE = ""
		#EC_COUNTRY_OF_ORIGIN = ""
		#EC_SUPP_UNIT_QTY = ""
		#EC_WEIGHT = ""
		#EC_TRANSACTION_TYPE = ""
		#EC_MODE_TRANSPORT = ""
		#EC_DELIVERY_TERMS = ""
		#EC_STAT_FACTOR = ""
		#EC_STATISTICAL_VALUE = ""
		#EC_ANALYSIS_1 = ""
		#EC_ANALYSIS_2 = ""
		#EC_ANALYSIS_3 = ""
		#EC_ANALYSIS_4 = ""
		#EC_ANALYSIS_5 = ""

	END_BLOCK

END_FORM


PROCEDURE_FORM UPDATE_CHARS_1 &
	/LOCK=NONE &
	/TABLE=SOP_ORDER_CHARS_VT

	BEGIN_BLOCK ADD_RECORD

		FIND IN SOP_CHARACTERISTIC_LIMITS &
			/LOCK=WRITE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=DIVISION = #DIVISION &
			/WITH=ORDER_NUMBER = SALES_ORDER_LINES(ORDER_NUMBER) &
			/WITH=ORDER_LINE_NUMBER = SALES_ORDER_LINES(ORDER_LINE_NUMBER) &
			/WITH=CHARACTERISTIC_CODE = SOP_ORDER_CHARS_VT(CHARACTERISTIC_CODE)

		IF (%STATUS <> %SUCCESS)
			CLEAR_BUFFER SOP_CHARACTERISTIC_LIMITS

			SOP_CHARACTERISTIC_LIMITS(COMPANY_CODE) = #COMPANY_CODE
			SOP_CHARACTERISTIC_LIMITS(DIVISION) = #DIVISION
			SOP_CHARACTERISTIC_LIMITS(ORDER_NUMBER) = SALES_ORDER_LINES(ORDER_NUMBER)
			SOP_CHARACTERISTIC_LIMITS(ORDER_LINE_NUMBER) = SALES_ORDER_LINES(ORDER_LINE_NUMBER)
			SOP_CHARACTERISTIC_LIMITS(CHARACTERISTIC_CODE) = SOP_ORDER_CHARS_VT(CHARACTERISTIC_CODE)
			SOP_CHARACTERISTIC_LIMITS(IC_HIGH_LIMIT_NUMERIC) = SOP_ORDER_CHARS_VT(IC_HIGH_LIMIT_NUMERIC)
			SOP_CHARACTERISTIC_LIMITS(IC_HIGH_LIMIT_TEXT) = SOP_ORDER_CHARS_VT(IC_HIGH_LIMIT_TEXT)
			SOP_CHARACTERISTIC_LIMITS(IC_LOW_LIMIT_NUMERIC) = SOP_ORDER_CHARS_VT(IC_LOW_LIMIT_NUMERIC)
			SOP_CHARACTERISTIC_LIMITS(IC_LOW_LIMIT_TEXT) = SOP_ORDER_CHARS_VT(IC_LOW_LIMIT_TEXT)
			!Change 010
			SOP_CHARACTERISTIC_LIMITS(VOL_SORT_ORDER) = SOP_ORDER_CHARS_VT(SORT_ORDER)
			!Change 010 End
			
			ADD TO SOP_CHARACTERISTIC_LIMITS
		ELSE
			SOP_CHARACTERISTIC_LIMITS(IC_HIGH_LIMIT_NUMERIC) = SOP_ORDER_CHARS_VT(IC_HIGH_LIMIT_NUMERIC)
			SOP_CHARACTERISTIC_LIMITS(IC_HIGH_LIMIT_TEXT) = SOP_ORDER_CHARS_VT(IC_HIGH_LIMIT_TEXT)
			SOP_CHARACTERISTIC_LIMITS(IC_LOW_LIMIT_NUMERIC) = SOP_ORDER_CHARS_VT(IC_LOW_LIMIT_NUMERIC)
			SOP_CHARACTERISTIC_LIMITS(IC_LOW_LIMIT_TEXT) = SOP_ORDER_CHARS_VT(IC_LOW_LIMIT_TEXT)
			!Change 010
			SOP_CHARACTERISTIC_LIMITS(VOL_SORT_ORDER) = SOP_ORDER_CHARS_VT(SORT_ORDER)
			!Change 010 End
			
		END_IF
	END_BLOCK

END_FORM


PROCEDURE_FORM UPDATE_CHARS_2 &
	/LOCK=WRITE &
	/TABLE=SOP_CHARACTERISTIC_LIMITS &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION=#DIVISION &
	/WITH=ORDER_NUMBER=SALES_ORDER_LINES(ORDER_NUMBER) &
	/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER) &

	BEGIN_BLOCK CHECK_FOR_DELETION

		FIND IN SOP_ORDER_CHARS_VT &
			/LOCK=NONE &
			/WITH=CHARACTERISTIC_CODE = SOP_CHARACTERISTIC_LIMITS(CHARACTERISTIC_CODE)

		IF (%STATUS <> %SUCCESS)

			DELETE FROM SOP_CHARACTERISTIC_LIMITS

		END_IF
	END_BLOCK

END_FORM


TABLE_FORM LOT_CHARACTERISTICS /ROW=15 /COL=2 /HEIGHT=9 /WIDTH=78 &
	/LOCK=WRITE &
	/TITLE=(MESSAGE("P_82941")) &
	/TABLE=SOP_ORDER_CHARS_VT &
	/DELETE_FORM=DELETE_LOT_CHARACTERISTICS &
	!Change 010
	!/SORTED_BY=(CHARACTERISTIC_CODE)
	/SORTED_BY=(SORT_ORDER,CHARACTERISTIC_CODE)
	!Change 010 End

	BEGIN_BLOCK  /DISPLAY_ONLY GET_PRODUCT_CHARS
		FIND IN IC_PRODUCT_CHARACTERISTICS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PART_CODE=#PART_CODE &
			/WITH=CHARACTERISTIC_CODE=SOP_ORDER_CHARS_VT(CHARACTERISTIC_CODE)

		FIND IN CHARACTERISTIC_CODES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=CHARACTERISTIC_CODE=SOP_ORDER_CHARS_VT(CHARACTERISTIC_CODE)

	END_BLOCK

	BEGIN_BLOCK /DISPLAY_ONLY MANDATORY_SPEC_DISPLAY
		IF ((#SPECIFICATION_CODE <> "") &
			AND (#SPEC_CODE_EXISTS = #YES) &
			AND (#SPEC_CODE_MANDATORY = #YES))

			FIND IN IC_SPECIFICATION_LIMITS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=PART_CODE=#PART_CODE &
				/WITH=SPECIFICATION_CODE=#SPECIFICATION_CODE &
				/WITH=CHARACTERISTIC_CODE=SOP_ORDER_CHARS_VT(CHARACTERISTIC_CODE)

			IF (%STATUS = %SUCCESS)
				#MANDATORY_SPEC_CHAR = "*"
			ELSE
				#MANDATORY_SPEC_CHAR = ""
			END_IF
		ELSE
			#MANDATORY_SPEC_CHAR = ""
		END_IF
	END_BLOCK

	BEGIN_BLOCK MANDATORY_SPEC_CHARACTERISTIC
		IF ((#SPECIFICATION_CODE <> "") &
			AND (#SPEC_CODE_EXISTS = #YES) &
			AND (#SPEC_CODE_MANDATORY = #YES))

			FIND IN IC_SPECIFICATION_LIMITS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=PART_CODE=#PART_CODE &
				/WITH=SPECIFICATION_CODE=#SPECIFICATION_CODE &
				/WITH=CHARACTERISTIC_CODE=SOP_ORDER_CHARS_VT(CHARACTERISTIC_CODE)

			IF (%STATUS = %SUCCESS)
				MESSAGE/IDENTIFIER/BELL/WAIT P_56201,#SPECIFICATION_CODE
				GOTO LAST
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK GET_CHAR_CODE
		IF (%EDIT_MODE = %ADD)
			INPUT_BLOCK /ROW=1 /COL=2 /NEW &
				/TARGET=SOP_ORDER_CHARS_VT(CHARACTERISTIC_CODE) &
				/LHEADING=FIELD_HEADING(CHARACTERISTIC_CODE) &
				/LOV=IC_PRODUCT_CHARACTERISTICS(CHARACTERISTIC_CODE) &
				/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
				/LOV_WITH=PART_CODE=#PART_CODE	&
				/LOV_WITH=IC_CHARACTERISTIC_TYPE = PARAMETER("MP_CHARACTERISTIC_TYPE_LOT")

			FIND IN IC_PRODUCT_CHARACTERISTICS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=PART_CODE=#PART_CODE &
				/WITH=CHARACTERISTIC_CODE=SOP_ORDER_CHARS_VT(CHARACTERISTIC_CODE)	&
				/WITH=IC_CHARACTERISTIC_TYPE = PARAMETER("MP_CHARACTERISTIC_TYPE_LOT")
			IF (%STATUS <> %SUCCESS)
				MESSAGE/IDENTIFIER/BELL/WAIT P_42021
				GOTO GET_CHAR_CODE
			END_IF

			FIND IN CHARACTERISTIC_CODES &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=CHARACTERISTIC_CODE=SOP_ORDER_CHARS_VT(CHARACTERISTIC_CODE)
			IF (%STATUS <> %SUCCESS)
				MESSAGE/IDENTIFIER/BELL/WAIT P_42021
				GOTO GET_CHAR_CODE
			END_IF

		ELSE
	END_BLOCK

	BEGIN_BLOCK CHARACTERISTIC_CODE

			OUTPUT_BLOCK /ROW=1 /COL=2 &
				/SOURCE=(SOP_ORDER_CHARS_VT(CHARACTERISTIC_CODE)) &
				/LHEADING=FIELD_HEADING(CHARACTERISTIC_CODE)
		END_IF
	END_BLOCK

	OUTPUT_BLOCK CHAR_DESC /ROW=1 /COL=10 &
			/SOURCE=(CHARACTERISTIC_CODES(DESCRIPTION)) &
			/LHEADING=FIELD_HEADING(DESCRIPTION)

	BEGIN_BLOCK LOW_LIMIT_NUMERIC
		!Change 015
		!IF (CHARACTERISTIC_CODES(IC_DATATYPE_INDICATOR) &
		!	= (PARAMETER("IC_CHARACTERISTIC_NUMERIC")))
		IF (CHARACTERISTIC_CODES(IC_DATATYPE_INDICATOR)	= (PARAMETER("IC_CHARACTERISTIC_NUMERIC")) &
			AND CHARACTERISTIC_CODES(VOL_CHAR_VALUE_TYPE) = "R")
		!Change 015 End		

		INPUT_BLOCK  /ROW=1 /COL=41 &
			/TARGET=SOP_ORDER_CHARS_VT(IC_LOW_LIMIT_NUMERIC) &
			/RHEADING=FIELD_HEADING(IC_LOW_LIMIT_NUMERIC) &
			!Change 015
			!/USE_IF=(CHARACTERISTIC_CODES(IC_DATATYPE_INDICATOR) = (PARAMETER("IC_CHARACTERISTIC_NUMERIC")))
			/USE_IF=(CHARACTERISTIC_CODES(IC_DATATYPE_INDICATOR) = (PARAMETER("IC_CHARACTERISTIC_NUMERIC")) &
				AND CHARACTERISTIC_CODES(VOL_CHAR_VALUE_TYPE) = "R")
			!Change 015 End

		END_IF
	END_BLOCK

	BEGIN_BLOCK LOW_LIMIT_TEXT
		!Change 015 - Add in code for single value Text Chars
		!IF (CHARACTERISTIC_CODES(IC_DATATYPE_INDICATOR) &
		!	= (PARAMETER("IC_CHARACTERISTIC_TEXT")))
		IF (CHARACTERISTIC_CODES(IC_DATATYPE_INDICATOR) = (PARAMETER("IC_CHARACTERISTIC_TEXT")) &
			AND CHARACTERISTIC_CODES(VOL_CHAR_VALUE_TYPE) = "R" &
			AND CHARACTERISTIC_CODES(VOL_SINGLE_VALUE_LOV_FLAG) = "N")
		!Change 015 End

		INPUT_BLOCK  /ROW=1 /COL=41 &
			/TARGET=SOP_ORDER_CHARS_VT(IC_LOW_LIMIT_TEXT) &
			/RHEADING=FIELD_HEADING(IC_LOW_LIMIT_TEXT) &
			!Change 015
			!/USE_IF=(CHARACTERISTIC_CODES(IC_DATATYPE_INDICATOR)	   = (PARAMETER("IC_CHARACTERISTIC_TEXT"))) 
			/USE_IF=(CHARACTERISTIC_CODES(IC_DATATYPE_INDICATOR)	   = (PARAMETER("IC_CHARACTERISTIC_TEXT")) &
						AND CHARACTERISTIC_CODES(VOL_CHAR_VALUE_TYPE) = "R" &
						AND CHARACTERISTIC_CODES(VOL_SINGLE_VALUE_LOV_FLAG) = "N")
			!Change 015 End
		
		END_IF
	END_BLOCK

!Change 015
	BEGIN_BLOCK LOW_LIMIT_TEXT_LOV

		IF (CHARACTERISTIC_CODES(IC_DATATYPE_INDICATOR) = (PARAMETER("IC_CHARACTERISTIC_TEXT")) &
			AND CHARACTERISTIC_CODES(VOL_CHAR_VALUE_TYPE) = "R" &
			AND CHARACTERISTIC_CODES(VOL_SINGLE_VALUE_LOV_FLAG) = "Y")

			INPUT_BLOCK  /ROW=1 /COL=41 &
				/TARGET=SOP_ORDER_CHARS_VT(IC_LOW_LIMIT_TEXT) &
				/RHEADING=FIELD_HEADING(IC_LOW_LIMIT_TEXT) &
				/LOV=VOL_CHARACTERISTIC_CODE_VALUES(VOL_CHARACTERISTIC_VALUE,VOL_CHARACTERISTIC_VALUE_DESC) &
				/LOV_WITH=COMPANY_CODE = #COMPANY_CODE &
				/LOV_WITH=CHARACTERISTIC_CODE = SOP_ORDER_CHARS_VT(CHARACTERISTIC_CODE) &
				/LOV_WITH=STATUS_FLAG = (PARAMETER("STATUS_ACTIVE")) &
				/USE_IF=(CHARACTERISTIC_CODES(IC_DATATYPE_INDICATOR) = (PARAMETER("IC_CHARACTERISTIC_TEXT")) &
						AND CHARACTERISTIC_CODES(VOL_CHAR_VALUE_TYPE) = "R" &
						AND CHARACTERISTIC_CODES(VOL_SINGLE_VALUE_LOV_FLAG) = "Y")

			FIND IN VOL_CHARACTERISTIC_CODE_VALUES &
				/LOCK=NONE &
				/WITH=COMPANY_CODE = #COMPANY_CODE &
				/WITH=CHARACTERISTIC_CODE = SOP_ORDER_CHARS_VT(CHARACTERISTIC_CODE) &
				/WITH=VOL_CHARACTERISTIC_VALUE = SOP_ORDER_CHARS_VT(IC_LOW_LIMIT_TEXT) &
				/WITH=STATUS_FLAG = (PARAMETER("STATUS_ACTIVE")) &

			IF ( %STATUS = %FAILURE )
				MESSAGE/IDENTIFIER/BELL/WAIT VOL_1004
				GOTO LOW_LIMIT_TEXT_LOV
			END_IF
		END_IF
	END_BLOCK
!Change 015 End
		
		
	BEGIN_BLOCK HIGH_LIMIT_NUMERIC
		IF (CHARACTERISTIC_CODES(IC_DATATYPE_INDICATOR) &
			= (PARAMETER("IC_CHARACTERISTIC_NUMERIC")))

		INPUT_BLOCK  /ROW=1 /COL=52 &
			/TARGET=SOP_ORDER_CHARS_VT(IC_HIGH_LIMIT_NUMERIC) &
			/RHEADING=FIELD_HEADING(IC_HIGH_LIMIT_NUMERIC) &
			/USE_IF=(CHARACTERISTIC_CODES(IC_DATATYPE_INDICATOR)	= (PARAMETER("IC_CHARACTERISTIC_NUMERIC")))

			!Change 015 
			IF ( CHARACTERISTIC_CODES(VOL_CHAR_VALUE_TYPE) = "S" )
				SOP_ORDER_CHARS_VT(IC_LOW_LIMIT_NUMERIC) = SOP_ORDER_CHARS_VT(IC_HIGH_LIMIT_NUMERIC)
			END_IF
			!Change 015 End
		END_IF
	END_BLOCK

	BEGIN_BLOCK HIGH_LIMIT_TEXT

!Change 015
		IF (CHARACTERISTIC_CODES(IC_DATATYPE_INDICATOR) = (PARAMETER("IC_CHARACTERISTIC_TEXT")) &
			AND CHARACTERISTIC_CODES(VOL_SINGLE_VALUE_LOV_FLAG) = "N")

			INPUT_BLOCK  /ROW=1 /COL=52 &
				/TARGET=SOP_ORDER_CHARS_VT(IC_HIGH_LIMIT_TEXT) &
				/RHEADING=FIELD_HEADING(IC_HIGH_LIMIT_TEXT) &
				/USE_IF=(CHARACTERISTIC_CODES(IC_DATATYPE_INDICATOR) = (PARAMETER("IC_CHARACTERISTIC_TEXT")) &
						AND CHARACTERISTIC_CODES(VOL_SINGLE_VALUE_LOV_FLAG) = "N")

		END_IF
	END_BLOCK

	BEGIN_BLOCK HIGH_LIMIT_TEXT_LOV
		#SPEC_CHAR_CODE = POS((PARAMETER("VOL_SPEC_CODE_CHARS")),SOP_ORDER_CHARS_VT(CHARACTERISTIC_CODE),1)

		IF ( #SPEC_CHAR_CODE ) 
		
			#CHAR_CODE_PREFIX = LEFT(SOP_ORDER_CHARS_VT(CHARACTERISTIC_CODE),3)
			#COMPONENT_PART_CHAR = #CHAR_CODE_PREFIX & "COA"

			FIND IN IC_PRODUCT_CHARACTERISTICS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE = #COMPANY_CODE &
				/WITH=PART_CODE = #PART_CODE &
				/WITH=CHARACTERISTIC_CODE = #COMPONENT_PART_CHAR

			#COMPONENT_PART_CODE = IC_PRODUCT_CHARACTERISTICS(IC_DEF_CHAR_TEXT)

		END_IF 

		!Change 015
		!IF (CHARACTERISTIC_CODES(IC_DATATYPE_INDICATOR) &
		!	= (PARAMETER("IC_CHARACTERISTIC_TEXT")))
		IF (CHARACTERISTIC_CODES(IC_DATATYPE_INDICATOR) = (PARAMETER("IC_CHARACTERISTIC_TEXT")) &
			AND CHARACTERISTIC_CODES(VOL_SINGLE_VALUE_LOV_FLAG) = "Y" AND NOT(#SPEC_CHAR_CODE))

		!Change 015
		!INPUT_BLOCK  /ROW=1 /COL=52 &
		!	/TARGET=SOP_ORDER_CHARS_VT(IC_HIGH_LIMIT_TEXT) &
		!	/RHEADING=FIELD_HEADING(IC_HIGH_LIMIT_TEXT) &
		!	/USE_IF=(CHARACTERISTIC_CODES(IC_DATATYPE_INDICATOR) = (PARAMETER("IC_CHARACTERISTIC_TEXT")))

			INPUT_BLOCK  /ROW=1 /COL=52 &
				/TARGET=SOP_ORDER_CHARS_VT(IC_HIGH_LIMIT_TEXT) &
				/RHEADING=FIELD_HEADING(IC_HIGH_LIMIT_TEXT) &
				/LOV=VOL_CHARACTERISTIC_CODE_VALUES(VOL_CHARACTERISTIC_VALUE,VOL_CHARACTERISTIC_VALUE_DESC) &
				/LOV_WITH=COMPANY_CODE = #COMPANY_CODE &
				/LOV_WITH=CHARACTERISTIC_CODE = SOP_ORDER_CHARS_VT(CHARACTERISTIC_CODE) &
				/LOV_WITH=STATUS_FLAG = (PARAMETER("STATUS_ACTIVE")) &
				/USE_IF=(CHARACTERISTIC_CODES(IC_DATATYPE_INDICATOR) = (PARAMETER("IC_CHARACTERISTIC_TEXT")) &
						AND CHARACTERISTIC_CODES(VOL_SINGLE_VALUE_LOV_FLAG) = "Y" AND NOT(#SPEC_CHAR_CODE))

			FIND IN VOL_CHARACTERISTIC_CODE_VALUES &
				/LOCK=NONE &
				/WITH=COMPANY_CODE = #COMPANY_CODE &
				/WITH=CHARACTERISTIC_CODE = SOP_ORDER_CHARS_VT(CHARACTERISTIC_CODE) &
				/WITH=VOL_CHARACTERISTIC_VALUE = SOP_ORDER_CHARS_VT(IC_HIGH_LIMIT_TEXT) &
				/WITH=STATUS_FLAG = (PARAMETER("STATUS_ACTIVE")) &

			IF ( %STATUS = %FAILURE )
				MESSAGE/IDENTIFIER/BELL/WAIT VOL_1004
				GOTO HIGH_LIMIT_TEXT_LOV
			END_IF

			IF ( CHARACTERISTIC_CODES(VOL_CHAR_VALUE_TYPE) = "S" )
				SOP_ORDER_CHARS_VT(IC_LOW_LIMIT_TEXT) = SOP_ORDER_CHARS_VT(IC_HIGH_LIMIT_TEXT)
			END_IF

		END_IF
	END_BLOCK

!Change 015 Continued
	BEGIN_BLOCK HIGH_LIMIT_TEXT_SPEC_CODE_LOV
	
		IF (CHARACTERISTIC_CODES(IC_DATATYPE_INDICATOR) = (PARAMETER("IC_CHARACTERISTIC_TEXT")) &
			AND CHARACTERISTIC_CODES(VOL_SINGLE_VALUE_LOV_FLAG) = "Y" AND #SPEC_CHAR_CODE)

			INPUT_BLOCK  /ROW=1 /COL=52 &
				/TARGET=SOP_ORDER_CHARS_VT(IC_HIGH_LIMIT_TEXT) &
				/RHEADING=FIELD_HEADING(IC_LOW_LIMIT_TEXT) &
				/LOV=SPECIFICATION_CODES(SPECIFICATION_CODE,CODE_DESCRIPTION) &
				/LOV_WITH=COMPANY_CODE = #COMPANY_CODE &
				/LOV_WITH=PART_CODE = #COMPONENT_PART_CODE &
				/USE_IF=(CHARACTERISTIC_CODES(IC_DATATYPE_INDICATOR) = (PARAMETER("IC_CHARACTERISTIC_TEXT")) &
						AND CHARACTERISTIC_CODES(VOL_SINGLE_VALUE_LOV_FLAG) = "Y" AND #SPEC_CHAR_CODE)

			FIND IN SPECIFICATION_CODES &
				/LOCK=NONE &
				/WITH=COMPANY_CODE = #COMPANY_CODE &
				/WITH=PART_CODE = #COMPONENT_PART_CODE &
				/WITH=SPECIFICATION_CODE = SOP_ORDER_CHARS_VT(IC_HIGH_LIMIT_TEXT)

			IF ( %STATUS = %FAILURE )
				MESSAGE/IDENTIFIER/BELL/WAIT VOL_1004
				GOTO HIGH_LIMIT_TEXT_SPEC_CODE_LOV
			END_IF

			IF ( CHARACTERISTIC_CODES(VOL_CHAR_VALUE_TYPE) = "S" )
				SOP_ORDER_CHARS_VT(IC_LOW_LIMIT_TEXT) = SOP_ORDER_CHARS_VT(IC_HIGH_LIMIT_TEXT)
			END_IF
		END_IF
		
	END_BLOCK 
!Change 015 End


	OUTPUT_BLOCK UNIT_CHAR /ROW=1 /COL=63 &
			/SOURCE=(IC_PRODUCT_CHARACTERISTICS(UNIT_CHAR)) &
			/LHEADING=FIELD_HEADING(UNIT_CHAR)

	OUTPUT_BLOCK MANDATORY_SPEC_CHAR /ROW=1 /COL=69 /LEN=1 &
			/SOURCE=#MANDATORY_SPEC_CHAR &
			/HEADING=FIELD_HEADING(MANDATORY_SPECIFICATION) &
			/USE_IF=(#SPEC_CODE_MANDATORY = #YES)

	BEGIN_BLOCK LAST
	END_BLOCK
END_FORM


PROCEDURE_FORM DELETE_LOT_CHARACTERISTICS 
	BEGIN_BLOCK CHECK_DELETE 
		IF ((#SPECIFICATION_CODE <> "") &
			AND (#SPEC_CODE_EXISTS = #YES) &
			AND (#SPEC_CODE_MANDATORY = #YES))

			FIND IN IC_SPECIFICATION_LIMITS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=PART_CODE=#PART_CODE &
				/WITH=SPECIFICATION_CODE=#SPECIFICATION_CODE &
				/WITH=CHARACTERISTIC_CODE=SOP_ORDER_CHARS_VT(CHARACTERISTIC_CODE)

			IF (%STATUS = %SUCCESS)
				MESSAGE/IDENTIFIER/BELL/WAIT P_56201,#SPECIFICATION_CODE
				EXIT
			ELSE
			END_IF
		END_IF 
	END_BLOCK
END_FORM


PROCEDURE_FORM COPY_TEMPLATE_LOT_LIMITS &
	/LOCK=NONE &
	/TABLE=SOP_TEMPLATE_LIMITS &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION=#DIVISION &
	/WITH=TEMPLATE_CODE=#TEMPLATE_CODE

	BEGIN_BLOCK ADD_RECORD

		CLEAR_BUFFER SOP_CHARACTERISTIC_LIMITS

		SOP_CHARACTERISTIC_LIMITS(COMPANY_CODE)	 = #COMPANY_CODE
		SOP_CHARACTERISTIC_LIMITS(DIVISION)			  = #DIVISION
		SOP_CHARACTERISTIC_LIMITS(ORDER_NUMBER)	 = #ORDER_NUMBER
		SOP_CHARACTERISTIC_LIMITS(CHARACTERISTIC_CODE)  = SOP_TEMPLATE_LIMITS(CHARACTERISTIC_CODE)
		SOP_CHARACTERISTIC_LIMITS(ORDER_LINE_NUMBER)		 = SOP_TEMPLATE_LIMITS(ORDER_LINE_NUMBER)
		SOP_CHARACTERISTIC_LIMITS(IC_HIGH_LIMIT_NUMERIC)= SOP_TEMPLATE_LIMITS(IC_HIGH_LIMIT_NUMERIC)
		SOP_CHARACTERISTIC_LIMITS(IC_LOW_LIMIT_NUMERIC) = SOP_TEMPLATE_LIMITS(IC_LOW_LIMIT_NUMERIC)
		SOP_CHARACTERISTIC_LIMITS(IC_HIGH_LIMIT_TEXT)	  = SOP_TEMPLATE_LIMITS(IC_HIGH_LIMIT_TEXT)
		SOP_CHARACTERISTIC_LIMITS(IC_LOW_LIMIT_TEXT)		 = SOP_TEMPLATE_LIMITS(IC_LOW_LIMIT_TEXT)

		ADD TO SOP_CHARACTERISTIC_LIMITS
	END_BLOCK

END_FORM


PROCEDURE_FORM COPY_LOT_LIMITS &
	/LOCK=NONE &
	/SECONDARY &
	/TABLE=SOP_CHARACTERISTIC_LIMITS &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION=#DIVISION &
	/WITH=ORDER_NUMBER=#ORDER_NUMBER_COPY &
	/STREAM_NAME=CLL

	BEGIN_BLOCK ADD_RECORD

		CLEAR_BUFFER SOP_CHARACTERISTIC_LIMITS

		SOP_CHARACTERISTIC_LIMITS(COMPANY_CODE)	 = #COMPANY_CODE
		SOP_CHARACTERISTIC_LIMITS(DIVISION)			  = #DIVISION
		SOP_CHARACTERISTIC_LIMITS(ORDER_NUMBER)	 = #ORDER_NUMBER
		SOP_CHARACTERISTIC_LIMITS(CHARACTERISTIC_CODE)  = CLL:SOP_CHARACTERISTIC_LIMITS(CHARACTERISTIC_CODE)
		SOP_CHARACTERISTIC_LIMITS(ORDER_LINE_NUMBER)		 = CLL:SOP_CHARACTERISTIC_LIMITS(ORDER_LINE_NUMBER)
		SOP_CHARACTERISTIC_LIMITS(IC_HIGH_LIMIT_NUMERIC)= CLL:SOP_CHARACTERISTIC_LIMITS(IC_HIGH_LIMIT_NUMERIC)
		SOP_CHARACTERISTIC_LIMITS(IC_LOW_LIMIT_NUMERIC) = CLL:SOP_CHARACTERISTIC_LIMITS(IC_LOW_LIMIT_NUMERIC)
		SOP_CHARACTERISTIC_LIMITS(IC_HIGH_LIMIT_TEXT)	  = CLL:SOP_CHARACTERISTIC_LIMITS(IC_HIGH_LIMIT_TEXT)
		SOP_CHARACTERISTIC_LIMITS(IC_LOW_LIMIT_TEXT)		 = CLL:SOP_CHARACTERISTIC_LIMITS(IC_LOW_LIMIT_TEXT)

		ADD TO SOP_CHARACTERISTIC_LIMITS
	END_BLOCK

END_FORM


PROCEDURE_FORM SETUP_LIMITS

	BEGIN_BLOCK LIMITS
		#A=TABLE_CHECK("LIMITS_VT","")
		IF (#A=%NORMAL)
			DELETE TABLE LIMITS_VT
		END_IF

		ADD TABLE LIMITS_VT &
			/VIRTUAL &
			/ADD_FIELD=CHARACTERISTIC_CODE &
			/ADD_FIELD=IC_HIGH_LIMIT_NUMERIC &
			/ADD_FIELD=IC_LOW_LIMIT_NUMERIC &
			/ADD_FIELD=IC_HIGH_LIMIT_TEXT &
			/ADD_FIELD=IC_LOW_LIMIT_TEXT &
			/ADD_FIELD=UNIT_CHAR
	END_BLOCK

	BEGIN_BLOCK ADD_RECORDS
		START_STREAM SCL &
			/SECONDARY &
			/TABLE=SOP_CHARACTERISTIC_LIMITS &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=ORDER_NUMBER=#ORDER_NUMBER &
			/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER)

		WHILE(1)

			FETCH SCL/FAILURE=(CONTINUE OUT)

			CLEAR_BUFFER LIMITS_VT

			LIMITS_VT(CHARACTERISTIC_CODE)  = SCL:SOP_CHARACTERISTIC_LIMITS(CHARACTERISTIC_CODE)
			LIMITS_VT(IC_HIGH_LIMIT_NUMERIC)= SCL:SOP_CHARACTERISTIC_LIMITS(IC_HIGH_LIMIT_NUMERIC)
			LIMITS_VT(IC_LOW_LIMIT_NUMERIC) = SCL:SOP_CHARACTERISTIC_LIMITS(IC_LOW_LIMIT_NUMERIC)
			LIMITS_VT(IC_HIGH_LIMIT_TEXT)   = SCL:SOP_CHARACTERISTIC_LIMITS(IC_HIGH_LIMIT_TEXT)
			LIMITS_VT(IC_LOW_LIMIT_TEXT)	   = SCL:SOP_CHARACTERISTIC_LIMITS(IC_LOW_LIMIT_TEXT)

			ADD TO LIMITS_VT

		END_WHILE
	END_BLOCK

END_FORM


PROCEDURE_FORM GET_NEW_CURRENCY

	BEGIN_BLOCK REGET_CURRENCY
		! restore the current trans/base currency info
		PERFORM RESTOR_SYS_CURRENCY_CONTROL_VT
		! allow input of currency infor for trans/base
		PERFORM "GEMLB:LB_C_CURRENCY_RATES" ( #CURRENCY_OVERRIDE, #R_STATUS, #R_MESSAGE)
		IF (#R_STATUS <> #YES)
			ERROR/WAIT #R_MESSAGE
			EXIT (%FAILURE)
		END_IF
		FIND IN SYS_CURRENCY_CONTROL_VT
		#BASE_CURRENCY_CODE	= SYS_CURRENCY_CONTROL_VT(BASE_CURRENCY_CODE)
		#RATE_AUTHORITY	= SYS_CURRENCY_CONTROL_VT(RATE_AUTHORITY)
		#RATE_TYPE	= SYS_CURRENCY_CONTROL_VT(RATE_TYPE)
		#CURRENCY_RATE	= SYS_CURRENCY_CONTROL_VT(FIRST_CURRENCY_RATE)
		#CURRENCY_CODE  = SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE)
		#CURRENCY_RATIO_INDIC	= SYS_CURRENCY_CONTROL_VT(CURR_RATIO_INDIC)
		#CURRENCY_FIXED	= SYS_CURRENCY_CONTROL_VT(FIXED_RATE_INDIC)
		#CURRENCY_MASK	= SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_MASK)
		#CURRENCY_DESC	= SYS_CURRENCY_CONTROL_VT(CURRENCY_CODE_DESCRIPTION)
		#CURRENCY_DECIMAL	= SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_DECIMALS)
		#CURRENCY_DATE	= SYS_CURRENCY_CONTROL_VT(CURRENCY_DATE)

		SALES_ORDER_HEADERS(SYS_CURRENCY_CODE)       = #CURRENCY_CODE
		SALES_ORDER_HEADERS(SYS_CURRENCY_RATE)       = #CURRENCY_RATE
		SALES_ORDER_HEADERS(SYS_CURRENCY_DATE)       = #CURRENCY_DATE
		SALES_ORDER_HEADERS(SYS_CURRENCY_FIXED_FLAG) = #CURRENCY_FIXED
		SALES_ORDER_HEADERS(SYS_CURRENCY_RATIO_INDIC)= #CURRENCY_RATIO_INDIC
		SALES_ORDER_HEADERS(SYS_RATE_AUTHORITY)      = #RATE_AUTHORITY
		SALES_ORDER_HEADERS(SYS_RATE_TYPE)			= #RATE_TYPE
		SALES_ORDER_HEADERS(SYS_BASE_CURRENCY)       = #BASE_CURRENCY_CODE
		IF (SYS_CURRENCY_CONTROL_VT(STORE_BASE_2) = #YES)
			SALES_ORDER_HEADERS(SYS_CURRENCY_2_RATE) = SYS_CURRENCY_CONTROL_VT(SECOND_CURRENCY_RATE)
			SALES_ORDER_HEADERS(SYS_CURRENCY_2_RATIO_INDIC) = SYS_CURRENCY_CONTROL_VT(SYS_CURRENCY_2_RATIO_INDIC)
		END_IF
		#DEFAULT_CURRENCY_CODE  = #CURRENCY_CODE
		#EFFECTIVE_DATE	 = #CURRENCY_DATE

	END_BLOCK

END_FORM


FORM OVERRIDE /ROW=23 /COL=2 /HEIGHT=1 /WIDTH=78

	YESNO_BLOCK OVERRIDE /ROW=1 /COL=75 &
			/PROMPT=(MESSAGE("P_08032")) &
			/BACK=(EXIT(%FAILURE)) &
			/EXIT=(EXIT(%FAILURE)) &
			/EXIT_FORWARD=(EXIT(%SUCCESS)) &
			/SUCCESS=(EXIT(%SUCCESS)) &
			/FAILURE=(EXIT(%FAILURE))

END_FORM


FORM OVERRIDE_LINE_FINAL_ADDRESS /ROW=23 /COL=2 /HEIGHT=1 /WIDTH=78

	YESNO_BLOCK OVERRIDE /ROW=1 /COL=75 &
			/PROMPT=(MESSAGE("P_37119")) &
			/BACK=(EXIT(%FAILURE)) &
			/EXIT=(EXIT(%FAILURE)) &
			/EXIT_FORWARD=(EXIT(%SUCCESS)) &
			/SUCCESS=(EXIT(%SUCCESS)) &
			/FAILURE=(EXIT(%FAILURE))

END_FORM


PROCEDURE_FORM SPLIT_ORDER_CHECK

	BEGIN_BLOCK SPLIT_ORDER_CHECK

		#SPLIT_ORDER = ''
		#DOCUMENT_ID = SALES_ORDER_HEADERS(SYS_DOCUMENT_ID)

		IF (#EDI_ACTIVE_FLAG<>#YES OR #DOCUMENT_ID='') EXIT (%SUCCESS)

		FIND IN SPLIT:SALES_ORDER_HEADERS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=ORDER_NUMBER<>#ORDER_NUMBER &
			/WITH=SYS_DOCUMENT_ID=#DOCUMENT_ID &
			/WITH=CUSTOMER_REFERENCE=SALES_ORDER_HEADERS(CUSTOMER_REFERENCE)

		IF (%STATUS=%SUCCESS) #SPLIT_ORDER = '*'
	END_BLOCK

END_FORM


PROCEDURE_FORM DELETE_SALES_LINE_QTYS &
		/TABLE=SALES_ORDER_LINE_QTYS &
		/LOCK=WRITE &
		/WITH=COMPANY_CODE=#COMPANY_CODE &
		/WITH=DIVISION=#DIVISION &
		/WITH=ORDER_NUMBER=SALES_ORDER_LINES(ORDER_NUMBER) &
		/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER)

	BEGIN_BLOCK DELETE
		DELETE FROM SALES_ORDER_LINE_QTYS
	END_BLOCK

END_FORM


PROCEDURE_FORM DELETE_SALES_LINE_DETAIL_QTYS &
		/TABLE=SALES_ORDER_LINE_DETAIL_QTYS &
		/LOCK=WRITE &
		/WITH=COMPANY_CODE=#COMPANY_CODE &
		/WITH=DIVISION=#DIVISION &
		/WITH=ORDER_NUMBER=SALES_ORDER_LINES(ORDER_NUMBER) &
		/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER)

	BEGIN_BLOCK DELETE
		DELETE FROM SALES_ORDER_LINE_DETAIL_QTYS
	END_BLOCK

END_FORM


PROCEDURE_FORM ADD_SO_LINE_ORDER_QTY( #IN_UOM, #IN_QTY, #EXACT_FLAG, #R1 )

	BEGIN_BLOCK INIT
		#R1 = ""
	END_BLOCK

	BEGIN_BLOCK ADD
		SALES_ORDER_LINE_QTYS(COMPANY_CODE)		= SALES_ORDER_LINES(COMPANY_CODE)
		SALES_ORDER_LINE_QTYS(DIVISION) = SALES_ORDER_LINES(DIVISION)
		SALES_ORDER_LINE_QTYS(ORDER_NUMBER)		= SALES_ORDER_LINES(ORDER_NUMBER)
		SALES_ORDER_LINE_QTYS(ORDER_LINE_NUMBER)	= SALES_ORDER_LINES(ORDER_LINE_NUMBER)
		SALES_ORDER_LINE_QTYS(UNIT_OF_MEASURE)  = #IN_UOM
		SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)	  = #IN_QTY
		ADD TO SALES_ORDER_LINE_QTYS
		IF (%STATUS <> %SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_91238
			EXIT (%FAILURE)
		END_IF

	END_BLOCK
END_FORM


PROCEDURE_FORM ADD_UPDATE_SO_LINE_ORDER_QTY( #IN_UOM, #IN_QTY, #EXACT_FLAG, #R1)

	BEGIN_BLOCK INIT
		#R1 = ""
	END_BLOCK

	BEGIN_BLOCK FIND
		FIND IN SALES_ORDER_LINE_QTYS	  &
			/LOCK = WRITE &
			/WITH = COMPANY_CODE = #COMPANY_CODE	   &
			/WITH = DIVISION = #DIVISION	   &
			/WITH = ORDER_NUMBER = SALES_ORDER_LINES(ORDER_NUMBER)  &
			/WITH = ORDER_LINE_NUMBER = SALES_ORDER_LINES(ORDER_LINE_NUMBER)	&
			/WITH = UNIT_OF_MEASURE = #IN_UOM

		IF (%STATUS <> %SUCCESS)
			PERFORM ADD_SO_LINE_ORDER_QTY( #IN_UOM, #IN_QTY, #EXACT_FLAG, #R1)
		ELSE
			SALES_ORDER_LINE_QTYS(ORDER_QUANTITY) = SALES_ORDER_LINE_QTYS(ORDER_QUANTITY) + #IN_QTY
		END_IF
	END_BLOCK
END_FORM


PROCEDURE_FORM ADD_NO_UPDATE_SO_LINE_ORDER_QTY( #IN_UOM, #IN_QTY, #EXACT_FLAG, #R1)

	BEGIN_BLOCK INIT
		#R1 = ""
	END_BLOCK

	BEGIN_BLOCK FIND
		PERFORM FIND_CURRENT_SO_LINE_QTY(#IN_UOM, #R1)
		IF (%STATUS <> %SUCCESS)
			PERFORM ADD_SO_LINE_ORDER_QTY( #IN_UOM, #IN_QTY, #EXACT_FLAG, #R1)
		END_IF
	END_BLOCK
END_FORM


PROCEDURE_FORM ADD_SO_LINE_DETAIL_ORDER_QTY (#SEQ, #WH, #IN_UOM, #IN_QTY, #EXACT_FLAG, #R1)

	BEGIN_BLOCK INIT
		#R1 = ""
		IF (#SEQ = "")
			#SEQ = SALES_ORDER_LINE_DETAILS(SEQUENCE)
		END_IF
	END_BLOCK

	BEGIN_BLOCK ADD
		SALES_ORDER_LINE_DETAIL_QTYS(COMPANY_CODE)	  = SALES_ORDER_LINES(COMPANY_CODE)
		SALES_ORDER_LINE_DETAIL_QTYS(DIVISION)	  = SALES_ORDER_LINES(DIVISION)
		SALES_ORDER_LINE_DETAIL_QTYS(ORDER_NUMBER)	  = SALES_ORDER_LINES(ORDER_NUMBER)
		SALES_ORDER_LINE_DETAIL_QTYS(ORDER_LINE_NUMBER) = SALES_ORDER_LINES(ORDER_LINE_NUMBER)
		SALES_ORDER_LINE_DETAIL_QTYS(SEQUENCE)	  = #SEQ
		SALES_ORDER_LINE_DETAIL_QTYS(UNIT_OF_MEASURE)	  = #IN_UOM
		SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY)		 = #IN_QTY
		SALES_ORDER_LINE_DETAIL_QTYS(WAREHOUSE)	 = #WH
		SALES_ORDER_LINE_DETAIL_QTYS(PART_CODE)	 = SALES_ORDER_LINES(PART_CODE)
		SALES_ORDER_LINE_DETAIL_QTYS(ORDER_LINE_TYPE)	  = SALES_ORDER_LINES(ORDER_LINE_TYPE)
		SALES_ORDER_LINE_DETAIL_QTYS(REQUIRED_DATE)	= SALES_ORDER_LINE_DETAILS(REQUIRED_DATE)

		ADD TO SALES_ORDER_LINE_DETAIL_QTYS

		IF (%STATUS <> %SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_91240
			EXIT (%FAILURE)
		END_IF
	END_BLOCK
END_FORM


PROCEDURE_FORM DELETE_SALES_ORDER_LINE_DETAIL_QTYS (#DEC_FLAG) &
	/TABLE=SALES_ORDER_LINE_DETAIL_QTYS &
	/WITH=COMPANY_CODE = #COMPANY_CODE &
	/WITH=DIVISION = #DIVISION &
	/WITH=ORDER_NUMBER = SALES_ORDER_LINE_DETAILS(ORDER_NUMBER)	 &
	/WITH=ORDER_LINE_NUMBER = SALES_ORDER_LINE_DETAILS(ORDER_LINE_NUMBER) &
	/WITH=SEQUENCE = SALES_ORDER_LINE_DETAILS(SEQUENCE)

	BEGIN_BLOCK INIT
		IF (#DEC_FLAG = "")
			#DEC_FLAG = #NO
		END_IF
	END_BLOCK

	BEGIN_BLOCK DEC_ORDER_LINE_QTY
	!
	    IF (#DEC_FLAG <> #NO)
		! subtract line detail qty from line qty
		FIND IN SALES_ORDER_LINE_QTYS	  &
			/LOCK = WRITE   &
			/WITH = COMPANY_CODE = #COMPANY_CODE	   &
			/WITH = DIVISION = #DIVISION &
			/WITH = ORDER_NUMBER = (SALES_ORDER_LINE_DETAIL_QTYS(ORDER_NUMBER)) &
			/WITH = ORDER_LINE_NUMBER = (SALES_ORDER_LINE_DETAIL_QTYS(ORDER_LINE_NUMBER)) &
			/WITH = UNIT_OF_MEASURE = SALES_ORDER_LINE_DETAIL_QTYS(UNIT_OF_MEASURE)
		IF (%STATUS = %SUCCESS)
			SALES_ORDER_LINE_QTYS(ORDER_QUANTITY) = SALES_ORDER_LINE_QTYS(ORDER_QUANTITY) - &
				SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY)
			SALES_ORDER_LINE_QTYS(IC_QTY_PICKED) = SALES_ORDER_LINE_QTYS(IC_QTY_PICKED) - &
				SALES_ORDER_LINE_DETAIL_QTYS(IC_QTY_PICKED)
			SALES_ORDER_LINE_QTYS(IC_QTY_IN_DESPATCH) = SALES_ORDER_LINE_QTYS(IC_QTY_IN_DESPATCH) - &
				SALES_ORDER_LINE_DETAIL_QTYS(IC_QTY_IN_DESPATCH)
			SALES_ORDER_LINE_QTYS(QTY_DESPATCHED) = SALES_ORDER_LINE_QTYS(QTY_DESPATCHED) - &
				SALES_ORDER_LINE_DETAIL_QTYS(QTY_DESPATCHED)
			SALES_ORDER_LINE_QTYS(QTY_INVOICED) = SALES_ORDER_LINE_QTYS(QTY_INVOICED) - &
				SALES_ORDER_LINE_DETAIL_QTYS(QTY_INVOICED)
			SALES_ORDER_LINE_QTYS(QTY_RESERVED) = SALES_ORDER_LINE_QTYS(QTY_RESERVED) - &
				SALES_ORDER_LINE_DETAIL_QTYS(QTY_RESERVED)
		END_IF
	    END_IF
	END_BLOCK

	BEGIN_BLOCK DELETE_SO
		DELETE FROM SALES_ORDER_LINE_DETAIL_QTYS
	END_BLOCK

END_FORM


PROCEDURE_FORM DELETE_SALES_ORDER_LINE_QTYS	&
	/TABLE=SALES_ORDER_LINE_QTYS &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION=#DIVISION &
	/WITH=ORDER_NUMBER=SALES_ORDER_LINES(ORDER_NUMBER) &
	/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER)

	DELETE FROM SALES_ORDER_LINE_QTYS

END_FORM


PROCEDURE_FORM SET_WV_FOR_LINE (#WV_LOT_NUMBER, #WEIGHT, #WEIGHT_UOM, #VOLUME, #VOLUME_UOM, #R1)
!
! find the weight and volume for this line
!
	BEGIN_BLOCK INIT
		#WEIGHT 	= 0.0
		#WEIGHT_UOM		= 0
		#VOLUME 	= 0.0
		#VOLUME_UOM		= 0
	END_BLOCK

	BEGIN_BLOCK SET_CAP
		FIND IN PRODUCT_MASTER &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PART_CODE=#PART_CODE &
			/LOCK=NONE
	END_BLOCK

	BEGIN_BLOCK SET_IC_ENGINE
		DELETE ALL FROM IC_ENGINE_VT
		DELETE ALL FROM IC_ENGINE_DETAILS_VT
		DELETE ALL FROM IC_WTVOL_XMIT_VT
	END_BLOCK

	BEGIN_BLOCK SET_IC_ENGINE_DETAILS
		IC_ENGINE_DETAILS_VT(IC_RECORD_TYPE)		 = PARAMETER("IC_RECORD_PRODUCT")
		IC_ENGINE_DETAILS_VT(IC_RECORD_PHASE)	  = ""
		IC_ENGINE_DETAILS_VT(IC_LOT_NUMBER)		= ""
		IC_ENGINE_DETAILS_VT(IC_LOT_SEQUENCE)	  = ""
		IC_ENGINE_DETAILS_VT(IC_MHU_ACTUAL_TYPE)	= ""
		IC_ENGINE_DETAILS_VT(BIN_LOCATION)	= ""
		IC_ENGINE_DETAILS_VT(MH_NUMBER)		= ""
		IC_ENGINE_DETAILS_VT(IC_MOVE_QUANTITY_1)	= #NOMI_ORDER_QTY
		IC_ENGINE_DETAILS_VT(IC_QTY_AVAILABLE_1)	= 0
		IC_ENGINE_DETAILS_VT(UNIT_OF_MEASURE_1)		= #NOMI_UOM
		IC_ENGINE_DETAILS_VT(IC_INIT_QTY_RESERVED_1)		 = 0
		IC_ENGINE_DETAILS_VT(IC_MOVE_QUANTITY_2)	= #NON_NOMI_ORDER_QTY
		IC_ENGINE_DETAILS_VT(IC_QTY_AVAILABLE_2)	= 0
		IC_ENGINE_DETAILS_VT(UNIT_OF_MEASURE_2)		= #NON_NOMI_UOM
		IC_ENGINE_DETAILS_VT(IC_INIT_QTY_RESERVED_2)	= 0
		IC_ENGINE_DETAILS_VT(IC_MOVE_QUANTITY_3)	= #PACK_ORDER_QTY
		IC_ENGINE_DETAILS_VT(IC_QTY_AVAILABLE_3)	= 0
		IC_ENGINE_DETAILS_VT(UNIT_OF_MEASURE_3)		= #PACK_UOM
		IC_ENGINE_DETAILS_VT(IC_INIT_QTY_RESERVED_3)	= 0
		IC_ENGINE_DETAILS_VT(BEST_BEFORE_DATE)	= ""
		IC_ENGINE_DETAILS_VT(EXPIRY_DATE)	= ""
		IC_ENGINE_DETAILS_VT(IC_RETEST_DATE)	= ""
		IC_ENGINE_DETAILS_VT(IC_VENDOR_LOT_NUMBER)	= ""
		IC_ENGINE_DETAILS_VT(IC_ENGINE_CALC_UNIT_COST)	= ""
		IC_ENGINE_DETAILS_VT(IC_ENGINE_CALC_TOTAL_COST)	= ""

		ADD TO IC_ENGINE_DETAILS_VT
		IF (%STATUS <> %SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_90971
		END_IF
	END_BLOCK

	BEGIN_BLOCK SET_IC_WTVOL
		IC_WTVOL_XMIT_VT(COMPANY_CODE)	= #COMPANY_CODE
		IC_WTVOL_XMIT_VT(WAREHOUSE)	= #WAREHOUSE
		IC_WTVOL_XMIT_VT(PART_CODE)	= #PART_CODE
		IC_WTVOL_XMIT_VT(IC_LOT_NUMBER)	= #WV_LOT_NUMBER
		IC_WTVOL_XMIT_VT(IC_CHARACTERISTIC_SOURCE) = #IC_CHARACTERISTIC_SOURCE

		ADD TO IC_WTVOL_XMIT_VT

		IF (%STATUS <> %SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_91241
		END_IF
	END_BLOCK

	BEGIN_BLOCK USE_ENGINE
		PERFORM "GEMLB:LB_C_IC_ENGINE_CONTROLLER" &
					((PARAMETER("IC_E_GET_WTVOL")), &
					#R_SUCCESS_STATUS,	     &
					#R_MESSAGE)

		IF (#R_SUCCESS_STATUS <> #YES)
			ERROR/WAIT #R_MESSAGE
			EXIT (%FAILURE)
		END_IF
	END_BLOCK

	BEGIN_BLOCK GET_WEIGHT_VOLUME
		FIND IN IC_WTVOL_XMIT_VT

		IF (%STATUS <> %SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_91241
			EXIT (%FAILURE)
		END_IF

		#WEIGHT 	= IC_WTVOL_XMIT_VT(WEIGHT_RETURN_QTY)
		#WEIGHT_UOM		= IC_WTVOL_XMIT_VT(WEIGHT_RETURN_UOM)
		#VOLUME 	= IC_WTVOL_XMIT_VT(VOLUME_RETURN_QTY)
		#VOLUME_UOM		= IC_WTVOL_XMIT_VT(VOLUME_RETURN_UOM)
	END_BLOCK

	BEGIN_BLOCK ADJUST_WV_TO_CORRECT_DPS
		! Unlike standardised quantity fields, the weight and volume
		! fields are defined with a fixed display mask and a fixed
		! number of decimal places, irrespective of the units of
		! measure associated with the line/order.
		! Round the field values to the correct number of decimal
		! places.
		#WEIGHT = ROUND(#WEIGHT, 2)
		#VOLUME = ROUND(#VOLUME, 4)
	END_BLOCK

	BEGIN_BLOCK SET_RETURN_STATUS
		#R1 = ""
	END_BLOCK

END_FORM


PROCEDURE_FORM GET_NON_NOMINATED_UOM (#PART_CODE, #NOMINATED_UOM, #NON_NOMINATED_UOM)

	BEGIN_BLOCK INIT
		FIND IN IC_PRODUCT_MASTER_UNITS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PART_CODE=#PART_CODE &
			/WITH=UNIT_OF_MEASURE<>#NOMINATED_UOM &
			/WITH=IC_PRODUCT_UOM_TYPE=(PARAMETER("IC_INVENTORY_UOM"))

		IF (%STATUS = %SUCCESS)
			#NON_NOMINATED_UOM = IC_PRODUCT_MASTER_UNITS(UNIT_OF_MEASURE)
		ELSE
			#NON_NOMINATED_UOM = ""
		END_IF
	END_BLOCK
END_FORM


PROCEDURE_FORM CONVERT_QTYS (#IN_WAREHOUSE, #IN_LOT, #IN_PART, #FROM_UOM, #FROM_QTY, #TO_UOM, #TO_QTY, #R1)

	BEGIN_BLOCK INIT
		#TO_QTY = 0.0
		#R1 = ""
	END_BLOCK

	BEGIN_BLOCK CHECK
		IF (#TO_UOM = "" OR #FROM_UOM = "")
			MESSAGE/IDENTIFIER/BELL/WAIT P_91211
			EXIT (%FAILURE)
		END_IF
		IF (#TO_UOM = #FROM_UOM)
			#TO_QTY = #FROM_QTY
			EXIT (%SUCCESS)
		END_IF
	END_BLOCK

	BEGIN_BLOCK  CHECK_CWT_INV_UNITS_CONV
		DELETE ALL FROM SYS_DO_UOM_CONV_VT
		#CONVERT_VIA_CWA = "FALSE"

		IF (#IC_UOM_CONTROL = PARAMETER("IC_CATCHWEIGHT_UOM_CONTROL"))
			FIND IN PRODUCT_MASTER &
				/LOCK=NONE &
				/WITH=COMPANY_CODE = #COMPANY_CODE &
				/WITH=PART_CODE = #IN_PART

			IF (%STATUS <> %SUCCESS)
				MESSAGE/IDENTIFIER/BELL/WAIT P_82043,#IN_PART
				EXIT (%FAILURE)
			END_IF

			#IN_PART_CAP = PRODUCT_MASTER(IC_UNIT_CAPACITY)
			#IN_PART_PKG_FLAG = PRODUCT_MASTER(IC_PACKAGED_PRODUCT)
			#DEFAULT_CWA = PRODUCT_MASTER(IC_DEFAULT_CATCHWEIGHT_AVERAGE)

			! Find non-capacity unit and number of decimals
			FIND IN IC_PRODUCT_MASTER_UNITS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE = #COMPANY_CODE &
				/WITH=PART_CODE = #IN_PART &
				/WITH=UNIT_OF_MEASURE <> #IN_PART_CAP &
				/WITH=IC_PRODUCT_UOM_TYPE = (PARAMETER("IC_INVENTORY_UOM"))

			IF (%STATUS = %SUCCESS)
				#IN_PART_NON_CAP = IC_PRODUCT_MASTER_UNITS(UNIT_OF_MEASURE)
			ELSE
				! Non-capacity unit missing
				MESSAGE/IDENTIFIER/BELL/WAIT P_90816
				EXIT (%FAILURE)
			END_IF

			IF ((IC_PRODUCT_MASTER_UNITS(IC_QUANTITY_MASK)) <> "")
				#IN_PART_NON_CAP_DEC = IC_PRODUCT_MASTER_UNITS(IC_DECIMALS)
			ELSE
				FIND IN UNITS_OF_MEASURE &
					/LOCK=NONE &
					/STREAM_NAME = CQ_UOM1 &
					/SECONDARY &
					/WITH=UNIT_OF_MEASURE = #IN_PART_NON_CAP

				IF (%STATUS = %SUCCESS)
					#IN_PART_NON_CAP_DEC = CQ_UOM1:UNITS_OF_MEASURE(IC_DECIMALS)
				ELSE
					!Failed to obtain decimals
					MESSAGE/IDENTIFIER/BELL/WAIT P_91052
					#IN_PART_NON_CAP_DEC = ""
				END_IF
			END_IF

			! get capacity unit's number of decimals
			FIND IN IC_PRODUCT_MASTER_UNITS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE = #COMPANY_CODE &
				/WITH=PART_CODE = #IN_PART &
				/WITH=UNIT_OF_MEASURE = #IN_PART_CAP &
				/WITH=IC_PRODUCT_UOM_TYPE = (PARAMETER("IC_INVENTORY_UOM")) &
				/WITH=IC_QUANTITY_MASK <> ""

			IF (%STATUS = %SUCCESS)
				#IN_PART_CAP_DEC = IC_PRODUCT_MASTER_UNITS(IC_DECIMALS)
			ELSE
				FIND IN UNITS_OF_MEASURE &
					/LOCK=NONE &
					/STREAM_NAME = CQ_UOM2 &
					/SECONDARY &
					/WITH=UNIT_OF_MEASURE = #IN_PART_CAP

				IF (%STATUS = %SUCCESS)
					#IN_PART_CAP_DEC = CQ_UOM2:UNITS_OF_MEASURE(IC_DECIMALS)
				ELSE
					!Failed to obtain decimals
					MESSAGE/IDENTIFIER/BELL/WAIT P_91052
					#IN_PART_CAP_DEC = ""
				END_IF
			END_IF

			! if converting between inventory units for a catchweight
			! or between a pack unit and the nom unit when the nom
			! unit is the non-capacity unit,
			! use lot cwa or product whse cwa in lieu of engine call

			IF ((#FROM_UOM = #IN_PART_NON_CAP) AND (#TO_UOM = #IN_PART_CAP))
				#CONVERT_VIA_CWA = "TRUE"
			END_IF

			IF ((#TO_UOM = #IN_PART_NON_CAP) AND (#FROM_UOM = #IN_PART_CAP))
				#CONVERT_VIA_CWA = "TRUE"
			END_IF
			IF ((#FROM_UOM = #IN_PART_NON_CAP) AND (#IN_PART_PKG_FLAG = PARAMETER("LANGUAGE_YES")))
				#CONVERT_VIA_CWA = "TRUE"
			END_IF


			IF (#CONVERT_VIA_CWA = "TRUE")
				IF (#IN_LOT <> "")
					FIND IN PART_BATCHES &
						/LOCK=NONE &
						/WITH=COMPANY_CODE = #COMPANY_CODE &
						/WITH=PART_CODE = #IN_PART &
						/WITH=IC_LOT_NUMBER = #IN_LOT &
						/WITH=WAREHOUSE = #IN_WAREHOUSE

					#CWA = PART_BATCHES(IC_CATCHWEIGHT_AVERAGE)
				ELSE
					FIND IN PRODUCT_WAREHOUSE &
						/LOCK=NONE &
						/WITH=COMPANY_CODE = #COMPANY_CODE &
						/WITH=PART_CODE = #IN_PART &
						/WITH=WAREHOUSE = #IN_WAREHOUSE

					#CWA = PRODUCT_WAREHOUSE(IC_CATCHWEIGHT_AVERAGE)
				END_IF

				IF (#CWA = 0.0)
					IF (#DEFAULT_CWA <> 0.0)
						#CWA = #DEFAULT_CWA
					ELSE
						MESSAGE/IDENTIFIER/BELL/WAIT P_90726
					END_IF
				END_IF

				IF (#FROM_UOM = #IN_PART_CAP)
					#TO_QTY = ROUND(#FROM_QTY * #CWA,#IN_PART_NON_CAP_DEC)
				ELSE
					#TO_QTY = ROUND(#FROM_QTY/#CWA,#IN_PART_CAP_DEC)
				END_IF
				GOTO FINISH
			END_IF
		 END_IF
	END_BLOCK

	BEGIN_BLOCK ADD_NOMINATED_UNIT

		IF (PRODUCT_MASTER(BATCHES_EXIST)=#YES)
			SYS_DO_UOM_CONV_VT(IC_CHARACTERISTIC_SOURCE) = PARAMETER("IC_UOM_LOT_CHAR_DEFAULT")
		END_IF

		IF (#IC_UOM_CONTROL = PARAMETER("IC_POTENT_UOM_CONTROL") OR &
		    #IC_UOM_CONTROL = PARAMETER("IC_CATCHWEIGHT_UOM_CONTROL"))
			SYS_DO_UOM_CONV_VT(IC_CHARACTERISTIC_SOURCE) = PARAMETER("IC_UOM_LOT_CHAR_DEFAULT")
			IF (#IN_LOT <> "")
				SYS_DO_UOM_CONV_VT(IC_CHARACTERISTIC_SOURCE) = PARAMETER("IC_UOM_LOT_CHARACTERISTIC")
			END_IF
		END_IF
		SYS_DO_UOM_CONV_VT(COMPANY_CODE)	= #COMPANY_CODE
		SYS_DO_UOM_CONV_VT(WAREHOUSE)	  = #IN_WAREHOUSE
		SYS_DO_UOM_CONV_VT(IC_LOT_NUMBER)	  = #IN_LOT
		SYS_DO_UOM_CONV_VT(PART_CODE)	  = #IN_PART
		SYS_DO_UOM_CONV_VT(IC_QTY_FROM) = #FROM_QTY
		SYS_DO_UOM_CONV_VT(UNIT_FROM)	  = #FROM_UOM
		SYS_DO_UOM_CONV_VT(UNIT_TO)		= #TO_UOM

		ADD TO SYS_DO_UOM_CONV_VT
		IF (%STATUS <> %SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_90963
			EXIT (%FAILURE)
		END_IF

		PERFORM "GEMLB:LB_C_IC_ENGINE_CONTROLLER" (PARAMETER("IC_E_UOM_CONV_NO_MESSAGE"),       &
			#R_SUCCESS_STATUS,		 &
			#R_MESSAGE)
		IF (#R_SUCCESS_STATUS	  <> #YES)
			ERROR/WAIT #R_MESSAGE
			EXIT (%FAILURE)
		END_IF

		FIND IN SYS_DO_UOM_CONV_VT
		IF (%STATUS <> %SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_90965
			EXIT (%FAILURE)
		END_IF
		#TO_QTY = SYS_DO_UOM_CONV_VT(IC_QTY_TO)
	END_BLOCK

	BEGIN_BLOCK FINISH

	END_BLOCK

END_FORM


PROCEDURE_FORM FIND_CURRENT_SO_LINE_QTY (#IN_UOM, #R1)

	BEGIN_BLOCK INIT
		#R1 = ""
	END_BLOCK

	BEGIN_BLOCK FIND
		FIND IN SALES_ORDER_LINE_QTYS &
			/LOCK=READ &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=ORDER_NUMBER=SALES_ORDER_LINES(ORDER_NUMBER) &
			/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER) &
			/WITH=UNIT_OF_MEASURE=#IN_UOM

		IF (%STATUS <> %SUCCESS)
			#R1 = MESSAGE("P_91244")
			EXIT (%FAILURE)
		END_IF
	END_BLOCK
END_FORM


PROCEDURE_FORM FIND_CURRENT_SO_LINE_DETAIL_QTY (#IN_UOM, #R1)

	BEGIN_BLOCK INIT
		#R1 = ""
	END_BLOCK

	BEGIN_BLOCK FIND
		FIND IN SALES_ORDER_LINE_DETAIL_QTYS &
			/LOCK=READ &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=ORDER_NUMBER=SALES_ORDER_LINES(ORDER_NUMBER) &
			/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER) &
			/WITH=SEQUENCE=SALES_ORDER_LINE_DETAILS(SEQUENCE) &
			/WITH=UNIT_OF_MEASURE=#IN_UOM

		IF (%STATUS <> %SUCCESS)
			#R1 = MESSAGE("P_91245")
			EXIT (%FAILURE)
		END_IF
	END_BLOCK
END_FORM


PROCEDURE_FORM SUM_CURRENT_SO_LINE_DETAIL_QTYS (#IN_UOM) &
	/TABLE = SALES_ORDER_LINE_DETAIL_QTYS	 &
			/LOCK = READ &
			/WITH = COMPANY_CODE = #COMPANY_CODE	   &
			/WITH = DIVISION = #DIVISION	   &
			/WITH = ORDER_NUMBER = SALES_ORDER_LINES(ORDER_NUMBER)  &
			/WITH = ORDER_LINE_NUMBER = SALES_ORDER_LINES(ORDER_LINE_NUMBER)	&
			/WITH = UNIT_OF_MEASURE = #IN_UOM &
			/STATISTIC = #TOTAL_DETAIL_ORDER_QTY = TOTAL(SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY))

END_FORM


PROCEDURE_FORM ZERO_CURRENT_LINE_DETAIL_QTYS (#FIELD) &

	BEGIN_BLOCK UPDATE_SALES
		PERFORM "GEMSOP:SOP_L_UPDATE_A_SO_QTY" ( #COMPANY_CODE, &
						#DIVISION, &
						(SALES_ORDER_LINE_DETAILS(ORDER_NUMBER)), &
						(SALES_ORDER_LINE_DETAILS(ORDER_LINE_NUMBER)), &
						(SALES_ORDER_LINE_DETAILS(SEQUENCE)), &
						#FIELD, &
						"0", &
						#SALES_UOM, &
						#R1)
	END_BLOCK

	BEGIN_BLOCK UPDATE_NOMI
		IF (#SALES_UOM <> #NOMI_UOM)
			PERFORM "GEMSOP:SOP_L_UPDATE_A_SO_QTY" ( #COMPANY_CODE, &
						#DIVISION, &
						(SALES_ORDER_LINE_DETAILS(ORDER_NUMBER)), &
						(SALES_ORDER_LINE_DETAILS(ORDER_LINE_NUMBER)), &
						(SALES_ORDER_LINE_DETAILS(SEQUENCE)), &
						#FIELD, &
						"0", &
						#NOMI_UOM, &
						#R1)
		END_IF
	END_BLOCK

	BEGIN_BLOCK NON_NOMI
		IF ((#IC_UOM_CONTROL = PARAMETER("IC_CATCHWEIGHT_UOM_CONTROL")) OR      &
		    (#IC_UOM_CONTROL = PARAMETER("IC_POTENT_UOM_CONTROL")))
			IF (#NOMI_UOM <> #NON_NOMI_UOM AND #NON_NOMI_UOM <> #SALES_UOM)
				PERFORM "GEMSOP:SOP_L_UPDATE_A_SO_QTY" ( #COMPANY_CODE, &
						#DIVISION, &
						(SALES_ORDER_LINE_DETAILS(ORDER_NUMBER)), &
						(SALES_ORDER_LINE_DETAILS(ORDER_LINE_NUMBER)), &
						(SALES_ORDER_LINE_DETAILS(SEQUENCE)), &
						#FIELD, &
						"0", &
						#NON_NOMI_UOM, &
						#R1)
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK PACK
	    IF (#IC_PACKAGED_PRODUCT = #YES)
		IF (#PACK_UOM <> #SALES_UOM AND #PACK_UOM <> #NOMI_UOM AND #PACK_UOM <> #NON_NOMI_UOM)
			PERFORM "GEMSOP:SOP_L_UPDATE_A_SO_QTY" ( #COMPANY_CODE, &
						#DIVISION, &
						(SALES_ORDER_LINE_DETAILS(ORDER_NUMBER)), &
						(SALES_ORDER_LINE_DETAILS(ORDER_LINE_NUMBER)), &
						(SALES_ORDER_LINE_DETAILS(SEQUENCE)), &
						#FIELD, &
						"0", &
						#PACK_UOM, &
						#R1)
		END_IF
	    END_IF
	END_BLOCK

	BEGIN_BLOCK PRICE
		IF (#PRICE_UOM <> #SALES_UOM AND &
		    #PRICE_UOM <> #NOMI_UOM AND &
		    #PRICE_UOM <> #NON_NOMI_UOM AND &
		    #PRICE_UOM <> #PACK_UOM AND &
		    #PRICE_UOM <> "")
			PERFORM "GEMSOP:SOP_L_UPDATE_A_SO_QTY" ( #COMPANY_CODE, &
						#DIVISION, &
						(SALES_ORDER_LINE_DETAILS(ORDER_NUMBER)), &
						(SALES_ORDER_LINE_DETAILS(ORDER_LINE_NUMBER)), &
						(SALES_ORDER_LINE_DETAILS(SEQUENCE)), &
						#FIELD, &
						"0", &
						#PRICE_UOM, &
						#R1)
		END_IF
	END_BLOCK

END_FORM


PROCEDURE_FORM UPDATE_A_SO_QTY (#FIELD, #IN_SALES_QTY, #IN_NOMI_QTY, #IN_NON_NOMI_QTY, #IN_PACK_QTY, #IN_PRICE_QTY)

	BEGIN_BLOCK INIT
	END_BLOCK

	BEGIN_BLOCK UPDATE_SALES
		PERFORM "GEMSOP:SOP_L_UPDATE_A_SO_QTY" ( #COMPANY_CODE, &
						#DIVISION, &
						(SALES_ORDER_LINE_DETAILS(ORDER_NUMBER)), &
						(SALES_ORDER_LINE_DETAILS(ORDER_LINE_NUMBER)), &
						(SALES_ORDER_LINE_DETAILS(SEQUENCE)), &
						#FIELD, &
						#IN_SALES_QTY, &
						#SALES_UOM, &
						#R1)
	END_BLOCK

	BEGIN_BLOCK UPDATE_NOMI
		IF (#SALES_UOM <> #NOMI_UOM)
			PERFORM "GEMSOP:SOP_L_UPDATE_A_SO_QTY" ( #COMPANY_CODE, &
						#DIVISION, &
						(SALES_ORDER_LINE_DETAILS(ORDER_NUMBER)), &
						(SALES_ORDER_LINE_DETAILS(ORDER_LINE_NUMBER)), &
						(SALES_ORDER_LINE_DETAILS(SEQUENCE)), &
						#FIELD, &
						#IN_NOMI_QTY, &
						#NOMI_UOM, &
						#R1)
		END_IF
	END_BLOCK

	BEGIN_BLOCK NON_NOMI
		IF ((#IC_UOM_CONTROL = PARAMETER("IC_CATCHWEIGHT_UOM_CONTROL")) OR      &
		    (#IC_UOM_CONTROL = PARAMETER("IC_POTENT_UOM_CONTROL")))
			IF (#NOMI_UOM <> #NON_NOMI_UOM AND #NON_NOMI_UOM <> #SALES_UOM)
				PERFORM "GEMSOP:SOP_L_UPDATE_A_SO_QTY" ( #COMPANY_CODE, &
						#DIVISION, &
						(SALES_ORDER_LINE_DETAILS(ORDER_NUMBER)), &
						(SALES_ORDER_LINE_DETAILS(ORDER_LINE_NUMBER)), &
						(SALES_ORDER_LINE_DETAILS(SEQUENCE)), &
						#FIELD, &
						#IN_NON_NOMI_QTY, &
						#NON_NOMI_UOM, &
						#R1)
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK PACK
	    IF (#IC_PACKAGED_PRODUCT = #YES)
		IF (#PACK_UOM <> #SALES_UOM AND #PACK_UOM <> #NOMI_UOM AND #PACK_UOM <> #NON_NOMI_UOM)
			PERFORM "GEMSOP:SOP_L_UPDATE_A_SO_QTY" ( #COMPANY_CODE, &
						#DIVISION, &
						(SALES_ORDER_LINE_DETAILS(ORDER_NUMBER)), &
						(SALES_ORDER_LINE_DETAILS(ORDER_LINE_NUMBER)), &
						(SALES_ORDER_LINE_DETAILS(SEQUENCE)), &
						#FIELD, &
						#IN_PACK_QTY, &
						#PACK_UOM, &
						#R1)
		END_IF
	    END_IF
	END_BLOCK

	BEGIN_BLOCK PRICE
		IF (#PRICE_UOM <> #SALES_UOM AND &
		    #PRICE_UOM <> #NOMI_UOM AND &
		    #PRICE_UOM <> #NON_NOMI_UOM AND &
		    #PRICE_UOM <> #PACK_UOM AND &
		    #PRICE_UOM <> "")
			PERFORM "GEMSOP:SOP_L_UPDATE_A_SO_QTY" ( #COMPANY_CODE, &
						#DIVISION, &
						(SALES_ORDER_LINE_DETAILS(ORDER_NUMBER)), &
						(SALES_ORDER_LINE_DETAILS(ORDER_LINE_NUMBER)), &
						(SALES_ORDER_LINE_DETAILS(SEQUENCE)), &
						#FIELD, &
						#IN_PRICE_QTY, &
						#PRICE_UOM, &
						#R1)
		END_IF
	END_BLOCK

END_FORM

PROCEDURE_FORM GET_UOM_MASK( #IN_PART_CODE, #IN_UOM, #OUT_UOM_MASK, #OUT_UOM_NOD)
!
! no way to override the message display for LB_GET_QUANTITY_MASK, so...
!

	BEGIN_BLOCK INIT
		#OUT_UOM_MASK	  = ""
		#OUT_UOM_NOD		 = 0
	END_BLOCK

	BEGIN_BLOCK GET_IC
		FIND IN IC_PRODUCT_MASTER_UNITS &
			/LOCK=NONE &
			/STREAM_NAME=PMU1 &
			/SECONDARY &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH = PART_CODE = #IN_PART_CODE &
			/WITH = UNIT_OF_MEASURE = #IN_UOM &
			/WITH=IC_QUANTITY_MASK<>""
		IF (%STATUS = %SUCCESS)
			#OUT_UOM_MASK   = PMU1:IC_PRODUCT_MASTER_UNITS(IC_QUANTITY_MASK)
			#OUT_UOM_NOD	   = PMU1:IC_PRODUCT_MASTER_UNITS(IC_DECIMALS)
		ELSE
			FIND IN UNITS_OF_MEASURE &
				/LOCK=NONE &
				/STREAM_NAME=UOM1 &
				/SECONDARY &
				/WITH=UNIT_OF_MEASURE = #IN_UOM

			IF (%STATUS = %SUCCESS)
				#OUT_UOM_MASK = UOM1:UNITS_OF_MEASURE(IC_QUANTITY_MASK)
				#OUT_UOM_NOD = UOM1:UNITS_OF_MEASURE(IC_DECIMALS)
			ELSE
				EXIT (%FAILURE)
			END_IF
		END_IF
	END_BLOCK
END_FORM


FORM MODIFY_PAYMENT_TYPE /ROW=15 /COL=2 /HEIGHT=9 /WIDTH=78 &
	/TITLE=(MESSAGE("P_91148"))

	BEGIN_BLOCK DISPLAY_ADDRESS

		FIND IN AR_CUSTOMER_BANKS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION = #DIVISION &
			/WITH=CUSTOMER_NUMBER = #CUSTOMER_NUMBER

		IF (%STATUS = %SUCCESS)

			FIND IN SYS_COUNTRIES &
				/LOCK=NONE &
				/WITH=SYS_COUNTRY=AR_CUSTOMER_BANKS(SYS_COUNTRY)

			IF (%STATUS = %SUCCESS)

				PERFORM "GEMLB:LB_ADDRESSES" (&
					"D", &
					(SYS_COUNTRIES(SYS_COUNTRY)), &
					"AR_CUSTOMER_BANKS", &
					"18", &
					"26", &
					"", &
					"", &
					"", &
					"", &
					"", &
					#R1, &
					#R2, &
					#R3, &
					#R4, &
					#R5)

			END_IF
		END_IF
	END_BLOCK

	OUTPUT_BLOCK AR_CUSTOMER_BANK /ROW=3 /COL=25 &
			/DOMAIN=AR_CUSTOMER_BANKS &
			/PROMPT=(FIELD_PROMPT(AR_CUSTOMER_BANKS,AR_CUSTOMER_BANK)) &
			/SOURCE=AR_CUSTOMER_BANKS(AR_CUSTOMER_BANK)

       OUTPUT_BLOCK BANK_NAME /ROW=3 /COL=32 &
			/SOURCE=AR_CUSTOMER_BANKS(BANK_NAME)

	OUTPUT_BLOCK SHOW_AR_DRAFT_PAYMENT_TYPE /ROW=2 /COL=25 &
			/PROMPT=(MESSAGE("P_51171")) &
			/SOURCE=SALES_ORDER_HEADERS(AR_DRAFT_PAYMENT_TYPE)

	BEGIN_BLOCK SHOW_DRAFT_PAYMENT_TYPE
		IF (SALES_ORDER_HEADERS(AR_DRAFT_PAYMENT_TYPE) <> "")
			FIND IN CASH_RECEIPT_TYPES &
				/LOCK=NONE &
				/WITH=COMPANY_CODE = #COMPANY_CODE &
				/WITH=CASH_RECEIPT_TYPE =SALES_ORDER_HEADERS(AR_DRAFT_PAYMENT_TYPE)


			OUTPUT_BLOCK /ROW=2 /COL=32 &
				/SOURCE=(CASH_RECEIPT_TYPES(CODE_DESCRIPTION))
		END_IF

		DISPLAY DEFAULTS
		GOTO CONFIRM
	END_BLOCK

	INPUT_BLOCK AR_DRAFT_PAYMENT_TYPE /ROW=2 /COL=25 &
			/OPTIONS=DOMAIN_LOCK_NONE &
			/PROMPT=(MESSAGE("P_51171")) &
			/TARGET=SALES_ORDER_HEADERS(AR_DRAFT_PAYMENT_TYPE) &
			/USING=REQUIRED &
			/LOV=CASH_RECEIPT_TYPES(CASH_RECEIPT_TYPE,CODE_DESCRIPTION) &
			/LOV_WITH=COMPANY_CODE = #COMPANY_CODE

	BEGIN_BLOCK CHECK_PAYMENT_TYPE

		FIND IN CASH_RECEIPT_TYPES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=CASH_RECEIPT_TYPE =SALES_ORDER_HEADERS(AR_DRAFT_PAYMENT_TYPE)


		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_51156,SALES_ORDER_HEADERS(AR_DRAFT_PAYMENT_TYPE)
			GOTO AR_DRAFT_PAYMENT_TYPE
		ELSE
			OUTPUT_BLOCK /ROW=2 /COL=32 &
				/SOURCE=(CASH_RECEIPT_TYPES(CODE_DESCRIPTION))
		END_IF

	END_BLOCK

	YESNO_BLOCK CONFIRM /ROW=9 /COL=60 &
			/PROMPT=(MESSAGE("P_00142")) &
			/BACK=(GOTO AR_DRAFT_PAYMENT_TYPE) &
			/FAILURE=(GOTO AR_DRAFT_PAYMENT_TYPE)

END_FORM


PROCEDURE_FORM TIDY_UP_ATP

	BEGIN_BLOCK DELETES

		#A=TABLE_CHECK("ATP_VT","")
		IF (#A=%NORMAL)
			DELETE TABLE ATP_VT
		END_IF

		#A=TABLE_CHECK("ATP_SEQ_VT","")
		IF (#A=%NORMAL)
			DELETE TABLE ATP_SEQ_VT
		END_IF

		#A=TABLE_CHECK("ATP_SEQ_PROMISES_VT","")
		IF (#A=%NORMAL)
			DELETE TABLE ATP_SEQ_PROMISES_VT
		END_IF

	END_BLOCK
END_FORM


FORM CLOSE_ORDER /ROW=18 /COL=45 /HEIGHT=5 /WIDTH=30 &
	/TITLE=(MESSAGE("PC_CLOSE") & " " & MESSAGE("P_01487") &
			& " " & MESSAGE("P_56187"))
	! title is: Close All Order Lines

	YESNO_BLOCK CONFIRM /ROW=3 /COL=22 &
		/PROMPT=(MESSAGE("P_00061")) &
		/FAILURE=(GOTO END) &
		/SUCCESS=(GOTO CLOSE_ORDER_UPDATE)
	
	BEGIN_BLOCK CLOSE_ORDER_UPDATE	
		PERFORM CLOSE_ORDER_UPDATE
		IF (%STATUS = %SUCCESS) 
			#R_CLOSE_STATUS = %SUCCESS
		ELSE
			#R_CLOSE_STATUS = %FAILURE
		END_IF
		EXIT
	END_BLOCK
	
	BEGIN_BLOCK END
		#R_CLOSE_STATUS=%FAILURE
	END_BLOCK


END_FORM


FORM CLOSE_ORDER_LINE /ROW=18 /COL=45 /HEIGHT=5 /WIDTH=30 &
	/TITLE=(MESSAGE("P_66232"))
	! title is: Close Line

	YESNO_BLOCK CONFIRM /ROW=3 /COL=22 &
		/PROMPT=(MESSAGE("P_00061")) &
		/FAILURE=(EXIT) &
		/SUCCESS=(PERFORM CLOSE_LINE_UPDATE)

END_FORM


PROCEDURE_FORM CLOSE_ORDER_UPDATE

	BEGIN_BLOCK INIT
		DELETE ALL FROM SYS_MESSAGES
	END_BLOCK

	BEGIN_BLOCK CALL
		START_TRANSACTION

		FIND IN DESPATCH_NOTES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=ORDER_NUMBER=#ORDER_NUMBER

		IF (%STATUS = %SUCCESS)
			#DESPATCH_NOTE = DESPATCH_NOTES(DESPATCH_NOTE)
		ELSE
			#DESPATCH_NOTE = ""
		END_IF

		PERFORM "GEMLB:LB_S_L_CLOSE_ORDER" LB_S_L_CLOSE_ORDER (#COMPANY_CODE, #DIVISION,	&
				#ORDER_NUMBER, #DESPATCH_NOTE, "", PARAMETER("FLAG_MANUAL"))

		IF (%STATUS <> %SUCCESS)
			PERFORM DISPLAY_SYS_MESSAGE
			ROLLBACK
			EXIT (%FAILURE)
		ELSE
			FIND IN SYS_MESSAGES
			IF (%STATUS <> %SUCCESS)
				FIND IN SALES_ORDER_LINES &
					/WITH=COMPANY_CODE = #COMPANY_CODE &
					/WITH=DIVISION = #DIVISION &
					/WITH=ORDER_NUMBER = #ORDER_NUMBER &
					/WITH=STATUS_FLAG <> PARAMETER("STATUS_CLOSED")

				IF (%STATUS <> %SUCCESS)
					MESSAGE/IDENTIFIER P_09283
				ELSE
					#R_MESSAGE = MESSAGE("P_96085") & " - " & MESSAGE("P_62308")
					ERROR/WAIT #R_MESSAGE
					ROLLBACK
					EXIT(%FAILURE)
				END_IF
			ELSE
				PERFORM DISPLAY_SYS_MESSAGE
			END_IF
			COMMIT
		END_IF
	END_BLOCK

	BEGIN_BLOCK END_LINE_CLOSE
	END_BLOCK

END_FORM


PROCEDURE_FORM CLOSE_LINE_UPDATE

	BEGIN_BLOCK INIT
		DELETE ALL FROM SYS_MESSAGES
	END_BLOCK

	BEGIN_BLOCK CALL
		START_TRANSACTION
		!Store these values in new variable for find in sales order lines after this LB routine is run
		!in case the buffer gets destroyed

		#ORD_NUM = SALES_ORDER_LINES(ORDER_NUMBER)
		#ORD_LINE_NUM = SALES_ORDER_LINES(ORDER_LINE_NUMBER)

		FIND IN DESPATCH_NOTES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=SALES_ORDER_LINES(COMPANY_CODE) &
			/WITH=DIVISION=SALES_ORDER_LINES(DIVISION) &
			/WITH=ORDER_NUMBER=SALES_ORDER_LINES(ORDER_NUMBER) &
			/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER)

		IF (%STATUS = %SUCCESS)
			#DESPATCH_NOTE = DESPATCH_NOTES(DESPATCH_NOTE)
		ELSE
			#DESPATCH_NOTE = ""
		END_IF

		PERFORM "GEMLB:LB_S_L_CLOSE_ORDER" LB_S_L_CLOSE_ORDER_LINE (#COMPANY_CODE, #DIVISION,	&
				SALES_ORDER_LINES(ORDER_NUMBER), 	&
				SALES_ORDER_LINES(ORDER_LINE_NUMBER), #DESPATCH_NOTE, PARAMETER("FLAG_MANUAL"))

		IF (%STATUS <> %SUCCESS)
			PERFORM DISPLAY_SYS_MESSAGE
			ROLLBACK
		ELSE
			COMMIT
			!Bring record back into buffer
			FIND IN SALES_ORDER_LINES &
				/WITH=COMPANY_CODE = #COMPANY_CODE &
				/WITH=DIVISION = #DIVISION &
				/WITH=ORDER_NUMBER = #ORD_NUM &
				/WITH=ORDER_LINE_NUMBER = #ORD_LINE_NUM

			FIND IN SYS_MESSAGES
			IF (%STATUS <> %SUCCESS)
				IF (SALES_ORDER_LINES(STATUS_FLAG) = PARAMETER("STATUS_CLOSED"))
					MESSAGE/IDENTIFIER P_20236,(SALES_ORDER_LINES(ORDER_LINE_NUMBER)),(MESSAGE("P_92968"))
					! message is: Line 999 is now closed
				ELSE
					#R_MESSAGE = MESSAGE("P_96085") & " - " & MESSAGE("P_62308")
					ERROR/WAIT #R_MESSAGE
				END_IF
			ELSE
				PERFORM DISPLAY_SYS_MESSAGE
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK END_LINE_CLOSE
	END_BLOCK

END_FORM


PROCEDURE_FORM CREDIT_CHECK

	BEGIN_BLOCK CREDIT_CHECK
			! At this point the credit limit check should determine whether or not
			! the customer is within his limits before further entry

		FIND IN SALES_ORDER_HEADERS &
			/LOCK=WRITE &
!Delete the following lines issue#368358-21
!			/SECONDARY &
!			/STREAM_NAME = SOH &
!End of deletes
			/WITH=COMPANY_CODE = PARAMETER("USER_COMPANY_CODE") &
			/WITH=DIVISION = #DIVISION &
			/WITH=ORDER_NUMBER =#ORDER_NUMBER

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_52217
			EXIT(%FAILURE)
!Add the following lines issue#368358-22
		ELSE
			#OLD_BASE_TOTAL = SALES_ORDER_HEADERS(OS_ORDER_VALUE)
!End of adds
		END_IF

!Add the following line issue#368358-23
		PERFORM "GEMLB:LB_S_L_OS_ORDER_VALUE" GET_OS_ORDER_VALUE(#COMPANY_CODE,#DIVISION,#ORDER_NUMBER,#OS_ORDER_VALUE)
!End of adds
!Delete the following lines
!		IF (#CURRENCY_METHOD > "0")
!			DELETE ALL FROM SYS_CURRENCY_VALUES_VT
!			CLEAR_BUFFER SYS_CURRENCY_VALUES_VT
!
!			SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE) = SOH:SALES_ORDER_HEADERS(SOP_ORDER_TOTAL_CURRENCY) - &
!								    SOH:SALES_ORDER_HEADERS(LINE_DISCOUNT) + &
!								    SOH:SALES_ORDER_HEADERS(LINE_TAX)
!			ADD TO SYS_CURRENCY_VALUES_VT
!
!			PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" &
!				(#SUCCESS, &
!				#RETURN_MESSAGE)
!
!			FIND IN SYS_CURRENCY_VALUES_VT &
!				/LOCK=NONE
!
!
!			#CHECK_TOTAL_BASE = SYS_CURRENCY_VALUES_VT(BASE_VALUE)
!			DELETE ALL FROM SYS_CURRENCY_VALUES_VT
!		ELSE
!			#CHECK_TOTAL_BASE = SOH:SALES_ORDER_HEADERS(SOP_ORDER_TOTAL_CURRENCY) - &
!						 SOH:SALES_ORDER_HEADERS(LINE_DISCOUNT) + &
!						 SOH:SALES_ORDER_HEADERS(LINE_TAX)
!		END_IF
!End of deletes

		PERFORM "GEMLB:SOP_L_CREDIT_LIMITS" &
			(PARAMETER("USER_COMPANY_CODE"), &
			 #DIVISION, &
			 #CUSTOMER_NUMBER, &
!Delete the following line issue#368358-24
!			 #CHECK_TOTAL_BASE, &
!End of deletes
!Add the following line
			 #OS_ORDER_VALUE, &
!End of adds
			 (PARAMETER("SOP_STAGE_ORDER")), &
			 (#OLD_TOTAL_ORDER_VALUE), &
			 (#EDIT_MODE), &
			 #NO, &
			 "", &
			 "", &
			 #ACTION, &
			 #MAN_AUTO, &
			 #CREDIT_STATUS_CODE, &
			 #MESSAGE, &
			 "")

		IF (%STATUS = %FAILURE)
			ROLLBACK
			EXIT (%FAILURE)
		END_IF

		FIND IN SALES_ORDER_HEADERS &
			/LOCK=WRITE &
			/WITH=COMPANY_CODE = PARAMETER("USER_COMPANY_CODE") &
			/WITH=DIVISION = #DIVISION &
			/WITH=ORDER_NUMBER =#ORDER_NUMBER

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_52217
				EXIT(%FAILURE)
			END_IF

		BEGIN_CASE (#ACTION)

			CASE PARAMETER("CREDIT_OK")
				SALES_ORDER_HEADERS(CREDIT_STATUS_CODE) = ""
				GOTO DEFAULT_SETUP

			CASE PARAMETER("CREDIT_REJECT")
				ERROR (#MESSAGE)
				SALES_ORDER_HEADERS(CREDIT_STATUS_CODE) = ""
				EXIT(%FAILURE)

			CASE PARAMETER("CREDIT_WARN")
				IF (NOT #ALREADY_WARN)
					ERROR (#MESSAGE)
					#ALREADY_WARN = #YES
				END_IF
				SALES_ORDER_HEADERS(CREDIT_STATUS_CODE) = ""
				GOTO DEFAULT_SETUP

			CASE PARAMETER("CREDIT_HOLD")
				IF (NOT #ALREADY_CREDIT_HOLD)
					ERROR (#MESSAGE)
					#ALREADY_CREDIT_HOLD = #YES
				END_IF
				SALES_ORDER_HEADERS(CREDIT_STATUS_CODE) = #CREDIT_STATUS_CODE

				IF (#MAN_AUTO = (PARAMETER("AM_FLAG_M")))
					PERFORM CREDIT_STATUS_CODE
					SALES_ORDER_HEADERS(CREDIT_STATUS_CODE) = #CREDIT_STATUS_CODE
				END_IF
				GOTO DEFAULT_SETUP
		END_CASE
	END_BLOCK

	BEGIN_BLOCK DEFAULT_SETUP
!**************************
		START_TRANSACTION

		IF ((#OPT = "NEXT") OR (#OPT = "DESPATCH") OR (#OPT = "HEADER"))
			FIND IN CUSTOMERS &
				/LOCK=WRITE &
				/WITH=COMPANY_CODE = PARAMETER("USER_COMPANY_CODE") &
				/WITH=DIVISION = #DIVISION &
!Delete the following line issue#368358-25
!				/WITH=CUSTOMER_NUMBER = SOH:SALES_ORDER_HEADERS(CUSTOMER_NUMBER)
!End of deletes
!Add the following line
				/WITH=CUSTOMER_NUMBER = SALES_ORDER_HEADERS(CUSTOMER_NUMBER)
!End of adds


			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_00187
			ELSE
!Add the following lines issue#368358-26 (note two lines are commented out)
				SALES_ORDER_HEADERS(OS_ORDER_VALUE) = #OS_ORDER_VALUE
				!#OLD_TOTAL_ORDER_VALUE = SALES_ORDER_HEADERS(TOTAL_ORDER_VALUE)
			  !#ORIG_ORDER_VALUE_BASE = SALES_ORDER_HEADERS(SOP_ORDER_VALUE_BASE)
!End of adds
!Delete the following lines 
!				#VALUE_DIFF = #OLD_TOTAL_ORDER_VALUE - SOH:SALES_ORDER_HEADERS(TOTAL_ORDER_VALUE)
!
!				IF (#CURRENCY_METHOD > "0")
!					#VALUE_DIFF_BASE = #ORIG_ORDER_VALUE_BASE - SOH:SALES_ORDER_HEADERS(SOP_ORDER_VALUE_BASE)
!				ELSE
!					#VALUE_DIFF_BASE = #VALUE_DIFF
!				END_IF
!
!				CUSTOMERS(OS_ORDER_VALUE) = CUSTOMERS(OS_ORDER_VALUE) - #VALUE_DIFF_BASE
!				
!				#OLD_TOTAL_ORDER_VALUE = SOH:SALES_ORDER_HEADERS(TOTAL_ORDER_VALUE)
!			    #ORIG_ORDER_VALUE_BASE = SOH:SALES_ORDER_HEADERS(SOP_ORDER_VALUE_BASE)
!End of deletes
			END_IF
		END_IF
	COMMIT
!****************************
	END_BLOCK
END_FORM


PROCEDURE_FORM SAVE_SYS_CURRENCY_CONTROL_VT

	BEGIN_BLOCK SAVE

		FIND IN SYS_CURRENCY_CONTROL_VT

		IF (%STATUS <> %SUCCESS)
			! error, weight volume is P_91241
			EXIT(%FAILURE)
		END_IF

		DELETE ALL FROM SYS_CURRENCY_CONTROL_TEMP_VT

		CLEAR_BUFFER SYS_CURRENCY_CONTROL_TEMP_VT

		SYS_CURRENCY_CONTROL_TEMP_VT(COMPANY_CODE) = SYS_CURRENCY_CONTROL_VT(COMPANY_CODE)
		SYS_CURRENCY_CONTROL_TEMP_VT(RATE_OVERRIDE) = SYS_CURRENCY_CONTROL_VT(RATE_OVERRIDE)
		SYS_CURRENCY_CONTROL_TEMP_VT(TRANSACTION_CURRENCY_MASK) = SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_MASK)
		SYS_CURRENCY_CONTROL_TEMP_VT(DIVISION) = SYS_CURRENCY_CONTROL_VT(DIVISION)
		SYS_CURRENCY_CONTROL_TEMP_VT(TRANS_TRIANGULATION) = SYS_CURRENCY_CONTROL_VT(TRANS_TRIANGULATION)
		SYS_CURRENCY_CONTROL_TEMP_VT(TRANSACTION_CURRENCY_DECIMALS) = SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_DECIMALS)
		SYS_CURRENCY_CONTROL_TEMP_VT(SOURCE_MODULE) = SYS_CURRENCY_CONTROL_VT(SOURCE_MODULE)
		SYS_CURRENCY_CONTROL_TEMP_VT(SYS_CURRENCY_2_RATIO_INDIC) = SYS_CURRENCY_CONTROL_VT(SYS_CURRENCY_2_RATIO_INDIC)
		SYS_CURRENCY_CONTROL_TEMP_VT(BASE_CURRENCY_MASK) = SYS_CURRENCY_CONTROL_VT(BASE_CURRENCY_MASK)
		SYS_CURRENCY_CONTROL_TEMP_VT(BASE_CURRENCY_DECIMALS) = SYS_CURRENCY_CONTROL_VT(BASE_CURRENCY_DECIMALS)
		SYS_CURRENCY_CONTROL_TEMP_VT(STORE_BASE_2) = SYS_CURRENCY_CONTROL_VT(STORE_BASE_2)
		SYS_CURRENCY_CONTROL_TEMP_VT(BASE_2_CURRENCY_MASK) = SYS_CURRENCY_CONTROL_VT(BASE_2_CURRENCY_MASK)
		SYS_CURRENCY_CONTROL_TEMP_VT(FIXED_RATE_INDIC) = SYS_CURRENCY_CONTROL_VT(FIXED_RATE_INDIC)
		SYS_CURRENCY_CONTROL_TEMP_VT(BASE_2_CURRENCY_DECIMALS) = SYS_CURRENCY_CONTROL_VT(BASE_2_CURRENCY_DECIMALS)
		SYS_CURRENCY_CONTROL_TEMP_VT(CODE_RATE_INPUT_FLAG) = SYS_CURRENCY_CONTROL_VT(CODE_RATE_INPUT_FLAG)
		SYS_CURRENCY_CONTROL_TEMP_VT(TRANSACTION_DATE) = SYS_CURRENCY_CONTROL_VT(TRANSACTION_DATE)
		SYS_CURRENCY_CONTROL_TEMP_VT(TRANS_2_CURRENCY_CODE) = SYS_CURRENCY_CONTROL_VT(TRANS_2_CURRENCY_CODE)
		SYS_CURRENCY_CONTROL_TEMP_VT(CURRENCY_METHOD) = SYS_CURRENCY_CONTROL_VT(CURRENCY_METHOD)
		SYS_CURRENCY_CONTROL_TEMP_VT(TRANSACTION_CURRENCY_CODE) = SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE)
		SYS_CURRENCY_CONTROL_TEMP_VT(BASE_CURRENCY_CODE) = SYS_CURRENCY_CONTROL_VT(BASE_CURRENCY_CODE)
		SYS_CURRENCY_CONTROL_TEMP_VT(TRANSACTION_RATE) = SYS_CURRENCY_CONTROL_VT(TRANSACTION_RATE)
		SYS_CURRENCY_CONTROL_TEMP_VT(BASE_2_CURRENCY_CODE) = SYS_CURRENCY_CONTROL_VT(BASE_2_CURRENCY_CODE)
		SYS_CURRENCY_CONTROL_TEMP_VT(BASE_RATE) = SYS_CURRENCY_CONTROL_VT(BASE_RATE)
		SYS_CURRENCY_CONTROL_TEMP_VT(CALCULATED_RATE) = SYS_CURRENCY_CONTROL_VT(CALCULATED_RATE)
		SYS_CURRENCY_CONTROL_TEMP_VT(RATE_AUTH_IN_USE) = SYS_CURRENCY_CONTROL_VT(RATE_AUTH_IN_USE)
		SYS_CURRENCY_CONTROL_TEMP_VT(CURR_RATIO_INDIC) = SYS_CURRENCY_CONTROL_VT(CURR_RATIO_INDIC)
		SYS_CURRENCY_CONTROL_TEMP_VT(FIRST_CURRENCY_RATE) = SYS_CURRENCY_CONTROL_VT(FIRST_CURRENCY_RATE)
		SYS_CURRENCY_CONTROL_TEMP_VT(RATE_TYPE_IN_USE) = SYS_CURRENCY_CONTROL_VT(RATE_TYPE_IN_USE)
		SYS_CURRENCY_CONTROL_TEMP_VT(RATE_AUTHORITY) = SYS_CURRENCY_CONTROL_VT(RATE_AUTHORITY)
		SYS_CURRENCY_CONTROL_TEMP_VT(RATE_TYPE) = SYS_CURRENCY_CONTROL_VT(RATE_TYPE)
		SYS_CURRENCY_CONTROL_TEMP_VT(SECOND_CURRENCY_RATE) = SYS_CURRENCY_CONTROL_VT(SECOND_CURRENCY_RATE)
		SYS_CURRENCY_CONTROL_TEMP_VT(CURRENCY_DATE) = SYS_CURRENCY_CONTROL_VT(CURRENCY_DATE)
		SYS_CURRENCY_CONTROL_TEMP_VT(CURRENCY_CODE_DESCRIPTION) = SYS_CURRENCY_CONTROL_VT(CURRENCY_CODE_DESCRIPTION)
		SYS_CURRENCY_CONTROL_TEMP_VT(MODIFY_TRANS_RATE) = SYS_CURRENCY_CONTROL_VT(MODIFY_TRANS_RATE)
		SYS_CURRENCY_CONTROL_TEMP_VT(MODIFY_BASE_RATE) = SYS_CURRENCY_CONTROL_VT(MODIFY_BASE_RATE)
		SYS_CURRENCY_CONTROL_TEMP_VT(TOLERANCE_PERCENT) = SYS_CURRENCY_CONTROL_VT(TOLERANCE_PERCENT)
		SYS_CURRENCY_CONTROL_TEMP_VT(TOLERANCE_FLAG) = SYS_CURRENCY_CONTROL_VT(TOLERANCE_FLAG)
		SYS_CURRENCY_CONTROL_TEMP_VT(SYS_CURRENCY_DATE_OVERRIDE) = SYS_CURRENCY_CONTROL_VT(SYS_CURRENCY_DATE_OVERRIDE)

		ADD TO SYS_CURRENCY_CONTROL_TEMP_VT
		IF (%STATUS = %FAILURE)
			EXIT(%FAILURE)
		END_IF
	END_BLOCK

END_FORM


PROCEDURE_FORM RESTOR_SYS_CURRENCY_CONTROL_VT

	BEGIN_BLOCK RESTORE

		FIND IN SYS_CURRENCY_CONTROL_TEMP_VT

		IF (%STATUS <> %SUCCESS)
			EXIT(%FAILURE)
		END_IF

		DELETE ALL FROM SYS_CURRENCY_CONTROL_VT

		CLEAR_BUFFER SYS_CURRENCY_CONTROL_VT

		SYS_CURRENCY_CONTROL_VT(COMPANY_CODE) = SYS_CURRENCY_CONTROL_TEMP_VT(COMPANY_CODE)
		SYS_CURRENCY_CONTROL_VT(RATE_OVERRIDE) = SYS_CURRENCY_CONTROL_TEMP_VT(RATE_OVERRIDE)
		SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_MASK) = SYS_CURRENCY_CONTROL_TEMP_VT(TRANSACTION_CURRENCY_MASK)
		SYS_CURRENCY_CONTROL_VT(DIVISION) = SYS_CURRENCY_CONTROL_TEMP_VT(DIVISION)
		SYS_CURRENCY_CONTROL_VT(TRANS_TRIANGULATION) = SYS_CURRENCY_CONTROL_TEMP_VT(TRANS_TRIANGULATION)
		SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_DECIMALS) = SYS_CURRENCY_CONTROL_TEMP_VT(TRANSACTION_CURRENCY_DECIMALS)
		SYS_CURRENCY_CONTROL_VT(SOURCE_MODULE) = SYS_CURRENCY_CONTROL_TEMP_VT(SOURCE_MODULE)
		SYS_CURRENCY_CONTROL_VT(SYS_CURRENCY_2_RATIO_INDIC) = SYS_CURRENCY_CONTROL_TEMP_VT(SYS_CURRENCY_2_RATIO_INDIC)
		SYS_CURRENCY_CONTROL_VT(BASE_CURRENCY_MASK) = SYS_CURRENCY_CONTROL_TEMP_VT(BASE_CURRENCY_MASK)
		SYS_CURRENCY_CONTROL_VT(BASE_CURRENCY_DECIMALS) = SYS_CURRENCY_CONTROL_TEMP_VT(BASE_CURRENCY_DECIMALS)
		SYS_CURRENCY_CONTROL_VT(STORE_BASE_2) = SYS_CURRENCY_CONTROL_TEMP_VT(STORE_BASE_2)
		SYS_CURRENCY_CONTROL_VT(BASE_2_CURRENCY_MASK) = SYS_CURRENCY_CONTROL_TEMP_VT(BASE_2_CURRENCY_MASK)
		SYS_CURRENCY_CONTROL_VT(FIXED_RATE_INDIC) = SYS_CURRENCY_CONTROL_TEMP_VT(FIXED_RATE_INDIC)
		SYS_CURRENCY_CONTROL_VT(BASE_2_CURRENCY_DECIMALS) = SYS_CURRENCY_CONTROL_TEMP_VT(BASE_2_CURRENCY_DECIMALS)
		SYS_CURRENCY_CONTROL_VT(CODE_RATE_INPUT_FLAG) = SYS_CURRENCY_CONTROL_TEMP_VT(CODE_RATE_INPUT_FLAG)
		SYS_CURRENCY_CONTROL_VT(TRANSACTION_DATE) = SYS_CURRENCY_CONTROL_TEMP_VT(TRANSACTION_DATE)
		SYS_CURRENCY_CONTROL_VT(TRANS_2_CURRENCY_CODE) = SYS_CURRENCY_CONTROL_TEMP_VT(TRANS_2_CURRENCY_CODE)
		SYS_CURRENCY_CONTROL_VT(CURRENCY_METHOD) = SYS_CURRENCY_CONTROL_TEMP_VT(CURRENCY_METHOD)
		SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE) = SYS_CURRENCY_CONTROL_TEMP_VT(TRANSACTION_CURRENCY_CODE)
		SYS_CURRENCY_CONTROL_VT(BASE_CURRENCY_CODE) = SYS_CURRENCY_CONTROL_TEMP_VT(BASE_CURRENCY_CODE)
		SYS_CURRENCY_CONTROL_VT(TRANSACTION_RATE) = SYS_CURRENCY_CONTROL_TEMP_VT(TRANSACTION_RATE)
		SYS_CURRENCY_CONTROL_VT(BASE_2_CURRENCY_CODE) = SYS_CURRENCY_CONTROL_TEMP_VT(BASE_2_CURRENCY_CODE)
		SYS_CURRENCY_CONTROL_VT(BASE_RATE) = SYS_CURRENCY_CONTROL_TEMP_VT(BASE_RATE)
		SYS_CURRENCY_CONTROL_VT(CALCULATED_RATE) = SYS_CURRENCY_CONTROL_TEMP_VT(CALCULATED_RATE)
		SYS_CURRENCY_CONTROL_VT(RATE_AUTH_IN_USE) = SYS_CURRENCY_CONTROL_TEMP_VT(RATE_AUTH_IN_USE)
		SYS_CURRENCY_CONTROL_VT(CURR_RATIO_INDIC) = SYS_CURRENCY_CONTROL_TEMP_VT(CURR_RATIO_INDIC)
		SYS_CURRENCY_CONTROL_VT(FIRST_CURRENCY_RATE) = SYS_CURRENCY_CONTROL_TEMP_VT(FIRST_CURRENCY_RATE)
		SYS_CURRENCY_CONTROL_VT(RATE_TYPE_IN_USE) = SYS_CURRENCY_CONTROL_TEMP_VT(RATE_TYPE_IN_USE)
		SYS_CURRENCY_CONTROL_VT(RATE_AUTHORITY) = SYS_CURRENCY_CONTROL_TEMP_VT(RATE_AUTHORITY)
		SYS_CURRENCY_CONTROL_VT(RATE_TYPE) = SYS_CURRENCY_CONTROL_TEMP_VT(RATE_TYPE)
		SYS_CURRENCY_CONTROL_VT(SECOND_CURRENCY_RATE) = SYS_CURRENCY_CONTROL_TEMP_VT(SECOND_CURRENCY_RATE)
		SYS_CURRENCY_CONTROL_VT(CURRENCY_DATE) = SYS_CURRENCY_CONTROL_TEMP_VT(CURRENCY_DATE)
		SYS_CURRENCY_CONTROL_VT(CURRENCY_CODE_DESCRIPTION) = SYS_CURRENCY_CONTROL_TEMP_VT(CURRENCY_CODE_DESCRIPTION)
		SYS_CURRENCY_CONTROL_VT(MODIFY_TRANS_RATE) = SYS_CURRENCY_CONTROL_TEMP_VT(MODIFY_TRANS_RATE)
		SYS_CURRENCY_CONTROL_VT(MODIFY_BASE_RATE) = SYS_CURRENCY_CONTROL_TEMP_VT(MODIFY_BASE_RATE)
		SYS_CURRENCY_CONTROL_VT(TOLERANCE_PERCENT) = SYS_CURRENCY_CONTROL_TEMP_VT(TOLERANCE_PERCENT)
		SYS_CURRENCY_CONTROL_VT(TOLERANCE_FLAG) = SYS_CURRENCY_CONTROL_TEMP_VT(TOLERANCE_FLAG)
		SYS_CURRENCY_CONTROL_VT(SYS_CURRENCY_DATE_OVERRIDE) = SYS_CURRENCY_CONTROL_TEMP_VT(SYS_CURRENCY_DATE_OVERRIDE)

		ADD TO SYS_CURRENCY_CONTROL_VT
		IF (%STATUS = %FAILURE)
			EXIT(%FAILURE)
		END_IF
	END_BLOCK

END_FORM


PROCEDURE_FORM SETUP_CURRENCY_VT
       BEGIN_BLOCK TEMP_CURRENCY_CONTROL_VT
		#A=TABLE_CHECK("SYS_CURRENCY_CONTROL_TEMP_VT","")
		IF (#A=%NORMAL)
			 DELETE TABLE SYS_CURRENCY_CONTROL_TEMP_VT
		END_IF

		ADD TABLE SYS_CURRENCY_CONTROL_TEMP_VT &
			/VIRTUAL &
			/ADD_FIELD=COMPANY_CODE &
			/ADD_FIELD=RATE_OVERRIDE BASED_ON SYS_RATE_OVERRIDE &
			/ADD_FIELD=TRANSACTION_CURRENCY_MASK BASED_ON SYS_CURRENCY_MASK &
			/ADD_FIELD=DIVISION &
			/ADD_FIELD=TRANS_TRIANGULATION BASED_ON SYS_CURRENCY_FIXED_FLAG &
			/ADD_FIELD=TRANSACTION_CURRENCY_DECIMALS BASED_ON SYS_CURRENCY_DECIMALS &
			/ADD_FIELD=SOURCE_MODULE &
			/ADD_FIELD=SYS_CURRENCY_2_RATIO_INDIC &
			/ADD_FIELD=BASE_CURRENCY_MASK BASED_ON SYS_CURRENCY_MASK &
			/ADD_FIELD=BASE_CURRENCY_DECIMALS BASED_ON SYS_CURRENCY_DECIMALS &
			/ADD_FIELD=STORE_BASE_2 BASED_ON SYS_SECOND_BASE_IN_USE &
			/ADD_FIELD=BASE_2_CURRENCY_MASK BASED_ON SYS_CURRENCY_MASK &
			/ADD_FIELD=FIXED_RATE_INDIC BASED_ON SYS_CURRENCY_FIXED_FLAG &
			/ADD_FIELD=BASE_2_CURRENCY_DECIMALS BASED_ON SYS_CURRENCY_DECIMALS &
			/ADD_FIELD=CODE_RATE_INPUT_FLAG BASED_ON STATUS_FLAG &
			/ADD_FIELD=TRANSACTION_DATE &
			/ADD_FIELD=TRANS_2_CURRENCY_CODE BASED_ON SYS_CURRENCY_CODE &
			/ADD_FIELD=CURRENCY_METHOD BASED_ON SYS_CURRENCY_METHOD &
			/ADD_FIELD=TRANSACTION_CURRENCY_CODE BASED_ON SYS_CURRENCY_CODE &
			/ADD_FIELD=BASE_CURRENCY_CODE BASED_ON SYS_CURRENCY_CODE &
			/ADD_FIELD=TRANSACTION_RATE BASED_ON SYS_CURRENCY_RATE &
			/ADD_FIELD=BASE_2_CURRENCY_CODE BASED_ON SYS_CURRENCY_CODE &
			/ADD_FIELD=BASE_RATE BASED_ON SYS_CURRENCY_RATE &
			/ADD_FIELD=CALCULATED_RATE BASED_ON SYS_CURRENCY_RATE &
			/ADD_FIELD=RATE_AUTH_IN_USE BASED_ON SYS_RATE_AUTH_IN_USE &
			/ADD_FIELD=CURR_RATIO_INDIC BASED_ON SYS_CURRENCY_RATIO_INDIC &
			/ADD_FIELD=FIRST_CURRENCY_RATE BASED_ON SYS_CURRENCY_RATE &
			/ADD_FIELD=RATE_TYPE_IN_USE BASED_ON SYS_RATE_TYPE_IN_USE &
			/ADD_FIELD=RATE_AUTHORITY BASED_ON SYS_RATE_AUTHORITY &
			/ADD_FIELD=RATE_TYPE BASED_ON SYS_RATE_TYPE &
			/ADD_FIELD=SECOND_CURRENCY_RATE BASED_ON SYS_CURRENCY_RATE &
			/ADD_FIELD=CURRENCY_DATE BASED_ON TRANSACTION_DATE &
			/ADD_FIELD=CURRENCY_CODE_DESCRIPTION BASED_ON SYS_CODE_DESCRIPTION &
			/ADD_FIELD=MODIFY_TRANS_RATE BASED_ON SYS_CURRENCY_FIXED_FLAG &
			/ADD_FIELD=MODIFY_BASE_RATE BASED_ON SYS_CURRENCY_FIXED_FLAG &
			/ADD_FIELD=TOLERANCE_PERCENT BASED_ON SYS_TOLERANCE_PERCENT &
			/ADD_FIELD=TOLERANCE_FLAG BASED_ON SYS_TOLERANCE_FLAG &
			/ADD_FIELD=SYS_CURRENCY_DATE_OVERRIDE
	END_BLOCK
END_FORM


TABLE_FORM ORDER_HEADER_COMMENTS /ROW=17 /COL=7 /HEIGHT=7 /WIDTH=69 &
	/TITLE=(MESSAGE("P_93540")) &
	/TABLE=SOP_ORDER_HEADER_COMMENTS &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION=#DIVISION &
	/WITH=ORDER_NUMBER=#ORDER_NUMBER &
	/SEQUENCE=SOP_ORDER_COMMENT_SEQUENCE &
	/SEQUENCE_INCREMENT=(10) &
	/LOCK=WRITE

	BEGIN_BLOCK SETUP
		#COMMENTS_EDIT_MODE = %EDIT_MODE
		IF (#COMMENTS_EDIT_MODE = %ADD)
			SOP_ORDER_HEADER_COMMENTS(COMPANY_CODE) = #COMPANY_CODE
			SOP_ORDER_HEADER_COMMENTS(DIVISION) = #DIVISION
			SOP_ORDER_HEADER_COMMENTS(ORDER_NUMBER) = #ORDER_NUMBER
		END_IF
	END_BLOCK

	INPUT_BLOCK SEQUENCE /ROW=1 /COL=2 /NEW &
			/DOMAIN=SOP_ORDER_HEADER_COMMENTS &
			/SOURCE=(SOP_ORDER_HEADER_COMMENTS(SOP_ORDER_COMMENT_SEQUENCE)) &
			/TARGET=SOP_ORDER_HEADER_COMMENTS(SOP_ORDER_COMMENT_SEQUENCE) &
			/HEADING=FIELD_HEADING(SOP_ORDER_HEADER_COMMENTS,SOP_ORDER_COMMENT_SEQUENCE) &

	INPUT_BLOCK TM_COMMENT /ROW=1 /COL=7 &
			/TARGET=SOP_ORDER_HEADER_COMMENTS(SOP_COMMENT) &
			/USING=REQUIRED &
			/HEADING=FIELD_HEADING(SOP_ORDER_HEADER_COMMENTS,SOP_COMMENT)

	INPUT_BLOCK SOP_PRINT_ON_ORDER_ACK /ROW=1 /COL=49 /LEN=3 &
			/TARGET=SOP_ORDER_HEADER_COMMENTS(SOP_PRINT_ON_ORDER_ACK) &
			/USING=REQUIRED &
			/HEADING=FIELD_HEADING(SOP_ORDER_HEADER_COMMENTS,SOP_PRINT_ON_ORDER_ACK)

	INPUT_BLOCK SOP_PRINT_ON_SHIP_LIST /ROW=1 /COL=53 /LEN=3 &
			/TARGET=SOP_ORDER_HEADER_COMMENTS(SOP_PRINT_ON_SHIP_LIST) &
			/USING=REQUIRED &
			/HEADING=FIELD_HEADING(SOP_ORDER_HEADER_COMMENTS,SOP_PRINT_ON_SHIP_LIST)

	INPUT_BLOCK SOP_PRINT_ON_CON_NOTE /ROW=1 /COL=57 /LEN=3 &
			/TARGET=SOP_ORDER_HEADER_COMMENTS(SOP_PRINT_ON_CON_NOTE) &
			/USING=REQUIRED &
			/HEADING=FIELD_HEADING(SOP_ORDER_HEADER_COMMENTS,SOP_PRINT_ON_CON_NOTE)

	INPUT_BLOCK SOP_PRINT_ON_INVOICE /ROW=1 /COL=61 /LEN=3 &
			/TARGET=SOP_ORDER_HEADER_COMMENTS(SOP_PRINT_ON_INVOICE) &
			/USING=REQUIRED &
			/HEADING=FIELD_HEADING(SOP_ORDER_HEADER_COMMENTS,SOP_PRINT_ON_INVOICE)

	BEGIN_BLOCK CONTROL_INFO
		IF (#COMMENTS_EDIT_MODE = %ADD)
			SOP_ORDER_HEADER_COMMENTS(USERNAME) = %USERNAME
			SOP_ORDER_HEADER_COMMENTS(SYSTEM_DATE) = %NOW
		END_IF
	END_BLOCK

END_FORM


PROCEDURE_FORM COPY_HEADER_COMMENTS &
	/TABLE=SOP_ORDER_HEADER_COMMENTS &
	/SECONDARY &
	/STREAM_NAME=SOHC &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION=#DIVISION &
	/WITH=ORDER_NUMBER=#ORDER_NUMBER_COPY &
	/SORTED_BY=SOP_ORDER_COMMENT_SEQUENCE

	BEGIN_BLOCK CREATE_NEW_REC
		CLEAR_BUFFER SOP_ORDER_HEADER_COMMENTS

		SOP_ORDER_HEADER_COMMENTS(COMPANY_CODE)		= SOHC:SOP_ORDER_HEADER_COMMENTS(COMPANY_CODE)
		SOP_ORDER_HEADER_COMMENTS(DIVISION)		= SOHC:SOP_ORDER_HEADER_COMMENTS(DIVISION)
		SOP_ORDER_HEADER_COMMENTS(ORDER_NUMBER)		= #ORDER_NUMBER
		SOP_ORDER_HEADER_COMMENTS(SOP_ORDER_COMMENT_SEQUENCE)	= SOHC:SOP_ORDER_HEADER_COMMENTS(SOP_ORDER_COMMENT_SEQUENCE)
		SOP_ORDER_HEADER_COMMENTS(SOP_COMMENT)		= SOHC:SOP_ORDER_HEADER_COMMENTS(SOP_COMMENT)
		SOP_ORDER_HEADER_COMMENTS(SOP_PRINT_ON_ORDER_ACK)	= SOHC:SOP_ORDER_HEADER_COMMENTS(SOP_PRINT_ON_ORDER_ACK)
		SOP_ORDER_HEADER_COMMENTS(SOP_PRINT_ON_SHIP_LIST)	= SOHC:SOP_ORDER_HEADER_COMMENTS(SOP_PRINT_ON_SHIP_LIST)
		SOP_ORDER_HEADER_COMMENTS(SOP_PRINT_ON_CON_NOTE)	= SOHC:SOP_ORDER_HEADER_COMMENTS(SOP_PRINT_ON_CON_NOTE)
		SOP_ORDER_HEADER_COMMENTS(SOP_PRINT_ON_INVOICE)		= SOHC:SOP_ORDER_HEADER_COMMENTS(SOP_PRINT_ON_INVOICE)
		SOP_ORDER_HEADER_COMMENTS(USERNAME)			= %USERNAME
		SOP_ORDER_HEADER_COMMENTS(SYSTEM_DATE)			= %NOW

		ADD TO SOP_ORDER_HEADER_COMMENTS
	END_BLOCK

END_FORM


PROCEDURE_FORM COPY_LINE_COMMENTS &
	/TABLE=SOP_ORDER_LINE_COMMENTS &
	/SECONDARY &
	/STREAM_NAME=SOLC &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION=#DIVISION &
	/WITH=ORDER_NUMBER=#ORDER_NUMBER_COPY &
	/SORTED_BY=ORDER_LINE_NUMBER,SOP_ORDER_LINE_COMMENT_SEQ

	BEGIN_BLOCK CREATE_NEW_REC
		CLEAR_BUFFER SOP_ORDER_LINE_COMMENTS

		SOP_ORDER_LINE_COMMENTS(COMPANY_CODE) 	= SOLC:SOP_ORDER_LINE_COMMENTS(COMPANY_CODE)
		SOP_ORDER_LINE_COMMENTS(DIVISION) 	= SOLC:SOP_ORDER_LINE_COMMENTS(DIVISION)
		SOP_ORDER_LINE_COMMENTS(ORDER_NUMBER) 	= #ORDER_NUMBER
		SOP_ORDER_LINE_COMMENTS(ORDER_LINE_NUMBER) 	= SOLC:SOP_ORDER_LINE_COMMENTS(ORDER_LINE_NUMBER)
		SOP_ORDER_LINE_COMMENTS(SOP_ORDER_LINE_COMMENT_SEQ) 	= SOLC:SOP_ORDER_LINE_COMMENTS(SOP_ORDER_LINE_COMMENT_SEQ)
		SOP_ORDER_LINE_COMMENTS(SOP_COMMENT) 			= SOLC:SOP_ORDER_LINE_COMMENTS(SOP_COMMENT)
		SOP_ORDER_LINE_COMMENTS(SOP_PRINT_ON_ORDER_ACK) 	= SOLC:SOP_ORDER_LINE_COMMENTS(SOP_PRINT_ON_ORDER_ACK)
		SOP_ORDER_LINE_COMMENTS(SOP_PRINT_ON_SHIP_LIST) 	= SOLC:SOP_ORDER_LINE_COMMENTS(SOP_PRINT_ON_SHIP_LIST)
		SOP_ORDER_LINE_COMMENTS(SOP_PRINT_ON_CON_NOTE) 		= SOLC:SOP_ORDER_LINE_COMMENTS(SOP_PRINT_ON_CON_NOTE)
		SOP_ORDER_LINE_COMMENTS(SOP_PRINT_ON_INVOICE) 		= SOLC:SOP_ORDER_LINE_COMMENTS(SOP_PRINT_ON_INVOICE)
		SOP_ORDER_LINE_COMMENTS(USERNAME) 		= %USERNAME
		SOP_ORDER_LINE_COMMENTS(SYSTEM_DATE) 		= %NOW

		ADD TO SOP_ORDER_LINE_COMMENTS
	END_BLOCK

END_FORM


PROCEDURE_FORM EDIT_TRANSPORT_REQS

	BEGIN_BLOCK EDIT_TRANSPORT
		#MODIFY_ALLOWED = #YES

		PERFORM "GEMTM:TM_L_TRANSPORT_REQUIREMENTS" EDIT_ENTRY (&
					#COMPANY_CODE, &
					#DIVISION, &
					#ORDER_NUMBER, &
					#ORDER_TYPE, &
					#DEF_SHIP_TERMS, &
					"", &
					"", &
					"", &
					#SYS_SHIPPING_DATE, &
					#SYS_DELIVERY_DATE, &
					#MODIFY_ALLOWED)
	END_BLOCK

END_FORM


PROCEDURE_FORM GET_FREIGHT_DORC_IND_VALUE (#IN_PRICE_FREIGHT_INCLUSIVE, &
	#IN_SHIP_CUST_PAYS_FREIGHT, #IN_WAREHOUSED_FLAG, &
	#OUT_DORC_IND, #OUT_PROMPT_PREFIX, #OUT_FREIGHT_APPLICABLE)

	BEGIN_BLOCK ASSIGN_DORC_IND
		#OUT_DORC_IND = 0
		#OUT_PROMPT_PREFIX = ""
		#OUT_FREIGHT_APPLICABLE = #NO
		#DORC_IND = 0
		#PROMPT_PREFIX = ""
		#FREIGHT_APPLICABLE = #NO

			IF ((#AR_FREIGHT_IN_USE <> #YES) &
		OR  (SALES_ORDER_LINES(SYS_FREIGHT_CONTRACT_NUMBER) = PARAMETER("TM_FREIGHT_CALC_AT_COST")))
			GOTO END_GET_VALUE
			! This added so no need to check AR Freight in use in
			! body of program OR type of freight contract on line
			! before calling this form because
			! prompt prefix and DorC indicator value must still
			! be assigned (null) values.
		END_IF

		BEGIN_CASE (#IN_PRICE_FREIGHT_INCLUSIVE)

			CASE (PARAMETER("LANGUAGE_YES"))
				BEGIN_CASE (#IN_SHIP_CUST_PAYS_FREIGHT)
					CASE (PARAMETER("LANGUAGE_YES"))
						#DORC_IND = 0
					CASE (PARAMETER("LANGUAGE_NO"))
						#DORC_IND = -1
					CASE ELSE
						EXIT(%FAILURE)
				END_CASE

			CASE (PARAMETER("LANGUAGE_NO"))
				BEGIN_CASE (#IN_SHIP_CUST_PAYS_FREIGHT)
					CASE (PARAMETER("LANGUAGE_YES"))
						#DORC_IND = 1
					CASE (PARAMETER("LANGUAGE_NO"))
						#DORC_IND =  0
					CASE ELSE
						EXIT(%FAILURE)
				END_CASE

			CASE ELSE
				EXIT(%FAILURE)
		END_CASE

		PERFORM GET_FREIGHT_PREFIX ( &
			(#DORC_IND), &
			(#IN_PRICE_FREIGHT_INCLUSIVE), &
			(#IN_WAREHOUSED_FLAG), &
			#PROMPT_PREFIX, &
			#FREIGHT_APPLICABLE)
	END_BLOCK

	BEGIN_BLOCK END_GET_VALUE
		#OUT_DORC_IND = #DORC_IND
		#OUT_PROMPT_PREFIX = #PROMPT_PREFIX
		#OUT_FREIGHT_APPLICABLE = #FREIGHT_APPLICABLE
	END_BLOCK

END_FORM


PROCEDURE_FORM GET_FREIGHT_PREFIX (#IN_DORC_IND, #IN_PRICE_IND, #IN_WH_FLAG, &
				#OUT_PREFIX, #OUT_FREIGHT_APPLICABLE)

	BEGIN_BLOCK DO_ASSIGN
		#OUT_PREFIX = ""
		#OUT_FREIGHT_APPLICABLE = #YES

			IF (#AR_FREIGHT_IN_USE <> #YES)
			#OUT_FREIGHT_APPLICABLE = #NO
			EXIT(%SUCCESS)
			! This test means that body of code does not have
			! to check for AR Freight in use, because still needs
			! an empty string for the prefix in this case.
			! Test may be duplicated in earlier calling forms
			! but this form can be called stand-alone, so test
			! duplication required.
		END_IF
		IF (#IN_DORC_IND < 0)
			#OUT_PREFIX = MESSAGE("P_93387")
		END_IF
		IF (#IN_DORC_IND > 0)
			#OUT_PREFIX = MESSAGE("P_00517")
		END_IF
		IF (#IN_DORC_IND = 0)
			! DorC value can be zero for 2 cases - either
			! freight is inclusive but still has a value,
			! or freight is not applicable for the line.
			! The latter can be identified by the price
			! being freight exclusive.
			IF ((#IN_PRICE_IND = #NO) OR (#IN_WH_FLAG <> #YES))
				#OUT_PREFIX = " "
				#OUT_FREIGHT_APPLICABLE = #NO
			ELSE
				#OUT_PREFIX = MESSAGE("P_93388")
			END_IF
		END_IF
	END_BLOCK

END_FORM


PROCEDURE_FORM DISPLAY_SYS_MESSAGE	&
	/TABLE=SYS_MESSAGES	&
	/LOCK=NONE

	BEGIN_BLOCK DISPLAY
		ERROR/WAIT SYS_MESSAGES(TEXT_MESSAGE)
	END_BLOCK
END_FORM


PROCEDURE_FORM TOTAL_ORDER_DISCOUNT_QTY &
	/TABLE=SALES_ORDER_LINES &
	/LOCK=READ &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION=#DIVISION &
	/WITH=ORDER_NUMBER=#ORDER_NUMBER

	BEGIN_BLOCK CHECK
		! Need /LOCK=WRITE here because the SALES_ORDER_LINE_QTYS
		! record(s) were created in the current transaction, so
		! without this lock they will not be found by this FIND.
		!
		FIND IN SALES_ORDER_LINE_QTYS &
			/LOCK=WRITE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION = #DIVISION &
			/WITH=ORDER_NUMBER=#ORDER_NUMBER &
			/WITH = ORDER_LINE_NUMBER = SALES_ORDER_LINES(ORDER_LINE_NUMBER) &
			/WITH = UNIT_OF_MEASURE = SALES_ORDER_LINES(UNIT_SALES)
		IF (%STATUS <> %SUCCESS)
			EXIT(%FAILURE)
		END_IF

		#ORDER_DISCOUNT_QUANTITY = #ORDER_DISCOUNT_QUANTITY + SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)
	END_BLOCK

END_FORM


PROCEDURE_FORM DELETE_S_L_Q_UOM (#ORIG_PRICE_UOM) &
		/TABLE=SALES_ORDER_LINE_QTYS &
		/LOCK=WRITE &
		/WITH=COMPANY_CODE=#COMPANY_CODE &
		/WITH=DIVISION=#DIVISION &
		/WITH=ORDER_NUMBER=SALES_ORDER_LINES(ORDER_NUMBER) &
		/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER) &
		/WITH=UNIT_OF_MEASURE=#ORIG_PRICE_UOM

	BEGIN_BLOCK DELETE
		DELETE FROM SALES_ORDER_LINE_QTYS
	END_BLOCK

END_FORM


PROCEDURE_FORM CALC_LINE_WTVOL_BY_DETAIL	&
	/TABLE=SALES_ORDER_LINE_DETAILS 	&
	/WITH=COMPANY_CODE=#COMPANY_CODE 	&
	/WITH=DIVISION=#DIVISION 	&
	/WITH=ORDER_NUMBER=SALES_ORDER_LINES(ORDER_NUMBER) &
	/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER)

	BEGIN_BLOCK INIT
		#NOMI_ORDER_DETAIL_QTY	 = 0
		PERFORM FIND_CURRENT_SO_LINE_DETAIL_QTY(#NOMI_UOM)
		#NOMI_ORDER_DETAIL_QTY	= SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY)

		#NON_NOMI_ORDER_DETAIL_QTY	= 0
		IF (#NON_NOMI_UOM <> "")
			PERFORM FIND_CURRENT_SO_LINE_DETAIL_QTY (#NON_NOMI_UOM, #R1)
			IF (%STATUS <> %SUCCESS)
				#NON_NOMI_ORDER_DETAIL_QTY	= 0
			ELSE
				#NON_NOMI_ORDER_DETAIL_QTY	= SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY)
			END_IF

		END_IF
		#PACK_DETAIL_QTY = 0
		IF (#IC_PACKAGED_PRODUCT = #YES AND #PACK_UOM <> "")
			PERFORM FIND_CURRENT_SO_LINE_DETAIL_QTY(#PACK_UOM, #R1)
			IF (%STATUS <> %SUCCESS)
				#PACK_DETAIL_QTY = 0
			ELSE
				#PACK_DETAIL_QTY = SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY)
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK SET_IC_ENGINE
		DELETE ALL FROM IC_ENGINE_DETAILS_VT
		DELETE ALL FROM IC_WTVOL_XMIT_VT
	END_BLOCK

	BEGIN_BLOCK SET_IC_ENGINE_DETAILS
		IC_ENGINE_DETAILS_VT(IC_RECORD_TYPE)	= PARAMETER("IC_RECORD_PRODUCT")
		IC_ENGINE_DETAILS_VT(IC_RECORD_PHASE)	= ""
		IC_ENGINE_DETAILS_VT(IC_LOT_NUMBER)	= SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER)
		IC_ENGINE_DETAILS_VT(IC_LOT_SEQUENCE)	= ""
		IC_ENGINE_DETAILS_VT(IC_MHU_ACTUAL_TYPE)	= ""
		IC_ENGINE_DETAILS_VT(BIN_LOCATION)	= ""
		IC_ENGINE_DETAILS_VT(MH_NUMBER) = ""
		IC_ENGINE_DETAILS_VT(IC_MOVE_QUANTITY_1)	= #NOMI_ORDER_DETAIL_QTY
		IC_ENGINE_DETAILS_VT(IC_QTY_AVAILABLE_1)	= 0
		IC_ENGINE_DETAILS_VT(UNIT_OF_MEASURE_1) = #NOMI_UOM
		IC_ENGINE_DETAILS_VT(IC_INIT_QTY_RESERVED_1)	= 0
		IC_ENGINE_DETAILS_VT(IC_MOVE_QUANTITY_2)	= #NON_NOMI_ORDER_DETAIL_QTY
		IC_ENGINE_DETAILS_VT(IC_QTY_AVAILABLE_2)	= 0
		IC_ENGINE_DETAILS_VT(UNIT_OF_MEASURE_2) = #NON_NOMI_UOM
		IC_ENGINE_DETAILS_VT(IC_INIT_QTY_RESERVED_2)	= 0
		IC_ENGINE_DETAILS_VT(IC_MOVE_QUANTITY_3)	= #PACK_DETAIL_QTY
		IC_ENGINE_DETAILS_VT(IC_QTY_AVAILABLE_3)	= 0
		IC_ENGINE_DETAILS_VT(UNIT_OF_MEASURE_3) = #PACK_UOM
		IC_ENGINE_DETAILS_VT(IC_INIT_QTY_RESERVED_3)= 0
		IC_ENGINE_DETAILS_VT(BEST_BEFORE_DATE)	= ""
		IC_ENGINE_DETAILS_VT(EXPIRY_DATE)	= ""
		IC_ENGINE_DETAILS_VT(IC_RETEST_DATE)	= ""
		IC_ENGINE_DETAILS_VT(IC_VENDOR_LOT_NUMBER)= ""
		IC_ENGINE_DETAILS_VT(IC_ENGINE_CALC_UNIT_COST)	= ""
		IC_ENGINE_DETAILS_VT(IC_ENGINE_CALC_TOTAL_COST) = ""

		ADD TO IC_ENGINE_DETAILS_VT
		IF (%STATUS <> %SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_90971
		END_IF

	END_BLOCK

	BEGIN_BLOCK SET_IC_WTVOL
		IC_WTVOL_XMIT_VT(COMPANY_CODE)	= #COMPANY_CODE
		IC_WTVOL_XMIT_VT(WAREHOUSE)	= SALES_ORDER_LINES(WAREHOUSE)
		IC_WTVOL_XMIT_VT(PART_CODE)	= SALES_ORDER_LINES(PART_CODE)
		IC_WTVOL_XMIT_VT(IC_LOT_NUMBER) = SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER)
		IC_WTVOL_XMIT_VT(IC_CHARACTERISTIC_SOURCE) = PARAMETER("FIN.IC_UOM_LOT_CHARACTERISTIC")
		ADD TO IC_WTVOL_XMIT_VT
		IF (%STATUS <> %SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_91241
		END_IF
	END_BLOCK

	BEGIN_BLOCK USE_ENGINE

		PERFORM "GEMLB:LB_C_IC_ENGINE_CONTROLLER" ((PARAMETER("IC_E_GET_WTVOL")),       &
							#R_SUCCESS_STATUS,	&
							#R_MESSAGE)
		IF (#R_SUCCESS_STATUS <> #YES)
			ERROR/WAIT #R_MESSAGE
			EXIT (%FAILURE)
		END_IF

	END_BLOCK

	BEGIN_BLOCK GET_WEIGHT_VOLUME
		FIND IN IC_WTVOL_XMIT_VT
		IF (%STATUS <> %SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_91241
			EXIT (%FAILURE)
		END_IF
		#WEIGHT = #WEIGHT + IC_WTVOL_XMIT_VT(WEIGHT_RETURN_QTY)
		#WEIGHT_UOM	= IC_WTVOL_XMIT_VT(WEIGHT_RETURN_UOM)
		#VOLUME = #VOLUME + IC_WTVOL_XMIT_VT(VOLUME_RETURN_QTY)
		#VOLUME_UOM	= IC_WTVOL_XMIT_VT(VOLUME_RETURN_UOM)
	END_BLOCK

END_FORM


PROCEDURE_FORM CUSTOMER_PO_CHECK (#IN_MANDATORY_PO, #IN_PO_NUMBER, #IN_SALES_NUMBER, #OUT_PASS)
	BEGIN_BLOCK INITIALIZE
		IF (#IN_MANDATORY_PO = "")
			#IN_MANDATORY_PO = 0
		END_IF

		#OUT_PASS = #YES
	END_BLOCK

	BEGIN_BLOCK DUPLICATE_CHECK
		BEGIN_CASE (#IN_MANDATORY_PO)

			CASE 0
				! Duplicates are OK

			CASE 1
				! Warn of duplicate PO
				PERFORM DUPLICATE_PO ((#IN_PO_NUMBER), (#IN_SALES_NUMBER), #DUPLICATE)
				IF (#DUPLICATE = #YES)
					!Change 016 - pop up a form instead of displaying this message
					!MESSAGE/IDENTIFIER/BELL/WAIT P_62215
					PERFORM PO_EXISTS_POPUP
					!Change 016 end
				END_IF

			CASE 2
				! Require unique PO
				PERFORM DUPLICATE_PO ((#IN_PO_NUMBER), (#IN_SALES_NUMBER), #DUPLICATE)
				IF (#DUPLICATE = #YES)
					#OUT_PASS = #NO
					!Change 016 - pop up a form instead of displaying this message
					!MESSAGE/IDENTIFIER/BELL/WAIT P_62215
					PERFORM PO_EXISTS_POPUP
					!Change 016 End
				END_IF

			CASE ELSE
				! Treat like CASE 0
		END_CASE
	END_BLOCK
END_FORM


PROCEDURE_FORM DUPLICATE_PO (#IN_PO, #IN_SO, #OUT_DUP)
	BEGIN_BLOCK COMPARE
		#OUT_DUP = #NO

		IF (#IN_SO = "")
			FIND IN SALES_ORDER_HEADERS &
				/SECONDARY &
				/STREAM_NAME=DUP &
				/LOCK=NONE &
				/WITH=COMPANY_CODE = #COMPANY_CODE &
				/WITH=DIVISION = #DIVISION &
				/WITH=CUSTOMER_REFERENCE = #IN_PO &
				/WITH=CUSTOMER_NUMBER = #CUSTOMER_NUMBER

		ELSE
			FIND IN SALES_ORDER_HEADERS &
				/SECONDARY &
				/STREAM_NAME=DUP &
				/LOCK=NONE &
				/WITH=COMPANY_CODE = #COMPANY_CODE &
				/WITH=DIVISION = #DIVISION &
				/WITH=CUSTOMER_REFERENCE = #IN_PO &
				/WITH=ORDER_NUMBER <> #IN_SO &
				/WITH=CUSTOMER_NUMBER = #CUSTOMER_NUMBER
		END_IF

		IF (%STATUS = %SUCCESS)
			#OUT_DUP = #YES
			EXIT (%SUCCESS)
		END_IF
	END_BLOCK
END_FORM


PROCEDURE_FORM VALIDATE_ADDRESS (#IN_ADDRESS_CODE,#R1)
	BEGIN_BLOCK VALIDATE
	
		#R1 = #NO
		#ADDRESS_CODE = #IN_ADDRESS_CODE

		IF (#ADDRESS_CODE = "")
			MESSAGE/IDENTIFIER/BELL/WAIT P_85643
			EXIT (%EMPTY)
		END_IF

		FIND IN CUSTOMER_ADDRESSES &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=#CUSTOMER_NUMBER &
			/WITH=ADDRESS_CODE=#ADDRESS_CODE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_22178
			EXIT (%FAILURE)
		END_IF

		IF (CUSTOMER_ADDRESSES(ACTIVATION_STATUS) <> (PARAMETER("STATUS_ACTIVE")))
			MESSAGE/IDENTIFIER/BELL/WAIT P_02199
			EXIT (%FAILURE)
		END_IF

		IF (CUSTOMER_ADDRESSES(SYS_FINAL_DESTINATION)= "1") 
			#R1 = #YES
		ELSE
			#R1 = #NO
		END_IF

	END_BLOCK
END_FORM


PROCEDURE_FORM VERIFY_UOMS
	BEGIN_BLOCK MAIN
	
	    IF (#IC_PACKAGED_PRODUCT = #YES)
		
		   FIND IN IC_PRODUCT_MASTER_UNITS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PART_CODE=#PART_CODE &
			/WITH=UNIT_OF_MEASURE=#SALES_UOM &
			/WITH=IC_PRODUCT_UOM_TYPE = PARAMETER("IC_PACKAGED_UOM")
			
			IF ( %STATUS <> %SUCCESS ) 
				MESSAGE/IDENTIFIER/BELL/WAIT P_90658
			    EXIT (%FAILURE)
			END_IF 
		
		END_IF

		! Change nominated UOM depending upon Sales UOM
		FIND IN IC_PRODUCT_MASTER_UNITS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PART_CODE=#PART_CODE &
			/WITH=UNIT_OF_MEASURE=#SALES_UOM

		IF (%STATUS = %SUCCESS)
			IF (IC_PRODUCT_MASTER_UNITS(IC_PRODUCT_UOM_TYPE) = (PARAMETER("IC_INVENTORY_UOM")))
				! Sales UOM is Inventory UOM for part
				#NOMI_UOM = #SALES_UOM
				#NON_NOMI_UOM = ""
				PERFORM GET_NON_NOMINATED_UOM (#PART_CODE, #NOMI_UOM, #NON_NOMI_UOM)
			ELSE_IF (IC_PRODUCT_MASTER_UNITS(IC_PRODUCT_UOM_TYPE) = (PARAMETER("IC_PACKAGED_UOM")))
				! Sales UOM is a Pack UOM for part
				! Nomi UOM is capacity UOM which may not
				! be the same as the Default Sales Nomi
				! UOM.
				#NOMI_UOM = PRODUCT_MASTER(IC_UNIT_CAPACITY)
				#NON_NOMI_UOM = ""
				PERFORM GET_NON_NOMINATED_UOM (#PART_CODE, #NOMI_UOM, #NON_NOMI_UOM)
			END_IF
		ELSE
			IF (#SALES_UOM = PRODUCT_MASTER(UNIT_SALES))
				! Sales UOM is Sales Unit from Product Master.
				#NOMI_UOM = PRODUCT_MASTER(SOP_NOMINATED_UNIT)
				#NON_NOMI_UOM = ""
				PERFORM GET_NON_NOMINATED_UOM (#PART_CODE, #NOMI_UOM, #NON_NOMI_UOM)
			END_IF
		END_IF

		IF (#IC_PACKAGED_PRODUCT <> #YES)
			! Check if sales unit can be converted to nominated
			! unit, otherwise cannot continue
			IF (#SALES_UOM <> #NOMI_UOM)
				PERFORM CONVERT_QTYS &
					(#WAREHOUSE, &
					 "", &
					 #PART_CODE, &
					 #NOMI_UOM, &
					 1.00, &
					 #SALES_UOM, &
					 #TEMP_QTY, &
					 #R1)

				IF (%STATUS = %FAILURE)
					EXIT (%STATUS)
				END_IF
			END_IF
		END_IF

		PERFORM "GEMLB:LB_GET_QUANTITY_MASK" (#COMPANY_CODE, &
					#PART_CODE, &
					#SALES_UOM, &
					#SALES_UOM_MASK, &
					#SALES_UOM_NOD)

		IF (%STATUS <> %SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_62355
			EXIT (%STATUS)
		END_IF

		IF (#BATCHES_REQD <> #YES)
			PERFORM CONVERT_QTYS (#WAREHOUSE, "", #PART_CODE, #SALES_UOM, "0",  #NOMI_UOM, #NOMI_ORDER_QTY, #R_MESSAGE)

			IF (%STATUS <> %SUCCESS)
				EXIT (%STATUS)
			END_IF
		END_IF

		IF (#WAREHOUSED_FLAG=#YES)
			#SAVE_PACK_UOM = #PACK_UOM
			#PACK_UOM = ""
!			PERFORM STOCK_AVAILABILITY
			#PACK_UOM = #SAVE_PACK_UOM
		END_IF
	END_BLOCK
END_FORM


PROCEDURE_FORM VERIFY_PACK_UNIT
	BEGIN_BLOCK PACKAGE_UNIT

		! verify package unit was entered
		FIND IN IC_PRODUCT_MASTER_UNITS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=PART_CODE=#PART_CODE &
				/WITH=UNIT_OF_MEASURE=#PACK_UOM &
				/WITH=IC_PRODUCT_UOM_TYPE=(PARAMETER("IC_PACKAGED_UOM"))

		IF (%STATUS <> %SUCCESS)
			#PACK_UOM = ""
			MESSAGE/IDENTIFIER/BELL/WAIT P_91232
			EXIT (%STATUS)
		END_IF
	END_BLOCK
END_FORM


PROCEDURE_FORM SET_QTIES_NO_LOTS_AT_SO
	BEGIN_BLOCK ORDER_QTY_NO_BATCHES

		! set the iventory quantities
		#NOMI_ORDER_QTY = 0.0

		PERFORM CONVERT_QTYS (#WAREHOUSE, &
				"", &
				#PART_CODE, &
				#SALES_UOM, &
				#SALES_ORDER_QTY, &
				#NOMI_UOM, &
				#NOMI_ORDER_QTY, &
				#R1)

		IF (%STATUS <> %SUCCESS)
			EXIT (%STATUS)
		END_IF

		IF (#NON_NOMI_UOM <> "")
			#NON_NOMI_ORDER_QTY = 0.0
			PERFORM CONVERT_QTYS (#WAREHOUSE, &
					"", &
					#PART_CODE, &
					#NOMI_UOM, &
					#NOMI_ORDER_QTY, &
					#NON_NOMI_UOM, &
					#NON_NOMI_ORDER_QTY, &
					#R1)
		ELSE
			#NON_NOMI_ORDER_QTY = 0
		END_IF

		IF (#IC_PACKAGED_PRODUCT = #YES)
			BEGIN_CASE (#PACK_UOM)
				CASE (#SALES_UOM)
					#PACK_ORDER_QTY = #SALES_ORDER_QTY
				CASE (#NOMI_UOM)
					#PACK_ORDER_QTY = #NOMI_ORDER_QTY
				CASE (#NON_NOMI_UOM)
					#PACK_ORDER_QTY = #NON_NOMI_ORDER_QTY
				CASE ELSE
					IF (PRODUCT_MASTER(IC_UNIT_CAPACITY)  = #NOMI_UOM)
						#CAP_QTY	= #NOMI_ORDER_QTY
					ELSE
						#CAP_QTY	= #NON_NOMI_ORDER_QTY
					END_IF
					#PACK_QTY = 0.0
					PERFORM CONVERT_QTYS (#WAREHOUSE, &
							(SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER)), &
							#PART_CODE, &
							(PRODUCT_MASTER(IC_UNIT_CAPACITY)), &
							#CAP_QTY, &
							#PACK_UOM,      &
							#PACK_ORDER_QTY, &
							#R1)
			END_CASE

			PERFORM 'GEMLB:LB_GET_QUANTITY_MASK' (#COMPANY_CODE, #PART_CODE, #PACK_UOM, #R1, #R2)
			IF (%STATUS = %SUCCESS)
				#PACK_UOM_MASK  = #R1
			ELSE
				EXIT (%FAILURE)
			END_IF
		ELSE
			#PACK_ORDER_QTY = 0
		END_IF

		!  Get Pricing Quantity
		PERFORM "GEMLB:SOP_L_SALES_PRICE_QTY" &
				(#COMPANY_CODE, &
				#PART_CODE, &
				#WAREHOUSE, &
				"", &
				#SALES_UOM, &
				#SALES_ORDER_QTY, &
				#NOMI_UOM, &
				#NOMI_ORDER_QTY, &
				#NON_NOMI_UOM, &
				#NON_NOMI_ORDER_QTY, &
				#PRICE_UOM, &
				#NOMI_PRICE_UOM, &
				"", &
				"", &
				#PRICE_ORDER_QTY, &
				#PQ_STATUS, &
				#PQ_MESSAGE)
	END_BLOCK
END_FORM


PROCEDURE_FORM SET_UP_ATP_NO_LOTS_AT_SALES
	BEGIN_BLOCK ATP
		IF (#ATP_IN_USE_FOR_PART = #YES  AND #BATCHES_REQD <> #YES AND &
			#ATP_IN_USE_FOR_PW = #YES)

			IF (#IC_ATP_SELECTION_METHOD = PARAMETER("FLAG_AUTO"))
				#ATP_AUTO_FLAG = #YES
			ELSE
				#ATP_AUTO_FLAG = #NO
			END_IF

			IF (#IC_PACKAGED_PRODUCT = #YES)
				#ATP_UNIT = #PACK_UOM
			ELSE
				#ATP_UNIT = PRODUCT_MASTER(SOP_NOMINATED_UNIT)
				! Don't use #nomi_uom
			END_IF

			IF (#WHSE_IN_BOD = #NO)
				#ATP_AUTO_WAREHOUSE = SALES_ORDER_LINES(WAREHOUSE)
				#BOD_TO_SEND_ATP_AUTO = ""
			ELSE
				#ATP_AUTO_WAREHOUSE = #WAREHOUSE
				#BOD_TO_SEND_ATP_AUTO = #LINE_DIST_BOD_CODE
			END_IF

			PERFORM "GEMLB:LB_L_ATP_AUTO" (#DIVISION, &
							#ORDER_NUMBER, &
							SALES_ORDER_LINES(ORDER_LINE_NUMBER), &
							"", &
							#ATP_AUTO_WAREHOUSE, &
							#PART_CODE, &
							"", &
							#ORIG_SALES_ORDER_QTY, &
							#SALES_ORDER_QTY, &
							#SALES_UOM, &
							#SALES_UOM_MASK, &
							#NOMI_UOM, &
							#NON_NOMI_UOM, &
							#PRICE_UOM, &
							#PACK_UOM, &
							#ATP_UNIT, &
							#LINE_REQUESTED_DATE, &
							#SYS_SHIPPING_DATE, &
							#SYS_DELIVERY_DATE, &
							#BOD_TO_SEND_ATP_AUTO, &
							#ATP_AUTO_FLAG, &
							SALES_ORDER_LINES(ORDER_LINE_REFERENCE), &
							SALES_ORDER_HEADERS(ORDER_DATE))

			IF (%STATUS <> %SUCCESS)
				EXIT (%STATUS)
			END_IF
		END_IF
	END_BLOCK
END_FORM


PROCEDURE_FORM CALC_WEIGHT_VOL
	BEGIN_BLOCK CALC_WEIGHT_VOL
		! This processing was previously completed at the end of
		! line processing when the 'Next' menu option was chosen.
		! However, the Freight calculation requires that the weight
		! and volume for the line already be stored on the
		! SALES_ORDER_LINES record.
		IF ((#PHYSICAL_IN_USE = #YES) &
		   OR  (#LINE_EC_REPORT_TYPE <> "") &
		   OR  ((#AR_FREIGHT_IN_USE = #YES) AND (#WAREHOUSED_FLAG = #YES)))
			!passes back #TOTAL_DETAIL_ORDER_QTY
			PERFORM FIND_CURRENT_SO_LINE_QTY(#NOMI_UOM)
			#NOMI_ORDER_QTY = SALES_ORDER_LINE_QTYS(ORDER_QUANTITY)

			IF ((#NOMI_ORDER_QTY = 0.0) OR (#QTY_VALUE_CHANGE = #YES))
				! rows not written yet or qty was entered as
				! zero; if qty was changed than the NOMI_ORDER_QTY needs
				! to be updated also for the header trigger for wgt/vol.
				#NOMI_ORDER_QTY = 0.0

				PERFORM CONVERT_QTYS ( &
						#WAREHOUSE, &
						"", &
						#PART_CODE, &
						#SALES_UOM, &
						#SALES_ORDER_QTY, &
						#NOMI_UOM, &
						#NOMI_ORDER_QTY, &
						#R1)
			END_IF

			IF (#BATCHES_REQD=#YES AND PRODUCT_MASTER(BATCHES_EXIST)=#YES)
				! set the weight/volume by line detail (with lot chars)
				#WEIGHT = 0
				#WEIGHT_UOM	= 0
				#VOLUME = 0
				#VOLUME_UOM	= 0
				PERFORM CALC_LINE_WTVOL_BY_DETAIL
				IF (%STATUS <> %SUCCESS)
					EXIT (%FAILURE)
				END_IF
			ELSE
				!pass #NOMI_INVOICE_QTY
				IF (PRODUCT_MASTER(BATCHES_EXIST) = #YES)
					#IC_CHARACTERISTIC_SOURCE = PARAMETER("IC_UOM_LOT_CHAR_DEFAULT")
				ELSE
					#IC_CHARACTERISTIC_SOURCE = ""
				END_IF

				PERFORM SET_WV_FOR_LINE ("", #WEIGHT, #WEIGHT_UOM, #VOLUME, #VOLUME_UOM, #R1)
			END_IF
			SALES_ORDER_LINES(WEIGHT_UOM) = #WEIGHT_UOM
			SALES_ORDER_LINES(VOLUME_UOM) = #VOLUME_UOM

			IF (SALES_ORDER_LINES(WEIGHT) <> #WEIGHT OR &
				SALES_ORDER_LINES(VOLUME) <> #VOLUME)
				#QTY_VALUE_CHANGE = #YES
			END_IF
		END_IF
	END_BLOCK
END_FORM


PROCEDURE_FORM CALC_FREIGHT_FROM_QTY
	BEGIN_BLOCK CALC_FREIGHT_FROM_QTY

		IF (#AR_FREIGHT_IN_USE <> #YES) EXIT (%SUCCESS)

		IF (#LINE_FREIGHT_APPLICABLE <> #YES)
			! AR Freight may be in use, but
			! if DORC indicator is zero and price is freight
			! exclusive, line freight is not applicable.
			!
			SALES_ORDER_LINES(SOP_FREIGHT_CALCULATED) = 0.0
			SALES_ORDER_LINES(FREIGHT) = 0.0
			SALES_ORDER_LINES(SOP_FREIGHT_OVERRIDDEN) = #NO
			EXIT (%SUCCESS)
		END_IF

		IF (#WAREHOUSED_FLAG <> #YES)
			! No freight calculation possible, so skip this part
			SALES_ORDER_LINES(SOP_FREIGHT_CALCULATED) = 0.0
			EXIT (%SUCCESS)
		END_IF

		IF ((#EDIT_MODE <> "MODIFY") &
		OR ((#EDIT_MODE = "MODIFY") AND (#PART_CHANGE = #YES)) &
		OR ((#EDIT_MODE = "MODIFY") AND (#QTY_VALUE_CHANGE = #YES)))
			! if adding a line or modifying and the part
			! code or the quantity has changed, do freight
			! calculation

			#CALCULATED_FREIGHT = 0.0

			PERFORM "GEMSYS:SYS_L_FREIGHT_CALCULATION" &
						("SOLINE", &
						 #PLANNED_DELIVERY_DATE, &
						 "", &
						 0.0, &
						 (SALES_ORDER_LINES(SYS_FREIGHT_MODE)), &
						 #UPDATE_FREIGHT_DETAILS, &
						 #PACK_ORDER_QTY, &
						 #PACK_UOM, &
						 #NOMI_ORDER_QTY, &
						 #NOMI_UOM, &
						 #NON_NOMI_ORDER_QTY, &
						 #NON_NOMI_UOM, &
						 "", &
						 #CALCULATED_FREIGHT, &
						 #FREIGHT_CURRENCY_CODE, &
						 #FREIGHT_BASE, &
						 #FREIGHT_CUBIC, &
						 "", &
						 (#WEIGHT), &
						 (#WEIGHT_UOM), &
						 (#VOLUME), &
						 (#VOLUME_UOM))

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_93401
				SALES_ORDER_LINES(SOP_FREIGHT_CALCULATED) = 0.0
			ELSE
				IF (#FREIGHT_CURRENCY_CODE <> #CURRENCY_CODE)
					! do currency conversion here using freight value in base
					! currency returned by the library routine.
					DELETE ALL FROM SYS_CURRENCY_VALUES_VT

					SYS_CURRENCY_VALUES_VT(BASE_VALUE) = #FREIGHT_BASE

					ADD TO SYS_CURRENCY_VALUES_VT

					PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
					IF (#R_STATUS <> #YES)
						ERROR/WAIT #R_MESSAGE
						EXIT (%FAILURE)
					END_IF

					FIND IN SYS_CURRENCY_VALUES_VT

					#CALCULATED_FREIGHT	= SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE)
				 END_IF

				SALES_ORDER_LINES(SOP_FREIGHT_CALCULATED) = #CALCULATED_FREIGHT
			END_IF

			IF ((#EDIT_MODE <> "MODIFY") &
			OR ((#EDIT_MODE = "MODIFY") &
				AND ((#DIV_ALLOWS_FREIGHT_OVERRIDE = #NO) &
				 OR	 (SALES_ORDER_LINES(SOP_FREIGHT_OVERRIDDEN) = #NO) &
				 OR	 (SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR) = 0))))

				SALES_ORDER_LINES(FREIGHT) = #CALCULATED_FREIGHT
				! The calculated value must always be current,
				! but the user may have overridden the value
				! already if the line is being modified,
				! ensure that freight override is not allowed
				! or freight has not already been overridden
				! before storing calculated freight as freight
				! line value.  If DorC indicator is zero it also
				! means that the freight value cannot be overridden.
			END_IF
		END_IF
	END_BLOCK
END_FORM


PROCEDURE_FORM NON_WAREHOUSED_FREIGHT
	BEGIN_BLOCK NON_WAREHOUSED_FREIGHT
		! For non-warehoused parts, if AR Freight is in use, do not
		! calculate freight, but if DorC indicator is non-zero
		! (freight inclusive price but customer doesn't pay freight, or
		! freight exclusive price but customers pays freight) and
		! freight override is allowed, allow the user to enter a
		! freight value later.
		IF ((SALES_ORDER_LINES(SOP_FRT_DORC_INDICATOR) = 0) &
		OR  (#DIV_ALLOWS_FREIGHT_OVERRIDE = #NO))
			SALES_ORDER_LINES(FREIGHT) = 0.0
			SALES_ORDER_LINES(SOP_FREIGHT_OVERRIDDEN) = #NO
		END_IF
	END_BLOCK
END_FORM


PROCEDURE_FORM EC_REPORTING
	BEGIN_BLOCK EC_REPORTING
		IF (#LINE_EC_REPORT_TYPE <> "")
			#LINE_WEIGHT = #WEIGHT

			IF (#EC_STATISTICAL_VALUE = "")
				#EC_STATISTICAL_VALUE = ((#LINE_VALUE - #LINE_DISCOUNT) &
							* #EC_STAT_FACTOR)
			END_IF

			PERFORM "GEMLB:LB_EC_REPORTING" &
				(#EC_MODE, &
				 #EC_REPORT_TYPE, &
				 (SALES_ORDER_LINES(UNIT_SALES)), &
				 #COMPANY_CODE, &
				 (#PART_CODE), &
				 (#SALES_ORDER_QTY), &
				 (SALES_ORDER_LINES(WAREHOUSE)), &
				 (PRODUCT_MASTER(WEIGHT_UOM)), &
				 (#LINE_WEIGHT), &
				 (#CORPORATE_ADDRESS_CODE), &
				 (#CURRENCY_MASK), &
				 "", &
				 #EC_PROCESSED_INDICATOR, &
				 #EC_TRANSACTION_TYPE, &
				 #EC_TARIFF_CODE, &
				 #EC_COUNTRY_OF_ORIGIN, &
				 #EC_SUPP_UNIT_QTY, &
				 #EC_WEIGHT, &
				 #EC_MODE_TRANSPORT, &
				 #EC_DELIVERY_TERMS, &
				 #EC_STATISTICAL_VALUE, &
				 #EC_ANALYSIS_1, &
				 #EC_ANALYSIS_2, &
				 #EC_ANALYSIS_3, &
				 #EC_ANALYSIS_4, &
				 #EC_ANALYSIS_5, &
				 "","","")

			SALES_ORDER_LINES(SYS_EC_STATISTICS_APPLICABLE) = #YES
			SALES_ORDER_LINES(SYS_EC_PROCESSED_INDICATOR)   = #EC_PROCESSED_INDICATOR
			SALES_ORDER_LINES(SYS_EC_TRANSACTION_TYPE)		 = #EC_TRANSACTION_TYPE

			IF (#LINE_EC_REPORT_TYPE = "B")
				IF (#EC_TARIFF_CODE = "00000000000")
					SALES_ORDER_LINES(SYS_EC_STATISTICS_APPLICABLE) = #NO
					GOTO DUMMY
				END_IF
				SALES_ORDER_LINES(SYS_TARIFF_CODE)		   = #EC_TARIFF_CODE
				SALES_ORDER_LINES(SYS_COUNTRY_OF_ORIGIN) = #EC_COUNTRY_OF_ORIGIN
				SALES_ORDER_LINES(SYS_EC_SUPP_UNIT_QTY) = #EC_SUPP_UNIT_QTY
				SALES_ORDER_LINES(SYS_EC_WEIGHT)	= #EC_WEIGHT
				SALES_ORDER_LINES(SYS_EC_MODE_OF_TRANSPORT) = #EC_MODE_TRANSPORT
				SALES_ORDER_LINES(SYS_EC_DELIVERY_TERMS) = #EC_DELIVERY_TERMS
				SALES_ORDER_LINES(SYS_EC_STATISTICAL_VALUE)	    = #EC_STATISTICAL_VALUE
				SALES_ORDER_LINES(SYS_EC_ANALYSIS_1)	    = #EC_ANALYSIS_1
				SALES_ORDER_LINES(SYS_EC_ANALYSIS_2)	    = #EC_ANALYSIS_2
				SALES_ORDER_LINES(SYS_EC_ANALYSIS_3)	    = #EC_ANALYSIS_3
				SALES_ORDER_LINES(SYS_EC_ANALYSIS_4)	    = #EC_ANALYSIS_4
				SALES_ORDER_LINES(SYS_EC_ANALYSIS_5)	    = #EC_ANALYSIS_5
			END_IF
	END_BLOCK

	BEGIN_BLOCK DUMMY
			#EC_MODE = "M"
		END_IF
	END_BLOCK
END_FORM


PROCEDURE_FORM COMPLETE_ORDER_LINE
	BEGIN_BLOCK NEXT
		SALES_ORDER_LINES(WAREHOUSE)		= #WAREHOUSE

		SALES_ORDER_LINES(UNIT_SALES)		= #SALES_UOM
		SALES_ORDER_LINES(SOP_NOMINATED_UNIT)	= #NOMI_UOM

		IF (#IC_PACKAGED_PRODUCT = #YES)
			SALES_ORDER_LINES(IC_PACK_UNIT)		= #PACK_UOM
		END_IF

		SALES_ORDER_LINES(UNIT_PRICE)		= #PRICE_UOM
		SALES_ORDER_LINES(SOP_NOMINATED_PRICE_UNIT) = #NOMI_PRICE_UOM

		IF ( #PRICING_METHOD = #TAX_INCLUSIVE )
			SALES_ORDER_LINES(SALES_PRICE) = #NET_PRICE
			SALES_ORDER_LINES(SALES_PRICE_INC_TAX) = #PRICE
		ELSE
			SALES_ORDER_LINES(SALES_PRICE) = #PRICE
			SALES_ORDER_LINES(SALES_PRICE_INC_TAX) = 0
		END_IF

		!passes back #TOTAL_DETAIL_ORDER_QTY
		PERFORM SUM_CURRENT_SO_LINE_DETAIL_QTYS (#SALES_UOM)

		#BALANCE = #TOTAL_DETAIL_ORDER_QTY - #SALES_ORDER_QTY

		IF (#COPY_UPDATE <> #YES)
			IF (#EDIT_MODE = "MODIFY" AND #BALANCE < 0)
				MESSAGE/IDENTIFIER/BELL/WAIT P_52440, LTRIM(MASK(#SALES_UOM_MASK,(#BALANCE * -1)))
				EXIT (%BACK)
			END_IF
		END_IF

		IF (#COPY_UPDATE <> #YES)
			IF (#EDIT_MODE = "MODIFY" AND #BALANCE > 0)
				MESSAGE/IDENTIFIER/BELL/WAIT P_52291
				EXIT (%BACK)
			END_IF
		END_IF

		IF (#TOTAL_DETAIL_ORDER_QTY <> 0 AND #BALANCE < 0)
			MESSAGE/IDENTIFIER/BELL/WAIT P_52440, LTRIM(MASK(#SALES_UOM_MASK,(#BALANCE * -1)))
			EXIT (%BACK)
		END_IF

		IF (#TOTAL_DETAIL_ORDER_QTY <> 0 AND #BALANCE > 0)
			MESSAGE/IDENTIFIER/BELL/WAIT P_52291
			EXIT (%BACK)
		END_IF

		IF (PRODUCT_MASTER(BATCHES_EXIST)=#YES &
		AND PRODUCT_MASTER(CHARACTERISTICS_AT_ORDER_ENTRY) = #YES)

			PERFORM UPDATE_CHARS_1
			PERFORM UPDATE_CHARS_2
		END_IF

		IF ( ((#PRICE_ORDER_QTY <> #ORIG_PRICE_ORDER_QTY OR SALES_ORDER_LINES(CONTRACT_NUMBER) <> #OLD_CONTRACT_NUMBER) &
		AND (#OLD_CONTRACT_NUMBER <> "" OR SALES_ORDER_LINES(CONTRACT_NUMBER) <> "")) &
		OR (#PRICE_ORDER_QTY <> #ORIG_PRICE_ORDER_QTY AND #OLD_CONTRACT <> ""))

			#NEW_PRICE_ORDER_QTY = #PRICE_ORDER_QTY

			PERFORM "GEMLB:SOP_L_CONTRACT_PRICE_QTY_UPDATE" (&
				#COMPANY_CODE, &
				#DIVISION, &
				#CUSTOMER_NUMBER, &
				(SALES_ORDER_LINES(PART_CODE)), &
				(SALES_ORDER_LINES(WAREHOUSE)), &
				#NEW_PRICE_ORDER_QTY, &
				#ORDER_DATE, &
				#CURRENCY_CODE, &
				(SALES_ORDER_LINES(CONTRACT_NUMBER)), &
				#ORIG_PRICE_ORDER_QTY, &
				#OLD_CONTRACT_NUMBER, &
				#OLD_PART_CODE, &
				#OLD_WAREHOUSE, &
				(SALES_ORDER_LINES(UNIT_PRICE)), &
				"", &
				#OLD_CONTRACT)

			IF (%STATUS = %FAILURE) EXIT(%FAILURE)
		END_IF

		IF (#EDIT_MODE = "ADD" OR #COPY_UPDATE = #YES)
		! create qtys records

			IF (#ATP_IN_USE_FOR_PART = #YES AND #ATP_IN_USE_FOR_PW =  #YES)
				PERFORM "GEMLB:LB_L_ATP_AUTO" UPDATE &
							(#DIVISION, &
							#PART_CODE, &
							#ORDER_NUMBER, &
							SALES_ORDER_LINES(ORDER_LINE_NUMBER), &
							"", &
							#SALES_UOM, &
							#PACK_UOM, &
							#NOMI_UOM, &
							#NON_NOMI_UOM, &
							#PRICE_UOM, &
							#NOMI_PRICE_UOM, &
							SALES_ORDER_LINES(ORDER_LINE_REFERENCE), &
							SALES_ORDER_HEADERS(ORDER_DATE))

				! Update TM_LOAD_PLANNING and ORIGINAL_SEQUENCE
				! fields on any SALES_ORDER_LINE_DETAILS
				! records created.
				IF (#SYS_TM_IN_USE = #YES)
					PERFORM UPDATE_TM_SOLD_FIELDS
				END_IF
			END_IF

			FIND IN SALES_ORDER_LINE_DETAIL_QTYS	   &
				/LOCK = READ &
				/WITH = COMPANY_CODE = #COMPANY_CODE    &
				/WITH = DIVISION = #DIVISION    &
				/WITH = ORDER_NUMBER = SALES_ORDER_LINES(ORDER_NUMBER)  &
				/WITH = ORDER_LINE_NUMBER = SALES_ORDER_LINES(ORDER_LINE_NUMBER)	&
				/WITH = UNIT_OF_MEASURE = #SALES_UOM

			IF (%STATUS <> %SUCCESS)
				!
				! if a detail exist - then the line has already been created or updated
				! by BATCHES or REEQUIRED dates - don't try to create it.
				PERFORM ADD_SO_LINE_ORDER_QTY (#SALES_UOM, #SALES_ORDER_QTY, #YES, #R1)
				IF (%STATUS <> %SUCCESS)
					ERROR/WAIT #R1
					EXIT (%FAILURE)
				END_IF

				IF (#SALES_UOM <> #NOMI_UOM)
					PERFORM ADD_SO_LINE_ORDER_QTY (#NOMI_UOM, #NOMI_ORDER_QTY, #YES, #R1)
					IF (%STATUS <> %SUCCESS)
						ERROR/WAIT #R1
						EXIT (%FAILURE)
					END_IF
				END_IF

				IF ((#IC_PACKAGED_PRODUCT = #YES) AND &
				(#PACK_UOM <> #SALES_UOM) AND &
				(#PACK_UOM <> #NOMI_UOM))

					PERFORM ADD_SO_LINE_ORDER_QTY (#PACK_UOM, #PACK_ORDER_QTY, #YES, #R1)
					IF (%STATUS <> %SUCCESS)
						ERROR/WAIT #R1
						EXIT (%FAILURE)
					END_IF
				END_IF

				IF ((#IC_UOM_CONTROL = PARAMETER("IC_CATCHWEIGHT_UOM_CONTROL")) OR      &
					(#IC_UOM_CONTROL = PARAMETER("IC_POTENT_UOM_CONTROL")))
					IF (#NOMI_UOM <> #NON_NOMI_UOM AND #NON_NOMI_UOM <> #SALES_UOM AND &
						#NON_NOMI_UOM <> #PACK_UOM)
						PERFORM ADD_SO_LINE_ORDER_QTY (#NON_NOMI_UOM, #NON_NOMI_ORDER_QTY, #YES, #R1)
						IF (%STATUS <> %SUCCESS)
							ERROR/WAIT #R1
							EXIT (%FAILURE)
						END_IF
					END_IF
				END_IF

				IF (#PRICE_UOM <> #SALES_UOM AND &
					#PRICE_UOM <> #NOMI_UOM AND &
					#PRICE_UOM <> #NON_NOMI_UOM AND &
					#PRICE_UOM <> #PACK_UOM)

					PERFORM ADD_SO_LINE_ORDER_QTY (#PRICE_UOM, #PRICE_ORDER_QTY, #YES, #R1)
					IF (%STATUS <> %SUCCESS)
						ERROR/WAIT #R1
						EXIT (%FAILURE)
					END_IF
				END_IF
			END_IF
			PERFORM FIND_CURRENT_SO_LINE_QTY( #SALES_UOM, #R1)
		ELSE
		   IF (#WAREHOUSED_FLAG <> #YES)
			! stock product not warehoused and it's an update
			! update quantity records
			IF (#ORIG_SALES_UOM <> #SALES_UOM)
				! the sales uom can change only if previous qty of line was zero
					PERFORM DELETE_SALES_LINE_QTYS
					PERFORM DELETE_SALES_LINE_DETAIL_QTYS
					PERFORM ADD_SO_LINE_ORDER_QTY (#SALES_UOM, #SALES_ORDER_QTY, #YES, #R1)
					PERFORM ADD_SO_LINE_DETAIL_ORDER_QTY("001", "", #SALES_UOM, #SALES_ORDER_QTY, #YES, #R1)

					IF (#SALES_UOM <> #NOMI_UOM)
						PERFORM ADD_SO_LINE_ORDER_QTY (#NOMI_UOM, #NOMI_ORDER_QTY, #YES, #R1)
						PERFORM ADD_SO_LINE_DETAIL_ORDER_QTY("001", #NOMI_UOM, #NOMI_ORDER_QTY, #YES,#R1)
					END_IF

					IF (#PRICE_UOM <> #SALES_UOM AND #PRICE_UOM <> #NOMI_UOM)
						PERFORM ADD_SO_LINE_ORDER_QTY (#PRICE_UOM, #PRICE_ORDER_QTY, #YES, #R1)
					END_IF

					#ORIG_SALES_ORDER_QTY   = #SALES_ORDER_QTY
					#ORIG_PRICE_ORDER_QTY   = #PRICE_ORDER_QTY
			ELSE
				IF (#ORIG_SALES_ORDER_QTY <> #SALES_ORDER_QTY)
					PERFORM "GEMSOP:SOP_L_UPDATE_A_SO_QTY" ( #COMPANY_CODE, &
								#DIVISION, &
								(SALES_ORDER_LINES(ORDER_NUMBER)), &
								(SALES_ORDER_LINES(ORDER_LINE_NUMBER)), &
								"1", &
								"ORDER_QUANTITY", &
								#SALES_ORDER_QTY, &
								#SALES_UOM,	&
								#R1)
					#ORIG_SALES_ORDER_QTY = #SALES_ORDER_QTY
				END_IF

				IF (#PRICE_UOM <> #SALES_UOM AND #ORIG_PRICE_ORDER_QTY <> #PRICE_ORDER_QTY)
					PERFORM "GEMSOP:SOP_L_UPDATE_A_SO_QTY" ( #COMPANY_CODE, &
								#DIVISION, &
								(SALES_ORDER_LINES(ORDER_NUMBER)), &
								(SALES_ORDER_LINES(ORDER_LINE_NUMBER)), &
								"1", &
								"ORDER_QUANTITY", &
								#PRICE_ORDER_QTY, &
								#PRICE_UOM,	&
								#R1)
					#ORIG_PRICE_ORDER_QTY = #PRICE_ORDER_QTY
				END_IF
			END_IF
		   END_IF
	    END_IF

		!Check Despatch Qty; Update Value on Customers table
		IF ( #EDIT_MODE = "MODIFY" AND #DESPATCH_QTY <> 0 )
			#NEW_DESP_VALUE = (#DESPATCH_QTY * SALES_ORDER_LINES(SALES_PRICE))
			IF ( #NEW_DESP_VALUE <> #ORIG_DESP_VALUE )

				IF (#CURRENCY_METHOD > '0')
					DELETE ALL FROM SYS_CURRENCY_VALUES_VT
					SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE)	= #ORIG_DESP_VALUE
					ADD TO SYS_CURRENCY_VALUES_VT
					PERFORM "GEMLB:LB_S_L_CURRENCY_RATES" (#R_STATUS, #R_MESSAGE)
					IF (#R_STATUS <> #YES)
						ERROR/WAIT #R_MESSAGE
						EXIT (%FAILURE)
					END_IF
					PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
					IF (#R_STATUS <> #YES)
						ERROR/WAIT #R_MESSAGE
						EXIT (%FAILURE)
					END_IF
					FIND IN SYS_CURRENCY_VALUES_VT
					#ORIG_DESP_VALUE_BASE	= SYS_CURRENCY_VALUES_VT(BASE_VALUE)

					DELETE ALL FROM SYS_CURRENCY_VALUES_VT
					SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE)	= #NEW_DESP_VALUE
					ADD TO SYS_CURRENCY_VALUES_VT
					PERFORM "GEMLB:LB_S_L_CURRENCY_RATES" (#R_STATUS, #R_MESSAGE)
					IF (#R_STATUS <> #YES)
						ERROR/WAIT #R_MESSAGE
						EXIT (%FAILURE)
					END_IF
					PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
					IF (#R_STATUS <> #YES)
						ERROR/WAIT #R_MESSAGE
						EXIT (%FAILURE)
					END_IF
					FIND IN SYS_CURRENCY_VALUES_VT
					#NEW_DESP_VALUE_BASE	= SYS_CURRENCY_VALUES_VT(BASE_VALUE)
				ELSE
					#ORIG_DESP_VALUE_BASE=#ORIG_DESP_VALUE
					#NEW_DESP_VALUE_BASE=#NEW_DESP_VALUE
				END_IF

				FIND IN CUSTOMERS &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=DIVISION=#DIVISION &
					/WITH=CUSTOMER_NUMBER=#CUSTOMER_NUMBER

				IF ( %STATUS = %SUCCESS )
					CUSTOMERS(DESPATCH_VALUE) = CUSTOMERS(DESPATCH_VALUE) - #ORIG_DESP_VALUE_BASE + #NEW_DESP_VALUE_BASE
				END_IF

				START_STREAM DN &
					/TABLE=DESPATCH_NOTES &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=DIVISION=#DIVISION &
					/WITH=ORDER_NUMBER=SALES_ORDER_LINES(ORDER_NUMBER) &
					/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER)

				WHILE (1)
				FETCH DN /FAILURE=(CONTINUE OUT)
					DESPATCH_NOTES(SALES_PRICE) = SALES_ORDER_LINES(SALES_PRICE)

					FIND IN DESPATCH_NOTE_QTYS &
						/LOCK=NONE &
						/WITH=COMPANY_CODE=#COMPANY_CODE &
						/WITH=DIVISION=#DIVISION &
						/WITH=DESPATCH_NOTE=DESPATCH_NOTES(DESPATCH_NOTE) &
						/WITH=UNIT_OF_MEASURE=SALES_ORDER_LINES(UNIT_PRICE)

					#DESP_DESPATCH_QTY = DESPATCH_NOTE_QTYS(IC_QTY_IN_DESPATCH) + DESPATCH_NOTE_QTYS(QTY_DESPATCHED)
					#DESPATCH_VALUE = SALES_ORDER_LINES(SALES_PRICE) * #DESP_DESPATCH_QTY

					IF (#CURRENCY_METHOD > '0')
						DELETE ALL FROM SYS_CURRENCY_VALUES_VT
						SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE)	= #DESPATCH_VALUE
						ADD TO SYS_CURRENCY_VALUES_VT
						PERFORM "GEMLB:LB_S_L_CURRENCY_RATES" (#R_STATUS, #R_MESSAGE)
						IF (#R_STATUS <> #YES)
							ERROR/WAIT #R_MESSAGE
							EXIT (%FAILURE)
						END_IF
						PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
						IF (#R_STATUS <> #YES)
							ERROR/WAIT #R_MESSAGE
							EXIT (%FAILURE)
						END_IF
						FIND IN SYS_CURRENCY_VALUES_VT
						#DESPATCH_VALUE_BASE	= SYS_CURRENCY_VALUES_VT(BASE_VALUE)
					ELSE
						#DESPATCH_VALUE_BASE = #DESPATCH_VALUE
					END_IF

					DESPATCH_NOTES(DESPATCH_VALUE) = #DESPATCH_VALUE
					DESPATCH_NOTES(DESPATCH_VALUE_BASE) = #DESPATCH_VALUE_BASE

				END_WHILE
			END_IF
		END_IF

	    EXIT(%SUCCESS)
	END_BLOCK
END_FORM


PROCEDURE_FORM DO_PHYSICAL_UNITS_CONVERT
! Check product (line) to division (header) conversion of weight and volume.
	BEGIN_BLOCK DOES_WEIGHT_CONVERT
		IF  ((SALES_ORDER_HEADERS(WEIGHT_UOM)) <> (SALES_ORDER_LINES(WEIGHT_UOM)))
			DELETE ALL FROM SYS_DO_UOM_CONV_VT
			CLEAR_BUFFER SYS_DO_UOM_CONV_VT

			SYS_DO_UOM_CONV_VT(COMPANY_CODE)	= SALES_ORDER_LINES(COMPANY_CODE)
			SYS_DO_UOM_CONV_VT(PART_CODE)		= SALES_ORDER_LINES(PART_CODE)
			SYS_DO_UOM_CONV_VT(IC_QTY_FROM)		= 1
			SYS_DO_UOM_CONV_VT(UNIT_FROM)		= SALES_ORDER_LINES(WEIGHT_UOM)
			SYS_DO_UOM_CONV_VT(UNIT_TO)		= SALES_ORDER_HEADERS(WEIGHT_UOM)
			ADD TO SYS_DO_UOM_CONV_VT
			IF (%STATUS <> %SUCCESS)
				MESSAGE/IDENTIFIER/BELL/WAIT P_71156,SALES_ORDER_LINES(WEIGHT_UOM),&
								SALES_ORDER_HEADERS(WEIGHT_UOM),SALES_ORDER_LINES(PART_CODE)
				GOTO DOES_VOLUME_CONVERT
			END_IF
			PERFORM "GEMLB:LB_C_IC_ENGINE_CONTROLLER" (PARAMETER("IC_E_UOM_CONV_NO_MESSAGE"),     &
					#R_SUCCESS_STATUS,      &
					#R_MESSAGE)
			IF (#R_SUCCESS_STATUS   <> #YES)
				MESSAGE/IDENTIFIER/BELL/WAIT P_71156,SALES_ORDER_LINES(WEIGHT_UOM),&
								SALES_ORDER_HEADERS(WEIGHT_UOM),SALES_ORDER_LINES(PART_CODE)
				GOTO DOES_VOLUME_CONVERT
			END_IF
			FIND IN SYS_DO_UOM_CONV_VT
			IF (%STATUS <> %SUCCESS)
				MESSAGE/IDENTIFIER/BELL/WAIT P_71156,SALES_ORDER_LINES(WEIGHT_UOM),&
								SALES_ORDER_HEADERS(WEIGHT_UOM),SALES_ORDER_LINES(PART_CODE)
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK DOES_VOLUME_CONVERT
		IF  ((SALES_ORDER_HEADERS(VOLUME_UOM)) <> (SALES_ORDER_LINES(VOLUME_UOM)))
			DELETE ALL FROM SYS_DO_UOM_CONV_VT
			CLEAR_BUFFER SYS_DO_UOM_CONV_VT

			SYS_DO_UOM_CONV_VT(COMPANY_CODE)	= SALES_ORDER_LINES(COMPANY_CODE)
			SYS_DO_UOM_CONV_VT(PART_CODE)		= SALES_ORDER_LINES(PART_CODE)
			SYS_DO_UOM_CONV_VT(IC_QTY_FROM)		= 1
			SYS_DO_UOM_CONV_VT(UNIT_FROM)		= SALES_ORDER_LINES(VOLUME_UOM)
			SYS_DO_UOM_CONV_VT(UNIT_TO)		= SALES_ORDER_HEADERS(VOLUME_UOM)
			ADD TO SYS_DO_UOM_CONV_VT
			IF (%STATUS <> %SUCCESS)
				MESSAGE/IDENTIFIER/BELL/WAIT P_71157,(SALES_ORDER_LINES(VOLUME_UOM)),&
								(SALES_ORDER_HEADERS(VOLUME_UOM)),(SALES_ORDER_LINES(PART_CODE))
				EXIT
			END_IF
			PERFORM "GEMLB:LB_C_IC_ENGINE_CONTROLLER" (PARAMETER("IC_E_UOM_CONV_NO_MESSAGE"),     &
					#R_SUCCESS_STATUS,      &
					#R_MESSAGE)
			IF (#R_SUCCESS_STATUS   <> #YES)
				MESSAGE/IDENTIFIER/BELL/WAIT P_71157,(SALES_ORDER_LINES(VOLUME_UOM)),&
								(SALES_ORDER_HEADERS(VOLUME_UOM)),(SALES_ORDER_LINES(PART_CODE))
				EXIT
			END_IF
			FIND IN SYS_DO_UOM_CONV_VT
			IF (%STATUS <> %SUCCESS)
				MESSAGE/IDENTIFIER/BELL/WAIT P_71157,(SALES_ORDER_LINES(VOLUME_UOM)),&
								(SALES_ORDER_HEADERS(VOLUME_UOM)),(SALES_ORDER_LINES(PART_CODE))
			END_IF
		END_IF
	END_BLOCK
END_FORM

PROCEDURE_FORM DELETE_LINE_COMMENTS &
	/TABLE = SOP_ORDER_LINE_COMMENTS &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION = #DIVISION &
	/WITH=ORDER_NUMBER=#ORDER_NUMBER &
	/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER)

	BEGIN_BLOCK DML_1
		DELETE FROM SOP_ORDER_LINE_COMMENTS
	END_BLOCK
END_FORM

PROCEDURE_FORM LOAD_CUSTOMER_PROMOTIONS

	BEGIN_BLOCK CUSTOMER_PROMOTIONS

		DELETE ALL FROM TP_PROMOTION_CUSTOMER_INPUT_VT

		TP_PROMOTION_CUSTOMER_INPUT_VT(COMPANY_CODE)        = SALES_ORDER_HEADERS(COMPANY_CODE)
		TP_PROMOTION_CUSTOMER_INPUT_VT(DIVISION)            = SALES_ORDER_HEADERS(DIVISION)
		TP_PROMOTION_CUSTOMER_INPUT_VT(CUSTOMER_NUMBER)     = SALES_ORDER_HEADERS(CUSTOMER_NUMBER)
		TP_PROMOTION_CUSTOMER_INPUT_VT(CUSTOMER_GROUP)      = SALES_ORDER_HEADERS(SALES_ANALYSIS_GROUP)
		TP_PROMOTION_CUSTOMER_INPUT_VT(ADDRESS_CODE)        = SALES_ORDER_HEADERS(DELIVERY_ADDRESS_CODE)
		TP_PROMOTION_CUSTOMER_INPUT_VT(FINAL_ADDRESS_CODE)  = #HEADER_FINAL_ADDRESS_CODE
		TP_PROMOTION_CUSTOMER_INPUT_VT(BROKER_CODE)         = SALES_ORDER_HEADERS(BROKER_CODE)
		TP_PROMOTION_CUSTOMER_INPUT_VT(SALESPERSON_CODE)    = SALES_ORDER_HEADERS(SALESPERSON_CODE)
		TP_PROMOTION_CUSTOMER_INPUT_VT(LOCATION)            = SALES_ORDER_HEADERS(LOCATION)
		TP_PROMOTION_CUSTOMER_INPUT_VT(STATEMENT_ACCOUNT)   = CUSTOMERS(STATEMENT_ACCOUNT)
		TP_PROMOTION_CUSTOMER_INPUT_VT(SYS_CURRENCY_CODE)   = SALES_ORDER_HEADERS(SYS_CURRENCY_CODE)

		ADD TO TP_PROMOTION_CUSTOMER_INPUT_VT

		PERFORM "GEMTP:TP_L_PROMOTION_DISCOUNTS" ( "INITIALIZE", #R_STATUS, #R_MSG, #DMMY1, #DMMY2, #DMMY3 )

	END_BLOCK


END_FORM

PROCEDURE_FORM PROMOTION_DISCOUNTS

	BEGIN_BLOCK CHECK_REQUIRED
		IF ( #TP_GIFT_LINE )
			EXIT(%SUCCESS)
		END_IF
	END_BLOCK

	BEGIN_BLOCK SETUP_SHIP_DATE
		#TP_SHIP_DATE = #LINE_REQUESTED_DATE
		IF (#SOP_REQUIRED_DATE_METHOD <> #METHOD_DESPATCH)
			! #LINE_REQUESTED_DATE holds Delivery not Ship Date
			! so need to work out Ship Date from it.
			FIND IN SYS_BILL_OF_DISTRIBUTION &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=SYS_BOD_CODE=#LINE_DIST_BOD_CODE &
				/WITH=WAREHOUSE=#WAREHOUSE &
				/WITH=SYS_LEAD_TIME > 0

			IF (%STATUS <> %FAILURE)
				#TP_SHIP_DAYS = DAYS(#LINE_REQUESTED_DATE) - SYS_BILL_OF_DISTRIBUTION(SYS_LEAD_TIME)
				#TP_SHIP_DATE = DATE(#TP_SHIP_DAYS)
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK POPULATE_PRODUCT_VT

		DELETE ALL FROM TP_PROMOTION_PRODUCT_INPUT_VT

		#FLOOR_PRICE = 0.0
		IF ( SALES_ORDER_LINE_QTYS(QTY_INVOICED) > 0 )
			#IGNORE_LIMITS = #YES
		ELSE
			#IGNORE_LIMITS = #NO
			IF ( PRODUCT_MASTER(TP_PRODUCT_FLOOR_INDICATOR) = 1 )
				#FLOOR_PRICE = ROUND((#DISCOUNT_BASIS * #TP_FLOOR_PERCENT), 2 ) / 100
			ELSE
				IF ( PRODUCT_MASTER(TP_PRODUCT_FLOOR_INDICATOR) = 2 )
					#FLOOR_PRICE = ROUND((#PRICE_ORDER_QTY * #TP_FLOOR_PRICE), #CURRENCY_DECIMAL)
				END_IF
			END_IF
		END_IF

		TP_PROMOTION_PRODUCT_INPUT_VT(PART_CODE) = SALES_ORDER_LINES(PART_CODE)
		TP_PROMOTION_PRODUCT_INPUT_VT(PART_DESC_1) = PRODUCT_MASTER(PART_DESC_1)
		TP_PROMOTION_PRODUCT_INPUT_VT(PRODUCT_CLASS) = PRODUCT_MASTER(PRODUCT_CLASS)
		TP_PROMOTION_PRODUCT_INPUT_VT(PRODUCT_GROUP) = PRODUCT_MASTER(PRODUCT_GROUP)
		TP_PROMOTION_PRODUCT_INPUT_VT(PRODUCT_TYPE) = PRODUCT_MASTER(PRODUCT_TYPE)
		TP_PROMOTION_PRODUCT_INPUT_VT(SF_BRAND) = PRODUCT_MASTER(SF_BRAND)
		TP_PROMOTION_PRODUCT_INPUT_VT(BT_COMMODITY_CLASS) = PRODUCT_MASTER(BT_COMMODITY_CLASS)
		TP_PROMOTION_PRODUCT_INPUT_VT(ORDER_DATE) = #ORDER_DATE
		TP_PROMOTION_PRODUCT_INPUT_VT(SYS_SHIPPING_DATE) = #TP_SHIP_DATE
		TP_PROMOTION_PRODUCT_INPUT_VT(UNIT_SALES) = SALES_ORDER_LINES(UNIT_SALES)
		TP_PROMOTION_PRODUCT_INPUT_VT(SALES_PRICE) = #PRICE
		TP_PROMOTION_PRODUCT_INPUT_VT(TP_PRODUCT_FLOOR_PRICE) = #FLOOR_PRICE
		TP_PROMOTION_PRODUCT_INPUT_VT(ORDER_QUANTITY) = #SALES_ORDER_QTY
		TP_PROMOTION_PRODUCT_INPUT_VT(GROSS_VALUE) = #DISCOUNT_BASIS
		TP_PROMOTION_PRODUCT_INPUT_VT(IC_PACK_UNIT) = #PACK_UOM
		TP_PROMOTION_PRODUCT_INPUT_VT(TP_PACK_QUANTITY) = #PACK_ORDER_QTY
		TP_PROMOTION_PRODUCT_INPUT_VT(UNIT_PRICE) = #PRICE_UOM
		TP_PROMOTION_PRODUCT_INPUT_VT(TP_PRICE_QTY) = #PRICE_ORDER_QTY
		!
		TP_PROMOTION_PRODUCT_INPUT_VT(TP_IGNORE_DISCOUNT_LIMITS) = #IGNORE_LIMITS
		TP_PROMOTION_PRODUCT_INPUT_VT(DIVISION) = SALES_ORDER_LINES(DIVISION)
		TP_PROMOTION_PRODUCT_INPUT_VT(WAREHOUSE) = SALES_ORDER_LINES(WAREHOUSE)
		TP_PROMOTION_PRODUCT_INPUT_VT(IC_NOMINATED_UNIT) = #NOMI_UOM

		ADD TO TP_PROMOTION_PRODUCT_INPUT_VT

	END_BLOCK

	BEGIN_BLOCK CHECK_TP 
		#TP_ENABLE= #NO
		FIND IN TP_LINE_DISCOUNTS_VT 
		IF(%STATUS = %SUCCESS)
			#TP_ENABLE= #YES
		ELSE
			PERFORM "GEMTP:TP_L_CUSTOMER_PROMOTIONS" (#RETURN_STATUS,#ERROR_MESSAGE)
			IF(#RETURN_STATUS=%SUCCESS)
				PERFORM "GEMTP:TP_L_PRODUCT_PROMOTIONS" (#RETURN_STATUS,#ERROR_MESSAGE,#ALLOW_MODIFY)
				IF(#RETURN_STATUS=%SUCCESS)
					FIND IN TP_LINE_DISCOUNTS_VT 
					IF(%STATUS = %SUCCESS)			
						#TP_ENABLE=#YES
					END_IF
				END_IF
			END_IF
			
			DELETE ALL FROM TP_LINE_DISCOUNTS_VT
		END_IF
	END_BLOCK

	BEGIN_BLOCK SETUP_VARS
		IF ((#ASSOCIATION_VALUE_CHANGE = #YES) &
		AND (#TP_PROCESSED_QTY = 0.0) )
			#NEW_ASSOCIATIONS = #YES
		ELSE
			#NEW_ASSOCIATIONS = #NO
		END_IF

		#ASSOCIATION_VALUE_CHANGE = #NO
	END_BLOCK

	BEGIN_BLOCK CHANGE_NOTICE
		IF (#LINE_EDIT_MODE = "MODIFY")
			IF (#TP_PROCESSED_QTY > 0.0)
				#GET_NEW_PROMOTIONS = #NO
				GOTO PROCESS_DISCS
			END_IF

			IF ( DAYS(#OLD_LINE_REQUESTED_DATE) <> 0 &
			AND (DAYS(#LINE_REQUESTED_DATE) <> DAYS(#OLD_LINE_REQUESTED_DATE)) )
				#DATE_CHANGE = #YES
			ELSE
				#DATE_CHANGE = #NO
			END_IF
			#OLD_LINE_REQUESTED_DATE = #LINE_REQUESTED_DATE

			IF ( ((#NEW_ASSOCIATIONS=#YES) &
			OR  (#PRICE_VALUE_CHANGE=#YES) &
			OR  (#DATE_CHANGE = #YES) &
			OR  (#TP_VALUE_CHANGE=#YES &
						AND ( (#ORIG_SALES_ORDER_QTY<>0) OR (#OPT = "LINE") )) ) &
			AND (#TP_ENABLE=#YES) )

				PERFORM PROMOTION_CHANGE_NOTICE

				IF ( %STATUS = %SUCCESS )
					#GET_NEW_PROMOTIONS = #YES

					PERFORM "GEMTP:TP_L_CALC_PROMOTIONS" ("ADD_LINE", &
										"", &
										"1", &
										SALES_ORDER_LINES(COMPANY_CODE), &
										SALES_ORDER_LINES(DIVISION), &
										SALES_ORDER_LINES(ORDER_NUMBER), &
										SALES_ORDER_LINES(ORDER_LINE_NUMBER), &
										#YES, &
										#R1, &
										#R2, &
										#R3)
				ELSE
					#GET_NEW_PROMOTIONS = #NO
				END_IF
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK PROCESS_DISCS
		IF ( #LINE_EDIT_MODE = "ADD" OR #GET_NEW_PROMOTIONS = #YES )

			PERFORM "GEMTP:TP_L_PROMOTION_DISCOUNTS" ( "INITIALIZE", #R_STATUS, #R_MSG, #DMMY1, #DMMY2, #DMMY3 )
			#GET_NEW_PROMOTIONS = #NO
			!
			PERFORM "GEMTP:TP_L_PROMOTION_DISCOUNTS" &
					("CREATE",#R_STATUS,#R_MSG,#ALLOW_DISC_MODIFY,#LINE_DISCOUNT,#POST_INVOICE_DISCOUNT)
			IF ( #R_STATUS<>%SUCCESS)
				ERROR/TEXT_ONLY/BELL/WAIT #R_MSG
			END_IF

			IF ( #ALLOW_DISC_MODIFY = #YES )
				PERFORM "GEMTP:TP_L_PROMOTION_DISCOUNTS" &
						("MODIFY",#R_STATUS,#R_MSG,#ALLOW_DISC_MODIFY,#LINE_DISCOUNT,#POST_INVOICE_DISCOUNT)
				IF ( #R_STATUS<>%SUCCESS )
					ERROR/TEXT_ONLY/BELL/WAIT #R_MSG
				END_IF
			END_IF

!			PERFORM ADD_ORDER_LINE_DISCOUNTS
			PERFORM "GEMTP:TP_L_CALC_PROMOTIONS" ("ADD_LINE", &
								"", &
								"1", &
								SALES_ORDER_LINES(COMPANY_CODE), &
								SALES_ORDER_LINES(DIVISION), &
								SALES_ORDER_LINES(ORDER_NUMBER), &
								SALES_ORDER_LINES(ORDER_LINE_NUMBER), &
								#YES, &
!								#NO, &
								#R_STATUS, &
								#R_MSG, &
								#R3)
			#LOAD_DISCOUNTS = #YES

		ELSE
			! Modify

			IF ( #LOAD_DISCOUNTS = #YES )
!				PERFORM INITIALIZE_PROMOTIONS_VT
!				IF ( %STATUS = %EMPTY )
!					EXIT(%STATUS)
!				END_IF
!				PERFORM "GEMTP:TP_L_PROMOTION_DISCOUNTS" &
!					("LOAD",#R_STATUS,#R_MSG,#ALLOW_DISC_MODIFY,#LINE_DISCOUNT,#POST_INVOICE_DISCOUNT)

				PERFORM "GEMTP:TP_L_CALC_PROMOTIONS" ("LOAD", &
								"", &
								"1", &
								SALES_ORDER_LINES(COMPANY_CODE), &
								SALES_ORDER_LINES(DIVISION), &
								SALES_ORDER_LINES(ORDER_NUMBER), &
								SALES_ORDER_LINES(ORDER_LINE_NUMBER), &
								#NO, &
								#R_STATUS, &
								#R_MSG, &
								#R3)

				IF ( #R_STATUS<>%SUCCESS )
					ERROR/TEXT_ONLY/BELL/WAIT #R_MSG
				END_IF
				#LOAD_DISCOUNTS = #NO
			END_IF

			IF (#TP_PROCESSED_QTY = 0.0)

				PERFORM "GEMTP:TP_L_PROMOTION_DISCOUNTS" &
						("MODIFY",#R_STATUS,#R_MSG,#ALLOW_DISC_MODIFY,#LINE_DISCOUNT,#POST_INVOICE_DISCOUNT)

				IF ( #R_STATUS<>%SUCCESS )
					ERROR/TEXT_ONLY/BELL/WAIT #R_MSG
				END_IF

!				PERFORM UPDATE_ORDER_LINE_DISCOUNTS
				PERFORM "GEMTP:TP_L_CALC_PROMOTIONS" ("ADD_LINE", &
									"", &
									"1", &
									SALES_ORDER_LINES(COMPANY_CODE), &
									SALES_ORDER_LINES(DIVISION), &
									SALES_ORDER_LINES(ORDER_NUMBER), &
									SALES_ORDER_LINES(ORDER_LINE_NUMBER), &
									#YES, &
									#R1, &
									#R2, &
									#R3)
			ELSE
				IF ( #OPT = "DISCOUNTS" )
					PERFORM "GEMTP:TP_L_PROMOTION_DISCOUNTS" &
							("DISPLAY",#R_STATUS,#R_MSG,#ALLOW_DISC_MODIFY,#LINE_DISCOUNT,#POST_INVOICE_DISCOUNT)

					IF ( #R_STATUS<>%SUCCESS )
						ERROR/TEXT_ONLY/BELL/WAIT #R_MSG
					END_IF
				ELSE
					IF ( #OPT = "LINE" )
						IF (#PRICE_VALUE_CHANGE = #YES &
						OR  #TP_VALUE_CHANGE = #YES )
							PERFORM "GEMTP:TP_L_PROMOTION_DISCOUNTS" &
									("CALCULATE",#R_STATUS,#R_MSG,#ALLOW_DISC_MODIFY,#LINE_DISCOUNT,#POST_INVOICE_DISCOUNT)
							IF ( #R_STATUS<>%SUCCESS OR #R_MSG<>"" )
								ERROR/TEXT_ONLY/BELL/WAIT #R_MSG
							END_IF
						END_IF
!						PERFORM UPDATE_ORDER_LINE_DISCOUNTS
						PERFORM "GEMTP:TP_L_CALC_PROMOTIONS" ("ADD_LINE", &
											"", &
											"1", &
											SALES_ORDER_LINES(COMPANY_CODE), &
											SALES_ORDER_LINES(DIVISION), &
											SALES_ORDER_LINES(ORDER_NUMBER), &
											SALES_ORDER_LINES(ORDER_LINE_NUMBER), &
											#YES, &
											#R1, &
											#R2, &
											#R3)
					END_IF
				END_IF
			END_IF

		END_IF

		#PRICE_VALUE_CHANGE = #NO
		#TP_VALUE_CHANGE = #NO
	END_BLOCK

END_FORM


PROCEDURE_FORM ADD_ORDER_LINE_DISCOUNTS &
	/TABLE=TP_LINE_DISCOUNTS_VT

	BEGIN_BLOCK ADD_DISCOUNT_RECORD

		TP_ORDER_LINE_DISCOUNTS(COMPANY_CODE) = SALES_ORDER_LINES(COMPANY_CODE)
		TP_ORDER_LINE_DISCOUNTS(DIVISION) = SALES_ORDER_LINES(DIVISION)
		TP_ORDER_LINE_DISCOUNTS(ORDER_NUMBER) = SALES_ORDER_LINES(ORDER_NUMBER)
		TP_ORDER_LINE_DISCOUNTS(ORDER_LINE_NUMBER) = SALES_ORDER_LINES(ORDER_LINE_NUMBER)
		TP_ORDER_LINE_DISCOUNTS(TP_PROMOTION_CODE) = TP_LINE_DISCOUNTS_VT(TP_PROMOTION_CODE)
		TP_ORDER_LINE_DISCOUNTS(TP_SEQUENCE_NUMBER) = TP_LINE_DISCOUNTS_VT(TP_SEQUENCE_NUMBER)
		TP_ORDER_LINE_DISCOUNTS(TP_DISCOUNT_TYPE) = TP_LINE_DISCOUNTS_VT(TP_DISCOUNT_TYPE)
		TP_ORDER_LINE_DISCOUNTS(TP_DISCOUNT_VALUE) = TP_LINE_DISCOUNTS_VT(TP_DISCOUNT_VALUE)
		IF ( TP_LINE_DISCOUNTS_VT(TP_CALCULATION_TYPE)="1" )
			TP_ORDER_LINE_DISCOUNTS(TP_DISCOUNT_PERCENT) = TP_LINE_DISCOUNTS_VT(TP_DISCOUNT_AMOUNT)
			TP_ORDER_LINE_DISCOUNTS(TP_DISCOUNT_AMOUNT) = 0
		ELSE
			TP_ORDER_LINE_DISCOUNTS(TP_DISCOUNT_AMOUNT) = TP_LINE_DISCOUNTS_VT(TP_DISCOUNT_AMOUNT)
			TP_ORDER_LINE_DISCOUNTS(TP_DISCOUNT_PERCENT) = 0
		END_IF
		TP_ORDER_LINE_DISCOUNTS(TP_APPLY_DISCOUNT) = TP_LINE_DISCOUNTS_VT(TP_APPLY_DISCOUNT)
		TP_ORDER_LINE_DISCOUNTS(TP_WITHIN_GRACE) = TP_LINE_DISCOUNTS_VT(TP_WITHIN_GRACE)

		ADD TO TP_ORDER_LINE_DISCOUNTS

	END_BLOCK

END_FORM

PROCEDURE_FORM UPDATE_ORDER_LINE_DISCOUNTS &
	/TABLE=TP_LINE_DISCOUNTS_VT

	BEGIN_BLOCK UPDATE_DISCOUNT_RECORD

		FIND IN TP_ORDER_LINE_DISCOUNTS &
			/LOCK=WRITE &
			/WITH=COMPANY_CODE = SALES_ORDER_LINES(COMPANY_CODE) &
			/WITH=DIVISION = SALES_ORDER_LINES(DIVISION) &
			/WITH=ORDER_NUMBER = SALES_ORDER_LINES(ORDER_NUMBER) &
			/WITH=ORDER_LINE_NUMBER = SALES_ORDER_LINES(ORDER_LINE_NUMBER) &
			/WITH=TP_PROMOTION_CODE = TP_LINE_DISCOUNTS_VT(TP_PROMOTION_CODE)
		IF ( %STATUS = %SUCCESS )
			TP_ORDER_LINE_DISCOUNTS(TP_DISCOUNT_VALUE) = TP_LINE_DISCOUNTS_VT(TP_DISCOUNT_VALUE)
			IF ( TP_LINE_DISCOUNTS_VT(TP_CALCULATION_TYPE) = 1 )
				TP_ORDER_LINE_DISCOUNTS(TP_DISCOUNT_PERCENT) = TP_LINE_DISCOUNTS_VT(TP_DISCOUNT_AMOUNT)
				TP_ORDER_LINE_DISCOUNTS(TP_DISCOUNT_AMOUNT) = 0
			ELSE
				TP_ORDER_LINE_DISCOUNTS(TP_DISCOUNT_AMOUNT) = TP_LINE_DISCOUNTS_VT(TP_DISCOUNT_AMOUNT)
				TP_ORDER_LINE_DISCOUNTS(TP_DISCOUNT_PERCENT) = 0
			END_IF
			TP_ORDER_LINE_DISCOUNTS(TP_APPLY_DISCOUNT) = TP_LINE_DISCOUNTS_VT(TP_APPLY_DISCOUNT)
			TP_ORDER_LINE_DISCOUNTS(TP_WITHIN_GRACE) = TP_LINE_DISCOUNTS_VT(TP_WITHIN_GRACE)
		END_IF

	END_BLOCK

END_FORM

!PROCEDURE_FORM DELETE_LINE_DISCOUNTS &
!	/TABLE=TP_ORDER_LINE_DISCOUNTS &
!	/WITH=COMPANY_CODE=#COMPANY_CODE &
!	/WITH=DIVISION=#DIVISION &
!	/WITH=ORDER_NUMBER=SALES_ORDER_LINES(ORDER_NUMBER) &
!	/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER)

!	DELETE FROM TP_ORDER_LINE_DISCOUNTS

!END_FORM


PROCEDURE_FORM DELETE_ALL_LINE_DISCOUNTS &
	/TABLE=TP_ORDER_LINE_DISCOUNTS &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION=#DIVISION &
	/WITH=ORDER_NUMBER=#ORDER_NUMBER

!	DELETE FROM TP_ORDER_LINE_DISCOUNTS
	PERFORM "GEMTP:TP_L_CALC_PROMOTIONS"  ("DELETE_LINE", &
						"", &
						"1", &
						#COMPANY_CODE, &
						#DIVISION, &
						#ORDER_NUMBER, &
						TP_ORDER_LINE_DISCOUNTS(ORDER_LINE_NUMBER), &
						#YES, &
						#R1, &
						#R2, &
						#R3)
	IF (#R1 = %FAILURE) EXIT(%FAILURE)

END_FORM


!PROCEDURE_FORM INITIALIZE_PROMOTIONS_VT &

!	DELETE ALL FROM TP_LINE_DISCOUNTS_VT
!	PERFORM LOAD_PROMOTIONS_VT
!	IF ( %STATUS = %EMPTY ) EXIT(%STATUS)

!END_FORM

!PROCEDURE_FORM LOAD_PROMOTIONS_VT &
! 	/TABLE=TP_ORDER_LINE_DISCOUNTS &
!	/WITH=COMPANY_CODE = SALES_ORDER_LINES(COMPANY_CODE) &
!	/WITH=DIVISION = SALES_ORDER_LINES(DIVISION) &
!	/WITH=ORDER_NUMBER = SALES_ORDER_LINES(ORDER_NUMBER) &
!	/WITH=ORDER_LINE_NUMBER = SALES_ORDER_LINES(ORDER_LINE_NUMBER)

!	TP_LINE_DISCOUNTS_VT(COMPANY_CODE) = TP_ORDER_LINE_DISCOUNTS(COMPANY_CODE)
!	TP_LINE_DISCOUNTS_VT(TP_PROMOTION_CODE) = TP_ORDER_LINE_DISCOUNTS(TP_PROMOTION_CODE)
!	TP_LINE_DISCOUNTS_VT(TP_SEQUENCE_NUMBER) = TP_ORDER_LINE_DISCOUNTS(TP_SEQUENCE_NUMBER)
!	TP_LINE_DISCOUNTS_VT(TP_DISCOUNT_TYPE) = TP_ORDER_LINE_DISCOUNTS(TP_DISCOUNT_TYPE)
!	TP_LINE_DISCOUNTS_VT(TP_DISCOUNT_VALUE) = TP_ORDER_LINE_DISCOUNTS(TP_DISCOUNT_VALUE)
!	IF ( TP_ORDER_LINE_DISCOUNTS(TP_DISCOUNT_PERCENT) = 0 )
!		TP_LINE_DISCOUNTS_VT(TP_DISCOUNT_AMOUNT) = TP_ORDER_LINE_DISCOUNTS(TP_DISCOUNT_AMOUNT)
!	ELSE
!		TP_LINE_DISCOUNTS_VT(TP_DISCOUNT_AMOUNT) = TP_ORDER_LINE_DISCOUNTS(TP_DISCOUNT_PERCENT)
!	END_IF
!	TP_LINE_DISCOUNTS_VT(TP_APPLY_DISCOUNT) = TP_ORDER_LINE_DISCOUNTS(TP_APPLY_DISCOUNT)
!	TP_LINE_DISCOUNTS_VT(TP_WITHIN_GRACE) = TP_ORDER_LINE_DISCOUNTS(TP_WITHIN_GRACE)

!	ADD TO TP_LINE_DISCOUNTS_VT

!END_FORM

FORM PROMOTION_CHANGE_NOTICE /ROW=14 /COL=4 /HEIGHT=5 /WIDTH=37


	OUTPUT_BLOCK BLOCK_1 /ROW=1 /COL=3 &
			/SOURCE=(MESSAGE("P_13872")) &
			/ATTRIBUTES=NONE

	OUTPUT_BLOCK BLOCK_2 /ROW=2 /COL=3 &
			/SOURCE=(MESSAGE("P_13873")) &
			/ATTRIBUTES=NONE


	YESNO_BLOCK YES_NO_1 /ROW=4 /COL=29 &
			/PROMPT=(MESSAGE("P_13874")) &
			/SOURCE=#YES &
			/BACK=(EXIT(%FAILURE)) &
			/EXIT=(EXIT(%FAILURE)) &
			/FAILURE=(EXIT(%FAILURE))

END_FORM


PROCEDURE_FORM MISC_ADJUSTMENTS (#MISC_MODE)

	BEGIN_BLOCK MISC_ADJUSTMENTS

		DELETE ALL FROM SOP_MAINT_MISC_ADJ_INPUT_VT
		CLEAR_BUFFER 	SOP_MAINT_MISC_ADJ_INPUT_VT

		SOP_MAINT_MISC_ADJ_INPUT_VT(COMPANY_CODE)		= #COMPANY_CODE
		SOP_MAINT_MISC_ADJ_INPUT_VT(DIVISION)			= #DIVISION
		SOP_MAINT_MISC_ADJ_INPUT_VT(TRANSACTION_TYPE)		= PARAMETER("TTYPE_SO")
		SOP_MAINT_MISC_ADJ_INPUT_VT(TRANSACTION_NUMBER)		= #ORDER_NUMBER
		SOP_MAINT_MISC_ADJ_INPUT_VT(TRANSACTION_LINE_NUMBER)	= SALES_ORDER_LINES(ORDER_LINE_NUMBER)
		SOP_MAINT_MISC_ADJ_INPUT_VT(SYS_PROCESSING_MODE)	= #MISC_MODE
		SOP_MAINT_MISC_ADJ_INPUT_VT(SYS_SALES_QUANTITY)		= #SALES_ORDER_QTY
		SOP_MAINT_MISC_ADJ_INPUT_VT(IC_NOMINATED_QTY)		= #NOMI_ORDER_QTY
		SOP_MAINT_MISC_ADJ_INPUT_VT(IC_NOMINATED_UNIT)		= #NOMI_UOM
		SOP_MAINT_MISC_ADJ_INPUT_VT(SYS_NON_NOMI_UNIT)		= #NON_NOMI_UOM
		SOP_MAINT_MISC_ADJ_INPUT_VT(SYS_NON_NOMI_QTY)		= #NON_NOMI_ORDER_QTY
		SOP_MAINT_MISC_ADJ_INPUT_VT(SYS_SENT_VALUE)		= #LINE_VALUE
		SOP_MAINT_MISC_ADJ_INPUT_VT(SYS_SENT_DISCOUNT)		= #LINE_DISCOUNT
		SOP_MAINT_MISC_ADJ_INPUT_VT(SYS_CURRENCY_CODE)		= #CURRENCY_CODE

		ADD TO SOP_MAINT_MISC_ADJ_INPUT_VT

		PERFORM "GEMSOP:SOP_L_MAINT_MISC_ADJUSTMENTS" ( #ERROR_STATUS, #ERROR_MESSAGE )
		IF ( #ERROR_STATUS<>%SUCCESS )
			ERROR/TEXT_ONLY/BELL/WAIT #ERROR_MESSAGE
		END_IF

	END_BLOCK

END_FORM


PROCEDURE_FORM LOAD_ADJUSTMENTS

	BEGIN_BLOCK CLEAR_AND_LOAD

		DELETE ALL FROM SALES_MISC_ADJUSTMENTS_VT

		DELETE ALL FROM SOP_LOAD_MISC_ADJ_INPUT_VT

		CLEAR_BUFFER 	SOP_LOAD_MISC_ADJ_INPUT_VT

		SOP_LOAD_MISC_ADJ_INPUT_VT(COMPANY_CODE)		= #COMPANY_CODE
		SOP_LOAD_MISC_ADJ_INPUT_VT(DIVISION)			= #DIVISION
		SOP_LOAD_MISC_ADJ_INPUT_VT(TRANSACTION_TYPE)		= PARAMETER("TTYPE_SO")
		SOP_LOAD_MISC_ADJ_INPUT_VT(TRANSACTION_NUMBER)		= #ORDER_NUMBER
		SOP_LOAD_MISC_ADJ_INPUT_VT(TRANSACTION_LINE_NUMBER)	= 0
		SOP_LOAD_MISC_ADJ_INPUT_VT(SYS_ADJUST_FACTOR)		= 0
		SOP_LOAD_MISC_ADJ_INPUT_VT(SYS_COPY_FROM_PREVIOUS)	= #NO
		SOP_LOAD_MISC_ADJ_INPUT_VT(SYS_COPIED_TRANS_NUMBER)	= ""
		SOP_LOAD_MISC_ADJ_INPUT_VT(SYS_COPIED_TRANS_LINE)	= ""

		ADD TO SOP_LOAD_MISC_ADJ_INPUT_VT

		PERFORM "GEMSOP:SOP_L_LOAD_MISC_ADJ_VT" (#ERROR_MESSAGE)

		IF (%STATUS <> %SUCCESS OR #ERROR_MESSAGE <> "")
			ERROR/WAIT #ERROR_MESSAGE
		END_IF

	END_BLOCK

END_FORM


PROCEDURE_FORM DELETE_ALL_ADJUSTMENTS &
 	/TABLE=SALES_ORDER_MISC_ADJS &
	/WITH=COMPANY_CODE = #COMPANY_CODE &
	/WITH=DIVISION = #DIVISION &
	/WITH=ORDER_NUMBER = #ORDER_NUMBER

	BEGIN_BLOCK DELETE_ADJUSTMENT

	 	DELETE FROM SALES_ORDER_MISC_ADJS

	END_BLOCK

END_FORM


PROCEDURE_FORM DELETE_LINE_ADJUSTMENTS &
 	/TABLE=SALES_ORDER_MISC_ADJS &
	/WITH=COMPANY_CODE = #COMPANY_CODE &
	/WITH=DIVISION = #DIVISION &
	/WITH=ORDER_NUMBER = #ORDER_NUMBER &
	/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER)

	BEGIN_BLOCK DELETE_ADJUSTMENT

	 	DELETE FROM SALES_ORDER_MISC_ADJS

	END_BLOCK

END_FORM

PROCEDURE_FORM DELETE_MISC_VT_LINE &
 	/TABLE=SALES_MISC_ADJUSTMENTS_VT &
	/WITH=LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER)

	BEGIN_BLOCK DELETE_ADJUSTMENT_VT

	 	DELETE FROM SALES_MISC_ADJUSTMENTS_VT

	END_BLOCK

END_FORM


!Change 003 - DBM - 3-9-2007 - New minor/balance component handling system
PROCEDURE_FORM COPY_MINBAL_RECORD &
		/TABLE=MAN.RECIPE_LINES,RECIPES &
		/LOCK=NONE &
		/WITH=A.COMPANY_CODE=#COMPANY_CODE &
		/WITH=A.RECIPE_CODE=#PART_CODE &
		/WITH=B.RECIPE_CODE=A.RECIPE_CODE &
		/WITH=B.SYS_VERSION_NUMBER=A.SYS_VERSION_NUMBER &
		/WITH=B.STATUS_FLAG<>"D" &
		/WITH=A.VOL_MINBAL_TYPE="M" &
		/WITH=A.VOL_MINBAL_TYPE="B" &
		/SELECTION=("A AND B AND C AND D AND E AND (F OR G)") &
		/REDUCED_TO=A.PART_CODE
		
		BEGIN_BLOCK AVOID_DUPES
			START_STREAM FIND_DUPES &
				/LOCK=NONE &
				/TABLE=VOL_SO_MINBAL &
				/WITH=ORDER_NUMBER=#ORDER_NUMBER &
				/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER) &
				/WITH=PART_CODE=MAN.RECIPE_LINES(PART_CODE) &
				/STATISTIC=#DUPES=COUNT
			FETCH FIND_DUPES
		END_BLOCK
		IF (#DUPES > 0) 
			EXIT
		ELSE
			CLEAR_BUFFER VOL_SO_MINBAL
			VOL_SO_MINBAL(COMPANY_CODE)=#COMPANY_CODE
			VOL_SO_MINBAL(DIVISION)=#DIVISION
			VOL_SO_MINBAL(ORDER_NUMBER)=#ORDER_NUMBER
			VOL_SO_MINBAL(ORDER_LINE_NUMBER)=SALES_ORDER_LINES(ORDER_LINE_NUMBER)
			VOL_SO_MINBAL(PART_CODE)=MAN.RECIPE_LINES(PART_CODE)
			VOL_SO_MINBAL(SPECIFICATION_CODE)=1
			ADD TO VOL_SO_MINBAL		
		END_IF
END_FORM

!Change 003
PROCEDURE_FORM VOL_DELETE_MINBAL &	
		/LOCK=WRITE &
		/TABLE=VOL_SO_MINBAL &
		/WITH=COMPANY_CODE=#COMPANY_CODE &
		/WITH=DIVISION=#DIVISION &
		/WITH=ORDER_NUMBER=#ORDER_NUMBER &
		/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER)

		DELETE FROM VOL_SO_MINBAL
END_FORM

!Change 003 
TABLE_FORM VOL_DISPLAY_MINBAL /HEIGHT=10 /WIDTH=50 /ROW=10 /COL=10 &
		/TABLE=VOL_SO_MINBAL &
		/TITLE=("Choose Component Specifications") &
		/OPTION=NOINSERT,NODELETE &
		/WITH=COMPANY_CODE=#COMPANY_CODE &
		/WITH=DIVISION=#DIVISION &
		/WITH=ORDER_NUMBER=SALES_ORDER_LINES(ORDER_NUMBER) &
		/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER) 

	BEGIN_BLOCK /DISPLAY_ONLY PART_DESC
		FIND IN PRODUCT_MASTER /SECONDARY /STREAM_NAME=PARTDESC /WITH=PART_CODE=VOL_SO_MINBAL(PART_CODE)
	END_BLOCK

	OUTPUT_BLOCK PARTCODE /ROW=1 /COL=1 &
		/SOURCE=VOL_SO_MINBAL(PART_CODE) &
		/HEADING=FIELD_HEADING(PART_CODE)

	OUTPUT_BLOCK PARTDESC /ROW=1 /COL=12 &
		/SOURCE=PARTDESC:PRODUCT_MASTER(PART_DESC_1) &
		/HEADING=FIELD_HEADING(PART_DESC_1)

	INPUT_BLOCK SPEC /ROW=1 /COL=42 &
		/TARGET=VOL_SO_MINBAL(SPECIFICATION_CODE) &
		/SOURCE=VOL_SO_MINBAL(SPECIFICATION_CODE) &
		!/USING=SPECIFICATION_CODES(SPECIFICATION_CODE),REQUIRED &
		/HEADING=FIELD_HEADING(SPECIFICATION_CODE) &
		/LOV=SPECIFICATION_CODES(SPECIFICATION_CODE,CODE_DESCRIPTION) &
		/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
		/LOV_WITH=PART_CODE=VOL_SO_MINBAL(PART_CODE)

	BEGIN_BLOCK SHOW_SPEC
		PERFORM SHOW_SPECS(VOL_SO_MINBAL(PART_CODE),VOL_SO_MINBAL(SPECIFICATION_CODE))
	END_BLOCK
END_FORM

!Change 014 - DBM - Modifications to display spec codes
FORM SHOW_SPECS(#PART_CODE_IN, #SPEC_CODE_IN) /ROW=3 /COL=2 /HEIGHT=21 /WIDTH=78 &
	/TITLE=(MESSAGE("P_50194")) 

	BEGIN_BLOCK COMPANY_SETUP
		#COMPANY_CODE=PARAMETER("USER_COMPANY_CODE")
		FIND IN SPECIFICATION_CODES &
			/SECONDARY &
			/STREAM_NAME=SPECVIEW &
			/WITH=PART_CODE=#PART_CODE_IN &
			/WITH=SPECIFICATION_CODE=#SPEC_CODE_IN
		FIND IN PRODUCT_MASTER &
			/SECONDARY &
			/STREAM_NAME=PM &
			/WITH=PART_CODE=#PART_CODE_IN

	END_BLOCK

	BEGIN_BLOCK PART_CODE_1
		OUTPUT_BLOCK  /ROW=3 /COL=32 &
			/PROMPT=(FIELD_PROMPT(PART_CODE)) &
			/SOURCE=#PART_CODE_IN
	END_BLOCK

	OUTPUT_BLOCK PART_DESC_1 /ROW=3 /COL=49 &
			/SOURCE=(PM:PRODUCT_MASTER(PART_DESC_1))

	BEGIN_BLOCK SPECIFICATION_CODE
		OUTPUT_BLOCK  /ROW=4 /COL=32 &
			/PROMPT=(FIELD_PROMPT(SPECIFICATION_CODE)) &
			/SOURCE=#SPEC_CODE_IN
	END_BLOCK

	OUTPUT_BLOCK DESCRIPTION /ROW=5 /COL=32 &
			/PROMPT=(FIELD_PROMPT(CODE_DESCRIPTION)) &
			/SOURCE=(SPECVIEW:SPECIFICATION_CODES(CODE_DESCRIPTION))

	OUTPUT_BLOCK DETAIL_DESCRIPTION /ROW=7 /COL=15 /HEIGHT=5 &
			/PROMPT=(FIELD_PROMPT(DETAIL_DESCRIPTION)) &
			/SOURCE=(SPECVIEW:SPECIFICATION_CODES(DETAIL_DESCRIPTION))

	OUTPUT_BLOCK COA_NOTES /ROW=13 /COL=15 /HEIGHT=5 &
			/PROMPT=(FIELD_PROMPT(SPECIFICATION_CODES,VOL_COA_NOTES)) &
			/SOURCE=(SPECVIEW:SPECIFICATION_CODES(VOL_COA_NOTES))

	BEGIN_BLOCK CHAR_CODES
		#SPEC_CODE_IN = SPECVIEW:SPECIFICATION_CODES(SPECIFICATION_CODE)
		COMMIT
		 		
		!+++
		! Changes Start
		! 3-May-2005	PTD		Greenwich Engineering,LLC
		! Add in Sort Order from Product Chars
		!---
		#YES = PARAMETER("LANGUAGE_YES")
		PERFORM UPDATE_SPEC_LIMITS
		!+++
		! Changes End
		! 3-May-2005	PTD		Greenwich Engineering,LLC
		!---

		!DBM
		PERFORM SHOW_CODES(#PART_CODE_IN,#SPEC_CODE_IN)
		DISPLAY CLEAN
		!GOTO COMPANY_SETUP
	END_BLOCK

END_FORM

TABLE_FORM SHOW_CODES(#PART_CODE_IN,#SPEC_CODE_IN) /ROW=11 /COL=2 /HEIGHT=13 /WIDTH=78 &
	/LOCK=NONE &
	/OPTIONS=NOINSERT,NODELETE &
	/TABLE=IC_SPECIFICATION_LIMITS &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=PART_CODE=#PART_CODE_IN &
	/WITH=SPECIFICATION_CODE=#SPEC_CODE_IN &
	!Change 010
	/SORTED_BY=(VOL_SORT_ORDER,CHARACTERISTIC_CODE) &
	!DBM - 6/26/2007
	!New form to show COA flags
	/ALTERNATE_FORM=SHOW_ND_DETAILS &
	/TITLE="Component details"

	OUTPUT_BLOCK CHAR_CODE_1 /ROW=1 /COL=3 &
			/SOURCE=IC_SPECIFICATION_LIMITS(CHARACTERISTIC_CODE) &
			/HEADING=FIELD_HEADING(CHARACTERISTIC_CODE)

	BEGIN_BLOCK  /DISPLAY_ONLY GET_CHAR_CODE_1
		FIND IN CHARACTERISTIC_CODES &
			/LOCK=NONE &
			/SECONDARY &
			/STREAM_NAME=CHARS &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=CHARACTERISTIC_CODE=IC_SPECIFICATION_LIMITS(CHARACTERISTIC_CODE)
		
		FIND IN IC_PRODUCT_CHARACTERISTICS &
			/LOCK=NONE &
			/SECONDARY &
			/STREAM_NAME=PRODCHAR &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PART_CODE=#PART_CODE_IN &
			/WITH=CHARACTERISTIC_CODE=IC_SPECIFICATION_LIMITS(CHARACTERISTIC_CODE)
	END_BLOCK

	OUTPUT_BLOCK CHAR_DESC_1 /ROW=1 /COL=10 &
			/SOURCE=(CHARS:CHARACTERISTIC_CODES(DESCRIPTION)) &
			/HEADING=FIELD_HEADING(DESCRIPTION)

	OUTPUT_BLOCK LOW1 /ROW=1 /COL=40 &
			/SOURCE=IC_SPECIFICATION_LIMITS(IC_LOW_LIMIT_NUMERIC) &
			/HEADING=FIELD_HEADING(IC_LOW_LIMIT_NUMERIC) &
			/USE_IF=(PRODCHAR:IC_PRODUCT_CHARACTERISTICS(IC_DATATYPE_INDICATOR) 				= (PARAMETER("IC_CHARACTERISTIC_NUMERIC")))

	OUTPUT_BLOCK HIGH1 /ROW=1 /COL=52 &
			/SOURCE=IC_SPECIFICATION_LIMITS(IC_HIGH_LIMIT_NUMERIC) &
			/HEADING=FIELD_HEADING(IC_HIGH_LIMIT_NUMERIC) &
			/USE_IF=(PRODCHAR:IC_PRODUCT_CHARACTERISTICS(IC_DATATYPE_INDICATOR) 				= (PARAMETER("IC_CHARACTERISTIC_NUMERIC")))

	OUTPUT_BLOCK LOW1TEXT /ROW=1 /COL=40 &
			/SOURCE=IC_SPECIFICATION_LIMITS(IC_LOW_LIMIT_TEXT) &
			/HEADING=FIELD_HEADING(IC_LOW_LIMIT_TEXT) &
			/USE_IF=(PRODCHAR:IC_PRODUCT_CHARACTERISTICS(IC_DATATYPE_INDICATOR) = (PARAMETER("IC_CHARACTERISTIC_TEXT")) &
						AND CHARACTERISTIC_CODES(VOL_CHAR_VALUE_TYPE) = "R")

	OUTPUT_BLOCK HIGH1TEXT /ROW=1 /COL=52 &
			/SOURCE=IC_SPECIFICATION_LIMITS(IC_HIGH_LIMIT_TEXT) &
			/HEADING=FIELD_HEADING(IC_HIGH_LIMIT_TEXT) &
			/USE_IF=(PRODCHAR:IC_PRODUCT_CHARACTERISTICS(IC_DATATYPE_INDICATOR) 				= (PARAMETER("IC_CHARACTERISTIC_TEXT")))

	OUTPUT_BLOCK UNIT_CHAR /ROW=1 /COL=64 &
			/SOURCE=(PRODCHAR:IC_PRODUCT_CHARACTERISTICS(UNIT_CHAR)) &
			/HEADING=field_heading(unit_char)

	OUTPUT_BLOCK MEASUREMENT_TYPE /ROW=1 /COL=70 &
			/SOURCE=IC_SPECIFICATION_LIMITS(VOL_MEASUREMENT_TYPE) &
			/HEADING=FIELD_HEADING(VOL_MEASUREMENT_TYPE)

	OUTPUT_BLOCK MEASUREMENT_PHASE /ROW=1 /COL=74 &
			/SOURCE=IC_SPECIFICATION_LIMITS(VOL_MEASUREMENT_PHASE) &
			/HEADING=FIELD_HEADING(VOL_MEASUREMENT_PHASE)


END_FORM

PROCEDURE_FORM UPDATE_SPEC_LIMITS &
	/TABLE=IC_PRODUCT_CHARACTERISTICS &
	/SECONDARY &
	/STREAM_NAME=PRODCHAR &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=PART_CODE=#PART_CODE &
	/WITH=IC_CHARACTERISTIC_TYPE = PARAMETER("MP_CHARACTERISTIC_TYPE_LOT")	&
	!/WITH=IC_ACTIVE_AT_SO_ENTRY=#YES


	BEGIN_BLOCK LOAD_BUFFER_AND_UPDATE
		!+++
		! Changes Start
		! 3-May-2005	PTD		Greenwich Engineering,LLC
		! Add in Sort Order from Product Chars
		!---
		
		FIND IN IC_SPECIFICATION_LIMITS &
			/LOCK=WRITE &
			/STREAM_NAME=SPECLIMITS &
			/SECONDARY &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=PART_CODE = #PART_CODE &
			/WITH=SPECIFICATION_CODE = #SPECIFICATION_CODE &
			/WITH=CHARACTERISTIC_CODE = PRODCHAR:IC_PRODUCT_CHARACTERISTICS(CHARACTERISTIC_CODE)

		IF ( %STATUS = %SUCCESS ) 
			!Change 010
			SPECLIMITS:IC_SPECIFICATION_LIMITS(VOL_SORT_ORDER) = PRODCHAR:IC_PRODUCT_CHARACTERISTICS(VOL_SORT_ORDER)
		END_IF 
		!+++
		! Changes End
		! 3-May-2005	PTD		Greenwich Engineering,LLC
		!---

	END_BLOCK

END_FORM
!DBM - End mods to display specs

FORM VOL_SOLD_STOCK_LINE /HEIGHT=5 /WIDTH=25 /COL=10 /ROW=18 
!Change 008 - DBM - 4/5/2007 - Added flag for whether the line is being sold or not
	YESNO_BLOCK SOLD_CYL /ROW=2 /COL=16 &
			/PROMPT=("Sold Cylinder") &
			/SUCCESS=(SALES_ORDER_LINES(VOL_SOLD_LINE)="Y") &
			/FAILURE=(SALES_ORDER_LINES(VOL_SOLD_LINE)="N") &
			/USE_IF=(PRODUCT_MASTER(BATCHES_EXIST)="Y")

END_FORM

!DBM - 6/26/2007
!New form to show COA flags
FORM SHOW_ND_DETAILS /WIDTH=60 /HEIGHT=10 /ROW=10 /COL=7 /TITLE="Non-Detect Details"
	OUTPUT_BLOCK ND_LIMIT /ROW=3 /COL=30 &
			/PROMPT=(FIELD_PROMPT(VOL_COA_DETECTION_LIMIT)) &
			/SOURCE=IC_SPECIFICATION_LIMITS(VOL_COA_DETECTION_LIMIT)

	OUTPUT_BLOCK PRINT_FLAG /ROW=5 /COL=30 &
			/PROMPT=(FIELD_PROMPT(VOL_COA_PRINT_FLAG)) &
			/SOURCE=IC_SPECIFICATION_LIMITS(VOL_COA_PRINT_FLAG)

	OUTPUT_BLOCK FLAG_DESC_M /ROW=5 /COL=35 &
			/SOURCE=("Display Lower Limit") &
			/USE_IF=(IC_SPECIFICATION_LIMITS(VOL_COA_PRINT_FLAG)="M")
	OUTPUT_BLOCK FLAG_DESC_N /ROW=5 /COL=35 &
			/SOURCE=("Do not display a limit") &
			/USE_IF=(IC_SPECIFICATION_LIMITS(VOL_COA_PRINT_FLAG)="N")
	OUTPUT_BLOCK FLAG_DESC_R /ROW=5 /COL=35 &
			/SOURCE=("Display the range of limits") &
			/USE_IF=(IC_SPECIFICATION_LIMITS(VOL_COA_PRINT_FLAG)="R")
	OUTPUT_BLOCK FLAG_DESC_X /ROW=5 /COL=35 &
			/SOURCE=("Display Upper Limit") &
			/USE_IF=(IC_SPECIFICATION_LIMITS(VOL_COA_PRINT_FLAG)="X")

	PAUSE_BLOCK CONTINUE /ROW=7 /COL=30

END_FORM

!Change 012
FORM VOL_ORDER_LINE_REFERENCE_EZ /HEIGHT=5 /WIDTH=30 /COL=10 /ROW=10 &
	/TITLE=("Enter Order Line Reference")

	INPUT_BLOCK ORDER_LINE_REF /ROW=2 /COL=15 &
			/TARGET=SALES_ORDER_LINES(ORDER_LINE_REFERENCE) &
			/PROMPT=FIELD_SHORT_PROMPT(ORDER_LINE_REFERENCE) &
			!Change 019			
			/LOV=SALES_ORDER_LINES(ORDER_LINE_NUMBER) &
			/LOV_WITH=ORDER_NUMBER=SALES_ORDER_LINES(ORDER_NUMBER)&
			/USING=NUMERIC &
			!END CHANGE 019	
			/SOURCE=(SALES_ORDER_LINES(ORDER_LINE_NUMBER)-1) &
			/USE_IF=(SALES_ORDER_LINES(PART_CODE) >= "901000") 

	IF (SALES_ORDER_LINES(PART_CODE) >= "901000" AND SALES_ORDER_LINES(ORDER_LINE_REFERENCE)="") 
		ERROR /TEXT_ONLY "Line Reference is required for all non-finished goods."
		GOTO ORDER_LINE_REF
	END_IF
END_FORM
!Change 012 End

!Change 013
FORM ASK_UPDATE_CONTACT (#CUST_NUM,#CUST_CONTACT) /ROW=12 /COL=35 /HEIGHT=4 /WIDTH=35 &
		/TITLE=("Update Customer Contact?")

		YESNO_BLOCK /ROW=2 /COL=30 &
			/PROMPT="Add contact phone/email?" &
			/SUCCESS=(PERFORM "GEMSOP:SOPC_M_VOL_CUSTOMER_CONTACTS" MODIFY (#CUST_NUM,#CUST_CONTACT,"Sales"))
END_FORM
!Change 013 End

!Change 016
FORM PO_EXISTS_POPUP /HEIGHT=5 /WIDTH=30 /COL=10 /ROW=8 /TITLE="Warning"
	OUTPUT_BLOCK /ROW=2 /COL=2 /SOURCE=("PO number already exists.")
	PAUSE_BLOCK /ROW=4 /COL=2
END_FORM
!Change 016 End

PROCEDURE_FORM VOL_ZERO_ORDER_CHARS &
	/LOCK=WRITE &
	/TABLE=SOP_CHARACTERISTIC_LIMITS &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION=SALES_ORDER_LINES(DIVISION) &
	/WITH=ORDER_NUMBER=SALES_ORDER_LINES(ORDER_NUMBER) &
	/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER)

	BEGIN_BLOCK ZERO_CHARS
		START_TRANSACTION
		SOP_CHARACTERISTIC_LIMITS(IC_HIGH_LIMIT_NUMERIC)=0
		SOP_CHARACTERISTIC_LIMITS(IC_HIGH_LIMIT_TEXT)=""
		SOP_CHARACTERISTIC_LIMITS(IC_LOW_LIMIT_NUMERIC)=0
		SOP_CHARACTERISTIC_LIMITS(IC_LOW_LIMIT_TEXT)=""
		COMMIT
	END_BLOCK
END_FORM

!Change 018 - New form to get the 3rd party freight bill address

FORM VOL_GET_FRT_BILL_ADDRESS(#ADDRESS_CODE) /HEIGHT=15 /WIDTH=50 /ROW=10 /COL=10 /TITLE=("3rd Party Freight Billing Address")

	INPUT_BLOCK 3RD_BILL_ADDR /ROW=2 /COL=27 &
		/TARGET=#ADDRESS_CODE &
		/SOURCE=SALES_ORDER_HEADERS(VOL_3RD_PARTY_FREIGHT_BILL) &
		/USING=SALES_ORDER_HEADERS(VOL_3RD_PARTY_FREIGHT_BILL) &
		/PROMPT=FIELD_PROMPT(VOL_3RD_PARTY_FREIGHT_BILL) &
		/LOV=CUSTOMER_ADDRESSES(ADDRESS_CODE,CUSTOMER_NAME,SYS_POSTAL_CODE) &
		/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
		/LOV_WITH=DIVISION=#DIVISION &
		/LOV_WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) &
		/LOV_WITH=ACTIVATION_STATUS = (PARAMETER("STATUS_ACTIVE")) 
	
	BEGIN_BLOCK DISPLAY_ADDRESS
		FIND IN CUSTOMER_ADDRESSES /WITH=CUSTOMER_NUMBER=SALES_ORDER_HEADERS(CUSTOMER_NUMBER) /WITH=ADDRESS_CODE=#ADDRESS_CODE

		OUTPUT_BLOCK NAME /ROW=4 /COL=10 /SOURCE=CUSTOMER_ADDRESSES(CUSTOMER_NAME)

		PERFORM "GEMLB:LB_ADDRESSES" (&
			"D", &
			(SYS_COUNTRIES(SYS_COUNTRY)), &
			"CUSTOMER_ADDRESSES", &
			"14", &
			"19", &
			"", &
			"", &
			"", &
			"", &
			"", &
			#R1, &
			#R2, &
			#R3, &
			#R4, &
			#R5)
	END_BLOCK

	YESNO_BLOCK CONFIRM /ROW=10 /COL=27 &
		/PROMPT=("Continue?") &
		/SUCCESS=(EXIT(%SUCCESS)) &
		/FAILURE=(EXIT(%FAILURE))
		
END_FORM
!Change 018 End



PROCEDURE_FORM SET_PRICING_METHOD_PROMPTS

	BEGIN_BLOCK PRICING_METHOD_PROMPTS
		IF ( #PRICING_METHOD = #TAX_INCLUSIVE )
			! P_23385 Price, Incl. Tax
			#PRICE_HEADING = MESSAGE("P_23385")
			! P_23378 Price Incl. Tax
			#PRICE_PROMPT = MESSAGE("P_23378")
			! P_00680 - Total Value
			#LINE_VALUE_HEADING = MESSAGE("P_00680")
			! P_23078 Tax Inclusive
			#PRICING_METHOD_DESC = MESSAGE("P_23079")
		ELSE
			IF ( #PRICING_METHOD_OPTIONAL = #NO ) 
				#PRICE_HEADING = FIELD_SHORT_PROMPT(UNIT_PRICE)
			ELSE
				! P_23384 Price, Excl. Tax
				#PRICE_HEADING = MESSAGE("P_23384")
			END_IF 
			! P_23377 Price Excl. Tax
			#PRICE_PROMPT = MESSAGE("P_23377")
			! P_23465 Line Value, Incl. Tax
!			#LINE_VALUE_HEADING = MESSAGE("P_23465")
			! P_23078 Tax Exclusive
			#PRICING_METHOD_DESC = MESSAGE("P_23078")
		END_IF
		IF ( #PRICING_METHOD_OPTIONAL = #NO ) 
			#PRICE_HEADING = FIELD_SHORT_PROMPT(UNIT_PRICE)
		END_IF 
	END_BLOCK

END_FORM


PROCEDURE_FORM SETUP_TAX_CONTROL_VT

	BEGIN_BLOCK LB_TAX_CONTROL_VT

		DELETE ALL FROM LB_TAX_CONTROL_VT

		CLEAR_BUFFER LB_TAX_CONTROL_VT
		!
		LB_TAX_CONTROL_VT(COMPANY_CODE) = #COMPANY_CODE
		LB_TAX_CONTROL_VT(DIVISION) = #DIVISION
		LB_TAX_CONTROL_VT(SOURCE_MODULE) = PARAMETER("MODULE_AR")
		LB_TAX_CONTROL_VT(PRICING_METHOD) = #PRICING_METHOD
		LB_TAX_CONTROL_VT(TAX_BASED_ON_FLAG) = #TAX_FLAG
		LB_TAX_CONTROL_VT(PRODUCT_TAX_CODE) = ""
		LB_TAX_CONTROL_VT(CUSTOMER_TAX_CODE) = ""
		LB_TAX_CONTROL_VT(VENDOR_NUMBER) = ""
		LB_TAX_CONTROL_VT(VENDOR_ADDRESS_CODE) = ""
		LB_TAX_CONTROL_VT(CUSTOMER_NUMBER) = ""
		LB_TAX_CONTROL_VT(INVOICE_ADDRESS_CODE) = ""
		LB_TAX_CONTROL_VT(DELIVERY_ADDRESS_CODE) = ""
		LB_TAX_CONTROL_VT(TRANSACTION_NUMBER) = ""
		LB_TAX_CONTROL_VT(TRANSACTION_TYPE) = ""
		LB_TAX_CONTROL_VT(PART_CODE) = ""
		LB_TAX_CONTROL_VT(WAREHOUSE) = ""
		LB_TAX_CONTROL_VT(TARGET_WAREHOUSE) = ""
		LB_TAX_CONTROL_VT(ORDER_LINE_TYPE) = ""
		LB_TAX_CONTROL_VT(TAX_ON_CASH) = #TAX_ON_CASH
		LB_TAX_CONTROL_VT(AP_DEFAULT_TAX) = ""
		LB_TAX_CONTROL_VT(ACCRUE_IGIC) = ""
		LB_TAX_CONTROL_VT(SYS_CURRENCY_MASK) = #CURRENCY_MASK
		LB_TAX_CONTROL_VT(SYS_CURRENCY_DECIMALS) = #CURRENCY_DECIMAL
		LB_TAX_CONTROL_VT(FORM_TITLE) = ""
		LB_TAX_CONTROL_VT(PRICE_ORDER_QTY) = 0
		LB_TAX_CONTROL_VT(SALES_PRICE) = 0
		LB_TAX_CONTROL_VT(LINE_DISCOUNT) = 0
		!
		LB_TAX_CONTROL_VT(TAX_CALC_VALUE_1) = ""
		LB_TAX_CONTROL_VT(TAX_CALC_VALUE_2) = ""
		LB_TAX_CONTROL_VT(TAX_CALC_VALUE_3) = ""
		LB_TAX_CONTROL_VT(TAX_CALC_VALUE_2) = ""
		LB_TAX_CONTROL_VT(TAX_CALC_VALUE_5) = ""

		ADD TO LB_TAX_CONTROL_VT

	END_BLOCK

END_FORM


PROCEDURE_FORM IS_LINE_FOR_TP_GIFT (#R_GIFT_LINE_IND, #R_PROMOTION_VARIABLE)

	BEGIN_BLOCK CHECK_AND_SET_FLAG
		#R_GIFT_LINE_IND = 0
		#R_PROMOTION_VARIABLE = 0

		IF ( #TP_PROMOTIONS_IN_USE = #YES )
			FIND IN TP_ORDER_LINE_GIFTS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=ORDER_NUMBER=SALES_ORDER_LINES(ORDER_NUMBER) &
				/WITH=TP_ORDER_LINE_GIFT=SALES_ORDER_LINES(ORDER_LINE_NUMBER)

			IF ( %STATUS = %SUCCESS )
				#R_GIFT_LINE_IND = 1

				FIND IN TP_PROMOTIONS &
					/LOCK=NONE &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=TP_PROMOTION_CODE = TP_ORDER_LINE_GIFTS(TP_PROMOTION_CODE)

				IF ((%STATUS = %SUCCESS) &
				AND (TP_PROMOTIONS(TP_VALUE_TYPE) = 2))

					#R_PROMOTION_VARIABLE = 1

				END_IF
			END_IF
		END_IF
	END_BLOCK

END_FORM


PROCEDURE_FORM DOES_LINE_HAVE_TP_GIFTS (#R_HAS_GIFTS_IND, #R_GIFT_LINES)

	BEGIN_BLOCK CHECK_AND_SET_RETURN
		#R_HAS_GIFTS_IND = 0
		#R_GIFT_LINES = ""

		IF ( #TP_PROMOTIONS_IN_USE = #YES )
			FIND IN TP_ORDER_LINE_GIFTS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=ORDER_NUMBER=SALES_ORDER_LINES(ORDER_NUMBER) &
				/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER) &
				/WITH=TP_ORDER_LINE_GIFT > 0

			IF ( %STATUS = %SUCCESS )
				#R_HAS_GIFTS_IND = 1

				START_STREAM GSTR &
					/TABLE=TP_ORDER_LINE_GIFTS &
					/LOCK=NONE &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=DIVISION=#DIVISION &
					/WITH=ORDER_NUMBER=SALES_ORDER_LINES(ORDER_NUMBER) &
					/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER) &
					/WITH=TP_ORDER_LINE_GIFT  > 0 &
					/SORTED_BY=(TP_ORDER_LINE_GIFT)

				WHILE (1)

					FETCH GSTR /FAILURE=(CONTINUE OUT)

					IF ( LEN(#R_GIFT_LINES) = 0 )
						#R_GIFT_LINES = GSTR:TP_ORDER_LINE_GIFTS(TP_ORDER_LINE_GIFT)
					ELSE
						#R_GIFT_LINES = #R_GIFT_LINES & "/" &
										& GSTR:TP_ORDER_LINE_GIFTS(TP_ORDER_LINE_GIFT)
					END_IF

				END_WHILE

			END_IF
		END_IF
	END_BLOCK

END_FORM

PROCEDURE_FORM WORKFLOW_CREDIT_CHECK

	!executing workflow funtions
		PERFORM "GEMLB:LB_L_SALESORDER_EVENTS" CREDIT_HOLD (#COMPANY_CODE, #DIVISION, #ORDER_NUMBER, #CUSTOMER_NUMBER, #SALESPERSON_CODE, #ORDER_DATE, #REQUIRED_DATE, #GRAND_TOTAL, #CURRENCY_CODE)

END_FORM 

PROCEDURE_FORM UPDATE_ORDER_VALUE_BASE

    BEGIN_BLOCK ORDER_VALUE_BASE_UPDATE
		
		START_TRANSACTION

		FIND IN SALES_ORDER_HEADERS &
			/LOCK=WRITE &
			/SECONDARY &
			/STREAM_NAME=SOVB &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=ORDER_NUMBER=#ORDER_NUMBER
			

		IF (%STATUS<>%SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_52204
			ROLLBACK
		ELSE

			PERFORM RESTOR_SYS_CURRENCY_CONTROL_VT

			DELETE ALL FROM SYS_CURRENCY_VALUES_VT
			SYS_CURRENCY_VALUES_VT(TRANSACTION_VALUE) = SOVB:SALES_ORDER_HEADERS(TOTAL_ORDER_VALUE)
			ADD TO SYS_CURRENCY_VALUES_VT
			PERFORM "GEMLB:LB_S_L_CURRENCY_CONVERSIONS" (#R_STATUS, #R_MESSAGE)
			IF (#R_STATUS <> #YES)
				ERROR/WAIT #R_MESSAGE
				EXIT (%FAILURE)
			END_IF

			FIND IN SYS_CURRENCY_VALUES_VT
			SOVB:SALES_ORDER_HEADERS(SOP_ORDER_VALUE_BASE) = SYS_CURRENCY_VALUES_VT(BASE_VALUE)
!Delete the following line issue#368358-27
!			#NEW_SOP_ORDER_VALUE = SYS_CURRENCY_VALUES_VT(BASE_VALUE)
!End of deletes						
						
		COMMIT
		
		END_IF

			
!Delete the following lines issue#368358-28			
!		START_TRANSACTION
!			
!		FIND IN CUSTOMERS &
!			/LOCK=WRITE &
!			/SECONDARY &
!			/STREAM_NAME=COV &
!			/WITH=COMPANY_CODE = #COMPANY_CODE &
!			/WITH=DIVISION = #DIVISION &
!			/WITH=CUSTOMER_NUMBER = #CUSTOMER_NUMBER
!
!		IF (%STATUS = %FAILURE)
!			MESSAGE/IDENTIFIER/BELL/WAIT P_00187
!		ELSE
!			#VALUE_DIFF_BASE1 = #ORIG_ORDER_VALUE_BASE - #NEW_SOP_ORDER_VALUE
!
!			COV:CUSTOMERS(OS_ORDER_VALUE) = COV:CUSTOMERS(OS_ORDER_VALUE) - #VALUE_DIFF_BASE1			
!			#ORIG_ORDER_VALUE_BASE = #NEW_SOP_ORDER_VALUE	
!		END_IF
!				
!       COMMIT
!End of deletes	

		
	END_BLOCK

END_FORM 


PROCEDURE_FORM PROJECTED 

	BEGIN_BLOCK DISPLAY_PROJECTED 
	
		IF ((#WAREHOUSE <> "") AND (#PART_CODE <> ""))
			FIND IN PRODUCT_MASTER &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=PART_CODE=#PART_CODE

			IF (%STATUS <> %SUCCESS)
				MESSAGE/IDENTIFIER/BELL/WAIT P_42014
				EXIT (%FAILURE)
			END_IF

			#PART_DESCRIPTION_1  = PRODUCT_MASTER(PART_DESC_1)
			#PART_DESCRIPTION_2  = PRODUCT_MASTER(PART_DESC_2)
			#IC_UOM_CONTROL      = PRODUCT_MASTER(IC_PRODUCT_UOM_CONTROL)
			#IC_UNIT_CAPACITY    = PRODUCT_MASTER(IC_UNIT_CAPACITY)
			#IC_PACKAGED_PRODUCT = PRODUCT_MASTER(IC_PACKAGED_PRODUCT)
			#MAKE_BUY            = ""

			FIND IN PRODUCT_WAREHOUSE &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=PART_CODE=#PART_CODE &
				/WITH=WAREHOUSE=#WAREHOUSE

			IF (%STATUS <> %SUCCESS)
				MESSAGE/IDENTIFIER/BELL/WAIT P_52248
				EXIT (%FAILURE)
			END_IF

			#SELECTION_IC_STATUS = PARAMETER("IC_STATUS_QOH")

			PERFORM "GEMLB:LB_S_L_PI_COMMON" PI_V_STATUS_CODE ( &
					(#SELECTION_IC_STATUS), &
					(""), &
					#ERROR_OCCURRED, &
					#ERROR_MESSAGE, &
					#IC_STATUS_DESC)

			PERFORM SELECTION_IC_STATUS

			#MAKE_BUY = PRODUCT_WAREHOUSE(MAKE_BUY)

			DELETE ALL FROM DISP_PI_VT

			CLEAR_BUFFER DISP_PI_VT

			DISP_PI_VT(COMPANY_CODE)           = #COMPANY_CODE
			DISP_PI_VT(WAREHOUSE)              = #WAREHOUSE
			DISP_PI_VT(PART_CODE)              = #PART_CODE
			DISP_PI_VT(IC_STATUS_CODE)         = #SELECTION_IC_STATUS
			DISP_PI_VT(PART_DESC_1)            = #PART_DESCRIPTION_1
			DISP_PI_VT(PART_DESC_2)            = #PART_DESCRIPTION_2
			DISP_PI_VT(IC_PRODUCT_UOM_CONTROL) = #IC_UOM_CONTROL
			DISP_PI_VT(IC_UNIT_CAPACITY)       = #IC_UNIT_CAPACITY
			DISP_PI_VT(IC_PACKAGED_PRODUCT)    = #IC_PACKAGED_PRODUCT
			DISP_PI_VT(MAKE_BUY)               = #MAKE_BUY

			ADD TO DISP_PI_VT

			PERFORM "GEMLB:LB_L_PROJECTED_INVENTORY"
		END_IF

	END_BLOCK 

END_FORM 


FORM SELECTION_IC_STATUS /ROW=18 /COL=2 /WIDTH=62 /HEIGHT=1 &
	/REMAIN &
	/TITLE=MESSAGE("P_92169")
	
	BEGIN_BLOCK SELECTION_IC_STATUS

		OUTPUT_BLOCK DESC_STATUS1 /ROW=1 /COL=30 /LEN=30 &
			/SOURCE=#IC_STATUS_DESC
	
		INPUT_BLOCK IC_STATUS /ROW=1 /COL=20 &
			/PROMPT=(FIELD_PROMPT(IC_STATUS_CODE)) &
			/TARGET=#SELECTION_IC_STATUS &
			/USING=IC_STATUS_CODES(IC_STATUS_CODE) &
			/LOV=IC_STATUS_CODES(IC_STATUS_CODE,CODE_DESCRIPTION) &
			/LOV_WITH=IC_AVAILABLE_TO_MRP=#YES

		PERFORM "GEMLB:LB_S_L_PI_COMMON" PI_V_STATUS_CODE ( &
			(#SELECTION_IC_STATUS), &
			(""), &
			#ERROR_OCCURRED, &
			#ERROR_MESSAGE, &
			#IC_STATUS_DESC) 

		IF (#ERROR_OCCURRED = #TRUE)
			ERROR/TEXT_ONLY #ERROR_MESSAGE 
			GOTO SELECTION_IC_STATUS
		END_IF
			
		OUTPUT_BLOCK DESC_STATUS2 /ROW=1 /COL=30 /LEN=30 &
			/SOURCE=#IC_STATUS_DESC
			  	
	END_BLOCK    
		
END_FORM 


PROCEDURE_FORM UPDATE_DEMAND_SUPPLY &
	/TABLE=SALES_ORDER_LINE_DETAILS &
	/LOCK=WRITE &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION=#DIVISION &
	/WITH=ORDER_NUMBER=SALES_ORDER_LINES(ORDER_NUMBER) &
	/WITH=ORDER_LINE_NUMBER=SALES_ORDER_LINES(ORDER_LINE_NUMBER)

	BEGIN_BLOCK UPDATE 
	
		#ORDER_LINE_NUMBER = SALES_ORDER_LINES(ORDER_LINE_NUMBER)
		#PART_CODE         = SALES_ORDER_LINES(PART_CODE)
		#UNIT_SALES        = SALES_ORDER_LINES(UNIT_SALES)
		#IC_PACK_UNIT      = SALES_ORDER_LINES(IC_PACK_UNIT)

		#SEQUENCE          = SALES_ORDER_LINE_DETAILS(SEQUENCE)
		#SHIPPING_DATE     = LEFT(SALES_ORDER_LINE_DETAILS(SYS_SHIPPING_DATE),11)
		#WAREHOUSE         = SALES_ORDER_LINE_DETAILS(WAREHOUSE)

		#IC_LOT_NUMBER     = ""
		#PACKAGED          = #NO
		#PACK_UNIT         = ""
		#EVENT_TYPE_SOL    = 53
		#IC_STATUS_CODE    = PARAMETER("IC_STATUS_QOH")

		FIND IN PRODUCT_MASTER &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PART_CODE=#PART_CODE

		IF (%STATUS = %FAILURE) 
			! Part Code !AS-!AS not found
			MESSAGE/IDENTIFIER/BELL/WAIT P_00929,#COMPANY_CODE,#PART_CODE
			GOTO NEXT
		ELSE
			#IC_PRODUCT_UOM_CONTROL = PRODUCT_MASTER(IC_PRODUCT_UOM_CONTROL)
			#IC_UNIT_CAPACITY       = PRODUCT_MASTER(IC_UNIT_CAPACITY)
			#PACKAGED               = PRODUCT_MASTER(IC_PACKAGED_PRODUCT)
		END_IF 

		IF (#IC_PRODUCT_UOM_CONTROL <> PARAMETER("IC_SINGLE_UOM_CONTROL")) 
			FIND IN IC_PRODUCT_MASTER_UNITS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=PART_CODE=#PART_CODE &
				/WITH=UNIT_OF_MEASURE <> #IC_UNIT_CAPACITY &
				/WITH=IC_PRODUCT_UOM_TYPE=PARAMETER("FIN.IC_INVENTORY_UOM")

			IF (%STATUS = %SUCCESS) 
				#NOT_CAP_UNIT = IC_PRODUCT_MASTER_UNITS(UNIT_OF_MEASURE)
			END_IF
		ELSE
			#NOT_CAP_UNIT = ""
		END_IF 

		IF (#PACKAGED = #YES) 
			IF (#IC_PACK_UNIT <> "") 
				#PACK_UNIT = #IC_PACK_UNIT
			ELSE
				#PACK_UNIT = #UNIT_SALES
			END_IF 
		END_IF 

		#IC_PACK_OR_CAP_QTY_SOL   = 0.0
		#IC_PACK_OR_CAP_UNIT      = ""
		#IC_NOT_CAP_QTY_SOL       = 0.0
		#IC_NOT_CAP_UNIT          = ""
		#IC_CAP_IF_PACKED_QTY_SOL = 0.0
		#IC_CAP_IF_PACKED_UNIT    = ""

		START_STREAM SOLDQ &
			/TABLE=SALES_ORDER_LINE_DETAIL_QTYS &
			/LOCK=WRITE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=ORDER_NUMBER=SALES_ORDER_LINES(ORDER_NUMBER) &
			/WITH=ORDER_LINE_NUMBER=#ORDER_LINE_NUMBER &
			/WITH=SEQUENCE=#SEQUENCE 

		WHILE (1) 
			FETCH SOLDQ /FAILURE=(CONTINUE OUT) 

			#UNIT_OF_MEASURE = SALES_ORDER_LINE_DETAIL_QTYS(UNIT_OF_MEASURE)

			BEGIN_CASE (#UNIT_OF_MEASURE) 
				CASE (#IC_UNIT_CAPACITY) 
					IF (#PACKAGED = #YES) 
						#IC_CAP_IF_PACKED_QTY_SOL  = SOLDQ:SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY_COMMITTED)
						#IC_CAP_IF_PACKED_UNIT     = #IC_UNIT_CAPACITY
					ELSE						
						#IC_PACK_OR_CAP_QTY_SOL = SOLDQ:SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY_COMMITTED)
						#IC_PACK_OR_CAP_UNIT    = #IC_UNIT_CAPACITY
					END_IF 
				CASE (#NOT_CAP_UNIT) 
					#IC_NOT_CAP_QTY_SOL = SOLDQ:SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY_COMMITTED)
					#IC_NOT_CAP_UNIT    = #NOT_CAP_UNIT
				CASE (#PACK_UNIT) 
					#IC_PACK_OR_CAP_QTY_SOL = SOLDQ:SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY_COMMITTED)
					#IC_PACK_OR_CAP_UNIT    = #PACK_UNIT
			END_CASE 
		END_WHILE 

		START_TRANSACTION
		FIND IN IC_DEMAND_SUPPLY &
			/LOCK=WRITE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=EVENT_TYPE=#EVENT_TYPE_SOL &
			/WITH=IC_REF_DIV_WH_FAC=#DIVISION &
			/WITH=IC_REF_DOCUMENT=#ORDER_NUMBER &
			/WITH=IC_REF_LINE_STAGE=#ORDER_LINE_NUMBER &
			/WITH=IC_REF_LINE_SEQ=#SEQUENCE 

		IF (%STATUS <> %SUCCESS) 
			IF (#IC_PACK_OR_CAP_QTY_SOL > 0.0) 
				CLEAR_BUFFER IC_DEMAND_SUPPLY

				IC_DEMAND_SUPPLY(COMPANY_CODE)          = #COMPANY_CODE
				IC_DEMAND_SUPPLY(WAREHOUSE)             = #WAREHOUSE
				IC_DEMAND_SUPPLY(PART_CODE)             = #PART_CODE
				IC_DEMAND_SUPPLY(IC_STATUS_CODE)        = #IC_STATUS_CODE
				IC_DEMAND_SUPPLY(IC_LOT_NUMBER)         = #IC_LOT_NUMBER
				IC_DEMAND_SUPPLY(EVENT_TYPE)            = #EVENT_TYPE_SOL 
				IC_DEMAND_SUPPLY(IC_REF_DIV_WH_FAC)     = #DIVISION
				IC_DEMAND_SUPPLY(IC_REF_DOCUMENT)       = #ORDER_NUMBER
				IC_DEMAND_SUPPLY(IC_REF_LINE_STAGE)     = #ORDER_LINE_NUMBER
				IC_DEMAND_SUPPLY(IC_REF_LINE_SEQ)       = #SEQUENCE 

				IC_DEMAND_SUPPLY(SOURCE_DIVISION)       = #DIVISION 
				IC_DEMAND_SUPPLY(MOVEMENT_DATE)         = #SHIPPING_DATE 
				IC_DEMAND_SUPPLY(IC_PACK_OR_CAP_QTY)    = #IC_PACK_OR_CAP_QTY_SOL * -1.0
				IC_DEMAND_SUPPLY(IC_PACK_OR_CAP_UNIT)   = #IC_PACK_OR_CAP_UNIT 
				IC_DEMAND_SUPPLY(IC_NOT_CAP_QTY)        = #IC_NOT_CAP_QTY_SOL * -1.0
				IC_DEMAND_SUPPLY(IC_NOT_CAP_UNIT)       = #IC_NOT_CAP_UNIT 
				IC_DEMAND_SUPPLY(IC_CAP_IF_PACKED_QTY)  = #IC_CAP_IF_PACKED_QTY_SOL * -1.0
				IC_DEMAND_SUPPLY(IC_CAP_IF_PACKED_UNIT) = #IC_CAP_IF_PACKED_UNIT 

				ADD TO IC_DEMAND_SUPPLY
			END_IF 
		ELSE
			IF (#IC_PACK_OR_CAP_QTY_SOL > 0.0) 
				IF ((IC_DEMAND_SUPPLY(WAREHOUSE) <> #WAREHOUSE) OR &
				    (IC_DEMAND_SUPPLY(PART_CODE) <> #PART_CODE) OR &
				    (IC_DEMAND_SUPPLY(IC_STATUS_CODE) <> #IC_STATUS_CODE) OR &
				    (IC_DEMAND_SUPPLY(IC_LOT_NUMBER) <> #IC_LOT_NUMBER)) 

					DELETE FROM IC_DEMAND_SUPPLY

					COMMIT
					START_TRANSACTION

					CLEAR_BUFFER IC_DEMAND_SUPPLY

					IC_DEMAND_SUPPLY(COMPANY_CODE)          = #COMPANY_CODE
					IC_DEMAND_SUPPLY(WAREHOUSE)             = #WAREHOUSE
					IC_DEMAND_SUPPLY(PART_CODE)             = #PART_CODE
					IC_DEMAND_SUPPLY(IC_STATUS_CODE)        = #IC_STATUS_CODE
					IC_DEMAND_SUPPLY(IC_LOT_NUMBER)         = #IC_LOT_NUMBER
					IC_DEMAND_SUPPLY(EVENT_TYPE)            = #EVENT_TYPE_SOL 
					IC_DEMAND_SUPPLY(IC_REF_DIV_WH_FAC)     = #DIVISION
					IC_DEMAND_SUPPLY(IC_REF_DOCUMENT)       = #ORDER_NUMBER
					IC_DEMAND_SUPPLY(IC_REF_LINE_STAGE)     = #ORDER_LINE_NUMBER
					IC_DEMAND_SUPPLY(IC_REF_LINE_SEQ)       = #SEQUENCE 

					IC_DEMAND_SUPPLY(SOURCE_DIVISION)       = #DIVISION 
					IC_DEMAND_SUPPLY(MOVEMENT_DATE)         = #SHIPPING_DATE 
					IC_DEMAND_SUPPLY(IC_PACK_OR_CAP_QTY)    = #IC_PACK_OR_CAP_QTY_SOL * -1.0
					IC_DEMAND_SUPPLY(IC_PACK_OR_CAP_UNIT)   = #IC_PACK_OR_CAP_UNIT 
					IC_DEMAND_SUPPLY(IC_NOT_CAP_QTY)        = #IC_NOT_CAP_QTY_SOL * -1.0
					IC_DEMAND_SUPPLY(IC_NOT_CAP_UNIT)       = #IC_NOT_CAP_UNIT 
					IC_DEMAND_SUPPLY(IC_CAP_IF_PACKED_QTY)  = #IC_CAP_IF_PACKED_QTY_SOL * -1.0
					IC_DEMAND_SUPPLY(IC_CAP_IF_PACKED_UNIT) = #IC_CAP_IF_PACKED_UNIT 

					ADD TO IC_DEMAND_SUPPLY
				ELSE
					IC_DEMAND_SUPPLY(SOURCE_DIVISION)       = #DIVISION 
					IC_DEMAND_SUPPLY(MOVEMENT_DATE)         = #SHIPPING_DATE 
					IC_DEMAND_SUPPLY(IC_PACK_OR_CAP_QTY)    = #IC_PACK_OR_CAP_QTY_SOL * -1.0
					IC_DEMAND_SUPPLY(IC_PACK_OR_CAP_UNIT)   = #IC_PACK_OR_CAP_UNIT 
					IC_DEMAND_SUPPLY(IC_NOT_CAP_QTY)        = #IC_NOT_CAP_QTY_SOL * -1.0
					IC_DEMAND_SUPPLY(IC_NOT_CAP_UNIT)       = #IC_NOT_CAP_UNIT 
					IC_DEMAND_SUPPLY(IC_CAP_IF_PACKED_QTY)  = #IC_CAP_IF_PACKED_QTY_SOL * -1.0
					IC_DEMAND_SUPPLY(IC_CAP_IF_PACKED_UNIT) = #IC_CAP_IF_PACKED_UNIT 
				END_IF
			ELSE
				DELETE FROM IC_DEMAND_SUPPLY
			END_IF
		END_IF 
		COMMIT

	END_BLOCK

	BEGIN_BLOCK NEXT 
	END_BLOCK 

END_FORM 


PROCEDURE_FORM DELETE_DEMAND_SUPPLY &
	/TABLE=IC_DEMAND_SUPPLY &
	/LOCK=WRITE &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=EVENT_TYPE=#EVENT_TYPE_SOL &
	/WITH=IC_REF_DIV_WH_FAC=#DIVISION &
	/WITH=IC_REF_DOCUMENT=SALES_ORDER_LINE_DETAILS(ORDER_NUMBER) &
	/WITH=IC_REF_LINE_STAGE=SALES_ORDER_LINE_DETAILS(ORDER_LINE_NUMBER) &
	/WITH=IC_REF_LINE_SEQ=SALES_ORDER_LINE_DETAILS(SEQUENCE)

	BEGIN_BLOCK DELETE

		DELETE FROM IC_DEMAND_SUPPLY

	END_BLOCK

END_FORM


PROCEDURE_FORM HEADER_CPANEL (#P1,#P2,#P3,#P4)
	BEGIN_BLOCK SETUP
		#CP_CHOICE = #P1
		#CP_DIVISION = #P2
		#CP_CUSTOMER_NUMBER = #P3
		#CP_ORDER_NUMBER = #P4
	END_BLOCK 

	BEGIN_BLOCK HEADER_CPANEL 
		#CP_TEXT = 	MESSAGE("P_33853",#CP_CUSTOMER_NUMBER)
		#CP_ID = "1"
		#CP_FACILITY = "FIN.ACCOUNTS_RECEIVABLE:AR_I_001"
		#CP_NUMBER_OF_ELEMENTS = 6
		PERFORM "GEMLB:LB_L_CPANEL" CP_TYPE_FACILITY (#CP_TEXT,#CP_ID,"0", #CP_FACILITY,#CP_NUMBER_OF_ELEMENTS,&
														#CP_DIVISION,#CP_CUSTOMER_NUMBER,"5","1","0","0")

		BEGIN_CASE (#CP_CHOICE) 
			CASE "ADD","MODIFY","ENTRY_FROM_COPY","TEMPLATE" 
														
				#CP_TEXT = 	MESSAGE("P_33854",#CP_CUSTOMER_NUMBER)
				#CP_ID = "2"
				#CP_FACILITY = "FIN.SALES_ORDER_PROCESSING:SOP_I_002"
				#CP_NUMBER_OF_ELEMENTS = 4
				PERFORM "GEMLB:LB_L_CPANEL" CP_TYPE_FACILITY (#CP_TEXT,#CP_ID,"0", #CP_FACILITY,#CP_NUMBER_OF_ELEMENTS,&
														#CP_DIVISION,"1",#CP_CUSTOMER_NUMBER,"0")
			CASE "COPY"
				#CP_TEXT = 	MESSAGE("P_33855",#CP_CUSTOMER_NUMBER)
				#CP_ID = "2"
				#CP_FACILITY = "FIN.SALES_ORDER_PROCESSING:SOP_I_002"
				#CP_NUMBER_OF_ELEMENTS = 3
				PERFORM "GEMLB:LB_L_CPANEL" CP_TYPE_FACILITY (#CP_TEXT,#CP_ID,"0", #CP_FACILITY,#CP_NUMBER_OF_ELEMENTS,&
														#CP_DIVISION,"0",#CP_ORDER_NUMBER)
			 
			CASE ELSE 
		END_CASE 	
	END_BLOCK 
END_FORM 


PROCEDURE_FORM LINE_CPANEL (#P1,#P2,#P3,#P4,#P5)
	BEGIN_BLOCK SETUP
		#CP_LINE_MODE = #P1
		#CP_LINE_TYPE = #P2
		#CP_LINE_DIVISION = #P3
		#CP_LINE_PRODUCT = #P4
		#CP_LINE_WAREHOUSE = #P5
		#CP_DATE = ("'" & '"' & DATE(DAYS(%TODAY)-30) & '"-"' & DATE(DAYS(%TODAY)+30) & '"' & "'")
	END_BLOCK 

	BEGIN_BLOCK LINE_CPANEL 
		IF ( #CP_LINE_MODE <> "REMOVE" ) 
			BEGIN_CASE (#CP_LINE_TYPE) 
				CASE "S" 
					#CP_LINE_TEXT = 	MESSAGE("P_00489",#CP_LINE_PRODUCT)
					#CP_LINE_ID = "3"
					#CP_LINE_FACILITY = "FIN.INVENTORY_CONTROL:IC_I_010"
					IF ( #CP_LINE_WAREHOUSE <> "" )
						#CP_LINE_NUMBER_OF_ELEMENTS = 2
						PERFORM "GEMLB:LB_L_CPANEL" CP_TYPE_FACILITY (#CP_LINE_TEXT,#CP_LINE_ID,"0", #CP_LINE_FACILITY,#CP_LINE_NUMBER_OF_ELEMENTS,&
																#CP_LINE_PRODUCT,"1")
					ELSE
						#CP_LINE_NUMBER_OF_ELEMENTS = 1
						PERFORM "GEMLB:LB_L_CPANEL" CP_TYPE_FACILITY (#CP_LINE_TEXT,#CP_LINE_ID,"0", #CP_LINE_FACILITY,#CP_LINE_NUMBER_OF_ELEMENTS,&
																#CP_LINE_PRODUCT)
					END_IF 

					#CP_LINE_TEXT = 	MESSAGE("P_33854",#CP_LINE_PRODUCT)
					#CP_LINE_ID = "4"
					#CP_LINE_FACILITY = "FIN.SALES_ORDER_PROCESSING:SOP_I_002"
					#CP_LINE_NUMBER_OF_ELEMENTS = 8
					PERFORM "GEMLB:LB_L_CPANEL" CP_TYPE_FACILITY (#CP_LINE_TEXT,#CP_LINE_ID,"0", #CP_LINE_FACILITY,#CP_LINE_NUMBER_OF_ELEMENTS,&
															#CP_LINE_DIVISION,"2",#CP_LINE_WAREHOUSE,#CP_LINE_PRODUCT,"",#CP_DATE,"","0")
				CASE ELSE 
			END_CASE 	
		ELSE
			PERFORM "GEMLB:LB_L_CPANEL" CP_TYPE_REMOVE ("","3")
			PERFORM "GEMLB:LB_L_CPANEL" CP_TYPE_REMOVE ("","4")
		END_IF 
	END_BLOCK 
END_FORM 

TABLE_FORM SEL_PART_CODE /ROW=10 /COL=20 /HEIGHT=10 /WIDTH=43 &
	/TITLE=(MESSAGE("P_33866"))	&
	/OPTIONS=MENU,SELECT_ONE &
	/TABLE=PART_MASTER_BY_CUSTOMER,PRODUCT_MASTER &
	/WITH=A.COMPANY_CODE = B.COMPANY_CODE &
	/WITH=A.PART_CODE = B.PART_CODE &
	/WITH=A.COMPANY_CODE=#COMPANY_CODE &
	/WITH=A.DIVISION=#DIVISION &
	/WITH=A.CUSTOMER_NUMBER=#CUSTOMER_NUMBER &
	/WITH=A.CUSTOMERS_PART_CODE=#TEMP_PART_CODE
	
	OUTPUT_BLOCK PART_CODE /ROW=1 /COL=2 &
		/SOURCE=PRODUCT_MASTER(PART_CODE) &
		/HEADING=FIELD_HEADING(PART_CODE) &
		
	OUTPUT_BLOCK PART_DESC_1 /ROW=1 /COL=18 &
		/SOURCE=PRODUCT_MASTER(PART_DESC_1) &
		/HEADING=FIELD_HEADING(PART_DESC_1)				
	
END_FORM

PROCEDURE_FORM ADD_SO_LINE_DISP_TYPE_VT_RECORD(#P1)
	BEGIN_BLOCK ADD_SO_LINE_DISP_TYPE_VT_RECORD
		FIND IN SO_LINE_DISP_TYPE_VT &
			/LOCK=NONE &
			/WITH=SO_LINE_DISP_TYPE_VT(ORDER_LINE_NUMBER)=SALES_ORDER_LINES(ORDER_LINE_NUMBER)

		IF (%STATUS = %SUCCESS)
			DELETE FROM SO_LINE_DISP_TYPE_VT
		END_IF
	
		CLEAR_BUFFER SO_LINE_DISP_TYPE_VT
		
		SO_LINE_DISP_TYPE_VT(ORDER_LINE_NUMBER)=SALES_ORDER_LINES(ORDER_LINE_NUMBER)
		SO_LINE_DISP_TYPE_VT(ENTRY_BY_CPC)=#P1
		
		ADD TO SO_LINE_DISP_TYPE_VT
	END_BLOCK
END_FORM

PROCEDURE_FORM GET_CPC_DESC(#P1,#R1)	
	FIND IN CUSTOMERS_PART_CODE_VW &
		/LOCK=NONE &
		/WITH=COMPANY_CODE=#COMPANY_CODE &
		/WITH=DIVISION=#DIVISION &
		/WITH=CUSTOMER_NUMBER=#CUSTOMER_NUMBER &	
		/WITH=PART_CODE=#P1
		
	IF ( %STATUS <> %FAILURE )
		#R1 = CUSTOMERS_PART_CODE_VW(DESCRIPTION)
	ELSE
		#R1=""
	END_IF
END_FORM


PROCEDURE_FORM CHECK_REACH_FOR_TEMPLATE (#P1,#P2,#P3,#P4,#R1) 
	BEGIN_BLOCK DESCRIPTION
		!	INPUTS:
		! 
		!   P1 = COMPANY_CODE
		! 	P2 = DIVISION
		!   P3 = TEMPLATE CODE 
		!   P4 = Growth
		
		!	OUTPUTS:
		!
		!	R1 = SOP CONTROLS FLAG("Y"-Can sale/"N"- Cannot sale)
	END_BLOCK
	
	BEGIN_BLOCK SETUP 
		#COMPANY_CODE  = #P1
		#DIVISION      = #P2
		#TEMPLATE_CODE = #P3
		
		#R1 = #YES
	END_BLOCK 

	BEGIN_BLOCK CHECK_TEMPLATE_HEADER 
		IF ( SALES_TEMPLATE_HEADERS(FINAL_ADDRESS_CODE) <> "" ) 
			FIND IN CUSTOMER_ADDRESSES &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=CUSTOMER_NUMBER=SALES_TEMPLATE_HEADERS(CUSTOMER_NUMBER) &
				/WITH=ADDRESS_CODE=SALES_TEMPLATE_HEADERS(FINAL_ADDRESS_CODE)
				
			IF ( %STATUS = %SUCCESS ) 
				IF ( CUSTOMER_ADDRESSES(SYS_FINAL_DESTINATION) <> "1" ) 
					#R1 = #NO
					MESSAGE/IDENTIFIER/BELL P_37124
					GOTO FINISHED				
				END_IF 
			ELSE
				#R1 = #NO
				MESSAGE/IDENTIFIER/BELL P_22178
				GOTO FINISHED			
			END_IF 
		ELSE
			#R1 = #NO
			MESSAGE/IDENTIFIER/BELL P_37120
			GOTO FINISHED					
		END_IF  	
	END_BLOCK 

	BEGIN_BLOCK CHECK_TEMPLATE_LINES 
		START_STREAM TEM_LINES &
			/TABLE=SALES_TEMPLATE_LINES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=DIVISION = #DIVISION &
			/WITH=TEMPLATE_CODE = #TEMPLATE_CODE &
			/WITH=ORDER_LINE_TYPE= #SO_LINE_TYPE_STOCK 
			
		WHILE (1) 
			FETCH TEM_LINES /FAILURE=(CONTINUE OUT) 
		
			IF ( TEM_LINES:SALES_TEMPLATE_LINES(FINAL_ADDRESS_CODE) <> "" ) 
				FIND IN CUSTOMER_ADDRESSES &
					/LOCK=NONE &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=DIVISION=#DIVISION &
					/WITH=CUSTOMER_NUMBER=SALES_TEMPLATE_HEADERS(CUSTOMER_NUMBER) &
					/WITH=ADDRESS_CODE=TEM_LINES:SALES_TEMPLATE_LINES(FINAL_ADDRESS_CODE)
				
				IF ( %STATUS = %SUCCESS ) 
					IF ( CUSTOMER_ADDRESSES(SYS_FINAL_DESTINATION) <> "1" ) 
						#R1 = #NO
						MESSAGE/IDENTIFIER/BELL P_37124
						GOTO FINISHED				
					END_IF 
				ELSE
					#R1 = #NO
					MESSAGE/IDENTIFIER/BELL P_22178
					GOTO FINISHED			
				END_IF			
			ELSE
				#R1 = #NO
				MESSAGE/IDENTIFIER/BELL P_37120
				GOTO FINISHED			
			END_IF 
		
			PERFORM "GEMSOP:SOP_S_L_CONTROL_MAINTENANCE" JUDGMENT_SOP_CONTROLS (#COMPANY_CODE, &
																				#DIVISION, &
																				(SALES_TEMPLATE_HEADERS(CUSTOMER_NUMBER)), &
																				(TEM_LINES:SALES_TEMPLATE_LINES(FINAL_ADDRESS_CODE)), &
																				(TEM_LINES:SALES_TEMPLATE_LINES(PART_CODE)),"","","","", &
																				"","",#RETURN_FLAG,#RESTRICT_MODE)
																				
			IF ( #RETURN_FLAG = #NO ) 
				PERFORM GET_FINAL_RETURN_MSG (#COMPANY_CODE,#DIVISION,(SALES_TEMPLATE_HEADERS(CUSTOMER_NUMBER)),(TEM_LINES:SALES_TEMPLATE_LINES(FINAL_ADDRESS_CODE)),#RETURN_PARA_MSG)
				#R1 = #NO
				MESSAGE/IDENTIFIER/BELL P_37118,(TEM_LINES:SALES_TEMPLATE_LINES(PART_CODE)),#RETURN_PARA_MSG
				GOTO FINISHED
			END_IF
		END_WHILE
	END_BLOCK
	
	BEGIN_BLOCK FINISHED 
	
	END_BLOCK  

END_FORM 


PROCEDURE_FORM GET_FINAL_RETURN_MSG (#P1,#P2,#P3,#P4,#R1)

	BEGIN_BLOCK SETUP 
		#PARAMETER_CITY       = ""
		#PARAMETER_COUNTRY    = ""
		#PARAMETER_STATE_PROV = ""
		#R1                   = ""
	END_BLOCK
	
	BEGIN_BLOCK GET_CUST_RETURN_MSG 
		IF ( #RESTRICT_MODE = "G" ) 
			GOTO GET_FINAL_RETURN_MSG
		ELSE
			#PARAMETER_MSG = TRIM(#P4)
			GOTO FINISHED	
		END_IF 
	END_BLOCK 
		
	BEGIN_BLOCK GET_FINAL_RETURN_MSG 
		FIND IN CUSTOMER_ADDRESSES &
					/LOCK=NONE &
					/SECONDARY &
					/STREAM_NAME=MSG1 &
					/WITH=COMPANY_CODE=#P1 &
					/WITH=DIVISION=#P2 &
					/WITH=CUSTOMER_NUMBER=#P3 &
					/WITH=ADDRESS_CODE=#P4
					
		#PARAMETER_CITY    = TRIM(MSG1:CUSTOMER_ADDRESSES(SYS_CITY))
		#PARAMETER_COUNTRY = TRIM(MSG1:CUSTOMER_ADDRESSES(SYS_COUNTRY))
				
		IF ( MSG1:CUSTOMER_ADDRESSES(SYS_STATE) <> "" ) 
			#PARAMETER_STATE_PROV = TRIM(MSG1:CUSTOMER_ADDRESSES(SYS_STATE))
		ELSE
			#PARAMETER_STATE_PROV = TRIM(MSG1:CUSTOMER_ADDRESSES(SYS_PROVINCE))
		END_IF
				
		IF ( #PARAMETER_CITY <> "" ) 
			#PARAMETER_MSG = #PARAMETER_CITY
			IF ( #PARAMETER_STATE_PROV <> "" ) 
				#PARAMETER_MSG = #PARAMETER_MSG & "," & #PARAMETER_STATE_PROV
				IF ( #PARAMETER_COUNTRY <> "" ) 
					#PARAMETER_MSG = #PARAMETER_MSG & "," & #PARAMETER_COUNTRY		
				END_IF
			ELSE
				IF ( #PARAMETER_COUNTRY <> "" ) 
					#PARAMETER_MSG = #PARAMETER_MSG & "," & #PARAMETER_COUNTRY		
				END_IF		
			END_IF					
		ELSE
			IF ( #PARAMETER_STATE_PROV <> "" ) 
				#PARAMETER_MSG = #PARAMETER_STATE_PROV
				IF ( #PARAMETER_COUNTRY <> "" ) 
					#PARAMETER_MSG = #PARAMETER_MSG & "," & #PARAMETER_COUNTRY		
				END_IF
			ELSE
				IF ( #PARAMETER_COUNTRY <> "" ) 
					#PARAMETER_MSG = #PARAMETER_COUNTRY		
				END_IF		
			END_IF  
		END_IF	
	END_BLOCK  

	BEGIN_BLOCK FINISHED 
		#R1 = #PARAMETER_MSG
	END_BLOCK 
END_FORM 


PROCEDURE_FORM CHECK_EXISTING_NO_CLOSED_LINE &
	/TABLE=SALES_ORDER_LINES &
	/LOCK=NONE &
	/SECONDARY &
	/STREAM_NAME=LINE_CL &
	/WITH=COMPANY_CODE = #COMPANY_CODE &
	/WITH=DIVISION = #DIVISION &
	/WITH=ORDER_NUMBER = #ORDER_NUMBER  

	BEGIN_BLOCK CHECK_ORDER_LINE_TYPE 
		IF ( LINE_CL:SALES_ORDER_LINES(STATUS_FLAG) <> PARAMETER("STATUS_CLOSED") ) 
			#EXISTING_NO_CLOSED_LINE = #YES
			EXIT 
		END_IF 
	END_BLOCK 

END_FORM