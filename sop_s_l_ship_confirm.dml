!Change 001 - Cylinder handling stuff - Create records in VOL_CYLMOVEMENTS
!Change 002 - Allow despatch date to be set by user in all cases. Reference SOP_U_CONFIRM_SHIP Change 001, as well
!Change 003 - Set VOL_READYTOSHIP to be the despatch date when VOL_READYTOSHIP is null. VOL_READYTOSHIP can also be manually entered by the user by amending the despatch

PROCEDURE_FORM SOP_S_L_SHIP_CONFIRM  (#P1,#P2,#P3,#P4,#P5,#P6,#R1,#R2,#R3,#R4,#R5,#R6,#R7,#R8,#R9,#R10,#R11,#R12,#R13,#R14)

	BEGIN_BLOCK DOCUMENTATION
		!   ==============================================================
		!
		!       (c) Copyright 1988-2009 CDC Software
		!       All Rights Reserved
		!
		!       This program is the proprietary and confidential information
		!       of CDC Software and may be used and disclosed only
		!       as authorized in a license agreement authorizing and
		!       controlling such use and disclosure
		!
		!   ==============================================================
		!
		!	This procedure is the main Ship Confirm processing program.
		!	This program is called from:
		!		RS_SHIP_CONFIRM   (Web Service Ship Confirm)
		!		RS_SHIP_CONFIRM_TM (Web Service Ship Confirm TM)
		!		SOP_U_SHIP_CONFIRM (Interactive Ship Confirm)
		!		SOP_S_L_SHIP_AMEND_DRIVER (Web Service Ship Confirm WMS)
		!
		!	=====================================================

	END_BLOCK


	BEGIN_BLOCK SETUP

		PERFORM INITIALIZE_LITERALS

		#RUN_TYPE      = #P1
		#CALL_MODE     = #P2
		#FUNCTION_MODE = #P3
		#MV_YEAR       = #P4
		#MV_PERIOD     = #P5
		#DESPATCH_DATE = #P6

		! Initialize Exceeded Qty return parameters

		#R1 = ""
		#R2 = ""
		#R3 = ""
		#R4 = ""
		#R5 = 0
		#R6 = 0
		#R7 = ""
		#R8 = ""
		#R9 = 0
		#R10 = ""
		#R11 = 0
		#R12 = ""
		#R13 = ""
		#R14 = ""

		#BATCH_PROCESS = #NO

		PERFORM GET_KEY_RECORDS
		IF (%STATUS <> %SUCCESS)
			EXIT (%FAILURE)
		END_IF

	END_BLOCK

	BEGIN_BLOCK START_PROCESS

		BEGIN_CASE (#RUN_TYPE)

		CASE (#RUN_TYPE_SOP)
			#SHIPPING_DESPATCH = #NO

			BEGIN_CASE (#FUNCTION_MODE )

			CASE #SHIP_VALIDATE
			! Sales Validation
				DELETE ALL FROM RS_SYS_MESSAGES
				IF (#CALL_MODE = #CALL_MODE_W)
					! Pre Update check already done for interactive process
					PERFORM INIT_SOP_DESPATCH_NOTES_VT
					PERFORM PRE_UPDATE_CHECK_SOP
					IF (%STATUS <> %SUCCESS)
				      		EXIT(%STATUS)
					END_IF
				END_IF

				PERFORM CHECK_HISTORY_CODE

				PERFORM RUN_VALIDATION
				IF (%STATUS=%FAILURE)
					IF (#R_QTY_EXCEEDED = #YES AND #CALL_MODE = #CALL_MODE_I)
						! Return values for interactive display
						#R1 = #YES
						#R4 = #R_EXCEED_PART
						#R5 = #R_EXCEED_PACK_QTY
						#R6 = #R_EXCEED_QOH
						#R7 = #R_EXCEED_UNIT
						#R8 = #R_EXCEED_LOT
						#R9 = #R_EXCEED_LOT_SEQ
						#R10 = #R_EXCEED_BIN
						#R11 = #R_EXCEED_MH
						#R12 = #MASK
					END_IF

					PERFORM RESET_HEADER_STATUS_BY_VT (#COMPANY_CODE)
					EXIT(%FAILURE)
				END_IF

				PERFORM COMPARE_PICKED_QTY
				IF (%STATUS=%FAILURE)
					IF (#R_PICK_EXCEEDED = #YES AND #CALL_MODE = #CALL_MODE_I)
						! Return values for interactive display
						#R2 = #YES
						#R4 = #R_PICK_EXCEED_PART
						#R5 = #R_PICK_EXCEED_DESP_QTY
						#R6 = #R_PICK_EXCEED_SOL_QTY
						#R7 = #R_PICK_EXCEED_UNIT
						#R12 = #MASK
					ELSE
						IF (#R_UNDERSHIP= #YES AND #CALL_MODE = #CALL_MODE_I)
							#R3 = #YES
							#R4 = #R_UNDERSHIP_PART
							#R5 = #R_UNDERSHIP_DESP_QTY
							#R6 = #R_UNDERSHIP_SOL_QTY
							#R7 = #R_UNDERSHIP_UNIT
							#R12 = #MASK
							#R13 = #UNDERSHIP_MSG
						END_IF
					END_IF

					PERFORM RESET_HEADER_STATUS_BY_VT (#COMPANY_CODE)
					EXIT(%FAILURE)
				END_IF

				PERFORM CHECK_FOR_XFER_ORDERS
				IF (%STATUS = %FAILURE)
					PERFORM RESET_HEADER_STATUS_BY_VT (#COMPANY_CODE)
					EXIT (%FAILURE)
				END_IF

				IF (#XFER_INTERACTION_REQUIRED = #YES)
					IF (#CALL_MODE = #CALL_MODE_I)
					! Return value to suppress Batch Run option
					! from the interactive run menu
						#R14 = #YES
						EXIT (%SUCCESS)
					ELSE
					! User interaction not allowed for Web mode
						PERFORM RESET_HEADER_STATUS_BY_VT (#COMPANY_CODE)
						EXIT (%FAILURE)
					END_IF
				END_IF

			CASE #SHIP_UPDATE
			! Sales Confirm Update

					DELETE ALL FROM IC_DEMAND_SUPPLY_VT

					PERFORM CHECK_HISTORY_CODE

					PERFORM DESPATCH
					#DESPATCH_STATUS = %STATUS

					IF (#CALL_MODE = #CALL_MODE_I) PERFORM LOG_REPORT

					PERFORM RESET_HEADER_STATUS_BY_VT (#COMPANY_CODE)

					COMMIT

					START_TRANSACTION

					PERFORM "GEMLB:LB_S_L_UPDATE_DEMAND_SUPPLY"

					COMMIT

					DELETE ALL FROM IC_DEMAND_SUPPLY_VT

					IF (#DESPATCH_STATUS <> %SUCCESS)
						EXIT (%FAILURE)
					END_IF
			END_CASE

		CASE (#RUN_TYPE_TM)
			#SHIPPING_DESPATCH = #YES

			BEGIN_CASE (#FUNCTION_MODE)

			CASE #SHIP_VALIDATE
			! TM Validation
				DELETE ALL FROM RS_SYS_MESSAGES
				IF (#CALL_MODE = #CALL_MODE_W)
					! Pre Update check already done for interactive process
					PERFORM INIT_SOP_DESPATCH_NOTES_VT
					PERFORM PRE_UPDATE_CHECK_TM
					IF (%STATUS <> %SUCCESS)
				      		EXIT(%STATUS)
					END_IF
				END_IF

				PERFORM CHECK_HISTORY_CODE

				PERFORM RUN_VALIDATION
				IF (%STATUS=%FAILURE)
					IF (#R_QTY_EXCEEDED = #YES AND #CALL_MODE = #CALL_MODE_I)
						! Return values for interactive display
						#R1 = #YES
						#R4 = #R_EXCEED_PART
						#R5 = #R_EXCEED_PACK_QTY
						#R6 = #R_EXCEED_QOH
						#R7 = #R_EXCEED_UNIT
						#R8 = #R_EXCEED_LOT
						#R9 = #R_EXCEED_LOT_SEQ
						#R10 = #R_EXCEED_BIN
						#R11 = #R_EXCEED_MH
						#R12 = #MASK
					END_IF

					PERFORM RESET_SHIPPING_RUN_CONTROLS &
							(#COMPANY_CODE, &
							#DIVISION, &
							#SOP_SHIPPING_RUN_NUMBER, &
							#ACCESSIBLE_WAREHOUSES)
					PERFORM RESET_HEADER_STATUS_BY_VT (#COMPANY_CODE)
					EXIT(%FAILURE)
				END_IF

				PERFORM COMPARE_PICKED_QTY
				IF (%STATUS=%FAILURE)
					IF (#R_PICK_EXCEEDED = #YES AND #CALL_MODE = #CALL_MODE_I)
						! Return values for interactive display
						#R2 = #YES
						#R4 = #R_PICK_EXCEED_PART
						#R5 = #R_PICK_EXCEED_DESP_QTY
						#R6 = #R_PICK_EXCEED_SOL_QTY
						#R7 = #R_PICK_EXCEED_UNIT
						#R12 = #MASK
					ELSE
						IF (#R_UNDERSHIP= #YES AND #CALL_MODE = #CALL_MODE_I)
							#R3 = #YES
							#R4 = #R_UNDERSHIP_PART
							#R5 = #R_UNDERSHIP_DESP_QTY
							#R6 = #R_UNDERSHIP_SOL_QTY
							#R7 = #R_UNDERSHIP_UNIT
							#R12 = #MASK
							#R13 = #UNDERSHIP_MSG
						END_IF
					END_IF

					PERFORM RESET_SHIPPING_RUN_CONTROLS &
							(#COMPANY_CODE, &
							#DIVISION, &
							#SOP_SHIPPING_RUN_NUMBER, &
							#ACCESSIBLE_WAREHOUSES)
					PERFORM RESET_HEADER_STATUS_BY_VT (#COMPANY_CODE)
					EXIT(%FAILURE)
				END_IF

				PERFORM CHECK_FOR_XFER_ORDERS
				IF (%STATUS = %FAILURE)
					PERFORM RESET_SHIPPING_RUN_CONTROLS &
							(#COMPANY_CODE, &
							#DIVISION, &
							#SOP_SHIPPING_RUN_NUMBER, &
							#ACCESSIBLE_WAREHOUSES)
					PERFORM RESET_HEADER_STATUS_BY_VT (#COMPANY_CODE)
					EXIT (%FAILURE)
				END_IF

				IF (#XFER_INTERACTION_REQUIRED = #YES)
					IF (#CALL_MODE = #CALL_MODE_I)
					! Return value to suppress Batch Run option
					! from the interactive run menu
						#R14 = #YES
						EXIT (%SUCCESS)
					ELSE
					! User interaction not allowed for Web mode
						PERFORM RESET_SHIPPING_RUN_CONTROLS &
								(#COMPANY_CODE, &
								#DIVISION, &
								#SOP_SHIPPING_RUN_NUMBER, &
								#ACCESSIBLE_WAREHOUSES)
						PERFORM RESET_HEADER_STATUS_BY_VT (#COMPANY_CODE)
						EXIT (%FAILURE)
					END_IF
				END_IF

			CASE #SHIP_UPDATE
			! TM Confirm Update
					PERFORM CHECK_HISTORY_CODE

					DELETE ALL FROM IC_DEMAND_SUPPLY_VT

					PERFORM DESPATCH
					#DESPATCH_STATUS = %STATUS

					IF (#CALL_MODE = #CALL_MODE_I) PERFORM LOG_REPORT

					PERFORM RESET_SHIPPING_RUN_CONTROLS &
							(#COMPANY_CODE, &
							#DIVISION, &
							#SOP_SHIPPING_RUN_NUMBER, &
							#ACCESSIBLE_WAREHOUSES)
					PERFORM RESET_HEADER_STATUS_BY_VT (#COMPANY_CODE)

					COMMIT

					START_TRANSACTION

					PERFORM "GEMLB:LB_S_L_UPDATE_DEMAND_SUPPLY"

					COMMIT

					DELETE ALL FROM IC_DEMAND_SUPPLY_VT

					IF (#DESPATCH_STATUS <> %SUCCESS)
						EXIT (%FAILURE)
					END_IF
			END_CASE
			 
		CASE ELSE
		!Invalid Run Type. Must be either "TM" or "SOP"
			#R_MSG = "P_13301"
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN", #R_MSG,"",1, 0,0,0)
			EXIT(%FAILURE)

		END_CASE
	END_BLOCK

END_FORM

PROCEDURE_FORM CHECK_HISTORY_CODE

	BEGIN_BLOCK GET_HISTORY_CODE
		 FIND IN SALES_ORDER_AUDIT_CODES &
			/LOCK=NONE &
		 	/WITH=COMPANY_CODE=#COMPANY_CODE &
		 	/WITH=DIVISION=#DIVISION &
		 	/WITH=ORDER_AUDIT_CODE=(PARAMETER("AUDIT_CHANGE_CODE_DESPATCH"))

		 IF (%STATUS = %SUCCESS)
		 	#HISTORY = SALES_ORDER_AUDIT_CODES(SO_AUDIT_LOG)
		 	#DESC_AUDIT = SALES_ORDER_AUDIT_CODES(DESCRIPTION)
		 ELSE
		 	#HISTORY = #NO
		 END_IF

	END_BLOCK

END_FORM


PROCEDURE_FORM PRE_UPDATE_LOAD_SOP

	BEGIN_BLOCK INIT
		PERFORM INITIALIZE_LITERALS

		#RUN_TYPE 	= #RUN_TYPE_SOP
		#CALL_MODE 	= #CALL_MODE_I

		! Called from interactive process to load Sop vt
		PERFORM GET_KEY_RECORDS
		IF (%STATUS <> %SUCCESS)
			EXIT (%FAILURE)
		END_IF

		DELETE ALL FROM RS_SYS_MESSAGES
		PERFORM INIT_SOP_DESPATCH_NOTES_VT

		PERFORM PRE_UPDATE_CHECK_SOP
		IF (%STATUS <> %SUCCESS)
			EXIT(%STATUS)
		END_IF
	END_BLOCK

END_FORM


PROCEDURE_FORM PRE_UPDATE_LOAD_TM

	BEGIN_BLOCK INIT
		PERFORM INITIALIZE_LITERALS

		#RUN_TYPE 	= #RUN_TYPE_TM
		#CALL_MODE 	= #CALL_MODE_I

		! Called from interactive process to load Sop vt
		PERFORM GET_KEY_RECORDS
		IF (%STATUS <> %SUCCESS)
			EXIT (%FAILURE)
		END_IF

		DELETE ALL FROM RS_SYS_MESSAGES
		PERFORM INIT_SOP_DESPATCH_NOTES_VT

		PERFORM PRE_UPDATE_CHECK_TM
		IF (%STATUS <> %SUCCESS)
			EXIT(%STATUS)
		END_IF
	END_BLOCK

END_FORM


PROCEDURE_FORM PRE_UPDATE_CHECK_SOP

	BEGIN_BLOCK LOAD_SHIP_NOTES
		START_TRANSACTION

		START_STREAM RS_SOP &
			/TABLE=RS_SHIP_CONFIRM &
			/LOCK=NONE &
			/SORTED_BY=(SHIP_NOTE)

		WHILE (1)
			FETCH RS_SOP /FAILURE=(CONTINUE OUT)
			IF (#SHIP_NOTES = "")
				#DIVISION = RS_SHIP_CONFIRM(DIVISION)
				#SHIP_NOTES = RS_SHIP_CONFIRM(SHIP_NOTE)
			ELSE
				#SHIP_NOTES = #SHIP_NOTES & "," & RS_SHIP_CONFIRM(SHIP_NOTE)
			END_IF
		END_WHILE
	END_BLOCK

	BEGIN_BLOCK LOAD_SOP_DESPATCH_NOTES_VT

		#BATCH_PROCESS = #NO
		PERFORM SALES_DESPATCH_SELECTION
		IF (%STATUS <> %SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_13303","",1, 0,#SHIP_NOTES,"")
			ROLLBACK
			EXIT(%FAILURE)
		END_IF
		COMMIT

	END_BLOCK

END_FORM


PROCEDURE_FORM PRE_UPDATE_CHECK_TM

	BEGIN_BLOCK LOAD_IDS
		START_TRANSACTION

		START_STREAM RS_TM &
			/TABLE=RS_SHIP_CONFIRM_TM &
			/LOCK=NONE &
			/SORTED_BY=(SOP_LOAD_ID)

		WHILE (1)
			FETCH RS_TM /FAILURE=(CONTINUE OUT)
			IF (#SOP_LOAD_ID = "")
				!Set the control record once, as it is the same for all RS Records
				FIND IN SOP_SHIPPING_RUN_CONTROL &
					/LOCK=NONE &
					/WITH=COMPANY_CODE = #COMPANY_CODE	&
					/WITH=DIVISION = RS_SHIP_CONFIRM_TM(DIVISION)	&
					/WITH=SOP_SHIPPING_RUN_NUMBER = RS_SHIP_CONFIRM_TM(SOP_SHIPPING_RUN_NUMBER) &
					/WITH=WAREHOUSE AMONG #ACCESSIBLE_WAREHOUSES

				IF (%STATUS <> %SUCCESS)
					PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
							("FIN","P_96046","",1,RS_SHIP_CONFIRM_TM(SOP_SHIPPING_RUN_NUMBER),"","")
					ROLLBACK
					EXIT (%FAILURE)
				END_IF

				IF (SOP_SHIPPING_RUN_CONTROL(IN_PROGRESS_STATUS) <> '')
					IF (SOP_SHIPPING_RUN_CONTROL(IN_PROGRESS_STATUS) = PARAMETER("STATUS_LOAD_ASSIGNMENT"))
						#R_MSG = "P_93064"
					ELSE
						#R_MSG = "P_93065"
					END_IF

					PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
						("FIN",#R_MSG,"",1,0,"","")
					ROLLBACK
					EXIT (%FAILURE)
				ELSE
					#NEW_STATUS = PARAMETER("STATUS_LOAD_ASSIGNMENT")
					PERFORM SET_SHIPPING_RUN_CONTROLS
				END_IF

				#DIVISION = RS_SHIP_CONFIRM_TM(DIVISION)
				#SOP_LOAD_ID = RS_SHIP_CONFIRM_TM(SOP_LOAD_ID)
			ELSE
				#SOP_LOAD_ID = #SOP_LOAD_ID & "," & RS_SHIP_CONFIRM_TM(SOP_LOAD_ID)
			END_IF
		END_WHILE
	END_BLOCK

	BEGIN_BLOCK LOAD_SOP_DESPATCH_NOTES_VT
		#BATCH_PROCESS = #NO
		PERFORM SHIPPING_DESPATCH_SELECTION
		IF (%STATUS <> %SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_13318","",1, 0,"","")
			PERFORM RESET_SHIPPING_RUN_CONTROLS &
					(#COMPANY_CODE, &
					#DIVISION, &
					#SOP_SHIPPING_RUN_NUMBER, &
					#ACCESSIBLE_WAREHOUSES)
			ROLLBACK
			EXIT(%FAILURE)
		END_IF
		COMMIT
	END_BLOCK

END_FORM

PROCEDURE_FORM SET_SHIPPING_RUN_CONTROLS

		!Update the shipping run control record with a new status and load
		!username and timestamp

	BEGIN_BLOCK UPDATE
		! Read shipping run controls prior to update
		FIND IN SOP_SHIPPING_RUN_CONTROL &
			/LOCK=WRITE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=SOP_SHIPPING_RUN_NUMBER=#SOP_SHIPPING_RUN_NUMBER

		IF (%STATUS = %FAILURE)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_93066","", &
					1,0,0,0)
			ROLLBACK
			EXIT(%FAILURE)
		ELSE
			! When entering load assignment, set the in-progress
			! status to indicate that load assignment is being done.
			! When exiting successfully, reset the in-progress
			! status, to indiate that the shipping run is now
			! available again.
			! If the status proper is to be updated from open to
			! closed or vice versa, then also reset the in-progress
			! status
			BEGIN_CASE 	(#NEW_STATUS)
			CASE		PARAMETER("STATUS_LOAD_ASSIGNMENT")
				SOP_SHIPPING_RUN_CONTROL(IN_PROGRESS_STATUS) = &
				#NEW_STATUS

			CASE		""
				SOP_SHIPPING_RUN_CONTROL(IN_PROGRESS_STATUS) = ""

			CASE		ELSE
				SOP_SHIPPING_RUN_CONTROL(IN_PROGRESS_STATUS) = ""
				SOP_SHIPPING_RUN_CONTROL(STATUS_FLAG) = &
					#NEW_STATUS
			END_CASE

			SOP_SHIPPING_RUN_CONTROL(USERNAME) = %USERNAME
			SOP_SHIPPING_RUN_CONTROL(SYS_MOD_DATE_TIME) = %NOW
			COMMIT
		END_IF
	END_BLOCK

END_FORM

PROCEDURE_FORM RESET_SHIPPING_RUN_CONTROLS(#IN_CO,#IN_DIV,#IN_RUN,#IN_WH)

	BEGIN_BLOCK SETUP
		#COMPANY_CODE = #IN_CO
		#DIVISION = #IN_DIV
		#SOP_SHIPPING_RUN_NUMBER = #IN_RUN
		#ACCESSIBLE_WAREHOUSES = #IN_WH
	END_BLOCK

	BEGIN_BLOCK RESET_SOP_SHIPPING_RUN_CONTROL
		!Check that the control file has been reset
		FIND IN SOP_SHIPPING_RUN_CONTROL &
			/LOCK=WRITE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=DIVISION = #DIVISION &
			/WITH=SOP_SHIPPING_RUN_NUMBER = #SOP_SHIPPING_RUN_NUMBER &
			/WITH=WAREHOUSE AMONG #ACCESSIBLE_WAREHOUSES

		IF (%STATUS = %SUCCESS)
			IF (SOP_SHIPPING_RUN_CONTROL(IN_PROGRESS_STATUS) = &
				PARAMETER("STATUS_LOAD_ASSIGNMENT") )

				!Reset the status on the control file
				#NEW_STATUS= ""
				COMMIT
				PERFORM SET_SHIPPING_RUN_CONTROLS
			END_IF
		END_IF

	END_BLOCK

END_FORM


PROCEDURE_FORM INITIALIZE_LITERALS

	BEGIN_BLOCK SETUP

		#RUN_TYPE_TM               = PARAMETER("MODULE_TM")
		#RUN_TYPE_SOP              = PARAMETER("MODULE_SOP")
		#CALL_MODE_I               = PARAMETER("CALL_MODE_I")
		#CALL_MODE_W               = PARAMETER("CALL_MODE_W")
		#SHIP_VALIDATE             = PARAMETER("SOP_SHIP_VALIDATION")
		#SHIP_UPDATE               = PARAMETER("SOP_SHIP_UPDATE")
		#NO                        = PARAMETER("LANGUAGE_NO")
		#USER_ID                   = PARAMETER("USER_ID")
		#YES                       = PARAMETER("LANGUAGE_YES")
		#SYS_YES                   = PARAMETER("SYS_YES")
		#IC_STATUS_CODE            = PARAMETER("IC_STATUS_QOH")
		#IC_MHU_NONE               = PARAMETER("IC_MHU_NONE")
		#IC_E_UOM_CONV             = PARAMETER("IC_E_UOM_CONV")
		#TR_DESC                   = MESSAGE("P_56082")
		#IC_ATP_SOURCE_TYPE_CODE   = PARAMETER("ATP_SOURCE_TYPE_INVENTORY")

		!These variables are for legal posting
		#LEGAL_POSTING_OPTION_1    = PARAMETER("LEGAL_POSTING_OPTION_1")
		#LEGAL_POSTING_OPTION_2    = PARAMETER("LEGAL_POSTING_OPTION_2")
		#JAPAN_LEGAL_POSTING       = PARAMETER("JAPAN_LEGAL_POSTING")
		#NO_GL_POSTINGS            = PARAMETER("NO_GL_POSTINGS")
		#XCTUAL                    = PARAMETER("XCTUAL_COSTING")
		#MODULE_SO                 = PARAMETER("MODULE_SO")
		#ID                        = PARAMETER("FACILITY_ID")
		#MOVEMENT_CODE             = PARAMETER("INV_MOVE_SO_DESP_CONF")
		#TRANSFER_MOVEMENT_CODE    = PARAMETER("SOP_INV_MOVE_SO_WHFR")
		#SYS_PHASE_FIRM            = PARAMETER("SYS_PHASE_FIRM")
		#IC_DECREASE               = PARAMETER("IC_DECREASE")
		#IC_E_UPDATE_ATC           = PARAMETER("IC_E_UPDATE_ATC")
		#IC_MHU_VARIABLE           = PARAMETER("IC_MHU_VARIABLE")
		#IC_MHU_WHOLE              = PARAMETER("IC_MHU_WHOLE")
		#IC_RECORD_BIN_MHU         = PARAMETER("IC_RECORD_BIN_MHU")
		#IC_RECORD_PRODUCT         = PARAMETER("IC_RECORD_PRODUCT")
		#IC_RECORD_LOT             = PARAMETER("IC_RECORD_LOT")
		#IC_AUTO_LOT_TEMP_PREFIX   = PARAMETER("IC_AUTO_LOT_TEMP_PREFIX")
!		#IC_WH_UNIQUE_LOT_NUMBERS  = PARAMETER("IC_WH_UNIQUE_LOT_NUMBERS")
		#AP_DIVISION               = PARAMETER("TM_USER_AP_DIVISION")

		#R_QTY_EXCEEDED            = #NO
		#R_EXCEED_PART             = ""
		#R_EXCEED_PACK_QTY         = 0
		#R_EXCEED_LOT              = ""
		#R_EXCEED_LOT_SEQ          = 0
		#R_EXCEED_BIN              = ""
		#R_EXCEED_MH               = 0
		#R_EXCEED_QOH              = 0
		#R_EXCEED_UNIT             = ""
		#R_PICK_EXCEEDED           = #NO
		#R_PICK_EXCEED_PART        = ""
		#R_PICK_EXCEED_DESP_QTY    = 0
		#R_PICK_EXCEED_SOL_QTY     = 0
		#R_PICK_EXCEED_UNIT        = ""
		#R_UNDERSHIP               = #NO
		#R_UNDERSHIP_PART          = ""
		#R_UNDERSHIP_DESP_QTY      = 0
		#R_UNDERSHIP_SOL_QTY       = 0
		#R_UNDERSHIP_UNIT          = ""
		#IC_OVERRIDE_AVAILABLE     = #YES
		#XFER_INTERACTION_REQUIRED = #NO
		#MSG_SEQ                   = 0

	END_BLOCK

END_FORM


PROCEDURE_FORM GET_KEY_RECORDS

	BEGIN_BLOCK GET_RECORDS

		IF (#BATCH_PROCESS = #YES)
			#COMPANY_CODE = PARAMETER("USER_COMPANY_CODE")
			#COMPANY_NAME = PARAMETER("USER_COMPANY_NAME")
			GOTO LOOKUP_MASTER_RECORDS
		END_IF

	END_BLOCK

	BEGIN_BLOCK GET_VT_RECORDS

		BEGIN_CASE (#RUN_TYPE)
			CASE (#RUN_TYPE_SOP)
		    		#TABLE 	 = "RS_SHIP_CONFIRM"
				#SERVICE = "RS_SHIP_CONFIRM Web Service"

				START_TRANSACTION

				FIND IN RS_SHIP_CONFIRM &
					/LOCK=NONE

				IF (%STATUS <> %SUCCESS)
					! "!AS requires at least one !AS record."
					ROLLBACK
					#LIN_SEQ = 0
					#ERR_MSG = "P_13271"
					PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
						("FIN", #ERR_MSG,"",#ERR_MSG_FATAL,#LIN_SEQ,#SERVICE,#TABLE)
					EXIT (%FAILURE)
				END_IF

				#COMPANY_CODE 	= RS_SHIP_CONFIRM(COMPANY_CODE)
				#DIVISION	= RS_SHIP_CONFIRM(DIVISION)

				COMMIT

			CASE (#RUN_TYPE_TM)
			    	#TABLE 	 = "RS_SHIP_CONFIRM"
				#SERVICE = "RS_SHIP_CONFIRM Web Service"

				START_TRANSACTION

				FIND IN RS_SHIP_CONFIRM_TM &
					/LOCK=NONE

				IF (%STATUS <> %SUCCESS)
					! "!AS requires at least one !AS record."
					ROLLBACK
					#LIN_SEQ = 0
					#ERR_MSG = "P_13271"
					PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
						("FIN", #ERR_MSG,"",#ERR_MSG_FATAL,#LIN_SEQ,#SERVICE,#TABLE)
					EXIT (%FAILURE)
				END_IF

				#COMPANY_CODE 		 = RS_SHIP_CONFIRM_TM(COMPANY_CODE)
				#DIVISION		 = RS_SHIP_CONFIRM_TM(DIVISION)
				#SOP_SHIPPING_RUN_NUMBER = RS_SHIP_CONFIRM_TM(SOP_SHIPPING_RUN_NUMBER)

				COMMIT

			CASE ELSE
				! "Invalid Run Type. Must be either "TM" or "SOP""
				#LIN_SEQ	= 0
				#ERR_MSG 	= "P_13301"
				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN",#ERR_MSG,"",#ERR_MSG_FATAL,#LIN_SEQ)
					EXIT (%FAILURE)
		END_CASE

	END_BLOCK

	BEGIN_BLOCK LOOKUP_MASTER_RECORDS

		START_TRANSACTION

		FIND IN COMPANY_CONTROLS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE

		IF (%STATUS <> %SUCCESS)
			ROLLBACK
			! "Invalid company code"
			#ERR_MSG = "P_12098"
			#LIN_SEQ = 0
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN",#ERR_MSG,"",#ERR_MSG_FATAL,#LIN_SEQ,#COMPANY_CODE)
			EXIT (%FAILURE)
		END_IF

		#COMPANY_NAME	    = COMPANY_CONTROLS(COMPANY_NAME)
		#ATP_IN_USE 	    = COMPANY_CONTROLS(ATP_IN_USE)
		#LEGAL_POSTING_CODE = COMPANY_CONTROLS(SYS_LEGAL_POSTING_CODE)

		FIND IN AR_CONTROLS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION

		IF (%STATUS <> %SUCCESS)
			ROLLBACK
			! "Invalid division !AS"
			#ERR_MSG = "P_02791"
			#LIN_SEQ = 0
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN",#ERR_MSG,"",#ERR_MSG_FATAL,#LIN_SEQ,#DIVISION)
			EXIT (%FAILURE)
		END_IF

		IF (AR_CONTROLS(SOP_ACTIVE) <> #YES)
			ROLLBACK
			! "Division is not activated"
			#ERR_MSG = "P_00243"
			#LIN_SEQ = 0
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN",#ERR_MSG,"",#ERR_MSG_FATAL,#LIN_SEQ)
			EXIT (%FAILURE)
		END_IF

		COMMIT

		PERFORM "GEMLB:LB_SECURITY_CODE_ACCESS" &
			((PARAMETER("MODULE_SO")), &
			 PARAMETER("ACCESS_TYPE_WAREHOUSE"), &
			 #ACCESSIBLE_WAREHOUSES)

		IF (%STATUS=%FAILURE)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_10638","",1, 0,"","")
			EXIT (%FAILURE)
		END_IF

		IF (#ACCESSIBLE_WAREHOUSES = "##NONE##")
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_10639","",1, 0,PARAMETER("MODULE_SO"),"")
			EXIT (%FAILURE)
		END_IF

	END_BLOCK

END_FORM


PROCEDURE_FORM SALES_BATCH_SETUP (#P1,#P2,#P3,#P4,#P5,#P6)

	BEGIN_BLOCK SETUP_PARAMS

		PERFORM INITIALIZE_LITERALS

		#RUN_TYPE 		= #RUN_TYPE_SOP
		#CALL_MODE 		= #CALL_MODE_W
		#BATCH_PROCESS		= #YES
		#SHIPPING_DESPATCH	= #NO

		#DIVISION       	= #P1
		#ID			= #P2
		#SHIP_NOTES    		= #P3
               #MV_YEAR                = #P4
               #MV_PERIOD              = #P5
               #DESPATCH_DATE          = #P6

		PERFORM GET_KEY_RECORDS
		IF (%STATUS <> %SUCCESS)
			EXIT (%FAILURE)
		END_IF

	END_BLOCK

	BEGIN_BLOCK DESPATCH
		! Find the audit code for despatch to determine whether a history
		! record should be written and store the description.

		PERFORM CHECK_HISTORY_CODE
		COMMIT

		PERFORM SALES_DESPATCH_SELECTION
		IF (%STATUS <> %SUCCESS)
			MESSAGE/IDENTIFIER P_13310
			EXIT (%STATUS)
		END_IF

		! Don't try and set the despatch_header status, as this is
		! done prior to the BATCH option being selected.

		COMMIT

		PERFORM DESPATCH
		IF (%STATUS = %SUCCESS)
			FIND IN RS_SYS_MESSAGES &
				/LOCK=NONE &
				/WITH=RS_MESSAGE_SEVERITY=2
			IF (%STATUS = %SUCCESS)
			! At least one Warning message was reported in RS_SYS_MESSAGES table
				MESSAGE/IDENTIFIER P_13308
			ELSE
		      		FIND IN RS_SYS_MESSAGES &
					/LOCK=NONE &
					/WITH=RS_MESSAGE_SEVERITY=1
				IF (%STATUS = %SUCCESS)
				! At least one Fatal message was reported in RS_SYS_MESSAGES table
					MESSAGE/IDENTIFIER P_13309
				ELSE
				! All the messages must be Informational Only
					MESSAGE/IDENTIFIER P_02761
				END_IF

			END_IF
		ELSE
			! Call to update routine failed
			MESSAGE/IDENTIFIER P_13310
		END_IF

		! Display all the messages in the Batch Log
		PERFORM DISPLAY_LOG

		! Create Ship Confirm log report
		PERFORM "GEMLB:LB_REPORT_PRINT_CONTROL" (#ID,#ID&"/1","","","",#R_NAME,#REPORT_AUTO,#QUEUE,#FORM_TYPE,#COPIES,"","","")
		PERFORM WRITE_LOG_REPORT

		IF (#REPORT_AUTO=#YES)

				FILES/NOQUERY/PRINT_ONLY/QUEUE=#QUEUE/FORM_TYPE=#FORM_TYPE/COPIES=#COPIES #R_NAME

				IF (%STATUS=%FAILURE)
					MESSAGE/IDENTIFIER P_57095
				END_IF
		END_IF

		COMMIT
		PERFORM RESET_HEADER_STATUS_BY_VT (#COMPANY_CODE)
	END_BLOCK

END_FORM

PROCEDURE_FORM SHIPPING_BATCH_SETUP (#P1,#P2,#P3,#P4,#P5)

	BEGIN_BLOCK SETUP_PARAMS

		PERFORM INITIALIZE_LITERALS

		#RUN_TYPE 		= #RUN_TYPE_TM
		#CALL_MODE 		= #CALL_MODE_W
		#BATCH_PROCESS		= #YES
		#SHIPPING_DESPATCH	= #YES

		#DIVISION       	 = #P1
		#ID			 = #P2
		#SOP_SHIPPING_RUN_NUMBER = #P3
		#SOP_LOAD_ID		 = #P4
		#SHIP_NOTES 		 = #P5

		PERFORM GET_KEY_RECORDS
		IF (%STATUS <> %SUCCESS)
			EXIT (%FAILURE)
		END_IF

	END_BLOCK

	BEGIN_BLOCK DESPATCH

		! Find the audit code for despatch to determine whether a history
		! record should be written and store the description.

		PERFORM CHECK_HISTORY_CODE
		COMMIT

		PERFORM SHIPPING_DESPATCH_SELECTION
		IF (%STATUS <> %SUCCESS)
			MESSAGE/IDENTIFIER P_13310
			EXIT (%STATUS)
		END_IF

		! Don't try and set the despatch_header status, as this is
		! done prior to the BATCH option being selected.

		COMMIT
		PERFORM DESPATCH
		IF (%STATUS = %SUCCESS)
			FIND IN RS_SYS_MESSAGES &
				/LOCK=NONE &
				/WITH=RS_MESSAGE_SEVERITY=2
			IF (%STATUS = %SUCCESS)
			! At least one Warning message was reported in RS_SYS_MESSAGES table
				MESSAGE/IDENTIFIER P_13308
			ELSE
		      		FIND IN RS_SYS_MESSAGES &
					/LOCK=NONE &
					/WITH=RS_MESSAGE_SEVERITY=1
				IF (%STATUS = %SUCCESS)
				! At least one Fatal message was reported in RS_SYS_MESSAGES table
					MESSAGE/IDENTIFIER P_13309
				ELSE
				! All the messages must be Informational Only
					MESSAGE/IDENTIFIER P_02761
				END_IF

			END_IF
		ELSE
			! Call to update routine failed
			MESSAGE/IDENTIFIER P_13310
		END_IF

		! Display all the messages in the Batch Log
		PERFORM DISPLAY_LOG

		! Create Ship Confirm log report
		PERFORM "GEMLB:LB_REPORT_PRINT_CONTROL" (#ID,#ID&"/1","","","",#R_NAME,#REPORT_AUTO,#QUEUE,#FORM_TYPE,#COPIES,"","","")
		PERFORM WRITE_LOG_REPORT

		IF (#REPORT_AUTO=#YES)

				FILES/NOQUERY/PRINT_ONLY/QUEUE=#QUEUE/FORM_TYPE=#FORM_TYPE/COPIES=#COPIES #R_NAME

				IF (%STATUS=%FAILURE)
					MESSAGE/IDENTIFIER P_57095
				END_IF
		END_IF
		COMMIT

		PERFORM RESET_SHIPPING_RUN_CONTROLS &
				(#COMPANY_CODE, &
				#DIVISION, &
				#SOP_SHIPPING_RUN_NUMBER, &
				#ACCESSIBLE_WAREHOUSES)
		PERFORM RESET_HEADER_STATUS_BY_VT (#COMPANY_CODE)
	END_BLOCK

END_FORM


PROCEDURE_FORM RUN_VALIDATION &
	/TABLE=SOP_DESPATCH_NOTES_VT &
	/GROUPED_BY=(WAREHOUSE,PART_CODE,IC_LOT_NUMBER,IC_LOT_SEQUENCE,BIN_LOCATION,MH_NUMBER,IC_PACK_UNIT)

	BEGIN_BLOCK DOC
	!
	! validate that in despatch qty's of this despatch run are in inventory.  In despatch qty's
	! for the nominated and other uom's will be summarized by warehouse, part, lot, sequence,
	! bin, and mhu.
	!
	! In despatch qty's in the pack uom are a little tricky because there can be more than one
	! pack uom per warehouse, part, lot, sequence, bin, adn mhu.
	!
	END_BLOCK

	BEGIN_BLOCK INIT
		#NOMINATED_UNIT = SOP_DESPATCH_NOTES_VT(SOP_NOMINATED_UNIT)
		#OTHER_UNIT	= SOP_DESPATCH_NOTES_VT(IC_OTHER_INVENTORY_UNIT)
		#PACK_UNIT = ""
		#OTHER_MASK	= ""
		#PACK_MASK	= ""
		#MSG_SEQ = SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)

		IF (SOP_DESPATCH_NOTES_VT(NONSTOCK) = #YES)
			#NOMINATED_MASK = "!-@@@@@@@@@@0.0@"
		ELSE
			FIND IN PRODUCT_MASTER &
				/LOCK=NONE &
				/WITH=COMPANY_CODE = #COMPANY_CODE &
				/WITH=PART_CODE = SOP_DESPATCH_NOTES_VT(PART_CODE)

			IF (%STATUS <> %SUCCESS)
				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_52319","",1, #MSG_SEQ,"","")
				EXIT (%FAILURE)
			END_IF

			IF (PRODUCT_MASTER(IC_PACKAGED_PRODUCT) = #YES)
				#PACK_UNIT = SOP_DESPATCH_NOTES_VT(IC_PACK_UNIT)
			END_IF

			PERFORM "GEMLB:LB_GET_QUANTITY_MASK" LB_GET_QUANTITY_MASK_WS &
				(#COMPANY_CODE,		&
				(SOP_DESPATCH_NOTES_VT(PART_CODE)), &
				(#NOMINATED_UNIT), &
				#NOMINATED_MASK,	&
				#NOMINATED_DECIMALS)
			IF (%STATUS = %FAILURE)
				EXIT (%FAILURE)
			END_IF
			IF (#PACK_UNIT <> "")
				PERFORM "GEMLB:LB_GET_QUANTITY_MASK" LB_GET_QUANTITY_MASK_WS &
					(#COMPANY_CODE,		&
					(SOP_DESPATCH_NOTES_VT(PART_CODE)), &
					(#PACK_UNIT), &
					#PACK_MASK,	&
					#PACK_DECIMALS)
				IF (%STATUS = %FAILURE)
					EXIT (%FAILURE)
				END_IF
			END_IF
			IF (#OTHER_UNIT <> "")
				PERFORM "GEMLB:LB_GET_QUANTITY_MASK" LB_GET_QUANTITY_MASK_WS &
					(#COMPANY_CODE,		&
					(SOP_DESPATCH_NOTES_VT(PART_CODE)), &
					(#OTHER_UNIT), &
					#OTHER_MASK,	&
					#OTHER_DECIMALS)
				IF (%STATUS = %FAILURE)
					EXIT (%FAILURE)
				END_IF
			END_IF

			! Starts 2nd stream (GUC:) on Product Master
			PERFORM GET_PART_DATA	((#COMPANY_CODE), &
						(SOP_DESPATCH_NOTES_VT(PART_CODE)), &
						#IC_PRODUCT_UOM_CONTROL, &
						#IC_CAPACITY_UNIT)

			IF ((%STATUS = %FAILURE) OR (#IC_PRODUCT_UOM_CONTROL = "") OR (#IC_CAPACITY_UNIT = ""))
				EXIT (%FAILURE)

			ELSE_IF ((#IC_PRODUCT_UOM_CONTROL) = PARAMETER("IC_POTENT_UOM_CONTROL"))

				PERFORM GET_NOT_CAPACITY_UNIT	((#COMPANY_CODE), &
								(SOP_DESPATCH_NOTES_VT(PART_CODE)), &
								(#IC_CAPACITY_UNIT), &
								#NOT_CAPACITY_UNIT)

				IF ((%STATUS = %FAILURE) OR (#NOT_CAPACITY_UNIT = ""))
					EXIT (%FAILURE)
				END_IF
			END_IF

		END_IF
	END_BLOCK

	BEGIN_BLOCK SET_TOTALS
		#TOTAL_NOMINATED_QTY	= 0
		#TOTAL_OTHER_QTY	= 0
		#TOTAL_PACK_QTY	= 0
		! set despatch totals by warehouse, part, lot, lot sequence, bin, mhu
		PERFORM SET_DESPATCH_TOTALS
		IF (%STATUS = %FAILURE)
			EXIT (%FAILURE)
		END_IF
	END_BLOCK

	BEGIN_BLOCK CHECK_PART_BATCHES

		IF ((PRODUCT_MASTER(BATCHES_EXIST) = #YES) &
			AND (SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER) = ""))
			! Catches the situation where the user has not picked a lot
			! for an order before attempting to confirm a shipping note.
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_13233","",1, #MSG_SEQ,(SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)))

			EXIT (%FAILURE)
		END_IF

		IF (PRODUCT_MASTER(BATCHES_EXIST) <> #YES)
			FIND IN PM_SHIP_HOLD &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
                                /WITH=WAREHOUSE= SOP_DESPATCH_NOTES_VT(WAREHOUSE) &
                                /WITH=PART_CODE= SOP_DESPATCH_NOTES_VT(PART_CODE)

			IF      (%STATUS = %SUCCESS)
				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_52227","",1, #MSG_SEQ,(SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)))
				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_52228","",1, #MSG_SEQ,"","")

				EXIT (%FAILURE)
			END_IF
		END_IF

		IF (SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER) <> "")
			START_STREAM ILS &
				/TABLE=IC_LOT_STATUS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=PART_CODE= SOP_DESPATCH_NOTES_VT(PART_CODE) &
				/WITH=WAREHOUSE= SOP_DESPATCH_NOTES_VT(WAREHOUSE) &
				/WITH=IC_LOT_NUMBER=SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER) &
				/WITH=IC_LOT_SEQUENCE=SOP_DESPATCH_NOTES_VT(IC_LOT_SEQUENCE) &
				/WITH=IC_STATUS_CODE=#IC_STATUS_CODE

			#NONE = #YES
			WHILE(1)
				FETCH ILS /FAILURE=(CONTINUE OUT)

				IF (((#IC_PRODUCT_UOM_CONTROL) = PARAMETER("IC_POTENT_UOM_CONTROL")) AND &
					((#NOT_CAPACITY_UNIT) = ILS:IC_LOT_STATUS(UNIT_OF_MEASURE)))

					!Check of quantity for a potent part's inventory units is handled by
					!checking just the capacity unit's qty because of the relationship
					!between the capacity and non-capacity units.  Any rounding issues
					!are handled in the ic engine.

					CONTINUE
				END_IF

				#NONE = #NO
				BEGIN_CASE (ILS:IC_LOT_STATUS(UNIT_OF_MEASURE))
					CASE (#NOMINATED_UNIT)
						IF (#TOTAL_NOMINATED_QTY > ILS:IC_LOT_STATUS(IC_QUANTITY))
							#QTY_ON_HAND = ILS:IC_LOT_STATUS(IC_QUANTITY)
							#QTY = #TOTAL_NOMINATED_QTY
							#UNIT = #NOMINATED_UNIT
							#MASK = #NOMINATED_MASK

							PERFORM QTY_EXCEEDED
							EXIT (%FAILURE)
						END_IF
					CASE (#OTHER_UNIT)
						IF (#TOTAL_OTHER_QTY > ILS:IC_LOT_STATUS(IC_QUANTITY))
							#QTY_ON_HAND = ILS:IC_LOT_STATUS(IC_QUANTITY)
							#QTY = #TOTAL_OTHER_QTY
							#UNIT = #OTHER_UNIT
							#MASK = #OTHER_MASK

							PERFORM QTY_EXCEEDED
							EXIT (%FAILURE)
						END_IF
					CASE (#PACK_UNIT)
						! summarize in despatch qtys for this grouping and uom
						#TOTAL_PACK_QTY = 0
						PERFORM SET_IN_DESPATCH_PACK_TOTALS((ILS:IC_LOT_STATUS(UNIT_OF_MEASURE)), &
									#TOTAL_PACK_QTY)
						IF (#TOTAL_PACK_QTY > ILS:IC_LOT_STATUS(IC_QUANTITY))
							#QTY_ON_HAND = ILS:IC_LOT_STATUS(IC_QUANTITY)
							#QTY = #TOTAL_PACK_QTY
							#UNIT = #PACK_UNIT
							#MASK = #PACK_MASK

							PERFORM QTY_EXCEEDED
							EXIT (%FAILURE)
						END_IF
				END_CASE

				FIND IN PM_SHIP_HOLD &
					/LOCK=NONE &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=WAREHOUSE=SOP_DESPATCH_NOTES_VT(WAREHOUSE) &
					/WITH=PART_CODE=SOP_DESPATCH_NOTES_VT(PART_CODE) &
					/WITH=IC_LOT_NUMBER=ILS:IC_LOT_STATUS(IC_LOT_NUMBER)

				IF      (%STATUS = %SUCCESS)
					PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
						("FIN","P_52227","",1,(SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)),&
						(SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)))
					PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
						("FIN","P_52228","",1,#MSG_SEQ,"")

					EXIT (%FAILURE)
				END_IF
			END_WHILE
			IF (#NONE = #YES)
				#QTY_ON_HAND = 0
				#UNIT = ""
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK CHECK_BIN_LOCATION
		IF (SOP_DESPATCH_NOTES_VT(BIN_LOCATION) <> "")

			IF (SOP_DESPATCH_NOTES_VT(MH_NUMBER) <> "")
				START_STREAM IB &
					/TABLE=IC_BIN_DETAIL_STATUS &
					/LOCK=NONE &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=WAREHOUSE=SOP_DESPATCH_NOTES_VT(WAREHOUSE) &
					/WITH=PART_CODE=SOP_DESPATCH_NOTES_VT(PART_CODE) &
					/WITH=IC_LOT_NUMBER=SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER) &
					/WITH=IC_LOT_SEQUENCE=SOP_DESPATCH_NOTES_VT(IC_LOT_SEQUENCE) &
					/WITH=IC_STATUS_CODE=#IC_STATUS_CODE &
					/WITH=BIN_LOCATION=SOP_DESPATCH_NOTES_VT(BIN_LOCATION) &
					/WITH=MH_NUMBER=SOP_DESPATCH_NOTES_VT(MH_NUMBER)
			ELSE
		   		START_STREAM IB &
					/TABLE=IC_BIN_DETAIL_STATUS &
					/LOCK=NONE &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=WAREHOUSE=SOP_DESPATCH_NOTES_VT(WAREHOUSE) &
					/WITH=PART_CODE=SOP_DESPATCH_NOTES_VT(PART_CODE) &
					/WITH=IC_LOT_NUMBER=SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER) &
					/WITH=IC_LOT_SEQUENCE=SOP_DESPATCH_NOTES_VT(IC_LOT_SEQUENCE) &
					/WITH=IC_STATUS_CODE=#IC_STATUS_CODE &
					/WITH=BIN_LOCATION=SOP_DESPATCH_NOTES_VT(BIN_LOCATION)
			END_IF

			#NONE = #YES
			WHILE(1)
				FETCH IB /FAILURE=(CONTINUE OUT)

				IF (((#IC_PRODUCT_UOM_CONTROL) = PARAMETER("IC_POTENT_UOM_CONTROL")) AND &
					((#NOT_CAPACITY_UNIT) = IB:IC_BIN_DETAIL_STATUS(UNIT_OF_MEASURE)))

					!Quantity checks of a potent part's inventory units is handled by
					!checking just the capacity unit's qty because of the relationship
					!between the capacity and non-capacity units.  Any rounding issues
					!are handled in the ic engine.

					CONTINUE
				END_IF

				#NONE = #NO
				BEGIN_CASE (IB:IC_BIN_DETAIL_STATUS(UNIT_OF_MEASURE))
					CASE (#NOMINATED_UNIT)
						IF (#TOTAL_NOMINATED_QTY > IB:IC_BIN_DETAIL_STATUS(IC_QUANTITY))
							#QTY_ON_HAND = IB:IC_BIN_DETAIL_STATUS(IC_QUANTITY)
							#QTY = #TOTAL_NOMINATED_QTY
							#UNIT = #NOMINATED_UNIT
							#MASK = #NOMINATED_MASK

							PERFORM QTY_EXCEEDED
							EXIT (%FAILURE)
						END_IF
					CASE (#OTHER_UNIT)
						IF (#TOTAL_OTHER_QTY > IB:IC_BIN_DETAIL_STATUS(IC_QUANTITY))
							#QTY_ON_HAND = IB:IC_BIN_DETAIL_STATUS(IC_QUANTITY)
							#QTY = #TOTAL_OTHER_QTY
							#UNIT = #OTHER_UNIT
							#MASK = #OTHER_MASK

							PERFORM QTY_EXCEEDED
							EXIT (%FAILURE)
						END_IF
					CASE (#PACK_UNIT)
						! summarize in despatch qtys for this grouping and uom
						#TOTAL_PACK_QTY	= 0
						PERFORM SET_IN_DESPATCH_PACK_TOTALS((IB:IC_BIN_DETAIL_STATUS(UNIT_OF_MEASURE)), &
									#TOTAL_PACK_QTY)
						IF (#TOTAL_PACK_QTY > IB:IC_BIN_DETAIL_STATUS(IC_QUANTITY))
							#QTY_ON_HAND = IB:IC_BIN_DETAIL_STATUS(IC_QUANTITY)
							#UNIT = #PACK_UNIT
							#QTY = #TOTAL_PACK_QTY
							#MASK = #PACK_MASK

							PERFORM QTY_EXCEEDED
							EXIT (%FAILURE)
						END_IF
				END_CASE
			END_WHILE
			IF (#NONE = #YES)
				#QTY_ON_HAND = 0
				#UNIT = ""
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK CHECK_PRODUCT
		IF (SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER) = "" AND &
				SOP_DESPATCH_NOTES_VT(BIN_LOCATION) = "" AND &
				SOP_DESPATCH_NOTES_VT(WAREHOUSE) <> "")

			START_STREAM IPS &
				/TABLE=IC_PRODUCT_STATUS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=WAREHOUSE=SOP_DESPATCH_NOTES_VT(WAREHOUSE) &
				/WITH=PART_CODE=SOP_DESPATCH_NOTES_VT(PART_CODE) &
				/WITH=IC_STATUS_CODE=#IC_STATUS_CODE

			#NONE = #YES
			WHILE(1)
				FETCH IPS /FAILURE=(CONTINUE OUT)

				IF (((#IC_PRODUCT_UOM_CONTROL) = PARAMETER("IC_POTENT_UOM_CONTROL")) AND &
					((#NOT_CAPACITY_UNIT) = IPS:IC_PRODUCT_STATUS(UNIT_OF_MEASURE)))

					!Quantity checks of a potent part's inventory units is handled by
					!checking just the capacity unit's qty because of the relationship
					!between the capacity and non-capacity units.  Any rounding issues
					!are handled in the ic engine.

					CONTINUE
				END_IF

				#NONE = #NO
				BEGIN_CASE (IPS:IC_PRODUCT_STATUS(UNIT_OF_MEASURE))
					CASE (#NOMINATED_UNIT)
						IF (#TOTAL_NOMINATED_QTY > IPS:IC_PRODUCT_STATUS(IC_QUANTITY))
							#QTY_ON_HAND = IPS:IC_PRODUCT_STATUS(IC_QUANTITY)
							#QTY = #TOTAL_NOMINATED_QTY
							#UNIT = #NOMINATED_UNIT
							#MASK = #NOMINATED_MASK

							PERFORM QTY_EXCEEDED
							EXIT (%FAILURE)
						END_IF
					CASE (#OTHER_UNIT)
						IF (#TOTAL_OTHER_QTY > IPS:IC_PRODUCT_STATUS(IC_QUANTITY))
							#QTY_ON_HAND = IPS:IC_PRODUCT_STATUS(IC_QUANTITY)
							#QTY = #TOTAL_OTHER_QTY
							#UNIT = #OTHER_UNIT
							#MASK = #OTHER_MASK

							PERFORM QTY_EXCEEDED
							EXIT (%FAILURE)
						END_IF
					CASE (#PACK_UNIT)
						! summarize in despatch qtys for this grouping and uom
						#TOTAL_PACK_QTY	= 0
						PERFORM SET_IN_DESPATCH_PACK_TOTALS((IPS:IC_PRODUCT_STATUS(UNIT_OF_MEASURE)), &
									#TOTAL_PACK_QTY)
						IF (#TOTAL_PACK_QTY > IPS:IC_PRODUCT_STATUS(IC_QUANTITY))
							#QTY_ON_HAND = IPS:IC_PRODUCT_STATUS(IC_QUANTITY)
							#QTY = #TOTAL_PACK_QTY
							#UNIT = #PACK_UNIT
							#MASK = #PACK_MASK

							PERFORM QTY_EXCEEDED
							EXIT (%FAILURE)
						END_IF
				END_CASE
			END_WHILE
			IF (#NONE = #YES)
				#QTY_ON_HAND = 0
				#UNIT = ""
			END_IF
		END_IF
	END_BLOCK
END_FORM

PROCEDURE_FORM SET_DESPATCH_TOTALS &
	/TABLE = SOP_DESPATCH_NOTES_VT	&
	/LOCK = NONE	&
	/SECONDARY	&
	/WITH=WAREHOUSE = SOP_DESPATCH_NOTES_VT(WAREHOUSE)	&
	/WITH=PART_CODE = SOP_DESPATCH_NOTES_VT(PART_CODE)	&
	/WITH=IC_LOT_NUMBER = SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER)	&
	/WITH=IC_LOT_SEQUENCE = SOP_DESPATCH_NOTES_VT(IC_LOT_SEQUENCE)	&
	/WITH=BIN_LOCATION = SOP_DESPATCH_NOTES_VT(BIN_LOCATION)	&
	/WITH=MH_NUMBER = SOP_DESPATCH_NOTES_VT(MH_NUMBER)	&
	/STREAM_NAME=DES

	BEGIN_BLOCK DOC
	! go thru each despatch note in this run with this grouping
	! and summarize the in despatch qty for nominated uom and other uom
	!
	END_BLOCK

	BEGIN_BLOCK TOTAL_NOMINATED
		FIND IN DESPATCH_NOTE_QTYS &
			/LOCK=NONE	&
			/WITH=COMPANY_CODE = #COMPANY_CODE	&
			/WITH=DIVISION = DES:SOP_DESPATCH_NOTES_VT(DIVISION)	&
			/WITH=DESPATCH_NOTE = DES:SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)	&
			/WITH=DESPATCH_LINE = DES:SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)	&
			/WITH=UNIT_OF_MEASURE = DES:SOP_DESPATCH_NOTES_VT(SOP_NOMINATED_UNIT)
		IF (%STATUS=%SUCCESS)
			#TOTAL_NOMINATED_QTY	= #TOTAL_NOMINATED_QTY + &
						DESPATCH_NOTE_QTYS(IC_QTY_IN_DESPATCH)
		END_IF
	END_BLOCK

	BEGIN_BLOCK TOTAL_OTHER
		IF (DES:SOP_DESPATCH_NOTES_VT(IC_OTHER_INVENTORY_UNIT) <> "")
			FIND IN DESPATCH_NOTE_QTYS &
				/LOCK=NONE	&
				/WITH=COMPANY_CODE = #COMPANY_CODE	&
				/WITH=DIVISION = DES:SOP_DESPATCH_NOTES_VT(DIVISION)	&
				/WITH=DESPATCH_NOTE = DES:SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)	&
				/WITH=DESPATCH_LINE = DES:SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)	&
				/WITH=UNIT_OF_MEASURE = DES:SOP_DESPATCH_NOTES_VT(IC_OTHER_INVENTORY_UNIT)
			IF (%STATUS=%SUCCESS)
				#TOTAL_OTHER_QTY = #TOTAL_OTHER_QTY + &
						DESPATCH_NOTE_QTYS(IC_QTY_IN_DESPATCH)
			END_IF
		END_IF
	END_BLOCK

END_FORM

PROCEDURE_FORM SET_IN_DESPATCH_PACK_TOTALS(#UOM, #TOTAL_PACK_QTY)	&
	/TABLE = SOP_DESPATCH_NOTES_VT	&
	/SECONDARY	&
	/LOCK=NONE	&
	/WITH=WAREHOUSE = SOP_DESPATCH_NOTES_VT(WAREHOUSE)	&
	/WITH=PART_CODE = SOP_DESPATCH_NOTES_VT(PART_CODE)	&
	/WITH=IC_LOT_NUMBER = SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER)	&
	/WITH=IC_LOT_SEQUENCE = SOP_DESPATCH_NOTES_VT(IC_LOT_SEQUENCE)	&
	/WITH=BIN_LOCATION = SOP_DESPATCH_NOTES_VT(BIN_LOCATION)	&
	/WITH=MH_NUMBER = SOP_DESPATCH_NOTES_VT(MH_NUMBER)	&
	/STREAM_NAME=DES

	BEGIN_BLOCK DOC
	!
	! cycle thru this grouping and summarize the in despatch qty for the pack uom specified
	!
	END_BLOCK

	BEGIN_BLOCK GET_KEY
		FIND IN DESPATCH_NOTES	&
			/LOCK=NONE	&
			/WITH=COMPANY_CODE = #COMPANY_CODE	&
			/WITH=DIVISION = DES:SOP_DESPATCH_NOTES_VT(DIVISION)	&
			/WITH=DESPATCH_NOTE = DES:SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)	&
			/WITH=DESPATCH_LINE = DES:SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)
		IF (%STATUS <> %SUCCESS)
			EXIT (%FAILURE)
		END_IF
	END_BLOCK

	BEGIN_BLOCK GET_QTY
	! summarize qty for this uom
		FIND IN DESPATCH_NOTE_QTYS	&
			/LOCK=NONE	&
			/WITH=COMPANY_CODE	= #COMPANY_CODE	&
			/WITH=DIVISION = DESPATCH_NOTES(DIVISION) &
			/WITH=DESPATCH_NOTE = DESPATCH_NOTES(DESPATCH_NOTE) &
			/WITH=DESPATCH_LINE = DESPATCH_NOTES(DESPATCH_LINE) &
			/WITH=UNIT_OF_MEASURE = #UOM
		IF (%STATUS = %SUCCESS)
			#TOTAL_PACK_QTY = #TOTAL_PACK_QTY + DESPATCH_NOTE_QTYS(IC_QTY_IN_DESPATCH)
		END_IF
	END_BLOCK
END_FORM

PROCEDURE_FORM QTY_EXCEEDED

	BEGIN_BLOCK LOAD_EXCEEDED_ERRORS
		IF (#CALL_MODE = #CALL_MODE_I)
			!Return these values to the interactive user for display purposes
			#R_QTY_EXCEEDED		= #YES
			#R_EXCEED_PACK_QTY	= #QTY
			#R_EXCEED_PART		= SOP_DESPATCH_NOTES_VT(PART_CODE)
			#R_EXCEED_LOT		= SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER)
			#R_EXCEED_LOT_SEQ	= SOP_DESPATCH_NOTES_VT(IC_LOT_SEQUENCE)
			#R_EXCEED_BIN		= SOP_DESPATCH_NOTES_VT(BIN_LOCATION)
			#R_EXCEED_MH		= SOP_DESPATCH_NOTES_VT(MH_NUMBER)
			#R_EXCEED_QOH		= #QTY_ON_HAND
			#R_EXCEED_UNIT		= #UNIT
		ELSE
			!Load the error log for return to the Web Process
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
						("FIN","P_13311","",1,SOP_DESPATCH_NOTES_VT(DESPATCH_LINE), &
						#QTY, &
						#UNIT, &
						#QTY_ON_HAND, &
						#UNIT,SOP_DESPATCH_NOTES_VT(PART_CODE))

			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
						("FIN","P_13312","",1,SOP_DESPATCH_NOTES_VT(DESPATCH_LINE), &
						SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE), &
						SOP_DESPATCH_NOTES_VT(DESPATCH_LINE))
		END_IF
	END_BLOCK

END_FORM


PROCEDURE_FORM SALES_DESPATCH_SELECTION	&
	/TABLE=DESPATCH_NOTES &
	/LOCK=NONE &
	/WITH=COMPANY_CODE = #COMPANY_CODE &
	/WITH=DIVISION = #DIVISION &
	/WITH=DESPATCH_NOTE AMONG #SHIP_NOTES &
	/WITH=CONFIRM_DESPATCH <> #YES &
	/WITH=TM_LOAD_PLANNING <> #YES &
	/WITH=PRINT_FLAG=#YES	&
	/SORTED_BY=(DESPATCH_NOTE, DESPATCH_LINE) &
	/BREAK=SET_HEADER_STATUS,,(DESPATCH_NOTES(DESPATCH_NOTE))

	BEGIN_BLOCK INIT

		IF (#SET_STATUS_FAILED = #YES) EXIT(%FAILURE)

	END_BLOCK

	BEGIN_BLOCK LOAD_VT

		CLEAR_BUFFER SOP_DESPATCH_NOTES_VT

		SOP_DESPATCH_NOTES_VT(COMPANY_CODE)            = DESPATCH_NOTES(COMPANY_CODE)
		SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)           = DESPATCH_NOTES(DESPATCH_NOTE)
		SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)           = DESPATCH_NOTES(DESPATCH_LINE)
		SOP_DESPATCH_NOTES_VT(DESPATCH_NUMBER)         = DESPATCH_NOTES(DESPATCH_NUMBER)
		SOP_DESPATCH_NOTES_VT(DESPATCH_SEQUENCE)       = DESPATCH_NOTES(DESPATCH_SEQUENCE)
		SOP_DESPATCH_NOTES_VT(DIVISION)                = DESPATCH_NOTES(DIVISION)
		SOP_DESPATCH_NOTES_VT(ORDER_NUMBER)            = DESPATCH_NOTES(ORDER_NUMBER)
		SOP_DESPATCH_NOTES_VT(ORDER_LINE_NUMBER)       = DESPATCH_NOTES(ORDER_LINE_NUMBER)
		SOP_DESPATCH_NOTES_VT(SEQUENCE)                = DESPATCH_NOTES(SEQUENCE)
		SOP_DESPATCH_NOTES_VT(CUSTOMER_NUMBER)         = DESPATCH_NOTES(CUSTOMER_NUMBER)
		SOP_DESPATCH_NOTES_VT(MP_SHIPPING_CUSTOMER)	   = DESPATCH_NOTES(MP_SHIPPING_CUSTOMER)
		SOP_DESPATCH_NOTES_VT(DELIVERY_ADDRESS_CODE)   = DESPATCH_NOTES(DELIVERY_ADDRESS_CODE)
		SOP_DESPATCH_NOTES_VT(WAREHOUSE)               = DESPATCH_NOTES(WAREHOUSE)
		SOP_DESPATCH_NOTES_VT(PART_CODE)               = DESPATCH_NOTES(PART_CODE)
		SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER)           = DESPATCH_NOTES(IC_LOT_NUMBER)
		SOP_DESPATCH_NOTES_VT(IC_LOT_SEQUENCE)         = DESPATCH_NOTES(IC_LOT_SEQUENCE)
		SOP_DESPATCH_NOTES_VT(BIN_LOCATION)            = DESPATCH_NOTES(BIN_LOCATION)
		SOP_DESPATCH_NOTES_VT(LOCATION)                = DESPATCH_NOTES(LOCATION)
		SOP_DESPATCH_NOTES_VT(PROMISED_DATE)           = DESPATCH_NOTES(PROMISED_DATE)
		SOP_DESPATCH_NOTES_VT(REQUIRED_DATE)           = DESPATCH_NOTES(REQUIRED_DATE)
		SOP_DESPATCH_NOTES_VT(SALESPERSON_CODE)        = DESPATCH_NOTES(SALESPERSON_CODE)
		SOP_DESPATCH_NOTES_VT(SALES_ANALYSIS_GROUP)    = DESPATCH_NOTES(SALES_ANALYSIS_GROUP)
		SOP_DESPATCH_NOTES_VT(UNIT_SALES)              = DESPATCH_NOTES(UNIT_SALES)
		SOP_DESPATCH_NOTES_VT(SOP_NOMINATED_UNIT)      = DESPATCH_NOTES(SOP_NOMINATED_UNIT)
		SOP_DESPATCH_NOTES_VT(IC_PACK_UNIT)            = DESPATCH_NOTES(IC_PACK_UNIT)
		SOP_DESPATCH_NOTES_VT(IC_OTHER_INVENTORY_UNIT) = DESPATCH_NOTES(IC_OTHER_INVENTORY_UNIT)
		SOP_DESPATCH_NOTES_VT(MH_NUMBER)               = DESPATCH_NOTES(MH_NUMBER)
		SOP_DESPATCH_NOTES_VT(NONSTOCK)                = DESPATCH_NOTES(NONSTOCK)

		ADD TO SOP_DESPATCH_NOTES_VT

	END_BLOCK

END_FORM


PROCEDURE_FORM SHIPPING_DESPATCH_SELECTION	&
	/TABLE=DESPATCH_NOTES	&
	/LOCK=NONE	&
	/WITH=COMPANY_CODE = #COMPANY_CODE &
	/WITH=DIVISION = #DIVISION	&
	/WITH=CONFIRM_DESPATCH <> #YES &
	/WITH=SOP_SHIPPING_RUN_NUMBER = #SOP_SHIPPING_RUN_NUMBER &
	/WITH=SOP_LOAD_ID AMONG #SOP_LOAD_ID &
	/WITH=TM_LOAD_PLANNING = #YES	&
	/WITH=PRINT_FLAG=#YES	&
	/SORTED_BY=(SOP_SHIPPING_RUN_NUMBER, SOP_LOAD_ID, DESPATCH_NOTE, DESPATCH_LINE) &
	/BREAK=SET_HEADER_STATUS,,(DESPATCH_NOTES(DESPATCH_NOTE))

	BEGIN_BLOCK LOAD_VT

		IF (#SET_STATUS_FAILED = #YES) EXIT(%FAILURE)

		CLEAR_BUFFER SOP_DESPATCH_NOTES_VT

		SOP_DESPATCH_NOTES_VT(COMPANY_CODE)            = DESPATCH_NOTES(COMPANY_CODE)
		SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)           = DESPATCH_NOTES(DESPATCH_NOTE)
		SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)           = DESPATCH_NOTES(DESPATCH_LINE)
		SOP_DESPATCH_NOTES_VT(DESPATCH_NUMBER)         = DESPATCH_NOTES(DESPATCH_NUMBER)
		SOP_DESPATCH_NOTES_VT(DESPATCH_SEQUENCE)       = DESPATCH_NOTES(DESPATCH_SEQUENCE)

		SOP_DESPATCH_NOTES_VT(DIVISION)                = DESPATCH_NOTES(DIVISION)
		SOP_DESPATCH_NOTES_VT(ORDER_NUMBER)            = DESPATCH_NOTES(ORDER_NUMBER)
		SOP_DESPATCH_NOTES_VT(ORDER_LINE_NUMBER)       = DESPATCH_NOTES(ORDER_LINE_NUMBER)
		SOP_DESPATCH_NOTES_VT(SEQUENCE)                = DESPATCH_NOTES(SEQUENCE)
		SOP_DESPATCH_NOTES_VT(CUSTOMER_NUMBER)         = DESPATCH_NOTES(CUSTOMER_NUMBER)
		SOP_DESPATCH_NOTES_VT(MP_SHIPPING_CUSTOMER)    = DESPATCH_NOTES(MP_SHIPPING_CUSTOMER)
		SOP_DESPATCH_NOTES_VT(DELIVERY_ADDRESS_CODE)   = DESPATCH_NOTES(DELIVERY_ADDRESS_CODE)
		SOP_DESPATCH_NOTES_VT(WAREHOUSE)               = DESPATCH_NOTES(WAREHOUSE)
		SOP_DESPATCH_NOTES_VT(PART_CODE)               = DESPATCH_NOTES(PART_CODE)
		SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER)           = DESPATCH_NOTES(IC_LOT_NUMBER)
		SOP_DESPATCH_NOTES_VT(IC_LOT_SEQUENCE)         = DESPATCH_NOTES(IC_LOT_SEQUENCE)
		SOP_DESPATCH_NOTES_VT(BIN_LOCATION)            = DESPATCH_NOTES(BIN_LOCATION)
		SOP_DESPATCH_NOTES_VT(LOCATION)                = DESPATCH_NOTES(LOCATION)
		SOP_DESPATCH_NOTES_VT(PROMISED_DATE)           = DESPATCH_NOTES(PROMISED_DATE)
		SOP_DESPATCH_NOTES_VT(REQUIRED_DATE)           = DESPATCH_NOTES(REQUIRED_DATE)
		SOP_DESPATCH_NOTES_VT(SALESPERSON_CODE)        = DESPATCH_NOTES(SALESPERSON_CODE)
		SOP_DESPATCH_NOTES_VT(SALES_ANALYSIS_GROUP)    = DESPATCH_NOTES(SALES_ANALYSIS_GROUP)
		SOP_DESPATCH_NOTES_VT(UNIT_SALES)              = DESPATCH_NOTES(UNIT_SALES)
		SOP_DESPATCH_NOTES_VT(SOP_NOMINATED_UNIT)      = DESPATCH_NOTES(SOP_NOMINATED_UNIT)
		SOP_DESPATCH_NOTES_VT(IC_PACK_UNIT)            = DESPATCH_NOTES(IC_PACK_UNIT)
		SOP_DESPATCH_NOTES_VT(IC_OTHER_INVENTORY_UNIT) = DESPATCH_NOTES(IC_OTHER_INVENTORY_UNIT)
		SOP_DESPATCH_NOTES_VT(MH_NUMBER)               = DESPATCH_NOTES(MH_NUMBER)
		SOP_DESPATCH_NOTES_VT(NONSTOCK)                = DESPATCH_NOTES(NONSTOCK)
		SOP_DESPATCH_NOTES_VT(SHIPMENT_SPLIT_SEQUENCE) = DESPATCH_NOTES(SHIPMENT_SPLIT_SEQUENCE)
		SOP_DESPATCH_NOTES_VT(TM_LOAD_NUMBER)          = DESPATCH_NOTES(TM_LOAD_NUMBER)
		SOP_DESPATCH_NOTES_VT(SOP_SHIPPING_RUN_NUMBER) = DESPATCH_NOTES(SOP_SHIPPING_RUN_NUMBER)
		SOP_DESPATCH_NOTES_VT(SOP_SHIPPING_LIST_LINE)  = DESPATCH_NOTES(SOP_SHIPPING_LIST_LINE)
		SOP_DESPATCH_NOTES_VT(SHIPPING_LEG)            = DESPATCH_NOTES(SHIPPING_LEG)
		SOP_DESPATCH_NOTES_VT(SOP_LOAD_ID)             = DESPATCH_NOTES(SOP_LOAD_ID)

		ADD TO SOP_DESPATCH_NOTES_VT

	END_BLOCK

	BEGIN_BLOCK CHECK_STATUS
	END_BLOCK

END_FORM

PROCEDURE_FORM COMPARE_PICKED_QTY &
	/TABLE=SOP_DESPATCH_NOTES_VT &
	/SORTED_BY = (DIVISION, ORDER_NUMBER, ORDER_LINE_NUMBER) &
	/GROUPED_BY = (ORDER_NUMBER, ORDER_LINE_NUMBER) &
	/LOCK=NONE

	BEGIN_BLOCK DOC
	!
	! verfiy that there is enough outstanding qty on sales order line to despatch
	!
	! for each sales order/line in this despatch run:
	!       find the total qty in desaptch for this sales order/line
	!		in the nominated and pack unit (sales order/line will
	!		have one nominated and pack uom).
	!	find the order qty outstanding (don't include qty in despatch) on
	!		the sales order line
	!	if the order qty outstanding is less than the in despatch qty (from
	!		despatch notes that reference the sales order line)
	!			there is a problem
	!
	END_BLOCK

	BEGIN_BLOCK INIT
		#NOMINATED_UNIT = SOP_DESPATCH_NOTES_VT(SOP_NOMINATED_UNIT)
		#PACK_UNIT = ""
		#MSG_SEQ = SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)

		IF (SOP_DESPATCH_NOTES_VT(NONSTOCK) = #YES)
			#NOMINATED_MASK = "!-@@@@@@@@@@0.0@"
			GOTO COMPARE
		END_IF

		FIND IN PRODUCT_MASTER &
			/LOCK=NONE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=PART_CODE = SOP_DESPATCH_NOTES_VT(PART_CODE)

		IF (%STATUS <> %SUCCESS)
		PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
			("FIN", "P_52319","",1, #MSG_SEQ,"","")
			EXIT (%FAILURE)
		END_IF

		IF (PRODUCT_MASTER(IC_PACKAGED_PRODUCT) = #YES)
			#PACK_UNIT = SOP_DESPATCH_NOTES_VT(IC_PACK_UNIT)
		END_IF

		PERFORM "GEMLB:LB_GET_QUANTITY_MASK" LB_GET_QUANTITY_MASK_WS &
				(#COMPANY_CODE,		&
				 (SOP_DESPATCH_NOTES_VT(PART_CODE)), &
				 (#NOMINATED_UNIT), &
				 #NOMINATED_MASK,	&
				 #NOMINATED_DECIMALS)

		IF (%STATUS = %FAILURE)
			EXIT (%FAILURE)
		END_IF

		IF (#PACK_UNIT <> "")
			PERFORM "GEMLB:LB_GET_QUANTITY_MASK" LB_GET_QUANTITY_MASK_WS &
				(#COMPANY_CODE,		&
				 (SOP_DESPATCH_NOTES_VT(PART_CODE)), &
				 (#PACK_UNIT), &
				 #PACK_MASK,	&
				 #PACK_DECIMALS)

			IF (%STATUS = %FAILURE)
				EXIT (%FAILURE)
			END_IF
		END_IF

	END_BLOCK

	BEGIN_BLOCK DESPATCH_QTYS
		#ORDER_CLOSE			= #NO
		#TOTAL_NOMI_IN_DESPATCH_QTY	= 0
		#TOTAL_PACK_IN_DESPATCH_QTY	= 0
		PERFORM GET_DESPATCH_QTYS_FOR_SO (#TOTAL_NOMI_IN_DESPATCH_QTY, &
							#TOTAL_PACK_IN_DESPATCH_QTY)
	END_BLOCK

	BEGIN_BLOCK SHIP
		FIND IN DESPATCH_NOTES	&
			/LOCK=WRITE	&
			/WITH=COMPANY_CODE = #COMPANY_CODE	&
			/WITH=DIVISION = SOP_DESPATCH_NOTES_VT(DIVISION)	&
			/WITH=DESPATCH_NOTE = SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)	&
			/WITH=DESPATCH_LINE = SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)

		IF (DESPATCH_NOTES(SOP_DESTINATION_WAREHOUSE) = "")
			FIND IN CUSTOMERS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=CUSTOMER_NUMBER=SOP_DESPATCH_NOTES_VT(CUSTOMER_NUMBER)

			#ORDER_CLOSE 		= CUSTOMERS(SOP_ALLOW_ORDER_CLOSE)
			#SHIPPING_REQUIREMENTS	= CUSTOMERS(SHIPPING_REQUIREMENTS)
			#SHIPPING_PERCENTAGE	= CUSTOMERS(SHIPPING_PERCENTAGE)

			IF (#SHIPPING_REQUIREMENTS = PARAMETER("SHIP_FLAG_PERCENT"))
				IF (#SHIPPING_PERCENTAGE < 0)
					#SHIPPING_PERCENTAGE = 0
				ELSE_IF (#SHIPPING_PERCENTAGE > 100)
					#SHIPPING_PERCENTAGE = 100
				END_IF
			END_IF

        ELSE
            #SHIPPING_REQUIREMENTS	= ""
			#SHIPPING_PERCENTAGE	= ""
		END_IF
	END_BLOCK

	BEGIN_BLOCK SALES_QTYS
		#TOTAL_PACK_SOLQ = 0
		#TOTAL_NOMINATED_SOLQ = 0
		PERFORM GET_ORDER_QTYS(#NOMINATED_UNIT, #TOTAL_NOMINATED_SOLQ, &
				       #NOM_QTY_PROCESSED, #NOM_OVERSHIP, #MIN_NOM_QTY)
		PERFORM GET_ORDER_QTYS(#PACK_UNIT, #TOTAL_PACK_SOLQ, &
				       #PACK_QTY_PROCESSED, #PACK_OVERSHIP, #MIN_PACK_QTY)

!Subtract the portion of In Despatch that relates to this line
		#PACK_QTY_PROCESSED = #PACK_QTY_PROCESSED - #TOTAL_PACK_IN_DESPATCH_QTY
		#NOM_QTY_PROCESSED  = #NOM_QTY_PROCESSED  - #TOTAL_NOMI_IN_DESPATCH_QTY
	END_BLOCK

	BEGIN_BLOCK COMPARE
!Check Pack qty
		IF (#TOTAL_PACK_IN_DESPATCH_QTY > #TOTAL_PACK_SOLQ)
			IF (DESPATCH_NOTES(SOP_DESTINATION_WAREHOUSE) <> "" OR #ORDER_CLOSE = #YES)
				IF (#TOTAL_PACK_IN_DESPATCH_QTY + #PACK_QTY_PROCESSED > #PACK_OVERSHIP)
					! Despatch qty > Max overship qty
					#UNIT = #PACK_UNIT
					#MASK = #PACK_MASK
					#SOL_QTY = #TOTAL_PACK_SOLQ
					#DESPATCH_QTY = #TOTAL_PACK_IN_DESPATCH_QTY
					PERFORM PICKED_QTY_EXCEEDED
					EXIT (%FAILURE)
				ELSE
					GOTO END
				END_IF
			ELSE
				! Despatch qty > Outstanding Sales Order
				#UNIT = #PACK_UNIT
				#MASK = #PACK_MASK
				#SOL_QTY = #TOTAL_PACK_SOLQ
				#DESPATCH_QTY = #TOTAL_PACK_IN_DESPATCH_QTY
				PERFORM PICKED_QTY_EXCEEDED
				EXIT (%FAILURE)
			END_IF
		END_IF

		!Check Nominated qty
		IF (#TOTAL_NOMI_IN_DESPATCH_QTY > #TOTAL_NOMINATED_SOLQ)
			IF (DESPATCH_NOTES(SOP_DESTINATION_WAREHOUSE) <> "" OR #ORDER_CLOSE = #YES)
				IF (#TOTAL_NOMI_IN_DESPATCH_QTY + #NOM_QTY_PROCESSED > #NOM_OVERSHIP)
					! Despatch qty > Max overship qty
					#UNIT = #NOMINATED_UNIT
					#MASK = #NOMINATED_MASK
					#SOL_QTY = #TOTAL_NOMINATED_SOLQ
					#DESPATCH_QTY = #TOTAL_NOMI_IN_DESPATCH_QTY
					PERFORM PICKED_QTY_EXCEEDED
					EXIT (%FAILURE)
				ELSE
					GOTO END
				END_IF
			ELSE
				! Despatch qty > Outstanding Sales Order
				#UNIT = #NOMINATED_UNIT
				#MASK = #NOMINATED_MASK
				#SOL_QTY = #TOTAL_NOMINATED_SOLQ
				#DESPATCH_QTY = #TOTAL_NOMI_IN_DESPATCH_QTY
				PERFORM PICKED_QTY_EXCEEDED
				EXIT (%FAILURE)
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK CHECK_UNDERSHIP
!Check Pack qty
		IF (#TOTAL_PACK_IN_DESPATCH_QTY < #TOTAL_PACK_SOLQ)
		! Entered qty less than outstanding on sales order line
			IF ((#SHIPPING_REQUIREMENTS = PARAMETER("SHIP_FLAG_COMPLETE") OR	&
			    #SHIPPING_REQUIREMENTS = PARAMETER("SHIP_FLAG_LINE")) AND &
				(%FACILITY <> "FIN.SALES_ORDER_PROCESSING:DC_U_001"))
				! check shipping requirements - complete order and compete line
				#UNIT = #PACK_UNIT
				#MASK = #PACK_MASK
				#SOL_QTY = #TOTAL_PACK_SOLQ
				#DESPATCH_QTY = #TOTAL_PACK_IN_DESPATCH_QTY
				#UNDERSHIP_MSG = MESSAGE("P_52049")

				PERFORM PICKED_QTY_UNDERSHIP
				EXIT (%FAILURE)
			ELSE
			    ! customer shipping requirements by percent
			    IF (#SHIPPING_REQUIREMENTS = PARAMETER("SHIP_FLAG_PERCENT"))
				! calculate minimum allowable qty
				IF (#SHIPPING_PERCENTAGE > 0)
					IF (#TOTAL_PACK_IN_DESPATCH_QTY + #PACK_QTY_PROCESSED < #MIN_PACK_QTY)
						#UNIT = #PACK_UNIT
						#MASK = #PACK_MASK
						#SOL_QTY = #TOTAL_PACK_SOLQ
						#DESPATCH_QTY = #TOTAL_PACK_IN_DESPATCH_QTY
						#UNDERSHIP_MSG = MESSAGE("P_90463")

						PERFORM PICKED_QTY_UNDERSHIP
						EXIT (%FAILURE)
					END_IF
				END_IF
			    END_IF
			END_IF
		END_IF

!Check Nominated qty
		IF (#TOTAL_NOMI_IN_DESPATCH_QTY < #TOTAL_NOMINATED_SOLQ)
		! Entered qty less than outstanding on sales order line
			IF ((#SHIPPING_REQUIREMENTS = PARAMETER("SHIP_FLAG_COMPLETE") OR	&
			    #SHIPPING_REQUIREMENTS = PARAMETER("SHIP_FLAG_LINE")) AND &
				(%FACILITY <> "FIN.SALES_ORDER_PROCESSING:DC_U_001"))
				! check shipping requirements - complete order and compete line
				#UNIT = #NOMINATED_UNIT
				#MASK = #NOMINATED_MASK
				#SOL_QTY = #TOTAL_NOMINATED_SOLQ
				#DESPATCH_QTY = #TOTAL_NOMI_IN_DESPATCH_QTY
				#UNDERSHIP_MSG = MESSAGE("P_52049")

				PERFORM PICKED_QTY_UNDERSHIP
				EXIT (%FAILURE)
			ELSE
			    ! customer shipping requirements by percent
			    IF (#SHIPPING_REQUIREMENTS = PARAMETER("SHIP_FLAG_PERCENT"))
				! calculate minimum allowable qty
				IF (#SHIPPING_PERCENTAGE > 0)
					IF (#TOTAL_NOMI_IN_DESPATCH_QTY + #NOM_QTY_PROCESSED < #MIN_NOM_QTY)
						#UNIT = #NOMINATED_UNIT
						#MASK = #NOMINATED_MASK
						#SOL_QTY = #TOTAL_NOMINATED_SOLQ
						#DESPATCH_QTY = #TOTAL_NOMI_IN_DESPATCH_QTY
						#UNDERSHIP_MSG = MESSAGE("P_90463")

						PERFORM PICKED_QTY_UNDERSHIP
						EXIT (%FAILURE)
					END_IF
				END_IF
			    END_IF
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK END
	END_BLOCK
END_FORM

PROCEDURE_FORM GET_ORDER_QTYS (#UOM, #ORDER_QTY, #ORDER_QTY_PROCESSED, #MAX_OVERSHIP_QTY, #MIN_QTY) &
	/LOCK=NONE &
	/TABLE=SALES_ORDER_LINE_QTYS	&
	/WITH=COMPANY_CODE = #COMPANY_CODE &
	/WITH=DIVISION = SOP_DESPATCH_NOTES_VT(DIVISION) &
	/WITH=ORDER_NUMBER = SOP_DESPATCH_NOTES_VT(ORDER_NUMBER) &
	/WITH=ORDER_LINE_NUMBER = SOP_DESPATCH_NOTES_VT(ORDER_LINE_NUMBER)	&
	/WITH=UNIT_OF_MEASURE = #UOM

	BEGIN_BLOCK TOTAL
		#ORDER_QTY  = SALES_ORDER_LINE_QTYS(ORDER_QUANTITY_OUTSTANDING) + &
			      SALES_ORDER_LINE_QTYS(IC_QTY_IN_DESPATCH)
	END_BLOCK

	BEGIN_BLOCK GET_OVERSHIP_DETAILS
		FIND IN SALES_ORDER_LINE_DETAIL_QTYS    &
                        /LOCK=NONE      &
			/SECONDARY &
			/STREAM_NAME = QTY_PROC &
                        /WITH=COMPANY_CODE = #COMPANY_CODE      &
                        /WITH=DIVISION = SOP_DESPATCH_NOTES_VT(DIVISION)        &
                        /WITH=ORDER_NUMBER = SOP_DESPATCH_NOTES_VT(ORDER_NUMBER)        &
                        /WITH=ORDER_LINE_NUMBER = SOP_DESPATCH_NOTES_VT(ORDER_LINE_NUMBER)      &
                        /WITH=SEQUENCE = SOP_DESPATCH_NOTES_VT(SEQUENCE)        &
                        /WITH=UNIT_OF_MEASURE = #UOM

		#ORDER_QTY_PROCESSED = 	QTY_PROC:SALES_ORDER_LINE_DETAIL_QTYS(IC_QTY_PICKED) +	&
					QTY_PROC:SALES_ORDER_LINE_DETAIL_QTYS(IC_QTY_IN_DESPATCH) +	&
					QTY_PROC:SALES_ORDER_LINE_DETAIL_QTYS(QTY_DESPATCHED) +	&
					QTY_PROC:SALES_ORDER_LINE_DETAIL_QTYS(QTY_INVOICED) +	&
					QTY_PROC:SALES_ORDER_LINE_DETAIL_QTYS(IC_QTY_CLOSED)

		FIND IN PRODUCT_MASTER &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PART_CODE=SOP_DESPATCH_NOTES_VT(PART_CODE)

		IF (%STATUS<>%SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_52319","",1, #MSG_SEQ,"","")
			EXIT(%FAILURE)
		END_IF

		#MAX_OVERSHIP_QTY    =	QTY_PROC:SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY) +	&
					(QTY_PROC:SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY) * 	&
					(PRODUCT_MASTER(SOP_OVERSHIP_PERCENT) / 100))

	END_BLOCK

	BEGIN_BLOCK GET_MIN_SHIP_QTYS
		#MIN_QTY = 0
		IF (#SHIPPING_REQUIREMENTS = PARAMETER("SHIP_FLAG_PERCENT"))
			IF (#SHIPPING_PERCENTAGE > 0)
				#MIN_QTY = SALES_ORDER_LINE_QTYS(ORDER_QUANTITY) * (#SHIPPING_PERCENTAGE / 100)
			END_IF
		END_IF
	END_BLOCK
END_FORM

PROCEDURE_FORM PICKED_QTY_EXCEEDED

	BEGIN_BLOCK LOAD_EXCEEDED_ERRORS
		IF (#CALL_MODE = #CALL_MODE_I)
			!Return these values to the interactive user for display purposes
			#R_PICK_EXCEEDED	= #YES
			#R_PICK_EXCEED_DESP_QTY	= #DESPATCH_QTY
			#R_PICK_EXCEED_PART	= SOP_DESPATCH_NOTES_VT(PART_CODE)
			#R_PICK_EXCEED_SOL_QTY	= #SOL_QTY
			#R_PICK_EXCEED_UNIT	= #UNIT
		ELSE
			!Load the error log for return to the Web Process
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_13313","",1,SOP_DESPATCH_NOTES_VT(DESPATCH_LINE), &
					#DESPATCH_QTY, &
					#UNIT, &
					#SOL_QTY, &
					#UNIT, &
					SOP_DESPATCH_NOTES_VT(PART_CODE))

			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_13312","",1,SOP_DESPATCH_NOTES_VT(DESPATCH_LINE), &
					SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE),  &
					SOP_DESPATCH_NOTES_VT(DESPATCH_LINE))
		END_IF
	END_BLOCK
END_FORM

PROCEDURE_FORM PICKED_QTY_UNDERSHIP

	BEGIN_BLOCK LOAD_EXCEEDED_ERRORS
		IF (#CALL_MODE = #CALL_MODE_I)
			!Return these values to the interactive user for display purposes
			#R_UNDERSHIP		= #YES
			#R_UNDERSHIP_DESP_QTY	= #DESPATCH_QTY
			#R_UNDERSHIP_PART	= SOP_DESPATCH_NOTES_VT(PART_CODE)
			#R_UNDERSHIP_SOL_QTY	= #SOL_QTY
			#R_UNDERSHIP_UNIT	= #UNIT
		ELSE
			!Load the error log for return to the Web Process
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_13314","",1,SOP_DESPATCH_NOTES_VT(DESPATCH_LINE), &
					#DESPATCH_QTY, &
					#UNIT, &
					#SOL_QTY, &
					#UNIT, &
					SOP_DESPATCH_NOTES_VT(PART_CODE))

			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_13312","",1,SOP_DESPATCH_NOTES_VT(DESPATCH_LINE), &
					SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE),  &
					SOP_DESPATCH_NOTES_VT(DESPATCH_LINE))

		END_IF
	END_BLOCK

END_FORM

PROCEDURE_FORM SETUP_RUN &
	/TABLE=DESPATCH_NOTES &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION=#DIVISION &
	/WITH=DESPATCH_NUMBER=#DESPATCH_NUMBER &
	/WITH=DESPATCH_NOTE AMONG #SHIP_NOTES &
	/WITH=CONFIRM_DESPATCH = #NO &
	/WITH=PRINT_FLAG= #YES &
	/WITH=WAREHOUSE AMONG #ACCESSIBLE_WAREHOUSES &
	/WITH=WAREHOUSED_FLAG = #NO &
	/SELECTION="A AND B AND C AND D AND E AND F AND (G OR H)"

	BEGIN_BLOCK STATUS
		IF (DESPATCH_NOTES(NONSTOCK)=#NO)
			FIND IN PRODUCT_MASTER &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=PART_CODE=DESPATCH_NOTES(PART_CODE)
			IF (%STATUS<>%SUCCESS)
				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_52319","",1, 0,"","")
				EXIT(%FAILURE)
			END_IF
			IF (PRODUCT_MASTER(WAREHOUSED_FLAG)= #YES)
				FIND IN PRODUCT_WAREHOUSE &
					/LOCK=NONE &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=WAREHOUSE=DESPATCH_NOTES(WAREHOUSE) &
					/WITH=PART_CODE=DESPATCH_NOTES(PART_CODE)
				IF (%STATUS<>%SUCCESS)
				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_52321","",1, 0,"","")
					EXIT(%FAILURE)
				END_IF
			END_IF

			DESPATCH_NOTES(BATCH_FLAG)=PRODUCT_MASTER(BATCHES_EXIST)
			IF (PRODUCT_MASTER(BATCHES_AT_DESPATCH_CONFIRM) = #YES &
				AND DESPATCH_NOTES(BATCH_FLAG) = #YES)
				DESPATCH_NOTES(STATUS_FLAG) = "*"
			END_IF
		END_IF

	END_BLOCK
END_FORM


PROCEDURE_FORM VALIDATE_BATCH &
	/TABLE=DESPATCH_NOTES &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION=#DIVISION &
	/WITH=DESPATCH_NUMBER=#DESPATCH_NUMBER &
	/WITH=DESPATCH_NOTE AMONG #SHIP_NOTES &
	/WITH=STATUS_FLAG = "*"

END_FORM


PROCEDURE_FORM DESPATCH

	BEGIN_BLOCK SETUP

		#TOTAL_NOM_QTY_DESPATCHED   = 0
		#TOTAL_PACK_QTY_DESPATCHED  = 0
		#TOTAL_OTHER_QTY_DESPATCHED = 0
		#TRAN_STATUS                = ""
		#IC_STATUS_CODE             = PARAMETER("IC_STATUS_QOH")
		#FIELD                      = PARAMETER("IC_QUANTITY")
		#FIRST_TM_LOAD              = #YES
		#FIRST_SHIPMENT_DETAIL      = #YES
		#SOP_SHIPPING_RUN_NUMBER    = ""
		#SOP_SHIPPING_LIST_LINE     = ""
		#SHIPMENT_SPLIT_SEQUENCE    = ""
		#SHIPPING_LEG               = ""
		#TM_LOAD_NUMBER             = ""
		#TM_AP_DIVISION             = ""

		IF (#SHIPPING_DESPATCH = #YES)
			PERFORM DEFINE_VT
			PERFORM INITIALIZE_LOAD
			PERFORM INITIALIZE_SHIPMENT_DETAIL
		END_IF

		IF (#CALL_MODE = #CALL_MODE_I AND #BATCH_PROCESS <> #YES)
			PERFORM "GEMLB:LB_L_SIGNATURE" USE_ESIG_RECALL
		END_IF

		! Process records in SOP_DESPATCH_NOTES_VT
		! Make inventory movements

		#LINE_ERROR = #NO
		#MSG_SEQ    = 0
		#JUST_SHOW_MESSAGE=0
		PERFORM UPDATE_QTY_DESPATCHED

		IF (%STATUS <> %SUCCESS OR #TRAN_STATUS = PARAMETER("STATUS_FAIL") OR #JUST_SHOW_MESSAGE=1)
			EXIT (%FAILURE)
		END_IF

		IF (#LINE_ERROR = #YES)
			EXIT (%FAILURE)
		END_IF

	END_BLOCK

	BEGIN_BLOCK CLOSE_THE_ORDERS
		PERFORM CLOSE_ORDER
	END_BLOCK

	!Change 001
	BEGIN_BLOCK VOL_SET_PARAMETERS
		#TRACKED_HARDWARE_GROUPS = PARAMETER("VOL_TRACKED_HARDWARE_GROUPS")
		#MODULE_PM = PARAMETER("MODULE_PM") 
		#MOVE_PMMC = PARAMETER("IC_MOVEMENT_PMMC")
		#MOVE_PMJC = PARAMETER("IC_MOVEMENT_PMJC")
		#PREPAID_CHARGES_CODE = PARAMETER("VOL_PREPAID_CHARGE_CODES")

		#VOL_TTYPE_DEP = PARAMETER("VOL_TTYPE_DEP")
		#VOL_TTYPE_PPD = PARAMETER("VOL_TTYPE_PPD")


		#VOL_LOT_CHAR_OWNER = PARAMETER("VOL_LOT_CHAR_OWNER_VOLTAIX")
		#VOL_CYL_COUNT_CHAR = PARAMETER("VOL_CYL_COUNT_CHAR")
	END_BLOCK
	!Change 001 End

	!Change 001
	BEGIN_BLOCK VOL_CYLINDERS
	
		PERFORM VOL_CYLINDERS
		IF (%STATUS <> %SUCCESS)
			EXIT (%FAILURE)
		END_IF
	END_BLOCK
	!Change 001 End
	
END_FORM


PROCEDURE_FORM UPDATE_QTY_DESPATCHED &
	/TABLE=SOP_DESPATCH_NOTES_VT &
	/LOCK=NONE &
	/COMMIT_RATE=1	&
	/SORTED_BY=(MP_SHIPPING_CUSTOMER, SOP_LOAD_ID, TM_LOAD_NUMBER, DESPATCH_NOTE, ORDER_NUMBER, 	&
			SHIPPING_LEG, SOP_SHIPPING_LIST_LINE, SHIPMENT_SPLIT_SEQUENCE, DESPATCH_LINE) &
	/BREAK0=,FINISH_TM    

	BEGIN_BLOCK CLEAR_IC_VTS

		PERFORM DELETE_ALL_FROM_IC_ENGINE_VT
		PERFORM DELETE_ALL_FROM_IC_ENGINE_DETAILS_VT
		PERFORM DELETE_ALL_FROM_IC_ATP_VT

		#COMPANY_CODE = SOP_DESPATCH_NOTES_VT(COMPANY_CODE)
		#DIVISION     = SOP_DESPATCH_NOTES_VT(DIVISION)
		#MSG_SEQ      = SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)
		
		IF(#JUST_SHOW_MESSAGE=1)
		PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_37219","",1,#MSG_SEQ,SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE),SOP_DESPATCH_NOTES_VT(DESPATCH_LINE))
				#JUST_SHOW_MESSAGE=1
			GOTO END
		END_IF

		START_TRANSACTION

		FIND IN COMPANY_CONTROLS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE

		IF (%STATUS <> %SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" ("FIN","P_00139","",1,#MSG_SEQ)
			ROLLBACK
			GOTO END
		END_IF

		#ATP_IN_USE = COMPANY_CONTROLS(ATP_IN_USE)

		FIND IN TM_CONTROLS &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOCK=NONE

		IF (%STATUS = %SUCCESS)
			#TM_TRANSFER_SHIPPING_TERMS = TM_CONTROLS(SYS_TRANSFER_SHIPPING_TERMS)
		ELSE
			#TM_TRANSFER_SHIPPING_TERMS = ""
		END_IF

		! Find the audit code for despatch to determine whether a history
		! record should be written and store the description.
		PERFORM CHECK_HISTORY_CODE

		COMMIT

	END_BLOCK

	BEGIN_BLOCK START_TRANS

		START_TRANSACTION
		#TRAN_STATUS = ""

		!Write Start message
		PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
			("FIN","P_12778","",0,#MSG_SEQ,&
			SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE),&
			SOP_DESPATCH_NOTES_VT(DESPATCH_LINE))

	END_BLOCK

	BEGIN_BLOCK BEFORE_IC_LEG
		! Set #RELEASE_TO_INVOICING property
		PERFORM BEFORE_IC_LEG
	END_BLOCK

	BEGIN_BLOCK DESPATCH

		FIND IN DESPATCH_NOTES	&
			/LOCK=WRITE	&
			/WITH=COMPANY_CODE = #COMPANY_CODE	&
			/WITH=DIVISION = SOP_DESPATCH_NOTES_VT(DIVISION)	&
			/WITH=DESPATCH_NOTE = SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)	&
			/WITH=DESPATCH_LINE = SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)

		IF (%STATUS <> %SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_13304","",1, #MSG_SEQ,(SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)),&
				(SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)))
			ROLLBACK
			#LINE_ERROR = #YES
			! Read next record from SOP_DESPATCH_NOTES_VT
			GOTO END
		END_IF

		#DESPATCH_NUMBER = DESPATCH_NOTES(DESPATCH_NUMBER)
		#IC_LOT_NUMBER   = SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER)
		#IC_LOT_SEQUENCE = SOP_DESPATCH_NOTES_VT(IC_LOT_SEQUENCE)
		#BIN_LOCATION    = SOP_DESPATCH_NOTES_VT(BIN_LOCATION)
		#MH_NUMBER       = SOP_DESPATCH_NOTES_VT(MH_NUMBER)

		PERFORM GET_IN_DESPATCH_QTY((DESPATCH_NOTES(UNIT_SALES)),#SALES_QTY_DESPATCHED)

		#SALES_UNIT = DESPATCH_NOTES(UNIT_SALES)

		PERFORM GET_IN_DESPATCH_QTY((DESPATCH_NOTES(SOP_NOMINATED_UNIT)),#NOMINATED_QTY_DESPATCHED)

		#NOMINATED_UNIT      = DESPATCH_NOTES(SOP_NOMINATED_UNIT)
		#PACK_QTY_DESPATCHED = 0.0
		#PACK_UNIT           = ""

		PERFORM GET_IN_DESPATCH_QTY((DESPATCH_NOTES(IC_OTHER_INVENTORY_UNIT)),#OTHER_QTY_DESPATCHED)

		#OTHER_UNIT = DESPATCH_NOTES(IC_OTHER_INVENTORY_UNIT)

		FIND IN SALES_ORDER_LINES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=ORDER_NUMBER=SOP_DESPATCH_NOTES_VT(ORDER_NUMBER) &
			/WITH=ORDER_LINE_NUMBER=SOP_DESPATCH_NOTES_VT(ORDER_LINE_NUMBER)

		PERFORM GET_IN_DESPATCH_QTY((SALES_ORDER_LINES(UNIT_PRICE)),#PRICE_QTY_DESPATCHED)

		IF (%STATUS<>%SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_52360","",1,#MSG_SEQ,"","")
			ROLLBACK
			#LINE_ERROR = #YES
			! Read next record from SOP_DESPATCH_NOTES_VT
			GOTO END
		END_IF

		IF (SOP_DESPATCH_NOTES_VT(NONSTOCK) = #YES)
			GOTO CREDIT_CHECK
		END_IF

		FIND IN PRODUCT_MASTER &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PART_CODE=SOP_DESPATCH_NOTES_VT(PART_CODE)

		IF (%STATUS<>%SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_52320","",1,#MSG_SEQ,"","")
			ROLLBACK
			#LINE_ERROR = #YES
			! Read next record from SOP_DESPATCH_NOTES_VT
			GOTO END
		END_IF
		! Unable to locate part master, means we cannot update
		! despatch to despatch, so we must exit.
		
		#WAREHOUSED_FLAG = PRODUCT_MASTER(WAREHOUSED_FLAG)

		IF (PRODUCT_MASTER(IC_PACKAGED_PRODUCT) = #YES)
			PERFORM GET_IN_DESPATCH_QTY( (DESPATCH_NOTES(IC_PACK_UNIT)),#PACK_QTY_DESPATCHED)
			#PACK_UNIT = DESPATCH_NOTES(IC_PACK_UNIT)
		END_IF

		#COST_CENTER=SALES_ORDER_LINES(COST_CENTER)

		IF (PRODUCT_MASTER(WAREHOUSED_FLAG) <> #YES)
			PERFORM COST_UPDATE
			IF (%STATUS=%FAILURE)
				ROLLBACK
				#LINE_ERROR = #YES
				! Read next record from SOP_DESPATCH_NOTES_VT
				GOTO END
			END_IF
			! skip any processing associated with warehouse
			GOTO CREDIT_CHECK
		END_IF

		FIND IN PRODUCT_WAREHOUSE &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=WAREHOUSE=SOP_DESPATCH_NOTES_VT(WAREHOUSE) &
			/WITH=PART_CODE=SOP_DESPATCH_NOTES_VT(PART_CODE)

		IF (%STATUS<>%SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_52322","",1,#MSG_SEQ,"","")
			ROLLBACK
			#LINE_ERROR = #YES
			! Read next record from SOP_DESPATCH_NOTES_VT
			GOTO END
		END_IF

		FIND IN WAREHOUSE_CONTROLS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=WAREHOUSE=SOP_DESPATCH_NOTES_VT(WAREHOUSE)

		IF (%STATUS<>%SUCCESS)
			! Unable to locate part master, means we cannot update
			! despatch to despatch, so we must exit.
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_52322","",1,#MSG_SEQ,"","")
			ROLLBACK
			#LINE_ERROR = #YES
			! Read next record from SOP_DESPATCH_NOTES_VT
			GOTO END
		END_IF

		#AUTO_BATCHES            = WAREHOUSE_CONTROLS(AUTO_NUMBER_BATCHES_FLAG)
		#TRANSFER_COST_IN_USE    = WAREHOUSE_CONTROLS(TRANSFER_COST_IN_USE)

		#PART_CODE               = PRODUCT_WAREHOUSE(PART_CODE)
		#IC_MHU_TYPE             = PRODUCT_WAREHOUSE(IC_MHU_TYPE)

		#IC_CHARACTERISTIC_COUNT = PRODUCT_MASTER(IC_CHARACTERISTIC_COUNT)
		#IC_PACKAGED_PRODUCT     = PRODUCT_MASTER(IC_PACKAGED_PRODUCT)
		#IC_PRODUCT_UOM_CONTROL  = PRODUCT_MASTER(IC_PRODUCT_UOM_CONTROL)
		#IC_UNIT_CAPACITY        = PRODUCT_MASTER(IC_UNIT_CAPACITY)
		#IC_UNIT_REQUIRE         = PRODUCT_MASTER(IC_UNIT_REQUIRE)
		#BATCH_EXPIRY            = PRODUCT_MASTER(BATCH_EXPIRY)
		#CHARACTERISTICS_AT_ORDER_ENTRY = PRODUCT_MASTER(CHARACTERISTICS_AT_ORDER_ENTRY)

		IF (PRODUCT_MASTER(BATCH_REPLENISH_ALLOWED) <> #YES)
			#BATCH_TYPE = #NO
		ELSE
			#BATCH_TYPE = (PARAMETER("BATCH_REPLENISH"))
		END_IF

		IF (#IC_MHU_TYPE <> #IC_MHU_NONE)
			#MH_IN_USE = #YES
		ELSE
			#MH_IN_USE = #NO
		END_IF
 		IF (SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER) <> "")
			FIND IN PART_BATCHES &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=WAREHOUSE=SOP_DESPATCH_NOTES_VT(WAREHOUSE) &
				/WITH=PART_CODE=SOP_DESPATCH_NOTES_VT(PART_CODE) &
				/WITH=IC_LOT_NUMBER=SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER)

			IF (%STATUS = %FAILURE)
				! Unable to locate lot, means we cannot update
				! despatch to despatch, so we must exit.
				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_90958","",1,#MSG_SEQ,"","")
				ROLLBACK
				#LINE_ERROR = #YES
				! Read next record from SOP_DESPATCH_NOTES_VT
				GOTO END
			END_IF
			#BEST_BEFORE_DATE     = PART_BATCHES(BEST_BEFORE_DATE)
			#EXPIRY_DATE          = PART_BATCHES(BATCH_DATE)
			#RETEST_DATE          = PART_BATCHES(IC_RETEST_DATE)
			#IC_VENDOR_LOT_NUMBER = PART_BATCHES(IC_VENDOR_LOT_NUMBER)
			#PART_CODE            = PART_BATCHES(PART_CODE)
			! This read of the part code field is not strictly necessary,
			! it has been placed here to force a lock of the record.
			!
		ELSE
			CLEAR_BUFFER PART_BATCHES
		END_IF

		IF (DESPATCH_NOTES(BIN_SIZING) = #YES)
			FIND IN BIN_LOCATION_DETAILS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=WAREHOUSE=SOP_DESPATCH_NOTES_VT(WAREHOUSE) &
				/WITH=PART_CODE=SOP_DESPATCH_NOTES_VT(PART_CODE) &
				/WITH=IC_LOT_NUMBER=SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER) &
				/WITH=BIN_LOCATION=SOP_DESPATCH_NOTES_VT(BIN_LOCATION)

			IF (%STATUS = %FAILURE AND (#SALES_QTY_DESPATCHED <> 0 OR #NOMINATED_QTY_DESPATCHED <> 0 OR #OTHER_QTY_DESPATCHED <> 0))
				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_90341","",1,#MSG_SEQ,(SOP_DESPATCH_NOTES_VT(BIN_LOCATION)),"")
				ROLLBACK
				#LINE_ERROR = #YES
				! Read next record from SOP_DESPATCH_NOTES_VT
				GOTO END
			END_IF
			! Unable to locate exact bin locations, means we cannot
			! reduce the qty in bin, exit.
			#PART_CODE = BIN_LOCATION_DETAILS(PART_CODE)
			! This read of the part code field is not strictly necessary,
			! it has been placed here to force a lock of the record.
			!
		ELSE
			CLEAR_BUFFER BIN_LOCATION_DETAILS
		END_IF
	END_BLOCK

	BEGIN_BLOCK CREDIT_CHECK

		IF (SALES_ORDER_LINES(ORDER_LINE_TYPE) = PARAMETER("LINE_TYPE_STOCK"))
			PERFORM "GEMLB:SOP_L_SALES_PRICE_QTY" &
				(#COMPANY_CODE, &
				(SOP_DESPATCH_NOTES_VT(PART_CODE)), &
				(SOP_DESPATCH_NOTES_VT(WAREHOUSE)), &
				(SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER)),	&
				#SALES_UNIT, &
				#SALES_QTY_DESPATCHED, &
				#NOMINATED_UNIT, &
				#NOMINATED_QTY_DESPATCHED, &
				#OTHER_UNIT, &
				#OTHER_QTY_DESPATCHED, &
				(SALES_ORDER_LINES(UNIT_PRICE)), &
				(SALES_ORDER_LINES(SOP_NOMINATED_PRICE_UNIT)), &
				"", &
				"", &
				#PRICE_QTY, &
				#PQ_STATUS, &
				#PQ_MESSAGE)

			IF (#PQ_STATUS = #NO)
				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","",#PQ_MESSAGE,1,#MSG_SEQ,"","")
				ROLLBACK
				#LINE_ERROR = #YES
				! Read next record from SOP_DESPATCH_NOTES_VT
				GOTO END
			END_IF
			#VALUE = #PRICE_QTY * DESPATCH_NOTES(SALES_PRICE)
		ELSE
			#VALUE = #SALES_QTY_DESPATCHED * DESPATCH_NOTES(SALES_PRICE)
		END_IF

 		#OLD_DESP_VALUE = DESPATCH_NOTES(DESPATCH_VALUE)

 		DESPATCH_NOTES(DESPATCH_VALUE) = #VALUE

 		! At this point the credit limit check should determine whether or not
		! the customer is within his limits before this despatch is performed.
		#CREDIT_STATUS_CODE=""

        ! Convert to base currency for checking against credit limit

	        FIND IN SYS_CURRENCY_CODES &
				/LOCK=NONE &
				/WITH=SYS_CURRENCY_CODE=DESPATCH_NOTES(SYS_BASE_CURRENCY)

        	IF (%STATUS = %FAILURE)
				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_82400","",1,#MSG_SEQ,"","")
				ROLLBACK
				#LINE_ERROR = #YES
				! Read next record from SOP_DESPATCH_NOTES_VT
				GOTO END
	       	END_IF

		#BASE_CURRENCY_DECIMAL = SYS_CURRENCY_CODES(SYS_CURRENCY_DECIMALS)
		#CURRENCY_RATE         = DESPATCH_NOTES(SYS_CURRENCY_RATE)
		#RATIO_INDIC           = DESPATCH_NOTES(SYS_CURRENCY_RATIO_INDIC)

		FIND IN AR_CONTROLS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=DESPATCH_NOTES(DIVISION)

		IF (%STATUS <> %SUCCESS)
			! "Invalid division !AS"
			#ERR_MSG = "P_02791"
			#LIN_SEQ = 0
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN",#ERR_MSG,"",#ERR_MSG_FATAL,#LIN_SEQ,#DIVISION)
			ROLLBACK
			#LINE_ERROR = #YES
			! Read next record from SOP_DESPATCH_NOTES_VT
			GOTO END
		END_IF

		IF (AR_CONTROLS(SOP_ACTIVE) <> #YES)
			! "Division is not activated"
			#ERR_MSG = "P_00243"
			#LIN_SEQ = 0
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN",#ERR_MSG,"",#ERR_MSG_FATAL,#LIN_SEQ)
			ROLLBACK
			#LINE_ERROR = #YES
			! Read next record from SOP_DESPATCH_NOTES_VT
			GOTO END
		END_IF

		!***  use new currency object

		#CURRENCY_METHOD = AR_CONTROLS(SYS_CURRENCY_METHOD)

		IF (#CURRENCY_METHOD > '0')
			IF (#RATIO_INDIC = (PARAMETER("MULTIPLY_RATIO_INDIC")))
				#VALUE_BASE = ROUND(#VALUE * #CURRENCY_RATE, #BASE_CURRENCY_DECIMAL)
				#OLD_DESP_VALUE_BASE = ROUND(#OLD_DESP_VALUE * #CURRENCY_RATE,#BASE_CURRENCY_DECIMAL)
			ELSE
				#VALUE_BASE = ROUND(#VALUE / #CURRENCY_RATE, #BASE_CURRENCY_DECIMAL)
				#OLD_DESP_VALUE_BASE = ROUND(#OLD_DESP_VALUE / #CURRENCY_RATE,#BASE_CURRENCY_DECIMAL)
			END_IF
		ELSE
			#VALUE_BASE          = #VALUE
			#OLD_DESP_VALUE_BASE = #OLD_DESP_VALUE
		END_IF

		IF (DESPATCH_NOTES(SOP_DESTINATION_WAREHOUSE) <> "")
		!***  skip if transfer order
			GOTO ADD_HISTORY
		END_IF

		FIND IN CUSTOMERS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=CUSTOMER_NUMBER=DESPATCH_NOTES(CUSTOMER_NUMBER)

		PERFORM "GEMLB:SOP_L_CREDIT_LIMITS" &
				(#COMPANY_CODE, &
				 #DIVISION, &
				 (DESPATCH_NOTES(CUSTOMER_NUMBER)), &
				 #VALUE_BASE, &
				 (PARAMETER("SOP_STAGE_DESPATCH")), &
				 #OLD_DESP_VALUE_BASE, &
				 "MODIFY", &
				 #NO, &
				 "", &
				 "", &
				 #ACTION, &
				 #MAN_AUTO, &
				 #CREDIT_STATUS_CODE, &
				 #MESSAGE, &
				 "")

		IF (%STATUS = %FAILURE)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","",#MESSAGE,1,#MSG_SEQ,"","")
			ROLLBACK
			#LINE_ERROR = #YES
			! Read next record from SOP_DESPATCH_NOTES_VT
			GOTO END
		END_IF

		IF (#ACTION = (PARAMETER("CREDIT_OK"))) GOTO ADD_HISTORY

		IF (#ACTION = (PARAMETER("CREDIT_REJECT")))
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","",#MESSAGE,1,#MSG_SEQ,"","")
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_52266","",1,#MSG_SEQ,"","")

			#DESPATCH_QTY = 0
			ROLLBACK
			#LINE_ERROR = #YES
			! Read next record from SOP_DESPATCH_NOTES_VT
			GOTO END
		END_IF

		IF (#ACTION = (PARAMETER("CREDIT_HOLD")))
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","",#MESSAGE,1,#MSG_SEQ,"","")
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_52266","",1,#MSG_SEQ,"","")

			#DESPATCH_QTY = 0
			ROLLBACK
			#LINE_ERROR = #YES
			! Read next record from SOP_DESPATCH_NOTES_VT
			GOTO END
		END_IF

		IF (#ACTION = (PARAMETER("CREDIT_WARN")))
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","",#MESSAGE,2,#MSG_SEQ,"","")
		END_IF
	END_BLOCK

	BEGIN_BLOCK ADD_HISTORY

		IF (#HISTORY = #YES)
			CLEAR_BUFFER SALES_ORDER_HISTORY

			SALES_ORDER_HISTORY(COMPANY_CODE)      = #COMPANY_CODE
			SALES_ORDER_HISTORY(DIVISION)          = #DIVISION
			SALES_ORDER_HISTORY(ORDER_NUMBER)      = SOP_DESPATCH_NOTES_VT(ORDER_NUMBER)
			SALES_ORDER_HISTORY(ORDER_LINE_NUMBER) = SOP_DESPATCH_NOTES_VT(ORDER_LINE_NUMBER)
			SALES_ORDER_HISTORY(CREATION_DATE)     = %NOW
			SALES_ORDER_HISTORY(ORDER_AUDIT_CODE)  = (PARAMETER("AUDIT_CHANGE_CODE_DESPATCH"))
			SALES_ORDER_HISTORY(DESCRIPTION)       = #DESC_AUDIT
			SALES_ORDER_HISTORY(USER_ID)           = #USER_ID
			SALES_ORDER_HISTORY(PART_CODE)         = SOP_DESPATCH_NOTES_VT(PART_CODE)
			SALES_ORDER_HISTORY(WAREHOUSE)         = SOP_DESPATCH_NOTES_VT(WAREHOUSE)
			SALES_ORDER_HISTORY(IC_LOT_NUMBER)     = SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER)
			SALES_ORDER_HISTORY(MOVEMENT_QTY)      = #SALES_QTY_DESPATCHED
			SALES_ORDER_HISTORY(CUSTOMER_NUMBER)   = SOP_DESPATCH_NOTES_VT(CUSTOMER_NUMBER)

			ADD TO SALES_ORDER_HISTORY
		END_IF

	END_BLOCK

	BEGIN_BLOCK READ_HEADER
		FIND IN SALES_ORDER_HEADERS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=SOP_DESPATCH_NOTES_VT(DIVISION) &
			/WITH=ORDER_NUMBER=SOP_DESPATCH_NOTES_VT(ORDER_NUMBER)

		IF (%STATUS<>%SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_52188","",1,#MSG_SEQ,"","")
			ROLLBACK
			#LINE_ERROR = #YES
			! Read next record from SOP_DESPATCH_NOTES_VT
			GOTO END
		END_IF

		#SYS_CURRENCY_CODE = SALES_ORDER_HEADERS(SYS_CURRENCY_CODE)
		#SYS_CURRENCY_RATE = SALES_ORDER_HEADERS(SYS_CURRENCY_RATE)

		DESPATCH_NOTES(CONFIRM_DESPATCH) = #YES
		IF (DESPATCH_NOTES(NONSTOCK) = #YES OR #WAREHOUSED_FLAG <> #YES)
			GOTO ORDER_QTYS
		END_IF
	END_BLOCK

	BEGIN_BLOCK CREATE_BIN_RECORD

		#PART_CODE           = SOP_DESPATCH_NOTES_VT(PART_CODE)				
		#YEAR                = WAREHOUSE_CONTROLS(YEAR)
		#PERIOD              = WAREHOUSE_CONTROLS(PERIOD)
		#DEBIT_ACC           = PRODUCT_WAREHOUSE(GL_COS)
		#DEBIT_CODE          = PRODUCT_WAREHOUSE(GL_COS_CODE)
		#DOC_REFERENCE       = DESPATCH_NOTES(DESPATCH_NOTE) & "-" & DESPATCH_NOTES(DESPATCH_LINE)

		PERFORM 'GEMIC:IC_L_COSTING_METHOD'(#COMPANY_CODE,#PART_CODE,SOP_DESPATCH_NOTES_VT(WAREHOUSE),#R1,#R2,#R3)
		IF(%STATUS = %SUCCESS)
			#WH_VALUATION_METHOD = #R1
		ELSE
			MESSAGE/IDENTIFIER/BELL/WAIT #R3, (SOP_DESPATCH_NOTES_VT(WAREHOUSE)), #PART_CODE
			EXIT(%FAILURE)
		END_IF
		
		PERFORM SET_MP_INFO (SOP_DESPATCH_NOTES_VT(ORDER_NUMBER), SOP_DESPATCH_NOTES_VT(ORDER_LINE_NUMBER), #MP_GIFT_OR_BOGO)

		IF (#MP_GIFT_OR_BOGO = #YES)
			PERFORM SET_DEBIT_ACCT( #DEBIT_ACC, #DEBIT_CODE)
		END_IF

		#INV_ASSET_ACC      = ""
		#INV_ASSET_CODE     = ""
		#XFER_COST_ADJ_ACC  = ""
		#XFER_COST_ADJ_CODE = ""

		IF (#RELEASE_TO_INVOICING <> #YES)
			PERFORM GET_DR_MOVEMENT_INFO
			IF (%STATUS = %FAILURE)
				#DEBIT_ACC = PRODUCT_WAREHOUSE(GL_COS)
				#DEBIT_CODE = PRODUCT_WAREHOUSE(GL_COS_CODE)
			END_IF
		END_IF

		IF (#NOMINATED_QTY_DESPATCHED <> '0')
			IF (DESPATCH_NOTES(BIN_SIZING) = #YES)
				PERFORM FILL_IC_ENGINE_DETAILS_VT (#IC_RECORD_BIN_MHU)
			END_IF
		END_IF

		#TOTAL_NOM_QTY_DESPATCHED = #TOTAL_NOM_QTY_DESPATCHED + &
									#NOMINATED_QTY_DESPATCHED
		#TOTAL_PACK_QTY_DESPATCHED = #TOTAL_PACK_QTY_DESPATCHED + &
									#PACK_QTY_DESPATCHED
		#TOTAL_OTHER_QTY_DESPATCHED = #TOTAL_OTHER_QTY_DESPATCHED + &
									#OTHER_QTY_DESPATCHED
	END_BLOCK

	BEGIN_BLOCK INVENTORY
		PERFORM CALL_ENGINE
		IF (%STATUS <> %SUCCESS OR #TRAN_STATUS = PARAMETER("STATUS_FAIL"))
			ROLLBACK
			! must exit failure, otherwise rollback is only a partial roll back, and commit_rate on this form
			! will cause partial commit on lot and product status, even if bin update failed, causing status
			! records to become out of sync; therefore, even though failure will cause subsequent despatch note
			! lines to not be processed, must abort with a complete rollback; therefore exit (%failure) is required.
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_37219","",1,#MSG_SEQ,SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE),SOP_DESPATCH_NOTES_VT(DESPATCH_LINE))
				#JUST_SHOW_MESSAGE=1
			GOTO END
		END_IF
		! set the ATP qty - determined in CALL_ENGINE
		DESPATCH_NOTES(IC_ATP_QTY_PROMISED) = #ATP_MOVE_QTY
	END_BLOCK

	BEGIN_BLOCK ATP
		FIND IN IC_ATP_VT
		IF (%STATUS = %SUCCESS)
			PERFORM UPDATE_ATP_QTYS
			IF (%STATUS = %FAILURE)
				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_91532","",1,#MSG_SEQ,"","")
				ROLLBACK
				#LINE_ERROR = #YES
				! must exit failure, otherwise rollback is only a partial roll back, and commit_rate on this form
				! will cause partial commit on inventory status, causing status
				! records to become out of sync; therefore, even though failure will cause subsequent despatch note
				! lines to not be processed, must abort with a complete rollback; therefore exit (%failure) is required.
				EXIT (%FAILURE)
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK ORDER_QTYS
		PERFORM UPDATE_ORDER_QTYS
		IF (%STATUS <> %SUCCESS OR #TRAN_STATUS = PARAMETER("STATUS_FAIL"))
			ROLLBACK
			#LINE_ERROR = #YES
			! Read next record from SOP_DESPATCH_NOTES_VT
			GOTO END
		END_IF
	END_BLOCK

	BEGIN_BLOCK MSDS
		IF (#DESPATCH_QTY > 0 OR #NOMINATED_QTY_DESPATCHED > 0)
			PERFORM 'GEMSOP:SOP_L_MSDS' UPDATE( &
				(PARAMETER("SOP_ORDER_CYCLE_B")), &
				(#COMPANY_CODE), &
				(#DIVISION), &
				(#DESPATCH_NUMBER), &
				(DESPATCH_NOTES(DESPATCH_NOTE)), &
				(DESPATCH_NOTES(CUSTOMER_NUMBER)), &
				(DESPATCH_NOTES(DELIVERY_ADDRESS_CODE)), &
				(DESPATCH_NOTES(PART_CODE)), #CALL_MODE)
		END_IF
	END_BLOCK

	BEGIN_BLOCK PROCESS_TM
		IF (#SHIPPING_DESPATCH = #YES)
			#DESPATCH_NOTES_AP_DIVISION	= DESPATCH_NOTES(AP_DIVISION)
			PERFORM UPDATE_SHIPMENT_LOAD
			IF (%STATUS <> %SUCCESS)
				ROLLBACK
				#LINE_ERROR = #YES
				! Read next record from SOP_DESPATCH_NOTES_VT
				GOTO END
			END_IF
		END_IF
	END_BLOCK
	
	BEGIN_BLOCK DC_UPDATE
	 
	   IF ( #DC_ENTRY = #YES ) 
	   	  PERFORM UPDATE_LPN
	   END_IF
	   
	   IF ( %STATUS <> %SUCCESS ) 
	   	   ROLLBACK 
		   GOTO END
	   END_IF  
	
	END_BLOCK 
	
	BEGIN_BLOCK FINISH

		DESPATCH_NOTES(TM_RELEASE_TO_INVOICE)	= #RELEASE_TO_INVOICING

		! Write Successful message

		PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
			("FIN","P_13316","",0,#MSG_SEQ,&
			DESPATCH_NOTES(DESPATCH_NOTE),&
			DESPATCH_NOTES(DESPATCH_LINE))

		IF (#CALL_MODE = #CALL_MODE_I AND #BATCH_PROCESS <> #YES)
		        PERFORM "GEMLB:LB_L_SIGNATURE"
		END_IF

		COMMIT

	END_BLOCK


	BEGIN_BLOCK END
		! Next record
		
	END_BLOCK

END_FORM


PROCEDURE_FORM BEFORE_IC_LEG

	BEGIN_BLOCK START

		#RELEASE_TO_INVOICING	= #YES

		FIND IN DESPATCH_NOTES	&
			/LOCK=NONE	&
			/WITH=COMPANY_CODE = #COMPANY_CODE	&
			/WITH=DIVISION = #DIVISION	&
			/WITH=DESPATCH_NOTE = SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)	&
			/WITH=DESPATCH_LINE = SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)

		IF (#SHIPPING_DESPATCH = #YES)
			IF (DESPATCH_NOTES(SOP_DESTINATION_WAREHOUSE) <> "")
				PERFORM DETERMINE_LEG_DATA
				#RELEASE_TO_INVOICING = #NO
			ELSE
				PERFORM DETERMINE_LEG_DATA
				IF (%STATUS <> %SUCCESS)
					#RELEASE_TO_INVOICING	= #NO
					EXIT (%SUCCESS)
				END_IF
			END_IF
		ELSE
			IF (DESPATCH_NOTES(SOP_DESTINATION_WAREHOUSE) <> "")
				#RELEASE_TO_INVOICING = #NO
			END_IF
			EXIT (%SUCCESS)
		END_IF

	END_BLOCK

	BEGIN_BLOCK CHECK
		IF (DESPATCH_NOTES(SOP_DESTINATION_WAREHOUSE) <> ""   &
		  OR SOP_SHIPPING_LEGS(SHIPPING_LEG) <> #INVOICING_LEG)
			#RELEASE_TO_INVOICING	= #NO
		ELSE
			IF (#EXPORT_SHIPPING_LEG < SOP_SHIPPING_LEGS(SHIPPING_LEG))
				IF (#TM_INVOICING_METHOD = "P")
					#RELEASE_TO_INVOICING	= #NO
				ELSE
					#RELEASE_TO_INVOICING	= #YES
				END_IF
			ELSE
				IF (#TM_INVOICING_METHOD = "N" OR #TM_INVOICING_METHOD = "D")
				! This is for Non Scheduled Export Invoice methods  'N' and 'D'
					#RELEASE_TO_INVOICING = #YES
				ELSE
				! This is for Non Scheduled Export Invoice methods other then 'N' and 'D'
					#RELEASE_TO_INVOICING = #NO
				END_IF
			END_IF
		END_IF
	END_BLOCK

END_FORM

PROCEDURE_FORM CALL_ENGINE

	BEGIN_BLOCK CHECK_CONFIRMED
		IF (DESPATCH_NOTES(CONFIRM_DESPATCH) <> #YES)
			GOTO END
		END_IF
	END_BLOCK

	BEGIN_BLOCK DESPATCHED

		IF ((SOP_DESPATCH_NOTES_VT(NONSTOCK) = #YES) OR (SOP_DESPATCH_NOTES_VT(WAREHOUSE) = ""))
			GOTO TIDY_UP
		END_IF

		#FIELD = PARAMETER("IC_QUANTITY")
		#PACK_QTY_DESPATCHED = #TOTAL_PACK_QTY_DESPATCHED
		#NOMINATED_QTY_DESPATCHED = #TOTAL_NOM_QTY_DESPATCHED
		#OTHER_QTY_DESPATCHED = #TOTAL_OTHER_QTY_DESPATCHED

		IF ((#PACK_QTY_DESPATCHED = 0.0) AND &
		    (#TOTAL_NOM_QTY_DESPATCHED = 0.0) AND &
		    (#TOTAL_OTHER_QTY_DESPATCHED = 0.0))
			GOTO TIDY_UP
		END_IF

		PERFORM FILL_IC_ENGINE_DETAILS_VT (#IC_RECORD_PRODUCT)

		IF (SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER) <> "")
			PERFORM FILL_IC_ENGINE_DETAILS_VT (#IC_RECORD_LOT)
		END_IF

                IF (#RELEASE_TO_INVOICING <> #YES)
                    	PERFORM FILL_IC_ENGINE_VT (#IC_DECREASE, #TRANSFER_MOVEMENT_CODE)
		ELSE
			PERFORM FILL_IC_ENGINE_VT (#IC_DECREASE, #MOVEMENT_CODE)
		END_IF

		PERFORM "GEMLB:LB_C_IC_ENGINE_CONTROLLER" &
				( #IC_E_UPDATE_ATC, &
				  #RETURN_STATUS, &
				  #RETURN_MESSAGE)

		IF (#RETURN_STATUS = #NO)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","",#RETURN_MESSAGE,1,#MSG_SEQ,"","")
			#TRAN_STATUS = PARAMETER("STATUS_FAIL")
			EXIT (%FAILURE)
		END_IF

		IF (SOP_DESPATCH_NOTES_VT(NONSTOCK) = #NO AND PRODUCT_MASTER(WAREHOUSED_FLAG)=#YES &
			AND #ATP_IN_USE = #YES AND PRODUCT_WAREHOUSE(ATP_IN_USE) = #YES)

			PERFORM FILL_IC_ATP_VT
		END_IF
	END_BLOCK

	BEGIN_BLOCK UPDATE_COST
		IF (SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER) <> "")
			#IC_RECORD_TYPE = #IC_RECORD_LOT
		ELSE
			#IC_RECORD_TYPE = #IC_RECORD_PRODUCT
		END_IF

		FIND IN IC_ENGINE_DETAILS_VT &
			/WITH=IC_RECORD_TYPE=#IC_RECORD_TYPE
		IF (%STATUS <> %SUCCESS) EXIT (%FAILURE)

		! update unit cost
		#UNIT_COST = IC_ENGINE_DETAILS_VT(IC_ENGINE_CALC_UNIT_COST)
		! context of DESPATCH_NOTES buffer set from  calling form
		DESPATCH_NOTES(UNIT_COST) = #UNIT_COST
	END_BLOCK

	BEGIN_BLOCK TRANSFER_COST

		#XFER_COST = 0.0

		IF (#LEGAL_POSTING_CODE <> #JAPAN_LEGAL_POSTING)
			IF (DESPATCH_NOTES(SOP_DESTINATION_WAREHOUSE) <> "")
				FIND IN WC_SRC:WAREHOUSE_CONTROLS &
					/LOCK=NONE &
					/SECONDARY &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=WAREHOUSE=SOP_DESPATCH_NOTES_VT(WAREHOUSE)

				IF (%STATUS<>%SUCCESS)
					! failed to read warehouse controls
					PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
						("FIN","P_52197","",1,#MSG_SEQ,"","")
					ROLLBACK

					EXIT (%FAILURE)
				END_IF

				#TRANSFER_COST_IN_USE = WC_SRC:WAREHOUSE_CONTROLS(TRANSFER_COST_IN_USE)
				IF (#TRANSFER_COST_IN_USE = #YES)
					PERFORM "GEMIC:IC_L_GET_TRANSFER_COST" (&
						(#COMPANY_CODE), &
						(SOP_DESPATCH_NOTES_VT(WAREHOUSE)), &
						(SOP_DESPATCH_NOTES_VT(PART_CODE)), &
						(#UNIT_COST), &
						#XFER_COST, &
						#DELTA_XFER_COST)

					IF (%STATUS = %FAILURE) EXIT (%FAILURE)
					IF (#XFER_COST = "") #XFER_COST = #UNIT_COST
					IF (#DELTA_XFER_COST = "") #DELTA_XFER_COST = 0
!!
					! no posting if Spanish, even if Transfer cost in use = yes...
					IF (#LEGAL_POSTING_CODE <> #LEGAL_POSTING_OPTION_2)
						PERFORM CREATE_XFER_POSTINGS
					END_IF
				ELSE
					! transfer cost not in use...
					#XFER_COST = #UNIT_COST
				END_IF
			ELSE
				! not a transfer order- set to unit cost
				#XFER_COST = #UNIT_COST
			END_IF
		ELSE
			! Sanbun...transfer cost is unit cost
			#XFER_COST = #UNIT_COST
		END_IF
		DESPATCH_NOTES(TRANSFER_COST) = #XFER_COST
	END_BLOCK

	BEGIN_BLOCK DECREASE_IN_DESPATCH
		! descrease the quantity in despatch in inventory
		#FIELD = PARAMETER("IC_QTY_IN_DESPATCH")
		IC_ENGINE_VT(IC_QUANTITY_FIELD) = #FIELD

		PERFORM RESET_PHASE

		PERFORM "GEMLB:LB_C_IC_ENGINE_CONTROLLER" &
				( #IC_E_UPDATE_ATC, &
				  #RETURN_STATUS, &
				  #RETURN_MESSAGE)

		IF (#RETURN_STATUS = #NO)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","",#RETURN_MESSAGE,1,#MSG_SEQ,"","")
			#TRAN_STATUS = PARAMETER("STATUS_FAIL")
			EXIT (%FAILURE)
		END_IF
	END_BLOCK

	BEGIN_BLOCK INCREASE_CONFIN_XFER_ORDER
		! For Transfer Orders update CONFIN at the receiving warehouse
		! so that stock stays in the system while being shipped.
		IF (DESPATCH_NOTES(SOP_DESTINATION_WAREHOUSE) <> "")

			! Note this form updates fields in the IC_ENGINE_VT and IC_ENGINE_DETAILS_VT
			! records.  The IC_ENGINE_VT field values are restored at the end of the
			! form, but engine details are not since the next engine update deletes and
			! then re-creates them.

			PERFORM XFER_ORDER_CONFIN_UPDATE
			IF (%STATUS <> %SUCCESS)
				ROLLBACK
				EXIT (%FAILURE)
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK UPDATE_COMMITED
		! decrease the committed quantities in inventory
		FIND IN SALES_ORDER_LINE_DETAILS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=ORDER_NUMBER=SOP_DESPATCH_NOTES_VT(ORDER_NUMBER) &
				/WITH=ORDER_LINE_NUMBER=SOP_DESPATCH_NOTES_VT(ORDER_LINE_NUMBER) &
				/WITH=SEQUENCE=SOP_DESPATCH_NOTES_VT(SEQUENCE)

		IF (%STATUS<>%SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_52360","",1,#MSG_SEQ,"","")
			#TRAN_STATUS = PARAMETER("STATUS_FAIL")
			EXIT(%FAILURE)
		END_IF

!		Qty committed is held in terms of the requirements unit
                FIND IN SALES_ORDER_LINE_DETAIL_QTYS    &
                        /LOCK=NONE      &
                        /WITH=COMPANY_CODE = #COMPANY_CODE      &
                        /WITH=DIVISION = SOP_DESPATCH_NOTES_VT(DIVISION)        &
                        /WITH=ORDER_NUMBER = SOP_DESPATCH_NOTES_VT(ORDER_NUMBER)        &
                        /WITH=ORDER_LINE_NUMBER = SOP_DESPATCH_NOTES_VT(ORDER_LINE_NUMBER)      &
                        /WITH=SEQUENCE = SOP_DESPATCH_NOTES_VT(SEQUENCE)        &
                        /WITH=UNIT_OF_MEASURE = #IC_UNIT_REQUIRE

                IF (%STATUS<>%SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_52360","",1,#MSG_SEQ,"","")
			#TRAN_STATUS = PARAMETER("STATUS_FAIL")
                        EXIT(%FAILURE)
                END_IF

                ! Don't releive more than was originally committed
                !
                ! The qty despatched can be more than order quantity because of overshipping
                !
                #COMMIT_REMAINING_QTY   = SALES_ORDER_LINE_DETAIL_QTYS(ORDER_QUANTITY) -        &
                                          SALES_ORDER_LINE_DETAIL_QTYS(QTY_DESPATCHED)

                IF (#COMMIT_REMAINING_QTY < 0)
                        #COMMIT_REMAINING_QTY = 0
                END_IF

!		Requirements unit can be either the nominated or the other unit...
		IF (#IC_UNIT_REQUIRE <> #NOMINATED_UNIT)
			#NOMINATED_QTY_DESPATCHED = 0.0
			IF (#OTHER_QTY_DESPATCHED > #COMMIT_REMAINING_QTY)
				#OTHER_QTY_DESPATCHED = #COMMIT_REMAINING_QTY
                	END_IF
		ELSE
			#OTHER_QTY_DESPATCHED = 0.0
			IF (#NOMINATED_QTY_DESPATCHED > #COMMIT_REMAINING_QTY)
				#NOMINATED_QTY_DESPATCHED = #COMMIT_REMAINING_QTY
                	END_IF
		END_IF

		#PACK_QTY_DESPATCHED = 0.0

		#IC_LOT_NUMBER=SALES_ORDER_LINE_DETAILS(IC_LOT_NUMBER)

		PERFORM DELETE_ALL_FROM_IC_ENGINE_DETAILS_VT

		PERFORM FILL_IC_ENGINE_DETAILS_VT (#IC_RECORD_PRODUCT)

		IF (#IC_LOT_NUMBER <> "")
			PERFORM FILL_IC_ENGINE_DETAILS_VT (#IC_RECORD_LOT)
		END_IF

		FIND IN IC_ENGINE_DETAILS_VT &
			/WITH=IC_RECORD_TYPE=#IC_RECORD_TYPE

		IF (%STATUS <> %SUCCESS) EXIT (%FAILURE)

		! update unit cost on details vt; engine does not recalculate cost
		! for qty_committed update
		IC_ENGINE_DETAILS_VT(IC_ENGINE_CALC_UNIT_COST) = #UNIT_COST

		BEGIN_CASE (SALES_ORDER_LINE_DETAILS(ORDER_HORIZON))
			CASE (PARAMETER("HORIZON_BACKWARD"))
				#FIELD=PARAMETER("QTY_COMMITTED_BACK")
			CASE (PARAMETER("HORIZON_CURRENT"))
				#FIELD=PARAMETER("QTY_COMMITTED_CURRENT")
			CASE (PARAMETER("HORIZON_FORWARD"))
				#FIELD=PARAMETER("QTY_COMMITTED_FORWARD")
			CASE ELSE
				#TRAN_STATUS = PARAMETER("STATUS_FAIL")
				EXIT (%FAILURE)
		END_CASE

		FIND IN IC_ENGINE_VT

		IC_ENGINE_VT(IC_QUANTITY_FIELD) = #FIELD
		IC_ENGINE_VT(IC_STATUS_CODE) = ""

		PERFORM "GEMLB:LB_C_IC_ENGINE_CONTROLLER" &
					( #IC_E_UPDATE_ATC, &
					  #RETURN_STATUS, &
					  #RETURN_MESSAGE)

		IF (#RETURN_STATUS = #NO)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","",#RETURN_MESSAGE,1,#MSG_SEQ,"","")
			#TRAN_STATUS = PARAMETER("STATUS_FAIL")
			EXIT (%FAILURE)
		END_IF
	END_BLOCK

	BEGIN_BLOCK TIDY_UP
		#TOTAL_PACK_QTY_DESPATCHED = 0
		#TOTAL_NOM_QTY_DESPATCHED = 0
		#TOTAL_OTHER_QTY_DESPATCHED = 0

		PERFORM DELETE_ALL_FROM_IC_ENGINE_VT
		PERFORM DELETE_ALL_FROM_IC_ENGINE_DETAILS_VT
	END_BLOCK

	BEGIN_BLOCK END
		#NEXT_LINE=#NEXT_LINE+1
	END_BLOCK

END_FORM

PROCEDURE_FORM RESET_PHASE &
	/TABLE=IC_ENGINE_DETAILS_VT

	BEGIN_BLOCK PROCESS
		IC_ENGINE_DETAILS_VT(IC_RECORD_PHASE) = #SYS_PHASE_FIRM
	END_BLOCK
END_FORM

PROCEDURE_FORM UPDATE_ORDER_QTYS

	BEGIN_BLOCK DOC
	!
	! context of SOP_DESPATCH_NOTES_VT buffer set by calling form
	! context of DESPATCH_NOTES buffer set by calling form
	!
	! #QTY_DESPATCHED is used to pass the despatched qty of the despatch
	! note to the sales order line and detail.
	!
	END_BLOCK

	BEGIN_BLOCK CHECK_CONFIRM
		IF (DESPATCH_NOTES(CONFIRM_DESPATCH) <> #YES)
			GOTO END
		END_IF
	END_BLOCK

	BEGIN_BLOCK UPDATE_NOMI_UOM
		#NOMINATED_QTY_DESPATCHED = 0.0

		PERFORM UPDATE_DESPATCHED_QTYS( (SOP_DESPATCH_NOTES_VT(SOP_NOMINATED_UNIT)),	&
						#NOMINATED_QTY_DESPATCHED)
		IF (%STATUS <> %SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_96059","",1,#MSG_SEQ,(SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)),&
					(SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)))
			EXIT(%FAILURE)
		END_IF

		PERFORM UPDATE_SALES_QTYS( (SOP_DESPATCH_NOTES_VT(SOP_NOMINATED_UNIT)),	&
					#NOMINATED_QTY_DESPATCHED)
		IF (%STATUS <> %SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_91244","",1,#MSG_SEQ,"","")
			EXIT(%FAILURE)
		END_IF
	END_BLOCK

	BEGIN_BLOCK UPDATE_NON_NOMI_UOM
		#OTHER_QTY_DESPATCHED = 0.0
		IF (SOP_DESPATCH_NOTES_VT(IC_OTHER_INVENTORY_UNIT) <> "")
			PERFORM UPDATE_DESPATCHED_QTYS( (SOP_DESPATCH_NOTES_VT(IC_OTHER_INVENTORY_UNIT)),	&
							#OTHER_QTY_DESPATCHED)
			IF (%STATUS <> %SUCCESS)
				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_96059","",1,#MSG_SEQ,(SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)),&
					(SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)))
				EXIT(%FAILURE)
			END_IF
			PERFORM UPDATE_SALES_QTYS( (SOP_DESPATCH_NOTES_VT(IC_OTHER_INVENTORY_UNIT)),	&
							#OTHER_QTY_DESPATCHED)
			IF (%STATUS <> %SUCCESS)
				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_91244","",1,#MSG_SEQ,"","")
				EXIT(%FAILURE)
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK UPDATE_SALES
		#SALES_QTY_DESPATCHED = 0.0

		IF (SOP_DESPATCH_NOTES_VT(UNIT_SALES) <> SOP_DESPATCH_NOTES_VT(SOP_NOMINATED_UNIT) &
		AND SOP_DESPATCH_NOTES_VT(UNIT_SALES) <> SOP_DESPATCH_NOTES_VT(IC_OTHER_INVENTORY_UNIT))

			PERFORM UPDATE_DESPATCHED_QTYS( (SOP_DESPATCH_NOTES_VT(UNIT_SALES)),	&
							#SALES_QTY_DESPATCHED)
			IF (%STATUS <> %SUCCESS)
				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_96059","",1,#MSG_SEQ,(SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)),&
					(SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)))
				EXIT(%FAILURE)
			END_IF
			PERFORM UPDATE_SALES_QTYS( (SOP_DESPATCH_NOTES_VT(UNIT_SALES)),	&
							#SALES_QTY_DESPATCHED)
			IF (%STATUS <> %SUCCESS)
				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_91244","",1,#MSG_SEQ,"","")
				EXIT(%FAILURE)
			END_IF
		ELSE
			! Need qty in terms of unit_sales for sales pricing
			! qty calculation.
			IF (SOP_DESPATCH_NOTES_VT(UNIT_SALES) = SOP_DESPATCH_NOTES_VT(SOP_NOMINATED_UNIT))
				#SALES_QTY_DESPATCHED = #NOMINATED_QTY_DESPATCHED
			END_IF
			IF (SOP_DESPATCH_NOTES_VT(UNIT_SALES) = SOP_DESPATCH_NOTES_VT(IC_OTHER_INVENTORY_UNIT))
				#SALES_QTY_DESPATCHED = #OTHER_QTY_DESPATCHED
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK UPDATE_PACK
		IF (#PACK_UNIT <> "" AND &
			SOP_DESPATCH_NOTES_VT(IC_PACK_UNIT) <> "" AND	&
			SOP_DESPATCH_NOTES_VT(IC_PACK_UNIT) <> SOP_DESPATCH_NOTES_VT(UNIT_SALES) AND &
			SOP_DESPATCH_NOTES_VT(IC_PACK_UNIT) <> SOP_DESPATCH_NOTES_VT(SOP_NOMINATED_UNIT) AND	&
			SOP_DESPATCH_NOTES_VT(IC_PACK_UNIT) <> SOP_DESPATCH_NOTES_VT(IC_OTHER_INVENTORY_UNIT))

			PERFORM UPDATE_DESPATCHED_QTYS( (SOP_DESPATCH_NOTES_VT(IC_PACK_UNIT)),	&
							#QTY_DESPATCHED)
			IF (%STATUS <> %SUCCESS)
				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_96059","",1,#MSG_SEQ, &
					(SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)), &
					(SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)))
				EXIT(%FAILURE)
			END_IF
			PERFORM UPDATE_SALES_QTYS( (SOP_DESPATCH_NOTES_VT(IC_PACK_UNIT)),	&
							#QTY_DESPATCHED)
			IF (%STATUS <> %SUCCESS)
				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_91244","",1,#MSG_SEQ,"","")
				EXIT(%FAILURE)
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK UPDATE_PRICING_UOM
		! Trickier than the other UOMs because the Pricing UOM is
		! not held on the Despatch Notes VT.
		FIND IN SALES_ORDER_LINES	&
			/SECONDARY &
			/STREAM_NAME = PRICE_UOM &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=DIVISION = SOP_DESPATCH_NOTES_VT(DIVISION) &
			/WITH=ORDER_NUMBER = SOP_DESPATCH_NOTES_VT(ORDER_NUMBER) &
			/WITH=ORDER_LINE_NUMBER = SOP_DESPATCH_NOTES_VT(ORDER_LINE_NUMBER)

		#UNIT_PRICE = PRICE_UOM:SALES_ORDER_LINES(UNIT_PRICE)

		IF ((#UNIT_PRICE <> "") &
		AND (#UNIT_PRICE <> SOP_DESPATCH_NOTES_VT(SOP_NOMINATED_UNIT)) &
		AND (#UNIT_PRICE <> SOP_DESPATCH_NOTES_VT(IC_OTHER_INVENTORY_UNIT)) &
		AND (#UNIT_PRICE <> SOP_DESPATCH_NOTES_VT(UNIT_SALES)) &
		AND (#UNIT_PRICE <> SOP_DESPATCH_NOTES_VT(IC_PACK_UNIT)))
			! No Despatch_note_qtys records to update for
			! price unit, Sales Order Qtys only.

			IF (PRICE_UOM:SALES_ORDER_LINES(ORDER_LINE_TYPE) = PARAMETER("LINE_TYPE_STOCK"))

				PERFORM "GEMLB:SOP_L_SALES_PRICE_QTY" &
					(#COMPANY_CODE, &
					(SOP_DESPATCH_NOTES_VT(PART_CODE)), &
					(SOP_DESPATCH_NOTES_VT(WAREHOUSE)), &
					(SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER)),	&
					(SOP_DESPATCH_NOTES_VT(UNIT_SALES)), &
					#SALES_QTY_DESPATCHED, &
					(SOP_DESPATCH_NOTES_VT(SOP_NOMINATED_UNIT)), &
					#NOMINATED_QTY_DESPATCHED, &
					(SOP_DESPATCH_NOTES_VT(IC_OTHER_INVENTORY_UNIT)), &
					#OTHER_QTY_DESPATCHED, &
					(#UNIT_PRICE), &
					(PRICE_UOM:SALES_ORDER_LINES(SOP_NOMINATED_PRICE_UNIT)), &
					"", &
					"", &
					#PRICE_QTY_DESPATCHED, &
					#PQ_STATUS, &
					#PQ_MESSAGE)

				IF (#PQ_STATUS = #NO)
					PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
						("FIN","",#PQ_MESSAGE,1,#MSG_SEQ,"","")
					EXIT(%FAILURE)
				END_IF
			ELSE
				! Line is non-stock
				PERFORM CALL_UOM_CONVERSION_ROUTINE &
					(#COMPANY_CODE,	&
					"",	&
					"",	&
					"",	&
					#SALES_QTY_DESPATCHED, &
					(SOP_DESPATCH_NOTES_VT(UNIT_SALES)), &
					#UNIT_PRICE,	&
					"",	&
					"",	&
					#PRICE_QTY_DESPATCHED,	&
					#IC_DECIMAL_TO, &
					#SYS_CONV_METHOD, &
					#UOM_CONVERSION_FACTOR, &
					#SYS_CONV_SUCCESSFUL, &
					#IC_CHARACTERISTIC_SOURCE)

				IF (%STATUS = %FAILURE)
					PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
						("FIN","P_90964","",1,#MSG_SEQ,"","")

					EXIT(%FAILURE)
				END_IF
			END_IF

			! Update Qty record with qty found
			PERFORM UPDATE_SALES_QTYS ((#UNIT_PRICE), &
						#PRICE_QTY_DESPATCHED)

			!Update the Despatch Note Qtys record if one exists.
			!Returned value is not used so just use a dummy variable.
			PERFORM UPDATE_DESPATCHED_QTYS( (#UNIT_PRICE),#DUMMY)
			IF (%STATUS = %FAILURE)
				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_96059","",1,#MSG_SEQ, &
					(SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)), &
					(SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)))
				EXIT(%FAILURE)
			END_IF

		END_IF
	END_BLOCK


	BEGIN_BLOCK UPDATE_DESPATCH_NOTE
		FIND IN DESPATCH_NOTES	&
			/LOCK=WRITE	&
			/WITH=COMPANY_CODE = #COMPANY_CODE	&
			/WITH=DIVISION = SOP_DESPATCH_NOTES_VT(DIVISION)	&
			/WITH=DESPATCH_NOTE = SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)	&
			/WITH=DESPATCH_LINE = SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)

		IF (%STATUS <> %SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_13304","",1, #MSG_SEQ,(SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)),&
				(SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)))
			EXIT (%FAILURE)
		END_IF

		DESPATCH_NOTES(DATA_CAPTURE_CONFIRM) = #NO

	!Change 002 - Reference SOP_U_CONFIRM_SHIP Change 001
                !IF (#LEGAL_POSTING_CODE = #JAPAN_LEGAL_POSTING)
                !        DESPATCH_NOTES(DESPATCH_DATE) = #DESPATCH_DATE
                !ELSE
	        !        DESPATCH_NOTES(DESPATCH_DATE) = %NOW
                !END_IF

		DESPATCH_NOTES(DESPATCH_DATE) = #DESPATCH_DATE
		!Change 002 End

		!Change 003
		IF (DESPATCH_NOTES(VOL_READYTOSHIP)="") 
			DESPATCH_NOTES(VOL_READYTOSHIP)=#DESPATCH_DATE
		END_IF
		!Change 003 End
			
	END_BLOCK

	BEGIN_BLOCK END
		! GOTO point
	END_BLOCK

END_FORM

PROCEDURE_FORM UPDATE_SHIPMENT_LOAD

	BEGIN_BLOCK CHECK_CONFIRM
		IF (DESPATCH_NOTES(CONFIRM_DESPATCH) <> #YES)
			GOTO END
		END_IF
	END_BLOCK

	BEGIN_BLOCK UPDATE_SHIPMENT_DETAILS
		IF (SOP_DESPATCH_NOTES_VT(SOP_SHIPPING_LIST_LINE) <> #SOP_SHIPPING_LIST_LINE OR &
		    SOP_DESPATCH_NOTES_VT(SHIPPING_LEG) <> #SHIPPING_LEG OR	&
		    SOP_DESPATCH_NOTES_VT(SHIPMENT_SPLIT_SEQUENCE) <> #SHIPMENT_SPLIT_SEQUENCE OR &
		    SOP_DESPATCH_NOTES_VT(SOP_SHIPPING_RUN_NUMBER) <> #SOP_SHIPPING_RUN_NUMBER)
			IF (#FIRST_SHIPMENT_DETAIL = #YES)
				#FIRST_SHIPMENT_DETAIL = #NO
			ELSE
				PERFORM UPDATE_SHIPMENT_DETAILS
				IF (%STATUS <> %SUCCESS)
					EXIT (%FAILURE)
				END_IF
				PERFORM INITIALIZE_SHIPMENT_DETAIL
				IF (%STATUS <> %SUCCESS)
					EXIT (%FAILURE)
				END_IF
			END_IF
			#SOP_SHIPPING_RUN_NUMBER	= SOP_DESPATCH_NOTES_VT(SOP_SHIPPING_RUN_NUMBER)
			#SOP_SHIPPING_LIST_LINE	= SOP_DESPATCH_NOTES_VT(SOP_SHIPPING_LIST_LINE)
			#SHIPMENT_SPLIT_SEQUENCE	= SOP_DESPATCH_NOTES_VT(SHIPMENT_SPLIT_SEQUENCE)
			#SHIPPING_LEG	= SOP_DESPATCH_NOTES_VT(SHIPPING_LEG)
			#ORDER_NUMBER	= SOP_DESPATCH_NOTES_VT(ORDER_NUMBER)
			#LOAD_SALES_QTY	= #LOAD_SALES_QTY + #TOTAL_SALES_QTY_TO_SHIP
			#LOAD_NOMI_QTY	= #LOAD_NOMI_QTY + #TOTAL_NOMI_QTY_TO_SHIP
			#LOAD_OTHER_QTY	= #LOAD_OTHER_QTY + #TOTAL_OTHER_QTY_TO_SHIP
			#LOAD_PACK_QTY = #LOAD_PACK_QTY + #TOTAL_PACK_QTY_TO_SHIP
		END_IF
	END_BLOCK

	BEGIN_BLOCK UPDATE_SHIPPING_LOAD
		IF (#DESPATCH_NOTES_AP_DIVISION <> #TM_AP_DIVISION OR	&
		    SOP_DESPATCH_NOTES_VT(TM_LOAD_NUMBER) <> #TM_LOAD_NUMBER)
			IF (#FIRST_TM_LOAD	= #YES)
				#FIRST_TM_LOAD	= #NO
			ELSE
				PERFORM UPDATE_SHIPPING_LOAD
				IF (%STATUS <> %SUCCESS)
					EXIT (%FAILURE)
				END_IF
				PERFORM INITIALIZE_LOAD
				IF (%STATUS <> %SUCCESS)
					EXIT (%FAILURE)
				END_IF
			END_IF
			#TM_LOAD_NUMBER	= SOP_DESPATCH_NOTES_VT(TM_LOAD_NUMBER)
			#TM_AP_DIVISION	= #DESPATCH_NOTES_AP_DIVISION
		END_IF
	END_BLOCK

	BEGIN_BLOCK SUM_TM_QTYS
		#DESPATCH_DATE	= DESPATCH_NOTES(DESPATCH_DATE)
		#TM_NOMI_UOM	= SOP_DESPATCH_NOTES_VT(SOP_NOMINATED_UNIT)
		#TM_OTHER_UOM	= SOP_DESPATCH_NOTES_VT(IC_OTHER_INVENTORY_UNIT)
		IF (#IC_PACKAGED_PRODUCT = #YES)
			#TM_PACK_UOM	= SOP_DESPATCH_NOTES_VT(IC_PACK_UNIT)
		ELSE
			#TM_PACK_UOM = ""
		END_IF
		PERFORM GET_DESPATCHED_QTY( (SOP_DESPATCH_NOTES_VT(UNIT_SALES)), #DESPATCH_QTY)
		#TOTAL_SALES_QTY_TO_SHIP	= #TOTAL_SALES_QTY_TO_SHIP + #DESPATCH_QTY
		PERFORM GET_DESPATCHED_QTY(#TM_NOMI_UOM, #DESPATCH_QTY)
		#TOTAL_NOMI_QTY_TO_SHIP	= #TOTAL_NOMI_QTY_TO_SHIP + #DESPATCH_QTY
		PERFORM GET_DESPATCHED_QTY( #TM_OTHER_UOM, #DESPATCH_QTY)
		#TOTAL_OTHER_QTY_TO_SHIP	= #TOTAL_OTHER_QTY_TO_SHIP + #DESPATCH_QTY
		PERFORM GET_DESPATCHED_QTY( #TM_PACK_UOM, #DESPATCH_QTY)
		#TOTAL_PACK_QTY_TO_SHIP	= #TOTAL_PACK_QTY_TO_SHIP + #DESPATCH_QTY

	END_BLOCK

	BEGIN_BLOCK END
	END_BLOCK

END_FORM

PROCEDURE_FORM FINISH_TM

	BEGIN_BLOCK TM
		IF (#SHIPPING_DESPATCH = #YES)
			PERFORM UPDATE_SHIPMENT_DETAILS
			IF (%STATUS <> %SUCCESS)
				ROLLBACK
				EXIT (%FAILURE)
			END_IF
			! update for the last load processed
			PERFORM UPDATE_SHIPPING_LOAD
			IF (%STATUS <> %SUCCESS)
				ROLLBACK
				EXIT (%FAILURE)
			END_IF
		END_IF
	END_BLOCK
END_FORM

PROCEDURE_FORM INITIALIZE_LOAD

        BEGIN_BLOCK INIT
                #LOAD_WEIGHT_FOR_LOAD   = ""
                #PRODUCT_WEIGHT_FOR_LOAD        = ""
                #LOAD_SIZE_FOR_LOAD     = ""

		#LOAD_SALES_QTY	= 0
		#LOAD_NOMI_QTY = 0
		#LOAD_OTHER_QTY = 0
		#LOAD_PACK_QTY = 0

        END_BLOCK
END_FORM

PROCEDURE_FORM UPDATE_SHIPPING_LOAD

	BEGIN_BLOCK  FIND
		FIND IN TM_SHIPMENT_LOAD	&
			/LOCK=WRITE	&
			/WITH=COMPANY_CODE = #COMPANY_CODE	&
			/WITH=AP_DIVISION	= #DESPATCH_NOTES_AP_DIVISION	&
			/WITH=TM_LOAD_NUMBER	= #TM_LOAD_NUMBER
		IF (%STATUS <> %SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_96041","",1,#MSG_SEQ,#TM_LOAD_NUMBER,"")
			EXIT (%FAILURE)
		END_IF
                #WEIGHT_UOM_FOR_LOAD    = TM_SHIPMENT_LOAD(WEIGHT_UOM)
                #CUBIC_SIZE_UOM_FOR_LOAD        = TM_SHIPMENT_LOAD(CUBIC_SIZE_UOM)
	END_BLOCK

	BEGIN_BLOCK UPDATE
		#DELTA_LOAD_WEIGHT = -1.0*(TM_SHIPMENT_LOAD(SOP_LOAD_WEIGHT_EST) - #LOAD_WEIGHT_FOR_LOAD)
		TM_SHIPMENT_LOAD(SOP_LOAD_WEIGHT_EST)	= #LOAD_WEIGHT_FOR_LOAD
		TM_SHIPMENT_LOAD(SOP_PRODUCT_WEIGHT)	= #PRODUCT_WEIGHT_FOR_LOAD
		#DELTA_LOAD_SIZE = -1.0*(TM_SHIPMENT_LOAD(SOP_LOAD_SIZE) - #LOAD_SIZE_FOR_LOAD)
		TM_SHIPMENT_LOAD(SOP_LOAD_SIZE)	= #LOAD_SIZE_FOR_LOAD
		TM_SHIPMENT_LOAD(SYS_CURRENCY_DATE)	= #DESPATCH_DATE
		TM_SHIPMENT_LOAD(CONFIRM_DESPATCH)	= #YES
	END_BLOCK

	BEGIN_BLOCK FIND_TRANSPORT_ORDER
		FIND IN TM_TRANSPORT_ORDER	&
			/LOCK=NONE	&
			/WITH=COMPANY_CODE	= #COMPANY_CODE	&
			/WITH=AP_DIVISION	= TM_SHIPMENT_LOAD(AP_DIVISION)	&
			/WITH=TM_ORDER_NUMBER	= TM_SHIPMENT_LOAD(TM_ORDER_NUMBER)
		IF (%STATUS <> %SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
			 	("FIN","P_96056","",1,#MSG_SEQ,(TM_SHIPMENT_LOAD(TM_ORDER_NUMBER)),"")
			EXIT (%FAILURE)
		END_IF
		TM_TRANSPORT_ORDER(STATUS_FLAG) = "P"
		TM_TRANSPORT_ORDER(TM_ORDER_RECORDED_CUBIC) = TM_TRANSPORT_ORDER(TM_ORDER_RECORDED_CUBIC) + &
									#DELTA_LOAD_SIZE
		TM_TRANSPORT_ORDER(TM_ORDER_RECORDED_WEIGHT) = TM_TRANSPORT_ORDER(TM_ORDER_RECORDED_WEIGHT) + &
									#DELTA_LOAD_WEIGHT
	END_BLOCK

	BEGIN_BLOCK CALC
			PERFORM "GEMSYS:SYS_L_FREIGHT_CALCULATION" CALCULATE_FREIGHT_WS(PARAMETER("TM_FREIGHT_CALC_LOAD"),	&
					#DESPATCH_DATE,	&
					"",	&
					"",	&
					"",	&
					#YES,	&
					#LOAD_PACK_QTY, &
					#TM_PACK_UOM,	&
					#LOAD_NOMI_QTY, &
					#TM_NOMI_UOM,	&
					#LOAD_OTHER_QTY,	&
					#TM_OTHER_UOM,	&
					"",	&
					#FREIGHT_CHARGE_CURRENCY,	&
					#CURRENCY_CODE,	&
					#FREIGHT_CHARGE_BASE,	&
					#CUBIC,"","","","","",#CALL_MODE)
			TM_SHIPMENT_LOAD(TM_FREIGHT_CHARGE_CURRENCY)	= #FREIGHT_CHARGE_CURRENCY
			TM_SHIPMENT_LOAD(SYS_FREIGHT_CHARGE_BASE)	= #FREIGHT_CHARGE_BASE
			TM_SHIPMENT_LOAD(SYS_CURRENCY_CODE)	= #CURRENCY_CODE
			TM_SHIPMENT_LOAD(SYS_FREIGHT_CALCULATED)	= #YES

			TM_TRANSPORT_ORDER(SYS_CURRENCY_CODE) = TM_SHIPMENT_LOAD(SYS_CURRENCY_CODE)
			TM_TRANSPORT_ORDER(TM_FREIGHT_CHARGE_CURRENCY) = #FREIGHT_CHARGE_CURRENCY
			TM_TRANSPORT_ORDER(SYS_FREIGHT_CHARGE_BASE) = #FREIGHT_CHARGE_BASE
			TM_TRANSPORT_ORDER(SYS_CURRENCY_CODE) = #CURRENCY_CODE
	END_BLOCK

	BEGIN_BLOCK NEW_DETAILS
	! add any shipment details that have been added
		PERFORM ADD_NEW_DETAILS
		IF (%STATUS = %FAILURE)
			EXIT(%FAILURE)
		END_IF

		PERFORM DELETE_SHIPMENT_DETAILS_VT
		IF (%STATUS = %FAILURE)
			EXIT(%FAILURE)
		END_IF

	END_BLOCK

END_FORM

PROCEDURE_FORM ADD_NEW_DETAILS &
	/TABLE=SHIPMENT_DETAILS_VT &
	/SORTED_BY=COMPANY_CODE,DIVISION,TM_SERVICE_ID,ORDER_NUMBER,SHIPPING_REQUIREMENT_NUMBER,SHIPPING_LEG &
	/BREAK=ADD_NEW_LOAD,UPDATE_QTY_ON_LOAD,SHIPMENT_DETAILS_VT(TM_SERVICE_ID) &
	/BREAK=UPDATE_LEG,(SHIPMENT_DETAILS_VT(ORDER_NUMBER) &
				& SHIPMENT_DETAILS_VT(SHIPPING_REQUIREMENT_NUMBER) &
				& SHIPMENT_DETAILS_VT(SHIPPING_LEG)) &

	BEGIN_BLOCK ADD
		! create a new shipment detail
		CLEAR_BUFFER SOP_SHIPMENT_DETAILS
		SOP_SHIPMENT_DETAILS(COMPANY_CODE) = SHIPMENT_DETAILS_VT(COMPANY_CODE)
		SOP_SHIPMENT_DETAILS(DIVISION) = SHIPMENT_DETAILS_VT(DIVISION)
		SOP_SHIPMENT_DETAILS(ORDER_NUMBER) = SHIPMENT_DETAILS_VT(ORDER_NUMBER)
		SOP_SHIPMENT_DETAILS(ORDER_LINE_NUMBER) = SHIPMENT_DETAILS_VT(ORDER_LINE_NUMBER)
		SOP_SHIPMENT_DETAILS(SEQUENCE) = SHIPMENT_DETAILS_VT(SEQUENCE)
		SOP_SHIPMENT_DETAILS(PART_CODE) = SHIPMENT_DETAILS_VT(PART_CODE)
		SOP_SHIPMENT_DETAILS(SALES_QTY_TO_SHIP)= SHIPMENT_DETAILS_VT(SALES_QTY_TO_SHIP)
		SOP_SHIPMENT_DETAILS(PACK_QTY_TO_SHIP)= SHIPMENT_DETAILS_VT(PACK_QTY_TO_SHIP)
		SOP_SHIPMENT_DETAILS(NOMINATED_QTY_TO_SHIP)= SHIPMENT_DETAILS_VT(NOMINATED_QTY_TO_SHIP)
		SOP_SHIPMENT_DETAILS(OTHER_QTY_TO_SHIP)= SHIPMENT_DETAILS_VT(OTHER_QTY_TO_SHIP)
		SOP_SHIPMENT_DETAILS(UNIT_SALES) = SHIPMENT_DETAILS_VT(UNIT_SALES)
		SOP_SHIPMENT_DETAILS(IC_PACK_UNIT) = SHIPMENT_DETAILS_VT(IC_PACK_UNIT)
		SOP_SHIPMENT_DETAILS(SOP_NOMINATED_UNIT) = SHIPMENT_DETAILS_VT(SOP_NOMINATED_UNIT)
		SOP_SHIPMENT_DETAILS(IC_OTHER_INVENTORY_UNIT) = SHIPMENT_DETAILS_VT(IC_OTHER_INVENTORY_UNIT)

		SOP_SHIPMENT_DETAILS(SALES_QTY_PROCESSED) = SHIPMENT_DETAILS_VT(SALES_QTY_PROCESSED)
		SOP_SHIPMENT_DETAILS(PACK_QTY_PROCESSED) = SHIPMENT_DETAILS_VT(PACK_QTY_PROCESSED)
		SOP_SHIPMENT_DETAILS(NOMINATED_QTY_PROCESSED) = SHIPMENT_DETAILS_VT(NOMINATED_QTY_PROCESSED)
		SOP_SHIPMENT_DETAILS(OTHER_QTY_PROCESSED) = SHIPMENT_DETAILS_VT(OTHER_QTY_PROCESSED)

		SOP_SHIPMENT_DETAILS(SOP_LOAD_WEIGHT) = SHIPMENT_DETAILS_VT(SOP_LOAD_WEIGHT)
		SOP_SHIPMENT_DETAILS(WEIGHT_UOM) = SHIPMENT_DETAILS_VT(WEIGHT_UOM)
		SOP_SHIPMENT_DETAILS(SOP_PRODUCT_WEIGHT) = SHIPMENT_DETAILS_VT(SOP_PRODUCT_WEIGHT)
		SOP_SHIPMENT_DETAILS(SOP_LOAD_SIZE) = SHIPMENT_DETAILS_VT(SOP_LOAD_SIZE)
		SOP_SHIPMENT_DETAILS(CUBIC_SIZE_UOM) = SHIPMENT_DETAILS_VT(CUBIC_SIZE_UOM)
		SOP_SHIPMENT_DETAILS(CUSTOMER_NUMBER)	= SHIPMENT_DETAILS_VT(CUSTOMER_NUMBER)
		SOP_SHIPMENT_DETAILS(TM_LOAD_NUMBER) = TM_SHIPMENT_LOAD(TM_LOAD_NUMBER)
		SOP_SHIPMENT_DETAILS(AP_DIVISION) = TM_SHIPMENT_LOAD(AP_DIVISION)
		SOP_SHIPMENT_DETAILS(SOP_LOAD_ID)= SHIPMENT_DETAILS_VT(SOP_LOAD_ID)
		SOP_SHIPMENT_DETAILS(SOP_SHIPPING_RUN_NUMBER)= #SOP_SHIPPING_RUN_NUMBER
		SOP_SHIPMENT_DETAILS(SOP_SHIPPING_LIST_LINE) = SHIPMENT_DETAILS_VT(SOP_SHIPPING_LIST_LINE)
		SOP_SHIPMENT_DETAILS(SHIPMENT_SPLIT_SEQUENCE) = SHIPMENT_DETAILS_VT(SHIPMENT_SPLIT_SEQUENCE)

!		SOP_SHIPMENT_DETAILS(SHIPPING_NUMBER) = SHIPMENT_DETAILS_VT(SHIPPING_NUMBER)
		SOP_SHIPMENT_DETAILS(SHIPPING_LEG) = SHIPMENT_DETAILS_VT(SHIPPING_LEG)
		SOP_SHIPMENT_DETAILS(WAREHOUSE) = SHIPMENT_DETAILS_VT(WAREHOUSE)
		SOP_SHIPMENT_DETAILS(TM_FOLLOW_ON_SERVICE) = #YES
		SOP_SHIPMENT_DETAILS(CREATION_DATE)	= %TODAY
		SOP_SHIPMENT_DETAILS(USERNAME)	= %USERNAME

		ADD TO SOP_SHIPMENT_DETAILS
		IF (%STATUS <> %SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_92901","",1,#MSG_SEQ,"","")
			EXIT (%FAILURE)
		END_IF

		! convert the totals for the detail and accumlate into totals
		! for the load
		#PART_CODE 	= SOP_SHIPMENT_DETAILS(PART_CODE)

		FIND IN PRODUCT_MASTER &
			/LOCK=NONE &
			/SECONDARY &
			/STREAM_NAME=PM &
			/WITH=COMPANY_CODE = SHIPMENT_DETAILS_VT(COMPANY_CODE) &
			/WITH=PART_CODE=#PART_CODE

		IF (%STATUS = %FAILURE)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_90952","",1,#MSG_SEQ,"","")
			EXIT(%FAILURE)
		END_IF

		IF (PM:PRODUCT_MASTER(IC_PACKAGED_PRODUCT) = #YES)
			#FROM_UNIT 	= SOP_SHIPMENT_DETAILS(IC_PACK_UNIT)
			#FROM_QTY 	= SOP_SHIPMENT_DETAILS(PACK_QTY_TO_SHIP)
		ELSE
			#FROM_UNIT	= SOP_SHIPMENT_DETAILS(SOP_NOMINATED_UNIT)
			#FROM_QTY	= SOP_SHIPMENT_DETAILS(NOMINATED_QTY_TO_SHIP)
		END_IF

		!get the load weight
!		#GROSS_NET = PARAMETER("TM_GROSS")
		#TO_UNIT = #WEIGHT_UOM_FOR_LOAD

		PERFORM CALL_UOM_CONVERSION_ROUTINE( #COMPANY_CODE,	&
					"",	&
					#PART_CODE,	&
					"",	&
					#FROM_QTY,	&
					#FROM_UNIT,	&
					#TO_UNIT,	&
					"",	&
					#UOM_DECIMAL_FROM,	&
					#TO_QTY,	&
					#IC_DECIMAL_TO, &
					#SYS_CONV_METHOD, &
					#UOM_CONVERSION_FACTOR, &
					#SYS_CONV_SUCCESSFUL, &
					#IC_CHARACTERISTIC_SOURCE)

		#LOAD_WEIGHT_FOR_NEW_LOAD = #LOAD_WEIGHT_FOR_NEW_LOAD + #TO_QTY

		!GET THE PRODUCT WEIGHT
!		#GROSS_NET = ""
		#TO_UNIT = #WEIGHT_UOM_FOR_LOAD

		PERFORM CALL_UOM_CONVERSION_ROUTINE( #COMPANY_CODE,	&
					"",	&
					#PART_CODE,	&
					"",	&
					#FROM_QTY,	&
					#FROM_UNIT,	&
					#TO_UNIT,	&
					"",	&
					#UOM_DECIMAL_FROM,	&
					#TO_QTY,	&
					#IC_DECIMAL_TO, &
					#SYS_CONV_METHOD, &
					#UOM_CONVERSION_FACTOR, &
					#SYS_CONV_SUCCESSFUL, &
					#IC_CHARACTERISTIC_SOURCE)

		#PRODUCT_WEIGHT_FOR_NEW_LOAD = #PRODUCT_WEIGHT_FOR_NEW_LOAD + #TO_QTY

		!GET THE LOAD SIZE
!		#GROSS_NET = ""
		#TO_UNIT = #CUBIC_SIZE_UOM_FOR_LOAD

		PERFORM CALL_UOM_CONVERSION_ROUTINE( #COMPANY_CODE,	&
					"",	&
					#PART_CODE,	&
					"",	&
					#FROM_QTY,	&
					#FROM_UNIT,	&
					#TO_UNIT,	&
					"",	&
					#UOM_DECIMAL_FROM,	&
					#TO_QTY,	&
					#IC_DECIMAL_TO, &
					#SYS_CONV_METHOD, &
					#UOM_CONVERSION_FACTOR, &
					#SYS_CONV_SUCCESSFUL, &
					#IC_CHARACTERISTIC_SOURCE)

		#LOAD_SIZE_FOR_NEW_LOAD = #LOAD_SIZE_FOR_NEW_LOAD + #TO_QTY
		#NO_PACKS_FOR_NEW_LOAD = #NO_PACKS_FOR_NEW_LOAD + &
			SOP_SHIPMENT_DETAILS(PACK_QTY_TO_SHIP)
	END_BLOCK
END_FORM

PROCEDURE_FORM DELETE_SHIPMENT_DETAILS_VT &
	/TABLE=SHIPMENT_DETAILS_VT

	BEGIN_BLOCK DELETE
		DELETE FROM SHIPMENT_DETAILS_VT
	END_BLOCK
END_FORM


PROCEDURE_FORM ADD_NEW_LOAD

	BEGIN_BLOCK INIT

		#LOAD_WEIGHT_FOR_NEW_LOAD = ""
		#PRODUCT_WEIGHT_FOR_NEW_LOAD = ""
		#LOAD_SIZE_FOR_NEW_LOAD = ""
		#NO_PACKS_FOR_NEW_LOAD = ""
!		#TM_TRANSPORT_DEPOT = ""

	!
		FIND IN SOP_SHIPPING_LEGS &
			/LOCK=WRITE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=ORDER_NUMBER=SHIPMENT_DETAILS_VT(ORDER_NUMBER) &
			/WITH=SHIPPING_REQUIREMENT_NUMBER=SHIPMENT_DETAILS_VT(SHIPPING_REQUIREMENT_NUMBER) &
			/WITH=SHIPPING_LEG = SHIPMENT_DETAILS_VT(SHIPPING_LEG)

		IF (%STATUS <> %SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_93102","",1,#MSG_SEQ,"","")
			EXIT(%FAILURE)
		END_IF

		FIND IN TM_SHIPMENT_LOAD &
			/SECONDARY &
			/STREAM_NAME=TSL &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=AP_DIVISION=#AP_DIVISION &
			/WITH=TM_LOAD_NUMBER = #TM_LOAD_NUMBER
		IF (%STATUS <> %SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_96041","",1,#MSG_SEQ,#TM_LOAD_NUMBER,"")
			EXIT (%FAILURE)
		END_IF

		! if this leg already specifies a transport order then use it,
		! otherwise create a new one, using the transport order for the
		! current leg as a base

                IF (SOP_SHIPPING_LEGS(TM_ORDER_NUMBER) = "")
			FIND IN TO:TM_TRANSPORT_ORDER &
				/LOCK=NONE &
				/SECONDARY &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=AP_DIVISION=TSL:TM_SHIPMENT_LOAD(AP_DIVISION) &
				/WITH=TM_ORDER_NUMBER=TSL:TM_SHIPMENT_LOAD(TM_ORDER_NUMBER)

			IF (%STATUS <> %SUCCESS)
				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_96056","",1,#MSG_SEQ,(TSL:TM_SHIPMENT_LOAD(TM_ORDER_NUMBER)),"")
				EXIT (%FAILURE)
			END_IF

			CLEAR_BUFFER TM_TRANSPORT_ORDER

			! get next transport order number
			FIND IN TM_TRANSACTION_TYPES &
				/LOCK=WRITE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=AP_DIVISION=TSL:TM_SHIPMENT_LOAD(AP_DIVISION) &
				/WITH=TRANSACTION_TYPE=(PARAMETER("TTYPE_TO"))

			IF (%STATUS = %FAILURE)
				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_92906","",1,#MSG_SEQ,"","")
				EXIT(%FAILURE)
			ELSE
				TM_TRANSPORT_ORDER(TM_ORDER_NUMBER) = TM_TRANSACTION_TYPES(TRANSACTION_NUMBER)
				TM_TRANSACTION_TYPES(TRANSACTION_NUMBER) = &
					TM_TRANSPORT_ORDER(TM_ORDER_NUMBER) + 1
			END_IF
			!update transport order number and shipping run number on the
			!shipping leg

			TM_TRANSPORT_ORDER(COMPANY_CODE) = #COMPANY_CODE
			TM_TRANSPORT_ORDER(AP_DIVISION) = SOP_SHIPPING_LEGS(AP_DIVISION)
			TM_TRANSPORT_ORDER(TM_ROUTE_ID) = SOP_SHIPPING_LEGS(TM_SEGMENT_ROUTE_ID)
			TM_TRANSPORT_ORDER(TM_SERVICE_ID) = SOP_SHIPPING_LEGS(TM_SERVICE_ID)
			FIND IN TM_TRANSPORT_SERVICE &
				/LOCK=NONE &
				/WITH=COMPANY_CODE = #COMPANY_CODE &
				/WITH=AP_DIVISION = SOP_SHIPPING_LEGS(AP_DIVISION) &
				/WITH=TM_SERVICE_ID = SOP_SHIPPING_LEGS(TM_SERVICE_ID) &
				/WITH=TM_ROUTE_ID = SOP_SHIPPING_LEGS(TM_SEGMENT_ROUTE_ID)

			IF (%STATUS = %SUCCESS)
				TM_TRANSPORT_ORDER(VENDOR_NUMBER) = TM_TRANSPORT_SERVICE(VENDOR_NUMBER)
				TM_TRANSPORT_ORDER(AGENT_VENDOR_NUMBER) = TM_TRANSPORT_SERVICE(VENDOR_NUMBER)
				TM_TRANSPORT_ORDER(TM_INVOICING_METHOD) = TM_TRANSPORT_SERVICE(TM_INVOICING_METHOD)
			END_IF

			TM_TRANSPORT_ORDER(CUBIC_SIZE_UOM) = TO:TM_TRANSPORT_ORDER(CUBIC_SIZE_UOM)
			TM_TRANSPORT_ORDER(WEIGHT_UOM) = TO:TM_TRANSPORT_ORDER(WEIGHT_UOM)
			TM_TRANSPORT_ORDER(USERNAME) = %USERNAME
			TM_TRANSPORT_ORDER(SYSTEM_DATE) = %NOW
 			TM_TRANSPORT_ORDER(STATUS_FLAG) = "P"
			ADD TO TM_TRANSPORT_ORDER
			IF (%STATUS <> %SUCCESS)
				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_96075","",1,#MSG_SEQ,"","")
				EXIT (%FAILURE)
			END_IF
		ELSE
			FIND IN TM_TRANSPORT_ORDER &
				/LOCK=WRITE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=AP_DIVISION=SOP_SHIPPING_LEGS(AP_DIVISION) &
				/WITH=TM_ORDER_NUMBER=SOP_SHIPPING_LEGS(TM_ORDER_NUMBER)

			IF (%STATUS <> %SUCCESS)
				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_96056","",1,#MSG_SEQ,(SOP_SHIPPING_LEGS(TM_ORDER_NUMBER)),"")
				ROLLBACK
				EXIT (%FAILURE)
			END_IF

		END_IF

!		SOP_SHIPPING_LEGS(SOP_SHIPPING_RUN_NUMBER) = #SOP_SHIPPING_RUN_NUMBER

		CLEAR_BUFFER TM_SHIPMENT_LOAD
		FIND IN TM_TRANSACTION_TYPES &
			/LOCK=WRITE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=AP_DIVISION=SOP_SHIPPING_LEGS(AP_DIVISION) &
			/WITH=TRANSACTION_TYPE=(PARAMETER("TTYPE_TL"))

		IF (%STATUS = %FAILURE)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_93121","",1,#MSG_SEQ,"","")
			EXIT (%FAILURE)
		ELSE
			TM_SHIPMENT_LOAD(TM_LOAD_NUMBER) = TM_TRANSACTION_TYPES(TRANSACTION_NUMBER)
			TM_TRANSACTION_TYPES(TRANSACTION_NUMBER) = &
				TM_SHIPMENT_LOAD(TM_LOAD_NUMBER) + 1
		END_IF

		TM_SHIPMENT_LOAD(COMPANY_CODE) = #COMPANY_CODE
		TM_SHIPMENT_LOAD(AP_DIVISION) = TSL:TM_SHIPMENT_LOAD(AP_DIVISION)
		TM_SHIPMENT_LOAD(DIVISION) = #DIVISION
		TM_SHIPMENT_LOAD(SOP_SHIPPING_RUN_NUMBER) = #SOP_SHIPPING_RUN_NUMBER
		TM_SHIPMENT_LOAD(SOP_LOAD_ID) = TSL:TM_SHIPMENT_LOAD(SOP_LOAD_ID)
		TM_SHIPMENT_LOAD(TM_CARGO_TYPE) = SOP_SHIPPING_LEGS(TM_CARGO_TYPE)
		TM_SHIPMENT_LOAD(SYS_FREIGHT_MODE) = TSL:TM_SHIPMENT_LOAD(SYS_FREIGHT_MODE)

		TM_SHIPMENT_LOAD(TM_ORDER_NUMBER) = TM_TRANSPORT_ORDER(TM_ORDER_NUMBER)
		TM_SHIPMENT_LOAD(WEIGHT_UOM) = TSL:TM_SHIPMENT_LOAD(WEIGHT_UOM)
		TM_SHIPMENT_LOAD(CUBIC_SIZE_UOM) = TSL:TM_SHIPMENT_LOAD(CUBIC_SIZE_UOM)

!		TM_SHIPMENT_LOAD(SOP_LOAD_WEIGHT_EST) = TSL:TM_SHIPMENT_LOAD(SOP_LOAD_WEIGHT_EST)
!		TM_SHIPMENT_LOAD(SOP_PRODUCT_WEIGHT) = TSL:TM_SHIPMENT_LOAD(SOP_PRODUCT_WEIGHT)
!		TM_SHIPMENT_LOAD(SOP_LOAD_SIZE) = TSL:TM_SHIPMENT_LOAD(SOP_LOAD_SIZE)
!		TM_SHIPMENT_LOAD(TM_NO_PACKS) = TSL:TM_SHIPMENT_LOAD(TM_NO_PACKS)

		TM_SHIPMENT_LOAD(TM_TARE_WEIGHT) = TSL:TM_SHIPMENT_LOAD(TM_TARE_WEIGHT)

		IF (SOP_SHIPPING_LEGS(TM_TRANSSHIP_TYPE) = PARAMETER("TM_TRANSSHIP_DEPOT") OR &
		    SOP_SHIPPING_LEGS(TM_TRANSSHIP_TYPE) = PARAMETER("TM_TRANSSHIP_WAREHOUSE"))
			TM_SHIPMENT_LOAD(SOP_SHIPPING_TERMS_CODE) = #TM_TRANSFER_SHIPPING_TERMS
		ELSE

			FIND IN SALES_ORDER_HEADERS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=ORDER_NUMBER = #ORDER_NUMBER

			IF (%STATUS=%SUCCESS)
				TM_SHIPMENT_LOAD(SOP_SHIPPING_TERMS_CODE) = &
					SALES_ORDER_HEADERS(SOP_SHIPPING_TERMS_CODE)
			ELSE
				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_52188","",1,#MSG_SEQ,"","")
				EXIT(%FAILURE)
			END_IF
                END_IF

		TM_SHIPMENT_LOAD(TM_PRECURSOR_LOAD) = #TM_LOAD_NUMBER
		TM_SHIPMENT_LOAD(CONFIRM_DESPATCH) = #YES

		TM_SHIPMENT_LOAD(SYS_CURRENCY_DATE) = #DESPATCH_DATE

		ADD TO TM_SHIPMENT_LOAD
		IF (%STATUS <> %SUCCESS)
			ROLLBACK
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_93122","",1,#MSG_SEQ,"","")
			EXIT (%FAILURE)
		END_IF

		#NO_PACKS_FOR_NEW_LOAD = TSL:TM_SHIPMENT_LOAD(TM_NO_PACKS)
END_FORM

PROCEDURE_FORM UPDATE_QTY_ON_LOAD

	BEGIN_BLOCK UPDATE

		TM_SHIPMENT_LOAD(SOP_LOAD_WEIGHT_EST) = #LOAD_WEIGHT_FOR_NEW_LOAD
		TM_SHIPMENT_LOAD(SOP_PRODUCT_WEIGHT) = #PRODUCT_WEIGHT_FOR_NEW_LOAD
		TM_SHIPMENT_LOAD(SOP_LOAD_SIZE) = #LOAD_SIZE_FOR_NEW_LOAD
		TM_SHIPMENT_LOAD(TM_NO_PACKS) = #NO_PACKS_FOR_NEW_LOAD

			PERFORM "GEMSYS:SYS_L_FREIGHT_CALCULATION" CALCULATE_FREIGHT_WS &
					(PARAMETER("TM_FREIGHT_CALC_LOAD"),	&
					#DESPATCH_DATE,	&
					"",	&
					"",	&
					"",	&
					#YES,	&
					#TOTAL_PACK_QTY_TO_SHIP,	&
					#TM_PACK_UOM,	&
					#TOTAL_NOMI_QTY_TO_SHIP,	&
					#TM_NOMI_UOM,	&
					#TOTAL_OTHER_QTY_TO_SHIP,	&
					#TM_OTHER_UOM,	&
					"",	&
					#FREIGHT_CHARGE_CURRENCY,	&
					#CURRENCY_CODE,	&
					#FREIGHT_CHARGE_BASE,	&
					#CUBIC,"","","","","",#CALL_MODE)

			TM_SHIPMENT_LOAD(TM_FREIGHT_CHARGE_CURRENCY) = #FREIGHT_CHARGE_CURRENCY
			TM_SHIPMENT_LOAD(SYS_FREIGHT_CHARGE_BASE) = #FREIGHT_CHARGE_BASE
			TM_SHIPMENT_LOAD(SYS_CURRENCY_CODE) = #CURRENCY_CODE

!TM AR Freight Accounting - flag the load as having freight calculated
			TM_SHIPMENT_LOAD(SYS_FREIGHT_CALCULATED) = #YES

			FIND IN TM_TRANSPORT_ORDER &
				/LOCK=WRITE &
				/WITH=COMPANY_CODE=TM_SHIPMENT_LOAD(COMPANY_CODE) &
				/WITH=AP_DIVISION=TM_SHIPMENT_LOAD(AP_DIVISION) &
				/WITH=TM_ORDER_NUMBER=TM_SHIPMENT_LOAD(TM_ORDER_NUMBER)

			IF (%STATUS<>%SUCCESS)
				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_93121","",1,#MSG_SEQ,"","")
				EXIT(%FAILURE)
			END_IF

! 			No delta's because this is a new load
			TM_TRANSPORT_ORDER(SYS_CURRENCY_CODE) = TM_SHIPMENT_LOAD(SYS_CURRENCY_CODE)
			TM_TRANSPORT_ORDER(TM_FREIGHT_CHARGE_CURRENCY) = TM_TRANSPORT_ORDER(TM_FREIGHT_CHARGE_CURRENCY) + &
											#FREIGHT_CHARGE_CURRENCY
			TM_TRANSPORT_ORDER(SYS_FREIGHT_CHARGE_BASE) = TM_TRANSPORT_ORDER(SYS_FREIGHT_CHARGE_BASE) + &
											#FREIGHT_CHARGE_BASE
			TM_TRANSPORT_ORDER(SYS_CURRENCY_CODE) = #CURRENCY_CODE
			TM_TRANSPORT_ORDER(TM_ORDER_RECORDED_CUBIC) = TM_TRANSPORT_ORDER(TM_ORDER_RECORDED_CUBIC) + &
									TM_SHIPMENT_LOAD(SOP_LOAD_SIZE)
			TM_TRANSPORT_ORDER(TM_ORDER_RECORDED_WEIGHT) = TM_TRANSPORT_ORDER(TM_ORDER_RECORDED_WEIGHT) + &
									TM_SHIPMENT_LOAD(SOP_LOAD_WEIGHT_EST)
	END_BLOCK

END_FORM

PROCEDURE_FORM UPDATE_LEG

	BEGIN_BLOCK INIT
		FIND IN SOP_SHIPPING_LEGS	&
			/LOCK=WRITE	&
			/WITH=COMPANY_CODE = #COMPANY_CODE	&
			/WITH=DIVISION = #DIVISION	&
			/WITH=ORDER_NUMBER = SHIPMENT_DETAILS_VT(ORDER_NUMBER)	&
			/WITH=SHIPPING_REQUIREMENT_NUMBER = SHIPMENT_DETAILS_VT(SHIPPING_REQUIREMENT_NUMBER)	&
			/WITH=SHIPPING_LEG = SHIPMENT_DETAILS_VT(SHIPPING_LEG)
		IF (%STATUS <> %SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_93102","",1,#MSG_SEQ,"","")
			EXIT (%FAILURE)
		END_IF
	END_BLOCK

	BEGIN_BLOCK UPDATE
		SOP_SHIPPING_LEGS(SOP_SHIPPING_RUN_NUMBER)	= #SOP_SHIPPING_RUN_NUMBER
		IF (SOP_SHIPPING_LEGS(TM_ORDER_NUMBER)	= "")
			SOP_SHIPPING_LEGS(TM_ORDER_NUMBER)	= TM_TRANSPORT_ORDER(TM_ORDER_NUMBER)
			SOP_SHIPPING_LEGS(AP_DIVISION)	= TM_SHIPMENT_LOAD(AP_DIVISION)
		END_IF
		SOP_SHIPPING_LEGS(STATUS_FLAG)	= PARAMETER("TM_LEG_CURRENT")
		IF (SOP_SHIPPING_LEGS(TM_TRANSSHIP_TYPE) = PARAMETER("TM_TRANSSHIP_DEPOT"))
!			#TM_TRANSPORT_DEPOT	= SOP_SHIPPING_LEGS(TM_TRANSPORT_DEPOT)
		END_IF
	END_BLOCK
END_FORM


PROCEDURE_FORM DETERMINE_LEG_DATA
! Determine whether this leg is an export leg, or whether there is a
! subsequent leg with no warehouse in-between.  Get the shipping terms.
!
! call from BEFORE_IC_LEG

	BEGIN_BLOCK DETERMINE

		FIND IN DESPATCH_NOTES	&
			/LOCK=NONE	&
			/WITH=COMPANY_CODE = #COMPANY_CODE	&
			/WITH=DIVISION = #DIVISION	&
			/WITH=DESPATCH_NOTE = SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)	&
			/WITH=DESPATCH_LINE = SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)

		FIND IN SOP_SHIPPING_LEGS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=ORDER_NUMBER = SOP_DESPATCH_NOTES_VT(ORDER_NUMBER) &
			/WITH=SHIPPING_REQUIREMENT_NUMBER = DESPATCH_NOTES(SHIPPING_REQUIREMENT_NUMBER) &
			/WITH=SHIPPING_LEG = SOP_DESPATCH_NOTES_VT(SHIPPING_LEG)

		IF (%STATUS <> %SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_93102","",2,#MSG_SEQ,"","")
			EXIT(%FAILURE)
		END_IF

		! Non Scheduled leg could be for either Domestic or Export Orders.
		! If this is a non-scheduled leg and a proof of delivery
		! is required, we do not want to release this despatch for
		! invoicing yet.

		FIND IN TM_TRANSPORT_ORDER &
			/LOCK=NONE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=AP_DIVISION = SOP_SHIPPING_LEGS(AP_DIVISION) &
			/WITH=TM_ORDER_NUMBER = SOP_SHIPPING_LEGS(TM_ORDER_NUMBER)

		#TM_INVOICING_METHOD = TM_TRANSPORT_ORDER(TM_INVOICING_METHOD)

		#SHIPPING_LEG = SOP_SHIPPING_LEGS(SHIPPING_LEG)

		IF (SOP_SHIPPING_LEGS(TM_INTERNATIONAL_LEG) = #YES)
			#EXPORT_SHIPPING_LEG = SOP_SHIPPING_LEGS(SHIPPING_LEG)
		ELSE
			IF (SOP_SHIPPING_LEGS(TM_TRANSSHIP_TYPE) = PARAMETER("TM_TRANSSHIP_DEPOT"))
				START_STREAM SL &
					/SECONDARY &
					/TABLE=SOP_SHIPPING_LEGS &
					/LOCK=NONE &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=DIVISION=#DIVISION &
					/WITH=ORDER_NUMBER=SOP_DESPATCH_NOTES_VT(ORDER_NUMBER) &
					/WITH=SHIPPING_REQUIREMENT_NUMBER = DESPATCH_NOTES(SHIPPING_REQUIREMENT_NUMBER) &
					/WITH=SHIPPING_LEG > SOP_DESPATCH_NOTES_VT(SHIPPING_LEG)

				WHILE (1)

					FETCH SL/FAILURE=(CONTINUE OUT)
					IF (SL:SOP_SHIPPING_LEGS(TM_INTERNATIONAL_LEG) = #YES)
						#EXPORT_SHIPPING_LEG = SL:SOP_SHIPPING_LEGS(SHIPPING_LEG)
					END_IF
			                IF (SL:SOP_SHIPPING_LEGS(TM_TRANSSHIP_TYPE) <> PARAMETER("TM_TRANSSHIP_DEPOT"))
						CONTINUE OUT
					END_IF
				END_WHILE

			END_IF
		END_IF

		! Get the shipping terms
		FIND IN SALES_ORDER_LINES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=SOP_DESPATCH_NOTES_VT(DIVISION) &
			/WITH=ORDER_NUMBER=SOP_DESPATCH_NOTES_VT(ORDER_NUMBER)	&
			/WITH=ORDER_LINE_NUMBER=SOP_DESPATCH_NOTES_VT(ORDER_LINE_NUMBER)

		IF (%STATUS<>%SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_52188","",2,#MSG_SEQ,"","")
			EXIT(%FAILURE)
		END_IF

		FIND IN SOP_SHIPPING_TERMS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=SOP_SHIPPING_TERMS_CODE=SALES_ORDER_LINES(SOP_SHIPPING_TERMS_CODE)
		IF (%STATUS <> %SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_92502","",2,#MSG_SEQ,"","")
			EXIT (%FAILURE)
		END_IF
		!
		!Get the shipping requirements to determine whether current
		!leg is the invoicing leg
		!
		FIND IN SOP_SHIPPING_REQUIREMENTS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=ORDER_NUMBER=SOP_DESPATCH_NOTES_VT(ORDER_NUMBER) &
			/WITH=SHIPPING_REQUIREMENT_NUMBER = DESPATCH_NOTES(SHIPPING_REQUIREMENT_NUMBER)

		IF (%STATUS <> %SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_96077","",2,#MSG_SEQ,&
				(DESPATCH_NOTES(ORDER_NUMBER)),(DESPATCH_NOTES(SHIPPING_REQUIREMENT_NUMBER)))
			EXIT(%FAILURE)
		END_IF
		#INVOICING_LEG = SOP_SHIPPING_REQUIREMENTS(INVOICING_LEG)
	END_BLOCK
END_FORM

PROCEDURE_FORM INITIALIZE_SHIPMENT_DETAIL

	BEGIN_BLOCK INIT
		#TOTAL_SALES_QTY_TO_SHIP	= ""
		#TOTAL_NOMI_QTY_TO_SHIP	= ""
		#TOTAL_PACK_QTY_TO_SHIP	= ""
		#TOTAL_OTHER_QTY_TO_SHIP	= ""
	END_BLOCK

END_FORM

PROCEDURE_FORM UPDATE_SHIPMENT_DETAILS

	BEGIN_BLOCK START
		FIND IN SOP_SHIPMENT_DETAILS	&
			/SECONDARY &
			/STREAM_NAME=SSD &
			/LOCK=WRITE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=SOP_SHIPPING_RUN_NUMBER=#SOP_SHIPPING_RUN_NUMBER &
			/WITH=SOP_SHIPPING_LIST_LINE=#SOP_SHIPPING_LIST_LINE &
			/WITH=SHIPMENT_SPLIT_SEQUENCE=#SHIPMENT_SPLIT_SEQUENCE &
			/WITH=SHIPPING_LEG = #SHIPPING_LEG
		IF (%STATUS <> %SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_96078","",1,#MSG_SEQ, &
					#SOP_SHIPPING_RUN_NUMBER, &
					#SOP_SHIPPING_LIST_LINE, &
					#SHIPMENT_SPLIT_SEQUENCE)
			EXIT(%FAILURE)
		END_IF

		IF (SSD:SOP_SHIPMENT_DETAILS(SALES_QTY_PROCESSED) = 0)
			SSD:SOP_SHIPMENT_DETAILS(SALES_QTY_PROCESSED) = #TOTAL_SALES_QTY_TO_SHIP
			SSD:SOP_SHIPMENT_DETAILS(PACK_QTY_PROCESSED) = #TOTAL_PACK_QTY_TO_SHIP
			SSD:SOP_SHIPMENT_DETAILS(NOMINATED_QTY_PROCESSED) = #TOTAL_NOMI_QTY_TO_SHIP
			SSD:SOP_SHIPMENT_DETAILS(OTHER_QTY_PROCESSED) = #TOTAL_OTHER_QTY_TO_SHIP
		END_IF

		#PART_CODE = SSD:SOP_SHIPMENT_DETAILS(PART_CODE)
	END_BLOCK

	BEGIN_BLOCK TOTAL_FOR_LOAD
		! Convert the totals for the detail and accumlate into totals
		! for the load
		#PART_CODE = SSD:SOP_SHIPMENT_DETAILS(PART_CODE)
		#FROM_UNIT = SSD:SOP_SHIPMENT_DETAILS(UNIT_SALES)
		#FROM_QTY = SSD:SOP_SHIPMENT_DETAILS(SALES_QTY_TO_SHIP)
		#SHIPPING_REQUIREMENT_NUMBER	= SSD:SOP_SHIPMENT_DETAILS(SHIPPING_REQUIREMENT_NUMBER)

		!Get the load weight
		#TO_UNIT = #WEIGHT_UOM_FOR_LOAD

		#LOAD_WEIGHT_FOR_LOAD = #LOAD_WEIGHT_FOR_LOAD + SSD:SOP_SHIPMENT_DETAILS(SOP_LOAD_WEIGHT)

		!Get the product weight
		#PRODUCT_WEIGHT_FOR_LOAD =  #PRODUCT_WEIGHT_FOR_LOAD + SSD:SOP_SHIPMENT_DETAILS(SOP_PRODUCT_WEIGHT)

		!Get the load size
		#LOAD_SIZE_FOR_LOAD = #LOAD_SIZE_FOR_LOAD + SSD:SOP_SHIPMENT_DETAILS(SOP_LOAD_SIZE)
	END_BLOCK

	BEGIN_BLOCK ADD_NEW_DETAILS
	! if the current leg of the despatch is to a transport depot then
	! process subsequent legs

		FIND IN SOP_SHIPPING_LEGS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION &
			/WITH=ORDER_NUMBER = #ORDER_NUMBER	&
			/WITH=SHIPPING_REQUIREMENT_NUMBER = #SHIPPING_REQUIREMENT_NUMBER	&
			/WITH=SHIPPING_LEG = #SHIPPING_LEG
		IF (%STATUS <> %SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_93102","",1,#MSG_SEQ,"","")
			EXIT(%FAILURE)
		END_IF
		IF (SOP_SHIPPING_LEGS(TM_TRANSSHIP_TYPE) = PARAMETER("TM_TRANSSHIP_DEPOT"))
			START_STREAM SL &
				/SECONDARY &
				/TABLE=SOP_SHIPPING_LEGS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=DIVISION=#DIVISION &
				/WITH=ORDER_NUMBER = #ORDER_NUMBER	&
				/WITH=SHIPPING_REQUIREMENT_NUMBER = #SHIPPING_REQUIREMENT_NUMBER	&
				/WITH=SHIPPING_LEG > #SHIPPING_LEG

			WHILE (1)

				FETCH SL/FAILURE=(CONTINUE OUT)

				#CREATE_FOLLOW_ON = #NO
				IF (SL:SOP_SHIPPING_LEGS(SOP_SHIPPING_RUN_NUMBER) = "" OR	&
				    SL:SOP_SHIPPING_LEGS(SOP_SHIPPING_RUN_NUMBER) = #SOP_SHIPPING_RUN_NUMBER)
					#CREATE_FOLLOW_ON = #YES
				ELSE
					#CREATE_FOLLOW_ON	= #NO
				END_IF

				IF (#CREATE_FOLLOW_ON = #YES)
					! Create a new shipment detail, but first
					! check that one hasn't already been
					! added from a previous run
					FIND IN SOP_SHIPMENT_DETAILS &
						/WITH=COMPANY_CODE=#COMPANY_CODE &
						/WITH=DIVISION=#DIVISION &
						/WITH=SOP_SHIPPING_RUN_NUMBER=#SOP_SHIPPING_RUN_NUMBER &
						/WITH=SOP_SHIPPING_LIST_LINE=SOP_SHIPMENT_DETAILS(SOP_SHIPPING_LIST_LINE) &
						/WITH=SHIPMENT_SPLIT_SEQUENCE = SOP_SHIPMENT_DETAILS(SHIPMENT_SPLIT_SEQUENCE) &
						/WITH=SHIPPING_LEG = SL:SOP_SHIPPING_LEGS(SHIPPING_LEG)

					IF (%STATUS=%SUCCESS)
						IF (SOP_SHIPMENT_DETAILS(SOP_LOAD_ID) = 0)
							DELETE FROM SOP_SHIPMENT_DETAILS
						ELSE
							CONTINUE
						END_IF
					END_IF

					CLEAR_BUFFER SHIPMENT_DETAILS_VT
					SHIPMENT_DETAILS_VT(COMPANY_CODE) = SSD:SOP_SHIPMENT_DETAILS(COMPANY_CODE)
					SHIPMENT_DETAILS_VT(DIVISION) = SSD:SOP_SHIPMENT_DETAILS(DIVISION)
					SHIPMENT_DETAILS_VT(ORDER_NUMBER) = SSD:SOP_SHIPMENT_DETAILS(ORDER_NUMBER)
					SHIPMENT_DETAILS_VT(ORDER_LINE_NUMBER) = SSD:SOP_SHIPMENT_DETAILS(ORDER_LINE_NUMBER)
					SHIPMENT_DETAILS_VT(SEQUENCE) = SSD:SOP_SHIPMENT_DETAILS(SEQUENCE)
					SHIPMENT_DETAILS_VT(PART_CODE) = SSD:SOP_SHIPMENT_DETAILS(PART_CODE)
					SHIPMENT_DETAILS_VT(UNIT_SALES) = SSD:SOP_SHIPMENT_DETAILS(UNIT_SALES)
					SHIPMENT_DETAILS_VT(IC_PACK_UNIT) = SSD:SOP_SHIPMENT_DETAILS(IC_PACK_UNIT)
					SHIPMENT_DETAILS_VT(SOP_NOMINATED_UNIT) = SSD:SOP_SHIPMENT_DETAILS(SOP_NOMINATED_UNIT)
					SHIPMENT_DETAILS_VT(IC_OTHER_INVENTORY_UNIT) = SSD:SOP_SHIPMENT_DETAILS(IC_OTHER_INVENTORY_UNIT)
					SHIPMENT_DETAILS_VT(SALES_QTY_TO_SHIP)= SSD:SOP_SHIPMENT_DETAILS(SALES_QTY_TO_SHIP)
					SHIPMENT_DETAILS_VT(PACK_QTY_TO_SHIP)= SSD:SOP_SHIPMENT_DETAILS(PACK_QTY_TO_SHIP)
					SHIPMENT_DETAILS_VT(NOMINATED_QTY_TO_SHIP)= SSD:SOP_SHIPMENT_DETAILS(NOMINATED_QTY_TO_SHIP)
					SHIPMENT_DETAILS_VT(OTHER_QTY_TO_SHIP)= SSD:SOP_SHIPMENT_DETAILS(OTHER_QTY_TO_SHIP)
					SHIPMENT_DETAILS_VT(SALES_QTY_PROCESSED) = SSD:SOP_SHIPMENT_DETAILS(SALES_QTY_PROCESSED)
					SHIPMENT_DETAILS_VT(PACK_QTY_PROCESSED) = SSD:SOP_SHIPMENT_DETAILS(PACK_QTY_PROCESSED)
					SHIPMENT_DETAILS_VT(OTHER_QTY_PROCESSED) = SSD:SOP_SHIPMENT_DETAILS(OTHER_QTY_PROCESSED)
					SHIPMENT_DETAILS_VT(NOMINATED_QTY_PROCESSED) = SSD:SOP_SHIPMENT_DETAILS(NOMINATED_QTY_PROCESSED)
					SHIPMENT_DETAILS_VT(SOP_LOAD_WEIGHT) = SSD:SOP_SHIPMENT_DETAILS(SOP_LOAD_WEIGHT)
					SHIPMENT_DETAILS_VT(WEIGHT_UOM) = SSD:SOP_SHIPMENT_DETAILS(WEIGHT_UOM)
					SHIPMENT_DETAILS_VT(SOP_PRODUCT_WEIGHT) = SSD:SOP_SHIPMENT_DETAILS(SOP_PRODUCT_WEIGHT)
					SHIPMENT_DETAILS_VT(SOP_LOAD_SIZE) = SSD:SOP_SHIPMENT_DETAILS(SOP_LOAD_SIZE)
					SHIPMENT_DETAILS_VT(CUBIC_SIZE_UOM) = SSD:SOP_SHIPMENT_DETAILS(CUBIC_SIZE_UOM)
					SHIPMENT_DETAILS_VT(CUSTOMER_NUMBER) = SSD:SOP_SHIPMENT_DETAILS(CUSTOMER_NUMBER)

					SHIPMENT_DETAILS_VT(SOP_LOAD_ID) = SSD:SOP_SHIPMENT_DETAILS(SOP_LOAD_ID)

					SHIPMENT_DETAILS_VT(SOP_SHIPPING_RUN_NUMBER)= #SOP_SHIPPING_RUN_NUMBER
					SHIPMENT_DETAILS_VT(SOP_SHIPPING_LIST_LINE) = SSD:SOP_SHIPMENT_DETAILS(SOP_SHIPPING_LIST_LINE)

					SHIPMENT_DETAILS_VT(SHIPMENT_SPLIT_SEQUENCE) = SSD:SOP_SHIPMENT_DETAILS(SHIPMENT_SPLIT_SEQUENCE)

					SHIPMENT_DETAILS_VT(SHIPPING_REQUIREMENT_NUMBER) = SL:SOP_SHIPPING_LEGS(SHIPPING_REQUIREMENT_NUMBER)
					SHIPMENT_DETAILS_VT(SHIPPING_LEG) = SL:SOP_SHIPPING_LEGS(SHIPPING_LEG)
					SHIPMENT_DETAILS_VT(WAREHOUSE) = SSD:SOP_SHIPMENT_DETAILS(WAREHOUSE)

					SHIPMENT_DETAILS_VT(TM_SERVICE_ID) = SL:SOP_SHIPPING_LEGS(TM_SERVICE_ID)

					ADD TO SHIPMENT_DETAILS_VT
					IF (%STATUS <> %SUCCESS)
						PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
							("FIN","P_92951","",1,#MSG_SEQ,"","")
						EXIT (%FAILURE)
					END_IF
				END_IF
		                IF (SL:SOP_SHIPPING_LEGS(TM_TRANSSHIP_TYPE) <> PARAMETER("TM_TRANSSHIP_DEPOT"))
					CONTINUE OUT
				END_IF
			END_WHILE
		END_IF
	END_BLOCK
END_FORM

PROCEDURE_FORM DETERMINE_MH_CONV

	BEGIN_BLOCK CHECK_FOR_MH_IN_USE

		#IC_MHU_TYPE = PRODUCT_WAREHOUSE(IC_MHU_TYPE)
		IF (#IC_MHU_TYPE <> #IC_MHU_NONE)
			#MH_IN_USE = #YES
		ELSE
			#MH_IN_USE = #NO
		END_IF

		IF (#MH_IN_USE <> #YES)
			EXIT(%NORMAL)
		END_IF
	END_BLOCK
END_FORM


PROCEDURE_FORM COST_UPDATE

	BEGIN_BLOCK GET_CONTROLS
		IF (#NOMINATED_QTY_DESPATCHED = 0)
			DESPATCH_NOTES(UNIT_COST) = 0
			EXIT
		END_IF

		FIND IN AR_CONTROLS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=DESPATCH_NOTES(DIVISION)

		IF (%STATUS <> %SUCCESS)
			ROLLBACK
			! "Invalid division !AS"
			#ERR_MSG = "P_02791"
			#LIN_SEQ = 0
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN",#ERR_MSG,"",#ERR_MSG_FATAL,#LIN_SEQ,#DIVISION)
			EXIT (%FAILURE)
		END_IF

		IF (AR_CONTROLS(SOP_ACTIVE) <> #YES)
			ROLLBACK
			! "Division is not activated"
			#ERR_MSG = "P_00243"
			#LIN_SEQ = 0
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN",#ERR_MSG,"",#ERR_MSG_FATAL,#LIN_SEQ)
			EXIT (%FAILURE)
		END_IF

		#AR_CURRENCY_EXCHANGE_CODE	= AR_CONTROLS(AR_CURRENCY_EXCHANGE_CODE)
		#AR_CURRENCY_FULL_ACCOUNT	= AR_CONTROLS(AR_CURRENCY_FULL_ACCOUNT)
		#CURRENCY_METHOD		= AR_CONTROLS(SYS_CURRENCY_METHOD)
		#AR_YEAR			= AR_CONTROLS(CURRENT_YEAR)
		#AR_PERIOD			= AR_CONTROLS(CURRENT_PERIOD)
		#DEBIT_ACC			= PRODUCT_MASTER(GL_COS)
		#DEBIT_CODE			= PRODUCT_MASTER(GL_COS_CODE)
		#DOC_REFERENCE			= DESPATCH_NOTES(DESPATCH_NOTE) & "-" & DESPATCH_NOTES(DESPATCH_LINE)
		#TR_DESC			= MESSAGE("P_56082")
		#PART_CODE			= DESPATCH_NOTES(PART_CODE)
	END_BLOCK

	BEGIN_BLOCK READ_HEADER
		FIND IN SALES_ORDER_HEADERS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=DESPATCH_NOTES(DIVISION) &
			/WITH=ORDER_NUMBER=DESPATCH_NOTES(ORDER_NUMBER)

		IF (%STATUS <> %SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_52188","",1,#MSG_SEQ,"","")
			EXIT(%FAILURE)
		END_IF

		#SYS_CURRENCY_CODE = SALES_ORDER_HEADERS(SYS_CURRENCY_CODE)
		#SYS_CURRENCY_RATE = SALES_ORDER_HEADERS(SYS_CURRENCY_RATE)
	END_BLOCK

	BEGIN_BLOCK UPDATE
		PERFORM "GEMLB:LB_NONWAREHOUSED_COST_DECREASE" COST_UPDATE_WS &
				(#COMPANY_CODE, &
				#PART_CODE, &
				#NOMINATED_QTY_DESPATCHED, &
				'0', &
				"", &
				"", &
				"", &
				"", &
				#DEBIT_ACC, &
				#DEBIT_CODE, &
				%TODAY, &
				(PARAMETER("MODULE_SO")), &
				(PARAMETER("TTYPE_DN")), &
				#DOC_REFERENCE, &
				#TR_DESC, &
				#PART_CODE, &
				#AR_YEAR, &
				#AR_PERIOD, &
				(DESPATCH_NOTES(DIVISION)), &
				(DESPATCH_NOTES(DIVISION)), &
				#COST_CENTER, &
				#SYS_CURRENCY_CODE, &
				#SYS_CURRENCY_RATE, &
				#CURRENCY_METHOD, &
				#AR_CURRENCY_EXCHANGE_CODE, &
				#AR_CURRENCY_FULL_ACCOUNT, &
				#R1, &
				#R2)

		IF (%STATUS = %FAILURE)
			EXIT(%FAILURE)
		END_IF

		DESPATCH_NOTES(UNIT_COST) = #R2
	END_BLOCK
END_FORM

PROCEDURE_FORM CONVERT_TO_OTHER_CAPACITY_UOM (#P1,#P2,#P3,#P4,#R1)

	BEGIN_BLOCK START
		#FROM_UOM			= #P1
		#FROM_QTY			= #P2
		#TO_UOM				= #P3
		#IC_CHARACTERISTIC_SOURCE	= #P4
		#R1				= ''

		PERFORM CALL_UOM_CONVERSION_ROUTINE &
			(#COMPANY_CODE, &
			(DESPATCH_NOTES(WAREHOUSE)), &
			(DESPATCH_NOTES(PART_CODE)), &
			(DESPATCH_NOTES(IC_LOT_NUMBER)), &
			#FROM_QTY, &
			#FROM_UOM, &
			#TO_UOM, &
			#IC_CHARACTERISTIC_SOURCE, &
			#IC_DECIMAL_FROM, &
			#QTY_CONVERTED_TO, &
			#IC_DECIMAL_TO, &
			#SYS_CONV_METHOD, &
			#UOM_CONVERSION_FACTOR, &
			#SYS_CONV_SUCCESSFUL, &
			#IC_CHARACTERISTIC_SOURCE)

		#R1 = #QTY_CONVERTED_TO

	END_BLOCK
END_FORM

PROCEDURE_FORM CALL_UOM_CONVERSION_ROUTINE (#P1,#P2,#P3,#P4,#P5,#P6,#P7,#P8,#R1,#R2,#R3,#R4,#R5,#R6,#R7)


	BEGIN_BLOCK START
		DELETE ALL FROM SYS_DO_UOM_CONV_VT

		CLEAR_BUFFER SYS_DO_UOM_CONV_VT
		SYS_DO_UOM_CONV_VT(COMPANY_CODE)		= #P1
		SYS_DO_UOM_CONV_VT(WAREHOUSE)			= #P2
		SYS_DO_UOM_CONV_VT(PART_CODE)			= #P3
		SYS_DO_UOM_CONV_VT(IC_LOT_NUMBER)		= #P4
		SYS_DO_UOM_CONV_VT(IC_QTY_FROM)			= #P5
		SYS_DO_UOM_CONV_VT(UNIT_FROM)			= #P6
		SYS_DO_UOM_CONV_VT(UNIT_TO)			= #P7
		SYS_DO_UOM_CONV_VT(IC_CHARACTERISTIC_SOURCE)	= #P8

		ADD TO SYS_DO_UOM_CONV_VT


		PERFORM "GEMLB:LB_C_IC_ENGINE_CONTROLLER" &
					( #IC_E_UOM_CONV, &
				          #RETURN_STATUS, &
					  #RETURN_MESSAGE)

		IF (%STATUS = %FAILURE &
		OR  #RETURN_STATUS = #NO)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","",#RETURN_MESSAGE,1, 0,"","")
			EXIT (%FAILURE)
		ELSE
			FIND IN SYS_DO_UOM_CONV_VT
			#R1	= SYS_DO_UOM_CONV_VT(IC_DECIMAL_FROM)
			#R2	= SYS_DO_UOM_CONV_VT(IC_QTY_TO)
			#R3	= SYS_DO_UOM_CONV_VT(IC_DECIMAL_TO)
			#R4	= SYS_DO_UOM_CONV_VT(SYS_CONV_METHOD)
			#R5	= SYS_DO_UOM_CONV_VT(UOM_CONVERSION_FACTOR)
			#R6	= SYS_DO_UOM_CONV_VT(SYS_CONV_SUCCESSFUL)
			#R7	= SYS_DO_UOM_CONV_VT(IC_CHARACTERISTIC_SOURCE)
		END_IF
	END_BLOCK

END_FORM


PROCEDURE_FORM FILL_IC_ENGINE_VT (#P1, #P2)

	BEGIN_BLOCK FILL_IC_ENGINE_VT
		#IC_UPDATE_PURPOSE 	= #P1
		#IC_MOVEMENT		= #P2

		CLEAR_BUFFER IC_ENGINE_VT
		IC_ENGINE_VT(IC_UPDATE_PURPOSE) 	= #IC_UPDATE_PURPOSE
		IC_ENGINE_VT(COMPANY_CODE) 		= #COMPANY_CODE
		IC_ENGINE_VT(WAREHOUSE) 		= DESPATCH_NOTES(WAREHOUSE)
		IC_ENGINE_VT(PART_CODE) 		= DESPATCH_NOTES(PART_CODE)
		IC_ENGINE_VT(IC_PRODUCT_UOM_CONTROL) 	= #IC_PRODUCT_UOM_CONTROL
		IC_ENGINE_VT(IC_PACKAGED_PRODUCT) 	= #IC_PACKAGED_PRODUCT
		IC_ENGINE_VT(BATCHES_EXIST) 		= DESPATCH_NOTES(BATCH_FLAG)
		IC_ENGINE_VT(BIN_SIZING) 		= DESPATCH_NOTES(BIN_SIZING)
		IC_ENGINE_VT(IC_MHU_TYPE) 		= #IC_MHU_TYPE
		IC_ENGINE_VT(IC_AUTO_BIN_SELECTION) 	= #NO
		IC_ENGINE_VT(IC_AUTO_LOT_SELECTION) 	= #NO
		IC_ENGINE_VT(IC_AUTO_NUMBER_LOTS) 	= #AUTO_BATCHES
		IC_ENGINE_VT(IC_IGNORE_EXPIRY_DATE) 	= #NO
		IC_ENGINE_VT(IC_NEW_LOT_SEQUENCE_REQD) 	= #NO
		IC_ENGINE_VT(IC_OVERRIDE_AVAILABLE) 	= #YES
		IC_ENGINE_VT(FACTORY) 			= ''
		IC_ENGINE_VT(DIVISION) 			= #DIVISION
		IC_ENGINE_VT(DOCUMENT_NUMBER) 		= DESPATCH_NOTES(DESPATCH_NOTE)
		IC_ENGINE_VT(DOCUMENT_LINE) 		= DESPATCH_NOTES(DESPATCH_LINE)
		IC_ENGINE_VT(DOCUMENT_SEQUENCE) 	= DESPATCH_NOTES(DESPATCH_SEQUENCE)
		IC_ENGINE_VT(SOURCE_MODULE) 		= #MODULE_SO
		IC_ENGINE_VT(SYS_CALLING_FUNCTION) 	= #ID

                IF (#LEGAL_POSTING_CODE = #JAPAN_LEGAL_POSTING)
                        IC_ENGINE_VT(YEAR)         	= #MV_YEAR
                        IC_ENGINE_VT(PERIOD)       	= #MV_PERIOD
                        IC_ENGINE_VT(POSTING_DATE) 	= #DESPATCH_DATE
                        IC_ENGINE_VT(TRANSACTION_DATE) 	= #DESPATCH_DATE
                ELSE
	                IC_ENGINE_VT(YEAR) 		= #YEAR
	                IC_ENGINE_VT(PERIOD) 		= #PERIOD
	                IC_ENGINE_VT(POSTING_DATE)      = %TODAY
                        IC_ENGINE_VT(TRANSACTION_DATE) 	= %TODAY
                END_IF

		IC_ENGINE_VT(USERNAME) 			= %USERNAME
		IC_ENGINE_VT(TRANSACTION_TYPE) 		= PARAMETER("TTYPE_DN")
		IC_ENGINE_VT(TRANSACTION_DESCRIPTION) 	= #TR_DESC
		IC_ENGINE_VT(MOVEMENT_CODE) 		= #IC_MOVEMENT
		IC_ENGINE_VT(IC_QUANTITY_FIELD) 	= #FIELD
		IC_ENGINE_VT(IC_STATUS_CODE) 		= #IC_STATUS_CODE
		IC_ENGINE_VT(SYS_CURRENCY_METHOD) 	= #CURRENCY_METHOD
		IC_ENGINE_VT(TRANS_CURRENCY_CODE) 	= DESPATCH_NOTES(SYS_BASE_CURRENCY)
		IC_ENGINE_VT(BASE_TO_TRANS_CURRENCY_RATE) = 1.0
		IC_ENGINE_VT(BASE_TO_TRANS_RATIO_INDIC) = PARAMETER("MULTIPLY_RATIO_INDIC")
		IC_ENGINE_VT(INV_VALUATION_METHOD) 	= #WH_VALUATION_METHOD
		IC_ENGINE_VT(IC_STD_VARIANCES_REQD) 	= ""
		IC_ENGINE_VT(COST_CENTER) 		= #COST_CENTER
		IC_ENGINE_VT(TRANSFER_AT_COST) 		= ""
!E12997
!		IC_ENGINE_VT(GL_INV) 			= ""
!		IC_ENGINE_VT(GL_INV_CODE) 		= ""
		IC_ENGINE_VT(GL_INV) 			= #INV_ASSET_ACC
		IC_ENGINE_VT(GL_INV_CODE) 		= #INV_ASSET_CODE

		IC_ENGINE_VT(GL_BAL_INV) 		= #DEBIT_ACC
		IC_ENGINE_VT(GL_BAL_INV_CODE) 		= #DEBIT_CODE
		IC_ENGINE_VT(BAL_DIVISION) 		= #DIVISION
		IC_ENGINE_VT(GL_TRANSFER_DR_ACCOUNT) 	= ""
		IC_ENGINE_VT(GL_TRANSFER_DR_CODE) 	= ""
		IC_ENGINE_VT(GL_TRANSFER_CR_ACCOUNT) 	= ""
		IC_ENGINE_VT(GL_TRANSFER_CR_CODE) 	= ""
		IC_ENGINE_VT(IC_TOTAL_COST_NOT_UNIT) 	= #NO
		IC_ENGINE_VT(IC_TOTAL_COST) 		= ""
		IC_ENGINE_VT(UNIT_COST) 		= ""
		IC_ENGINE_VT(IC_EXISTING_COST_QUANTITY) = ""
		IC_ENGINE_VT(IC_UPDATE_UNCONFIRM_MOVEMENTS) = ""
		IC_ENGINE_VT(IC_RELATED_DOCUMENT_NUMBER) = DESPATCH_NOTES(ORDER_NUMBER)
		IC_ENGINE_VT(IC_RELATED_DOCUMENT_LINE) 	= DESPATCH_NOTES(ORDER_LINE_NUMBER)
		IC_ENGINE_VT(IC_RELATED_DOCUMENT_SEQUENCE) = DESPATCH_NOTES(SEQUENCE)
		IC_ENGINE_VT(IC_CHARACTERISTIC_COUNT) 	= #IC_CHARACTERISTIC_COUNT

		!For Legal Posting Option 1 and 2 only
		IF (#IC_UPDATE_PURPOSE = #IC_DECREASE)
			IF (#LEGAL_POSTING_CODE = #LEGAL_POSTING_OPTION_1)
				IC_ENGINE_VT(IC_NO_COSTING_FOR_UPDATE) = #XCTUAL
                        ELSE_IF ((#LEGAL_POSTING_CODE = #LEGAL_POSTING_OPTION_2) OR &
                                 (#LEGAL_POSTING_CODE = #JAPAN_LEGAL_POSTING))
				IC_ENGINE_VT(IC_NO_COSTING_FOR_UPDATE) = #NO_GL_POSTINGS
			END_IF
		END_IF

		ADD TO IC_ENGINE_VT
	END_BLOCK

END_FORM


PROCEDURE_FORM FILL_IC_ENGINE_DETAILS_VT (#P1)

	BEGIN_BLOCK START
		#IC_RECORD_TYPE = #P1

		CLEAR_BUFFER IC_ENGINE_DETAILS_VT

		IC_ENGINE_DETAILS_VT(IC_RECORD_TYPE) = #IC_RECORD_TYPE
		IC_ENGINE_DETAILS_VT(IC_RECORD_PHASE) = #SYS_PHASE_FIRM
		IC_ENGINE_DETAILS_VT(IC_LOT_NUMBER) = #IC_LOT_NUMBER
		IC_ENGINE_DETAILS_VT(IC_LOT_SEQUENCE) = #IC_LOT_SEQUENCE
		IF (#IC_MHU_TYPE = #IC_MHU_NONE &
		OR  #IC_MHU_TYPE = #IC_MHU_VARIABLE)
			#IC_MHU_ACTUAL_TYPE = #IC_MHU_TYPE
		ELSE
			#IC_MHU_ACTUAL_TYPE = #IC_MHU_WHOLE
		END_IF
		IC_ENGINE_DETAILS_VT(IC_MHU_ACTUAL_TYPE) = #IC_MHU_ACTUAL_TYPE
		IC_ENGINE_DETAILS_VT(BIN_LOCATION) = #BIN_LOCATION
		IC_ENGINE_DETAILS_VT(MH_NUMBER) = #MH_NUMBER
		IC_ENGINE_DETAILS_VT(IC_MOVE_QUANTITY_1) = #PACK_QTY_DESPATCHED
		IC_ENGINE_DETAILS_VT(UNIT_OF_MEASURE_1) = #PACK_UNIT
		IC_ENGINE_DETAILS_VT(IC_MOVE_QUANTITY_2) = #OTHER_QTY_DESPATCHED
		IC_ENGINE_DETAILS_VT(UNIT_OF_MEASURE_2) = #OTHER_UNIT
		IC_ENGINE_DETAILS_VT(IC_MOVE_QUANTITY_3) = #NOMINATED_QTY_DESPATCHED
		IC_ENGINE_DETAILS_VT(UNIT_OF_MEASURE_3) = #NOMINATED_UNIT
		IC_ENGINE_DETAILS_VT(BEST_BEFORE_DATE) = #BEST_BEFORE_DATE
		IC_ENGINE_DETAILS_VT(EXPIRY_DATE) = #EXPIRY_DATE
		IC_ENGINE_DETAILS_VT(IC_RETEST_DATE) = #RETEST_DATE
		IC_ENGINE_DETAILS_VT(IC_VENDOR_LOT_NUMBER) = #IC_VENDOR_LOT_NUMBER
		IC_ENGINE_DETAILS_VT(IC_ENGINE_CALC_UNIT_COST) = ""
		IC_ENGINE_DETAILS_VT(IC_ENGINE_CALC_TOTAL_COST) = ""

		ADD TO IC_ENGINE_DETAILS_VT
	END_BLOCK

END_FORM

PROCEDURE_FORM DELETE_ALL_FROM_IC_ENGINE_VT &
	/TABLE=IC_ENGINE_VT

	BEGIN_BLOCK START
		DELETE FROM IC_ENGINE_VT
	END_BLOCK
END_FORM

PROCEDURE_FORM DELETE_ALL_FROM_IC_ENGINE_DETAILS_VT &
	/TABLE=IC_ENGINE_DETAILS_VT

	BEGIN_BLOCK START
		DELETE FROM IC_ENGINE_DETAILS_VT
	END_BLOCK
END_FORM

PROCEDURE_FORM DELETE_ALL_FROM_IC_ATP_VT &
	/TABLE=IC_ATP_VT

	BEGIN_BLOCK START
		DELETE FROM IC_ATP_VT
	END_BLOCK

END_FORM


PROCEDURE_FORM FILL_IC_ATP_VT

	BEGIN_BLOCK CLEAR_IC_ATP_VT
		PERFORM DELETE_ALL_FROM_IC_ATP_VT
	END_BLOCK

	BEGIN_BLOCK DETERMINE_RECORD_TYPE
		IF (PRODUCT_MASTER(BATCHES_AT_SALES_ORDERS) = #YES OR #CHARACTERISTICS_AT_ORDER_ENTRY = #YES)
			#ATP_RECORD_TYPE = #IC_RECORD_LOT
		ELSE
			#ATP_RECORD_TYPE = #IC_RECORD_PRODUCT
		END_IF
	END_BLOCK

	BEGIN_BLOCK ATP_VARIABLES
		IF (#IC_PACKAGED_PRODUCT = #YES AND #PACK_UNIT <> "")
			#ATP_UNIT = #PACK_UNIT
		ELSE
			#ATP_UNIT = #NOMINATED_UNIT

			! despatch notes nominated unit is the sales order line nominated unit;
			! this unit is changed in sop_t_001 if the sales unit is changed to be an inventory unit
			! that is not the product_master(sop_nominated_unit), so it may not now = product master(sop_nominated_unit;)
			! But the ATP unit for a non-packaged part is always the product master(sop_nominated_unit). T
			! Therefore, use the product_master(sop_nominated_unit) and make that the ATP unit, as that is
			! the ATP unit used on the IC_ATP_INPUTS and the IC_PROMISE_DETAILS...

			#ATP_UNIT = PRODUCT_MASTER(SOP_NOMINATED_UNIT)
		END_IF
	END_BLOCK

	BEGIN_BLOCK FILL_ATP_VT

                FIND IN IC_ENGINE_VT &
                        /STREAM_NAME=ENGVT

                FIND IN IC_ENGINE_DETAILS_VT &
                        /STREAM_NAME=EDVT &
                        /WITH=IC_RECORD_TYPE=#ATP_RECORD_TYPE

		CLEAR_BUFFER IC_ATP_VT

		IC_ATP_VT(IC_UPDATE_PURPOSE) 	= ""
		IC_ATP_VT(IC_ATP_UPDATE_PURPOSE)= PARAMETER("IC_ATP_UPDATE_FROM_SODCNF")
		IC_ATP_VT(COMPANY_CODE) 	= ENGVT:IC_ENGINE_VT(COMPANY_CODE)
		IC_ATP_VT(DIVISION) 		= ENGVT:IC_ENGINE_VT(DIVISION)
		IC_ATP_VT(ORDER_NUMBER) 	= DESPATCH_NOTES(ORDER_NUMBER)
		IC_ATP_VT(ORDER_LINE_NUMBER) 	= DESPATCH_NOTES(ORDER_LINE_NUMBER)
		IC_ATP_VT(SEQUENCE) 		= DESPATCH_NOTES(SEQUENCE)
		IC_ATP_VT(WAREHOUSE) 		= ENGVT:IC_ENGINE_VT(WAREHOUSE)
		IC_ATP_VT(PART_CODE) 		= ENGVT:IC_ENGINE_VT(PART_CODE)
		IC_ATP_VT(IC_LOT_NUMBER) 	= EDVT:IC_ENGINE_DETAILS_VT(IC_LOT_NUMBER)
		IC_ATP_VT(IC_STATUS_CODE) 	= #IC_STATUS_CODE
		IC_ATP_VT(UNIT_OF_MEASURE) 	= #ATP_UNIT
		IC_ATP_VT(SYSTEM_DATE) 		= %NOW
		IC_ATP_VT(AVAILABLE_DATE) 	= ""
		IC_ATP_VT(USERNAME) 		= %USERNAME
		IC_ATP_VT(IC_ATP_SOURCE_TYPE_CODE) = #IC_ATP_SOURCE_TYPE_CODE
		IC_ATP_VT(IC_ATP_QTY_PROMISED) 	= ""
		IC_ATP_VT(IC_QUANTITY_FIELD) 	= ""
		IC_ATP_VT(REMARK_1) 		= ""
		IC_ATP_VT(REMARK_2) 		= ""

		BEGIN_CASE (#ATP_UNIT)
			CASE (EDVT:IC_ENGINE_DETAILS_VT(UNIT_OF_MEASURE_1))
				#ATP_MOVE_QTY = EDVT:IC_ENGINE_DETAILS_VT(IC_MOVE_QUANTITY_1)

			CASE (EDVT:IC_ENGINE_DETAILS_VT(UNIT_OF_MEASURE_2))
				#ATP_MOVE_QTY = EDVT:IC_ENGINE_DETAILS_VT(IC_MOVE_QUANTITY_2)

			CASE (EDVT:IC_ENGINE_DETAILS_VT(UNIT_OF_MEASURE_3))
				#ATP_MOVE_QTY = EDVT:IC_ENGINE_DETAILS_VT(IC_MOVE_QUANTITY_3)
		END_CASE

		IF (ENGVT:IC_ENGINE_VT(IC_QUANTITY_FIELD) = PARAMETER("IC_QUANTITY"))
			IC_ATP_VT(IC_MOVE_QUANTITY) = #ATP_MOVE_QTY
			IC_ATP_VT(IC_OLD_ALLOC_QUANTITY) = #ATP_MOVE_QTY
		END_IF

		ADD TO IC_ATP_VT
	END_BLOCK

END_FORM


PROCEDURE_FORM UPDATE_ATP_QTYS

	BEGIN_BLOCK START

		!Call IC_Engine to update the ATP tables
		PERFORM "GEMLB:LB_C_IC_ENGINE_CONTROLLER" &
				(PARAMETER("IC_E_ATP_UPDATE_FROM_SOP"), &
				      	  #RETURN_STATUS, &
					  #RETURN_MESSAGE)

		IF (%STATUS = %FAILURE OR #RETURN_STATUS = #NO)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","",#RETURN_MESSAGE,1,#MSG_SEQ,"","")
			EXIT (%FAILURE)
		END_IF

	END_BLOCK

END_FORM

PROCEDURE_FORM GET_IN_DESPATCH_QTY( #UOM, #IN_DESPATCH_QTY)

	BEGIN_BLOCK INIT
		#IN_DESPATCH_QTY	= 0
		IF (#UOM = "")
			EXIT
		END_IF
	END_BLOCK

	BEGIN_BLOCK GET
		FIND IN DESPATCH_NOTE_QTYS	&
			/LOCK = NONE	&
			/WITH=COMPANY_CODE = #COMPANY_CODE	&
			/WITH=DIVISION = DESPATCH_NOTES(DIVISION)	&
			/WITH=DESPATCH_NOTE = DESPATCH_NOTES(DESPATCH_NOTE)	&
			/WITH=DESPATCH_LINE = DESPATCH_NOTES(DESPATCH_LINE)	&
			/WITH=UNIT_OF_MEASURE = #UOM
		IF (%STATUS <> %SUCCESS)
			#IN_DESPATCH_QTY	= 0
			EXIT (%FAILURE)
		END_IF

		#IN_DESPATCH_QTY	= DESPATCH_NOTE_QTYS(IC_QTY_IN_DESPATCH)
	END_BLOCK
END_FORM

PROCEDURE_FORM UPDATE_DESPATCHED_QTYS (#UOM, #QTY_DESPATCHED)	&
	/LOCK=WRITE	&
	/TABLE=DESPATCH_NOTE_QTYS	&
	/WITH=COMPANY_CODE = #COMPANY_CODE &
	/WITH=DIVISION = SOP_DESPATCH_NOTES_VT(DIVISION)	&
	/WITH=DESPATCH_NOTE = SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)	&
	/WITH=DESPATCH_LINE = SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)	&
	/WITH=UNIT_OF_MEASURE = #UOM


	BEGIN_BLOCK DESPATCHED
		!
		! pass back the qty for this despatch not line and uom
		! use to update despatch qty's of sales order line and detail

		#QTY_DESPATCHED	= DESPATCH_NOTE_QTYS(IC_QTY_IN_DESPATCH)

		DESPATCH_NOTE_QTYS(QTY_DESPATCHED)	= DESPATCH_NOTE_QTYS(IC_QTY_IN_DESPATCH)
		DESPATCH_NOTE_QTYS(IC_QTY_IN_DESPATCH)	= 0
	END_BLOCK

END_FORM

PROCEDURE_FORM UPDATE_SALES_QTYS (#UOM, #QTY_DESPATCHED)	&
	/LOCK=WRITE	&
	/TABLE=SALES_ORDER_LINE_DETAIL_QTYS &
	/WITH=COMPANY_CODE = #COMPANY_CODE	&
	/WITH=DIVISION = SOP_DESPATCH_NOTES_VT(DIVISION)	&
	/WITH=ORDER_NUMBER = SOP_DESPATCH_NOTES_VT(ORDER_NUMBER)	&
	/WITH=ORDER_LINE_NUMBER = SOP_DESPATCH_NOTES_VT(ORDER_LINE_NUMBER)	&
	/WITH=SEQUENCE = SOP_DESPATCH_NOTES_VT(SEQUENCE)	&
	/WITH=UNIT_OF_MEASURE = #UOM

	BEGIN_BLOCK UPDATE_DETAIL
		SALES_ORDER_LINE_DETAIL_QTYS(IC_QTY_IN_DESPATCH) = &
			SALES_ORDER_LINE_DETAIL_QTYS(IC_QTY_IN_DESPATCH) - #QTY_DESPATCHED
		SALES_ORDER_LINE_DETAIL_QTYS(QTY_DESPATCHED) = &
			SALES_ORDER_LINE_DETAIL_QTYS(QTY_DESPATCHED) + #QTY_DESPATCHED
	END_BLOCK

	BEGIN_BLOCK UPDATE_LINE
		FIND IN SALES_ORDER_LINE_QTYS	&
			/LOCK=WRITE	&
			/WITH=COMPANY_CODE = #COMPANY_CODE	&
			/WITH=DIVISION = SOP_DESPATCH_NOTES_VT(DIVISION)	&
			/WITH=ORDER_NUMBER = SOP_DESPATCH_NOTES_VT(ORDER_NUMBER)	&
			/WITH=ORDER_LINE_NUMBER = SOP_DESPATCH_NOTES_VT(ORDER_LINE_NUMBER)	&
			/WITH=UNIT_OF_MEASURE = #UOM
		IF (%STATUS <> %SUCCESS)
			EXIT (%FAILURE)
		END_IF
		SALES_ORDER_LINE_QTYS(IC_QTY_IN_DESPATCH) = SALES_ORDER_LINE_QTYS(IC_QTY_IN_DESPATCH) - #QTY_DESPATCHED
		SALES_ORDER_LINE_QTYS(QTY_DESPATCHED) = SALES_ORDER_LINE_QTYS(QTY_DESPATCHED) + #QTY_DESPATCHED

	END_BLOCK

END_FORM

PROCEDURE_FORM GET_DESPATCH_QTYS_FOR_SO (#TOTAL_NOMI_IN_DESPATCH_QTY, #TOTAL_PACK_IN_DESPATCH_QTY) &
	/TABLE=DESPATCH_NOTES	&
	/LOCK=NONE	&
	/WITH=COMPANY_CODE = #COMPANY_CODE &
	/WITH=DIVISION = SOP_DESPATCH_NOTES_VT(DIVISION)	&
	/WITH=ORDER_NUMBER = SOP_DESPATCH_NOTES_VT(ORDER_NUMBER)	&
	/WITH=ORDER_LINE_NUMBER = SOP_DESPATCH_NOTES_VT(ORDER_LINE_NUMBER)

	BEGIN_BLOCK FILTER
	! make sure this despatch note is one that we are processing
		FIND IN SOP_DESPATCH_NOTES_VT &
			/SECONDARY	&
			/LOCK=NONE	&
			/WITH=DIVISION = DESPATCH_NOTES(DIVISION)	&
			/WITH=DESPATCH_NOTE = DESPATCH_NOTES(DESPATCH_NOTE)	&
			/WITH=DESPATCH_LINE = DESPATCH_NOTES(DESPATCH_LINE)

		IF (%STATUS = %SUCCESS)
			PERFORM GET_IN_DESPATCH_QTY((DESPATCH_NOTES(SOP_NOMINATED_UNIT)), #NOMI_IN_DESPATCH_QTY)
			#TOTAL_NOMI_IN_DESPATCH_QTY	= #TOTAL_NOMI_IN_DESPATCH_QTY + #NOMI_IN_DESPATCH_QTY

			IF (PRODUCT_MASTER(IC_PACKAGED_PRODUCT) = #YES)
				PERFORM GET_IN_DESPATCH_QTY((DESPATCH_NOTES(IC_PACK_UNIT)), #PACK_IN_DESPATCH_QTY)
				#TOTAL_PACK_IN_DESPATCH_QTY	= #TOTAL_PACK_IN_DESPATCH_QTY + #PACK_IN_DESPATCH_QTY
			END_IF
		END_IF
	END_BLOCK
END_FORM


PROCEDURE_FORM INIT_SOP_DESPATCH_NOTES_VT &
	/TABLE=SOP_DESPATCH_NOTES_VT	&

	BEGIN_BLOCK DELETE
		DELETE FROM SOP_DESPATCH_NOTES_VT
	END_BLOCK
END_FORM


PROCEDURE_FORM DEFINE_VT

	BEGIN_BLOCK CREATE_SHIPMENT_DETAILS_VT

		IF ( TABLE_CHECK("SHIPMENT_DETAILS_VT","") = %SUCCESS )
			DELETE TABLE SHIPMENT_DETAILS_VT
		END_IF

		ADD TABLE SHIPMENT_DETAILS_VT &
			/VIRTUAL &
			/DESCRIPTION="Shipment Details for Load Assignment"&
			/ADD_FIELD=COMPANY_CODE &
			/ADD_FIELD=DIVISION &
			/ADD_FIELD=ORDER_NUMBER &
			/ADD_FIELD=ORDER_LINE_NUMBER &
			/ADD_FIELD=SEQUENCE &
			/ADD_FIELD=SOP_SHIPPING_RUN_NUMBER &
			/ADD_FIELD=SOP_SHIPPING_LIST_LINE &
			/ADD_FIELD = SOP_LOAD_ID &
			/ADD_FIELD=AP_DIVISION &
			/ADD_FIELD=TM_LOAD_NUMBER &
			/ADD_FIELD = SHIPPING_REQUIREMENT_NUMBER &
			/ADD_FIELD = SHIPPING_LEG	&
			/ADD_FIELD = WAREHOUSE &
			/ADD_FIELD=PART_CODE &
			/ADD_FIELD = SALES_QTY_TO_SHIP	&
			/ADD_FIELD = PACK_QTY_TO_SHIP	&
			/ADD_FIELD = NOMINATED_QTY_TO_SHIP	&
			/ADD_FIELD = OTHER_QTY_TO_SHIP	&
			/ADD_FIELD=SOP_LOAD_WEIGHT based_on WEIGHT &
			/ADD_FIELD=SOP_PRODUCT_WEIGHT based_on WEIGHT &
			/ADD_FIELD=WEIGHT_UOM &
			/ADD_FIELD=SOP_LOAD_SIZE based_on CUBIC_SIZE &
			/ADD_FIELD=CUBIC_SIZE_UOM &
			/ADD_FIELD = CUSTOMER_NUMBER &
			/ADD_FIELD = MP_SHIPPING_CUSTOMER	&
			/ADD_FIELD = SALES_QTY_PROCESSED	&
			/ADD_FIELD = PACK_QTY_PROCESSED	&
			/ADD_FIELD = NOMINATED_QTY_PROCESSED	&
			/ADD_FIELD = OTHER_QTY_PROCESSED	&
			/ADD_FIELD=PREASSIGNED_FLAG based_on FLAG &
			/ADD_FIELD=TM_SERVICE_ID	&
			/ADD_FIELD = UNIT_SALES	&
			/ADD_FIELD = IC_PACK_UNIT	&
			/ADD_FIELD = SOP_NOMINATED_UNIT	&
			/ADD_FIELD = IC_OTHER_INVENTORY_UNIT	&
			/ADD_FIELD = SHIPMENT_SPLIT_SEQUENCE BASED_ON SEQUENCE
	END_BLOCK
END_FORM


PROCEDURE_FORM GET_DESPATCHED_QTY ( #UOM, #DESPATCHED_QTY)

	BEGIN_BLOCK INIT
		#DESPATCHED_QTY	= 0
		IF (#UOM = "")
			EXIT
		END_IF
	END_BLOCK

	BEGIN_BLOCK GET
		FIND IN DESPATCH_NOTE_QTYS	&
			/LOCK = WRITE &
			/WITH=COMPANY_CODE = #COMPANY_CODE	&
			/WITH=DIVISION = #DIVISION	&
			/WITH=DESPATCH_NOTE = SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)	&
			/WITH=DESPATCH_LINE = SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)	&
			/WITH=UNIT_OF_MEASURE = #UOM
		IF (%STATUS <> %SUCCESS)
			#DESPATCHED_QTY	= 0
			EXIT (%FAILURE)
		END_IF

		#DESPATCHED_QTY	= DESPATCH_NOTE_QTYS(QTY_DESPATCHED)
	END_BLOCK

END_FORM

PROCEDURE_FORM SET_DEBIT_ACCT(#IN_DEBIT_ACC, #IN_DEBIT_CODE)

	BEGIN_BLOCK INIT
	END_BLOCK

	BEGIN_BLOCK SET_MP_DISCOUNT
		FIND IN MP_ORDER_LINE_DISCOUNTS	&
			/WITH=COMPANY_CODE = #COMPANY_CODE	&
			/WITH=DIVISION = #DIVISION	&
			/WITH=ORDER_NUMBER = SALES_ORDER_LINES(ORDER_NUMBER)	&
			/WITH=ORDER_LINE_NUMBER = SALES_ORDER_LINES(MP_PARENT_LINE_NUMBER)	&
			/WITH=MP_CHILD_ORDER_LINE_NUMBER = SALES_ORDER_LINES(ORDER_LINE_NUMBER)
		IF (%STATUS <> %SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_85569","",2,#MSG_SEQ, &
				#COMPANY_CODE, &
				#DIVISION, &
				(SALES_ORDER_LINES(ORDER_NUMBER)), &
				(SALES_ORDER_LINES(ORDER_LINE_NUMBER)))

			EXIT (%FAILURE)
		END_IF
	END_BLOCK

	BEGIN_BLOCK PROMOTION
		FIND IN MP_PROMOTIONS	&
			/LOCK=NONE	&
			/WITH=COMPANY_CODE = #COMPANY_CODE	&
			/WITH=DIVISION = #DIVISION	&
			/WITH=MP_PROMOTION_CODE = MP_ORDER_LINE_DISCOUNTS(DOCUMENT_NUMBER)
		IF (%STATUS = %SUCCESS)
			#IN_DEBIT_ACC	= MP_PROMOTIONS(MP_PROMOTION_ACCOUNT)
			#IN_DEBIT_CODE	= MP_PROMOTIONS(MP_PROMOTION_GL_CODE)
		END_IF
	END_BLOCK

END_FORM

PROCEDURE_FORM SET_MP_INFO( #IN_ORDER_NUMBER, #IN_ORDER_LINE_NUMBER, #R_MP_GIFT_OR_BOGO)

	BEGIN_BLOCK DOC
	END_BLOCK

	BEGIN_BLOCK INIT
		#R_MP_GIFT_OR_BOGO	= #NO
	END_BLOCK

	BEGIN_BLOCK GIFT_OR_BOGO
		FIND IN SALES_ORDER_LINES	&
			/LOCK=NONE	&
			/WITH=COMPANY_CODE = #COMPANY_CODE	&
			/WITH=DIVISION = #DIVISION	&
			/WITH=ORDER_NUMBER = #IN_ORDER_NUMBER	&
			/WITH=ORDER_LINE_NUMBER = #IN_ORDER_LINE_NUMBER
		IF (%STATUS = %SUCCESS)
			IF (SALES_ORDER_LINES(MP_ORDER_LINE_SOURCE) = PARAMETER("MP_ORDER_LINE_SOURCE_BOGO") OR	&
			   SALES_ORDER_LINES(MP_ORDER_LINE_SOURCE) = PARAMETER("MP_ORDER_LINE_SOURCE_GIFT"))
				#R_MP_GIFT_OR_BOGO	= #YES
			END_IF
		END_IF
	END_BLOCK
END_FORM

PROCEDURE_FORM CLOSE_ORDER &
        /TABLE=SOP_DESPATCH_NOTES_VT &
        /SORTED_BY=(ORDER_NUMBER) &
        /REDUCED_TO=(ORDER_NUMBER,DIVISION) &
        /SECONDARY &
        /STREAM_NAME=CLOSE_ORDER

	BEGIN_BLOCK INIT
        #CURRENT_ORDER = CLOSE_ORDER:SOP_DESPATCH_NOTES_VT(ORDER_NUMBER)
		#CURRENT_DIV   = CLOSE_ORDER:SOP_DESPATCH_NOTES_VT(DIVISION)
		#SHIP_NOTE 	   = CLOSE_ORDER:SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)
	END_BLOCK

	BEGIN_BLOCK CLOSE
		PERFORM DELETE_ALL_SYS_MESSAGE
        START_TRANSACTION
		PERFORM DEC_ATP_INPUTS
		PERFORM "GEMLB:LB_S_L_CLOSE_ORDER" LB_S_L_CLOSE_ORDER (#COMPANY_CODE, #DIVISION, #CURRENT_ORDER, #SHIP_NOTE,#CALL_MODE, PARAMETER("FLAG_AUTO"))
		IF (%STATUS <> %SUCCESS)
            ROLLBACK
			EXIT (%FAILURE)
		END_IF

! This message is misleading
!			FIND IN SYS_MESSAGES
!                        IF (%STATUS <> %SUCCESS)
!				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
!					("FIN","P_09283","",0,#MSG_SEQ,"","")
!			END_IF
        COMMIT
        END_BLOCK

        BEGIN_BLOCK NEXT
        END_BLOCK
END_FORM

PROCEDURE_FORM DELETE_ALL_SYS_MESSAGE	&
	/TABLE = SYS_MESSAGES	&
	/LOCK=WRITE

	BEGIN_BLOCK DELETE
		DELETE FROM SYS_MESSAGES
	END_BLOCK
END_FORM

PROCEDURE_FORM DISPLAY_SYS_MESSAGE	&
	/TABLE = SYS_MESSAGES	&
	/LOCK=NONE

	BEGIN_BLOCK DISPLAY
		ERROR/WAIT SYS_MESSAGES(TEXT_MESSAGE)
	END_BLOCK
END_FORM

PROCEDURE_FORM SET_HEADER_STATUS

	BEGIN_BLOCK SET_STATUS
		#SET_STATUS_FAILED = #NO
		#MSG_SEQ = DESPATCH_NOTES(DESPATCH_LINE)

		FIND IN DESPATCH_HEADERS &
			/LOCK=WRITE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=DESPATCH_NOTES(DIVISION) &
			/WITH=DESPATCH_NUMBER=DESPATCH_NOTES(DESPATCH_NUMBER) &
			/WITH=DESPATCH_NOTE=DESPATCH_NOTES(DESPATCH_NOTE)

		IF (DESPATCH_HEADERS(AMEND_ACTIVE_FLAG) = #SYS_YES)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_12777","",1, #MSG_SEQ,DESPATCH_HEADERS(DESPATCH_NOTE),"")
			#SET_STATUS_FAILED = #YES
			EXIT(%FAILURE)
		END_IF

		IF (#BATCH_PROCESS <> #YES)
			IF (DESPATCH_HEADERS(STATUS_FLAG) <> "")
				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_01732","",1, #MSG_SEQ,"","")
				#SET_STATUS_FAILED = #YES
				EXIT(%FAILURE)
			ELSE
				DESPATCH_HEADERS(STATUS_FLAG) = PARAMETER("STATUS_ACTIVE")
			END_IF
		END_IF
	END_BLOCK

END_FORM

PROCEDURE_FORM RESET_HEADER_STATUS_BY_VT (#IN_CO)
	BEGIN_BLOCK SETUP
		#COMPANY_CODE = #IN_CO
		PERFORM RESET_HEADER_STATUS_BY_VT_1
		IF ( %STATUS = %SUCCESS ) 
			PERFORM RESET_HEADER_STATUS_BY_VT_2
		END_IF		
	END_BLOCK 
END_FORM

PROCEDURE_FORM RESET_HEADER_STATUS_BY_VT_1 &
	/TABLE=SOP_DESPATCH_NOTES_VT &
	/LOCK=NONE &
	/SORTED_BY=(DESPATCH_NOTE) &
	/REDUCED_TO=(DESPATCH_NOTE)

	BEGIN_BLOCK RESET_STATUS
		FIND IN DESPATCH_HEADERS &
			/LOCK=WRITE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=DIVISION = SOP_DESPATCH_NOTES_VT(DIVISION) &
			/WITH=DESPATCH_NUMBER = SOP_DESPATCH_NOTES_VT(DESPATCH_NUMBER) &
			/WITH=DESPATCH_NOTE = SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE) &
			/WITH=STATUS_FLAG = (PARAMETER("STATUS_ACTIVE"))

		IF (%STATUS = %SUCCESS)
			DESPATCH_HEADERS(STATUS_FLAG) = ""
		END_IF
	END_BLOCK

END_FORM

PROCEDURE_FORM RESET_HEADER_STATUS_BY_VT_2 (#IN_CO) &
	/TABLE=SOP_DESPATCH_NOTES_VT &
	/LOCK=NONE &
	/SORTED_BY=(DESPATCH_NOTE)
	BEGIN_BLOCK CHECK_ZERO_QTY
		PERFORM CLOSE_ZERO_XFER_DESPATCH
	END_BLOCK
END_FORM


PROCEDURE_FORM GET_PART_DATA (#IN_COMPANY_CODE, #IN_PART_CODE, #OUT_UOM_CONTROL, #OUT_CAPACITY_UNIT)

	BEGIN_BLOCK CELL_BLOCK_A

		#OUT_UOM_CONTROL = ""
		#OUT_CAPACITY_UNIT = ""

		IF ((#IN_COMPANY_CODE = "") OR (#IN_PART_CODE = ""))
			EXIT(%FAILURE)
		END_IF

		FIND IN PRODUCT_MASTER &
			/LOCK = NONE &
			/SECONDARY &
			/STREAM_NAME = GUC &
			/WITH=COMPANY_CODE = #IN_COMPANY_CODE &
			/WITH=PART_CODE = #IN_PART_CODE

		IF (%STATUS <> %SUCCESS)
			EXIT(%FAILURE)
		ELSE
			#OUT_UOM_CONTROL = GUC:PRODUCT_MASTER(IC_PRODUCT_UOM_CONTROL)
			#OUT_CAPACITY_UNIT = GUC:PRODUCT_MASTER(IC_UNIT_CAPACITY)
		END_IF

	END_BLOCK
END_FORM


PROCEDURE_FORM GET_NOT_CAPACITY_UNIT(#IN_COMPANY_CODE, #IN_PART_CODE, #IN_CAPACITY_UNIT, #OUT_NOT_CAP_UNIT)

	BEGIN_BLOCK CELL_BLOCK_A

		#OUT_NOT_CAP_UNIT = ""

		IF ((#IN_COMPANY_CODE = "") OR (#IN_PART_CODE = "") OR (#IN_CAPACITY_UNIT = ""))
			EXIT(%FAILURE)
		END_IF

		FIND IN IC_PRODUCT_MASTER_UNITS &
			/LOCK = NONE &
			/SECONDARY &
			/STREAM_NAME = GNCU &
			/WITH=COMPANY_CODE = #IN_COMPANY_CODE &
			/WITH=PART_CODE = #IN_PART_CODE &
			/WITH=UNIT_OF_MEASURE <> #IN_CAPACITY_UNIT &
			/WITH=IC_PRODUCT_UOM_TYPE = PARAMETER("IC_INVENTORY_UOM")

		IF (%STATUS <> %SUCCESS)
			EXIT(%FAILURE)
		ELSE
			#OUT_NOT_CAP_UNIT = GNCU:IC_PRODUCT_MASTER_UNITS(UNIT_OF_MEASURE)
		END_IF

	END_BLOCK
END_FORM

PROCEDURE_FORM GET_DR_MOVEMENT_INFO

	BEGIN_BLOCK SETUP_VT
		PERFORM CREATE_GL_ACCOUNTS_VT
		CLEAR_BUFFER GL_ACCOUNTS_VT
		GL_ACCOUNTS_VT(COMPANY_CODE) = #COMPANY_CODE
		GL_ACCOUNTS_VT(PART_CODE) = PRODUCT_WAREHOUSE(PART_CODE)
		GL_ACCOUNTS_VT(IC_STATUS_CODE) = PARAMETER("IC_STATUS_QOH")
		GL_ACCOUNTS_VT(SOURCE_WH) = PRODUCT_WAREHOUSE(WAREHOUSE)
		GL_ACCOUNTS_VT(DESTINATION_WH) = DESPATCH_NOTES(SOP_DESTINATION_WAREHOUSE)
		ADD TO GL_ACCOUNTS_VT
	END_BLOCK

	BEGIN_BLOCK LOAD_ACCOUNTS
		PERFORM "GEMIC:IC_L_GET_TRANSFER_GL_ACCOUNTS"
		IF (%STATUS <> %SUCCESS)
			EXIT (%FAILURE)
		END_IF
		FIND IN GL_ACCOUNTS_VT
		IF (%STATUS <> %SUCCESS)
			#MSG = "P_13324"
			! Virtual Table !AS cannot be empty
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN",#MSG, "", 1, #MSG_SEQ, "GL_ACCOUNTS_VT")
			EXIT (%FAILURE)
		END_IF
		#DEBIT_ACC	= GL_ACCOUNTS_VT(TRANSFER_CLEARING_GL_ACCOUNT)
		#DEBIT_CODE	= GL_ACCOUNTS_VT(TRANSFER_CLEARING_GL_CODE)
		#INV_ASSET_ACC	= GL_ACCOUNTS_VT(SOURCE_WH_INV_ASSET_GL_ACCOUNT)
		#INV_ASSET_CODE	= GL_ACCOUNTS_VT(SOURCE_WH_INV_ASSET_GL_CODE)
		#XFER_COST_ADJ_ACC = GL_ACCOUNTS_VT(TRANSFER_COST_ADJ_GL_ACCOUNT)
		#XFER_COST_ADJ_CODE = GL_ACCOUNTS_VT(TRANSFER_COST_ADJ_GL_CODE)
	END_BLOCK

END_FORM

PROCEDURE_FORM CREATE_GL_ACCOUNTS_VT

	BEGIN_BLOCK CREATE_VT
		IF (TABLE_CHECK("GL_ACCOUNTS_VT","") = %NORMAL)
			DELETE TABLE GL_ACCOUNTS_VT
		END_IF

		ADD TABLE GL_ACCOUNTS_VT &
			/VIRTUAL &
			/DESCRIPTION="Transfer GL Accounts VT" &
			/ADD_FIELD=COMPANY_CODE &
			/ADD_FIELD=PART_CODE &
			/ADD_FIELD=IC_STATUS_CODE &
			/ADD_FIELD=SOURCE_WH BASED_ON WAREHOUSE &
			/ADD_FIELD=DESTINATION_WH BASED_ON WAREHOUSE &
			/ADD_FIELD=TRANSFER_CLEARING_GL_ACCOUNT &
			/ADD_FIELD=TRANSFER_CLEARING_GL_CODE &
			/ADD_FIELD=TRANSIT_LOSS_GL_ACCOUNT &
			/ADD_FIELD=TRANSIT_LOSS_GL_CODE	&
			/ADD_FIELD=TRANSFER_COST_ADJ_GL_ACCOUNT &
			/ADD_FIELD=TRANSFER_COST_ADJ_GL_CODE &
			/ADD_FIELD=SOURCE_WH_INV_ASSET_GL_ACCOUNT BASED_ON GL_INV&
			/ADD_FIELD=SOURCE_WH_INV_ASSET_GL_CODE BASED_ON GL_INV_CODE &
			/ADD_FIELD=DEST_WH_INV_ASSET_GL_ACCOUNT BASED_ON GL_INV &
			/ADD_FIELD=DEST_WH_INV_ASSET_GL_CODE BASED_ON GL_INV_CODE&
			/ADD_FIELD=STD_COST_VAR_GL_ACCOUNT BASED_ON STD_VARIANCE_ACCOUNT &
			/ADD_FIELD=STD_COST_VAR_GL_CODE	BASED_ON STD_VARIANCE_CODE
	END_BLOCK

END_FORM

PROCEDURE_FORM CHECK_FOR_XFER_ORDERS &
	/TABLE=SOP_DESPATCH_NOTES_VT

	BEGIN_BLOCK SET_VAR
		#MSG_SEQ = SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)

		FIND IN DESPATCH_NOTES	&
			/LOCK=NONE	&
			/WITH=COMPANY_CODE = #COMPANY_CODE	&
			/WITH=DIVISION = SOP_DESPATCH_NOTES_VT(DIVISION)	&
			/WITH=DESPATCH_NOTE = SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)	&
			/WITH=DESPATCH_LINE = SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)

		IF (DESPATCH_NOTES(SOP_DESTINATION_WAREHOUSE) <> "")
			FIND IN PRODUCT_MASTER &
				/LOCK=NONE &
				/WITH=COMPANY_CODE = #COMPANY_CODE &
				/WITH=PART_CODE = SOP_DESPATCH_NOTES_VT(PART_CODE)

			IF (%STATUS <> %SUCCESS)
				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_52319","",1, #MSG_SEQ,"","")
				EXIT (%FAILURE)
			END_IF

			#PART_CODE = PRODUCT_MASTER(PART_CODE)
			#IC_CHARACTERISTIC_COUNT = PRODUCT_MASTER(IC_CHARACTERISTIC_COUNT)

			IF (PRODUCT_MASTER(BATCH_REPLENISH_ALLOWED) <> #YES)
				#BATCH_TYPE = #NO
			ELSE
				#BATCH_TYPE = (PARAMETER("BATCH_REPLENISH"))
			END_IF

			PERFORM XFER_ORDER_CHECK_INTERACTION
			IF (%STATUS = %FAILURE)
				EXIT (%FAILURE)
			END_IF

			IF (#XFER_INTERACTION_REQUIRED = #YES)
				IF (#CALL_MODE = #CALL_MODE_W)
					! Only a fatal error for Web Service
					#MSG_SEVERITY = "1"
				ELSE
					#MSG_SEVERITY = "2"
				END_IF

				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","P_13319","",#MSG_SEVERITY, #MSG_SEQ,(SOP_DESPATCH_NOTES_VT(ORDER_NUMBER)),"")
				EXIT (%SUCCESS)
			END_IF
		END_IF
	END_BLOCK

END_FORM


PROCEDURE_FORM XFER_ORDER_CHECK_INTERACTION

	BEGIN_BLOCK SETUP

		! FROM data is identified by array element (1), TO data by element (2)

		#WAREHOUSE(1) 		   = DESPATCH_NOTES(WAREHOUSE)
		#WAREHOUSE(2) 		   = DESPATCH_NOTES(SOP_DESTINATION_WAREHOUSE)
		#IC_LOT_NUMBER(1) 	   = SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER)
		#IC_LOT_NUMBER(2) 	   = ""
		#XFER_INTERACTION_REQUIRED = #NO

	END_BLOCK

	BEGIN_BLOCK CHECK_WAREHOUSES

		! Locate source warehouse

		FIND IN WAREHOUSE_CONTROLS &
			/LOCK=NONE &
			/SECONDARY &
			/STREAM_NAME=FROM_WH &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=WAREHOUSE=#WAREHOUSE(1)

		IF (%STATUS = %FAILURE)
			 PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_52202","",1, #MSG_SEQ,#WAREHOUSE(1),"")
			 EXIT(%FAILURE)
		END_IF

		! Locate destination warehouse

		FIND IN WAREHOUSE_CONTROLS &
			/LOCK=NONE &
			/SECONDARY &
			/STREAM_NAME=TO_WH &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=WAREHOUSE=#WAREHOUSE(2)

		IF (%STATUS = %FAILURE)
			 PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
			 	("FIN","P_52202","",1, #MSG_SEQ,#WAREHOUSE(2),"")
			 EXIT(%FAILURE)
		END_IF

		! Make sure product is valid in destination warehouse

		FIND IN PRODUCT_WAREHOUSE &
			/LOCK=NONE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=WAREHOUSE = #WAREHOUSE(2) &
			/WITH=PART_CODE = #PART_CODE

		IF (%STATUS = %FAILURE)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_42174","",1, #MSG_SEQ,"","")
			 EXIT(%FAILURE)
		END_IF

!		#FROM_WH_AUTO_LOT_NUMBERING = FROM_WH:WAREHOUSE_CONTROLS(AUTO_NUMBER_BATCHES_FLAG)
		#TO_WH_AUTO_LOT_NUMBERING   = TO_WH:WAREHOUSE_CONTROLS(AUTO_NUMBER_BATCHES_FLAG)

	END_BLOCK

	BEGIN_BLOCK CHECK_RECEIVING_DIVISION

		! Assign Receiving Division based on receiving WH and User Id

		#AP_DIVISION 	     = TO_WH:WAREHOUSE_CONTROLS(DIVISION)
		#DEFAULT_AP_DIVISION = PARAMETER("TM_USER_AP_DIVISION")
		#ERROR_MESSAGE 	     = ""

		IF (#AP_DIVISION <> "")
			PERFORM CHECK_RECEIVING_DIVISION (#AP_DIVISION,#ERROR_MESSAGE,#ERROR_MESSAGE_PARAM)
			IF (%STATUS = %FAILURE)
				IF (#DEFAULT_AP_DIVISION <> "")
					! Receiving Warehouse division was blank so take User default AP Div instead
					#AP_DIVISION = #DEFAULT_AP_DIVISION
					PERFORM CHECK_RECEIVING_DIVISION (#AP_DIVISION,#ERROR_MESSAGE,#ERROR_MESSAGE_PARAM)

					IF (%STATUS = %FAILURE)
						PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
							("FIN",#ERROR_MESSAGE,"",1, #MSG_SEQ,#ERROR_MESSAGE_PARAM,"")
						EXIT(%FAILURE)
					END_IF
				ELSE
					! Message is: Receiving Warehouse - Division is blank
					#ERROR_MESSAGE = MESSAGE("P_4WAREHOUSE_8") & " - " & MESSAGE("P_89602")
					PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
						("FIN","",#ERROR_MESSAGE,1, #MSG_SEQ,"","")
					EXIT(%FAILURE)
				END_IF

			END_IF
		ELSE
			IF (#DEFAULT_AP_DIVISION <> "")
				! Receiving Warehouse division was blank so take User default AP Div instead
				#AP_DIVISION = #DEFAULT_AP_DIVISION
				PERFORM CHECK_RECEIVING_DIVISION (#AP_DIVISION,#ERROR_MESSAGE,#ERROR_MESSAGE_PARAM)

				IF (%STATUS = %FAILURE)
					PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
						("FIN",#ERROR_MESSAGE,"",1, #MSG_SEQ,#ERROR_MESSAGE_PARAM,"")
					EXIT(%FAILURE)
				END_IF
			ELSE
				! Message is: Receiving Warehouse - Division is blank
				#ERROR_MESSAGE = MESSAGE("P_4WAREHOUSE_8") & " - " & MESSAGE("P_89602")
				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","",#ERROR_MESSAGE,1, #MSG_SEQ,"","")
				EXIT(%FAILURE)
			END_IF
		END_IF

	END_BLOCK

	BEGIN_BLOCK TO_LOT_NUMBER

		#BATCHES_EXIST 	 = DESPATCH_NOTES(BATCH_FLAG)

		IF (#BATCHES_EXIST <> #YES)
			! Lots not in use - check not necessary
			#XFER_INTERACTION_REQUIRED = #NO
			EXIT (%SUCCESS)
		END_IF

		IF (SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER) = "")
			! Lots not in use - check not necessary
			#XFER_INTERACTION_REQUIRED = #NO
			EXIT (%SUCCESS)
		END_IF

		IF (#TO_WH_AUTO_LOT_NUMBERING = #YES)
			! Auto lot numbering - lot can always be generated
			! automatically without any user interaction.
			#XFER_INTERACTION_REQUIRED = #NO
			EXIT (%SUCCESS)
		END_IF

		! Manual lot numbering - check need for user interaction.
		! See if "from" lot already exists in "to" warehouse.

		FIND IN PART_BATCHES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=WAREHOUSE=#WAREHOUSE(2) &
			/WITH=PART_CODE=#PART_CODE &
			/WITH=IC_LOT_NUMBER=#IC_LOT_NUMBER(1)

		IF (%STATUS = %FAILURE)
			! Lot does not already exist in receiving warehouse, so source
			! lot details can be used to create a new lot.
			#XFER_INTERACTION_REQUIRED = #NO
			EXIT (%SUCCESS)
		END_IF

		! Source Lot Number already exists in Target Warehouse
		! #batch_type indicates whether lots are replishable.

		IF (#BATCH_TYPE <> #NO)
			! Lots are Replenishable so COULD place stock in existing lot of the
			! same number, but need to check that characteristics and dates match.

			#LOT_DETAILS_MATCH = #NO

			PERFORM COMPARE_DATES_CHARS &
				(#WAREHOUSE(1), &
				#IC_LOT_NUMBER(1), &
				#WAREHOUSE(2), &
				#IC_LOT_NUMBER(1), &
				#LOT_DETAILS_MATCH)

			IF (#LOT_DETAILS_MATCH = #YES)
				#XFER_INTERACTION_REQUIRED = #NO
				EXIT (%SUCCESS)
			END_IF
		END_IF

		! Lots are not replenishable OR the existing target lot does not share
		! the same attributes as the source lot

		#XFER_INTERACTION_REQUIRED = #YES

	END_BLOCK

END_FORM


PROCEDURE_FORM XFER_ORDER_CONFIN_UPDATE

	BEGIN_BLOCK CHECK_CONFIRM

		IF (DESPATCH_NOTES(CONFIRM_DESPATCH) <> #YES)
			GOTO END
		END_IF

		IF (DESPATCH_NOTES(SOP_DESTINATION_WAREHOUSE) = "")
			GOTO END
		END_IF

	END_BLOCK

	BEGIN_BLOCK DISPLAY_LINE_DATA
		IF (#CALL_MODE = #CALL_MODE_I)
			PERFORM DISPLAY_XFER_ORDER_LINE
		END_IF
	END_BLOCK

	BEGIN_BLOCK GET_PART_WH_DATA

		#WAREHOUSE(1) 		= DESPATCH_NOTES(WAREHOUSE)
		#WAREHOUSE(2) 		= DESPATCH_NOTES(SOP_DESTINATION_WAREHOUSE)
		#IC_LOT_NUMBER(1) 	= SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER)
		#IC_LOT_NUMBER(2) 	= ""
		#IC_MHU_ACTUAL_TYPE(2) 	= ""
		#NEW_LOT_SEQUENCE_REQD 	= #NO

		! Source warehouse

		FIND IN WAREHOUSE_CONTROLS &
			/LOCK=NONE &
			/SECONDARY &
			/STREAM_NAME=FROM_WH &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=WAREHOUSE = #WAREHOUSE(1)

		IF (%STATUS = %FAILURE)
			 PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_52202","",1,#MSG_SEQ,#WAREHOUSE(1),"")
			 EXIT (%FAILURE)
		END_IF

		! Receiving warehouse

		FIND IN WAREHOUSE_CONTROLS &
			/LOCK=NONE &
			/SECONDARY &
			/STREAM_NAME=TO_WH &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=WAREHOUSE = #WAREHOUSE(2)

		IF (%STATUS = %FAILURE)
			 PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
			 	("FIN","P_52202","",1,#MSG_SEQ,#WAREHOUSE(2),"")
			 EXIT (%FAILURE)
		END_IF

		#TO_WH_BIN_SIZING 	  = TO_WH:WAREHOUSE_CONTROLS(BIN_SIZING)
		#TO_WH_AUTO_LOT_NUMBERING = TO_WH:WAREHOUSE_CONTROLS(AUTO_NUMBER_BATCHES_FLAG)

		IF (#TO_WH_AUTO_LOT_NUMBERING = #YES)
			#AUTO_BATCHES(2) = #YES
		ELSE
			#AUTO_BATCHES(2) = #NO
		END_IF

		FIND IN PRODUCT_WAREHOUSE &
			/LOCK=NONE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=WAREHOUSE = #WAREHOUSE(2) &
			/WITH=PART_CODE = #PART_CODE

		IF (%STATUS = %FAILURE)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_42174","",1,#MSG_SEQ,"","")
			 EXIT (%FAILURE)
		END_IF

		#TO_WH_MHU_TYPE	= PRODUCT_WAREHOUSE(IC_MHU_TYPE)

		IF (#TO_WH_MHU_TYPE = #IC_MHU_NONE OR &
		    #TO_WH_MHU_TYPE = #IC_MHU_VARIABLE)
			#IC_MHU_ACTUAL_TYPE(2) = #TO_WH_MHU_TYPE
		ELSE
			#IC_MHU_ACTUAL_TYPE(2) = ""
		END_IF

	END_BLOCK

	BEGIN_BLOCK STORE_SHIPPING_VARS

		! Save values to be restored later

		FIND IN IC_ENGINE_VT

		#SHIP_DIVISION 			= #DIVISION
		#SHIP_OVERRIDE_AVAILABLE 	= #IC_OVERRIDE_AVAILABLE
		#SHIP_UPDATE_PURPOSE 		= IC_ENGINE_VT(IC_UPDATE_PURPOSE)
		#SHIP_WAREHOUSE 		= IC_ENGINE_VT(WAREHOUSE)
		#SHIP_BIN_SIZING 		= IC_ENGINE_VT(BIN_SIZING)
		#SHIP_MOVEMENT_CODE 		= IC_ENGINE_VT(MOVEMENT_CODE)
		#SHIP_QUANTITY_FIELD 		= IC_ENGINE_VT(IC_QUANTITY_FIELD)
		#SHIP_STATUS_CODE 		= IC_ENGINE_VT(IC_STATUS_CODE)
		#SHIP_AUTO_LOT_NUMBERING 	= IC_ENGINE_VT(IC_AUTO_NUMBER_LOTS)
		#SHIP_UNIT_COST 		= IC_ENGINE_VT(UNIT_COST)
		#SHIP_MHU_TYPE 			= IC_ENGINE_VT(IC_MHU_TYPE)

	END_BLOCK

	BEGIN_BLOCK STORE_RECEIVING_DIV

		! Assign Receiving Division based on receiving WH and User Id

		#ERROR_MESSAGE 	= ""
		#AP_DIVISION 	= TO_WH:WAREHOUSE_CONTROLS(DIVISION)

		IF (#AP_DIVISION <> "")
			PERFORM CHECK_RECEIVING_DIVISION (#AP_DIVISION,#ERROR_MESSAGE,#ERROR_MESSAGE_PARAM)

			IF (%STATUS = %FAILURE)
				#AP_DIVISION = PARAMETER("TM_USER_AP_DIVISION")

				IF (#AP_DIVISION <> "")
					PERFORM CHECK_RECEIVING_DIVISION (#AP_DIVISION,#ERROR_MESSAGE,#ERROR_MESSAGE_PARAM)

					IF (%STATUS = %FAILURE)
						PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
							("FIN",#ERROR_MESSAGE,"",1, #MSG_SEQ,#ERROR_MESSAGE_PARAM,"")
						EXIT(%FAILURE)
					END_IF
				ELSE
					! Message is: Receiving Warehouse - Division is blank
					#ERROR_MESSAGE = MESSAGE("P_4WAREHOUSE_8") & " - " &
									& MESSAGE("P_89602")
					PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
						("FIN","",#ERROR_MESSAGE,1,#MSG_SEQ,"","")
					EXIT(%FAILURE)
				END_IF

			END_IF
		ELSE
			! Receiving Warehouse division was blank so take User default AP Div instead
			#AP_DIVISION = PARAMETER("TM_USER_AP_DIVISION")

			IF (#AP_DIVISION <> "")
				PERFORM CHECK_RECEIVING_DIVISION (#AP_DIVISION,#ERROR_MESSAGE,#ERROR_MESSAGE_PARAM)

				IF (%STATUS = %FAILURE)
					PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
						("FIN",#ERROR_MESSAGE,"",1, #MSG_SEQ,#ERROR_MESSAGE_PARAM,"")
					EXIT(%FAILURE)
				END_IF
			ELSE
				! Message is: Receiving Warehouse - Division is blank
				#ERROR_MESSAGE = MESSAGE("P_4WAREHOUSE_8") & " - " &
									& MESSAGE("P_89602")
				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","",#ERROR_MESSAGE,1,#MSG_SEQ,"","")
				EXIT(%FAILURE)
			END_IF
		END_IF

		#BAL_DIVISION 		= #AP_DIVISION
		#DIVISION 		= #BAL_DIVISION
		#IC_OVERRIDE_AVAILABLE	= #NO
		#DIVISION(1) 		= #SHIP_DIVISION
		#DIVISION(2) 		= #BAL_DIVISION

	END_BLOCK

	BEGIN_BLOCK ASSIGN_TO_LOT_NUMBER

		IF (SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER) = "")
			GOTO ASSIGN_ENGINE_RECORD_PHASE
		END_IF

		! Need From lot details to be displayed...
		! From lot and to lot details will always be the same.

		FIND IN IC_ENGINE_DETAILS_VT &
			/WITH=IC_RECORD_TYPE = #IC_RECORD_LOT

		#IC_VENDOR_LOT_NUMBER 	= IC_ENGINE_DETAILS_VT(IC_VENDOR_LOT_NUMBER)
		#BEST_BEFORE_DATE 	= IC_ENGINE_DETAILS_VT(BEST_BEFORE_DATE)
		#EXPIRY_DATE 		= IC_ENGINE_DETAILS_VT(EXPIRY_DATE)
		#RETEST_DATE 		= IC_ENGINE_DETAILS_VT(IC_RETEST_DATE)
		#DEFAULT_COST 		= IC_ENGINE_DETAILS_VT(IC_ENGINE_CALC_UNIT_COST)
		#BATCHES_EXIST 		= DESPATCH_NOTES(BATCH_FLAG)
		#COPY_LOT_CREATE_DATE 	= #NO

		IF (#BATCHES_EXIST = #YES)
			! Retrieve details of "from" lot
			FIND IN PART_BATCHES &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=WAREHOUSE=#WAREHOUSE(1) &
				/WITH=PART_CODE=#PART_CODE &
				/WITH=IC_LOT_NUMBER=SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER)

			IF (%STATUS = %SUCCESS)
				#LOT_CREATION_DATE = PART_BATCHES(CREATION_DATE)
			   	#COPY_LOT_CREATE_DATE = #YES
			END_IF
		END_IF

		#ALLOW_BACK_FROM_DISPLAY = #NO

		! Find "from" lot in "to" warehouse

		FIND IN PART_BATCHES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=WAREHOUSE=#WAREHOUSE(2) &
			/WITH=PART_CODE=#PART_CODE &
			/WITH=IC_LOT_NUMBER=#IC_LOT_NUMBER(1)

		IF (%STATUS = %FAILURE)
			! Lot does not exist in "to" warehouse so
			! we can use it directly.

			#IC_LOT_NUMBER(2) = #IC_LOT_NUMBER(1)

			PERFORM EMPTY_IC_CHARS_XMIT_VT
			PERFORM LOAD_EXISTING_CHARS_FOR_UNIQUE (#WAREHOUSE(1), #IC_LOT_NUMBER(2))
			IF (%STATUS = %FAILURE)
				EXIT (%FAILURE)
			END_IF

			IF (#CALL_MODE = #CALL_MODE_I)
				PERFORM DISPLAY_LOT_INFO
			END_IF

			GOTO ASSIGN_ENGINE_RECORD_PHASE
		END_IF

		! Source Lot Number already exists in Target Warehouse

		IF (#BATCH_TYPE <> #NO)
			! Lots are replenishable so could place stock in existing lot of the
			! same number, but need to check that characteristics and dates match.

			#LOT_DETAILS_MATCH = #NO

			PERFORM COMPARE_DATES_CHARS &
				(#WAREHOUSE(1), &
				 #IC_LOT_NUMBER(1), &
				 #WAREHOUSE(2), &
				 #IC_LOT_NUMBER(1), &
				 #LOT_DETAILS_MATCH)

			IF (#LOT_DETAILS_MATCH = #YES)
				! Lot in receiving warehouse matches source lot, so
				! we can use it.

				#IC_LOT_NUMBER(2) 	= #IC_LOT_NUMBER(1)
				#COPY_LOT_CREATE_DATE 	= #NO

				PERFORM EMPTY_IC_CHARS_XMIT_VT
				PERFORM LOAD_EXISTING_CHARS_FOR_UNIQUE (#WAREHOUSE(1), #IC_LOT_NUMBER(2))
				IF (%STATUS = %FAILURE)
					EXIT(%FAILURE)
				END_IF

				IF (#CALL_MODE = #CALL_MODE_I)
					PERFORM DISPLAY_LOT_INFO
				END_IF
				GOTO ASSIGN_ENGINE_RECORD_PHASE
			END_IF
		END_IF

		! Lot exists in "from" warehouse AND
		! Lots are not replenishable OR
		! the existing target lot does not share the same attributes
		! so we need a new lot.

		IF (#CALL_MODE = #CALL_MODE_W)
			IF (#AUTO_BATCHES(2) = #NO)
				! Manual lot numbering
				! Cannot accept a lot number from a web service
			      	PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
		      			("FIN","P_13317","",1,#MSG_SEQ,"","")
		      		EXIT (%FAILURE)
			ELSE
				! Automatic lot numbering
				#IC_LOT_NUMBER(2) = #IC_AUTO_LOT_TEMP_PREFIX
				PERFORM EMPTY_IC_CHARS_XMIT_VT
				PERFORM LOAD_EXISTING_CHARS_FOR_UNIQUE (#WAREHOUSE(1), #IC_LOT_NUMBER)
				IF (%STATUS = %FAILURE)
					EXIT (%FAILURE)
				END_IF
			END_IF
		ELSE
			PERFORM INPUT_AND_DISPLAY_LOT_INFO
			IF (%STATUS <> %SUCCESS)
				EXIT (%STATUS)
			END_IF
		END_IF

		IF ((#COPY_LOT_CREATE_DATE = #YES) AND &
		    (#IC_LOT_NUMBER(2) <> #IC_AUTO_LOT_TEMP_PREFIX))

			! Check that the target lot does not already have a PART_BATCHES record
			! in the receiving warehouse, in which case the lot creation date should
			! not be copied from the source lot.

			FIND IN PART_BATCHES &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=WAREHOUSE=#WAREHOUSE(2) &
				/WITH=PART_CODE=#PART_CODE &
				/WITH=IC_LOT_NUMBER=#IC_LOT_NUMBER(2)

			IF (%STATUS = %SUCCESS)
				#COPY_LOT_CREATE_DATE = #NO
			END_IF
		END_IF

	END_BLOCK

	BEGIN_BLOCK ASSIGN_ENGINE_RECORD_PHASE

		! Clear Bin/MHU information off Engine Details VT records - otherwise
		! CONFIN update will fail (also reset phase to Firm).

		START_STREAM BINMHU &
			/TABLE=IC_ENGINE_DETAILS_VT &
			/WITH=IC_RECORD_TYPE=#IC_RECORD_BIN_MHU

		WHILE (1)
			FETCH BINMHU /FAILURE=(CONTINUE OUT)
			DELETE FROM IC_ENGINE_DETAILS_VT
		END_WHILE


		! set phase on details to firm
		#CONFIN_RECORD_PHASE = #SYS_PHASE_FIRM

		PERFORM RESET_ENGINE_DETAILS_INFO (#CONFIN_RECORD_PHASE)

	END_BLOCK

	BEGIN_BLOCK CALL_ENGINE
		! Setup existing Engine VT records to call engine to update CONFIN

		IC_ENGINE_VT(DIVISION) 			= #DIVISION
		IC_ENGINE_VT(IC_OVERRIDE_AVAILABLE)	= #IC_OVERRIDE_AVAILABLE
		IC_ENGINE_VT(IC_UPDATE_PURPOSE) 	= PARAMETER("IC_ADD")
		IC_ENGINE_VT(WAREHOUSE) 		= DESPATCH_NOTES(SOP_DESTINATION_WAREHOUSE)
		IC_ENGINE_VT(BIN_SIZING) 		= #TO_WH_BIN_SIZING
		IC_ENGINE_VT(IC_MHU_TYPE) 		= #TO_WH_MHU_TYPE
		IC_ENGINE_VT(MOVEMENT_CODE) 		= PARAMETER("SOP_INV_MOVE_SO_WHTO")
		IC_ENGINE_VT(IC_QUANTITY_FIELD) 	= PARAMETER("IC_QUANTITY")
		IC_ENGINE_VT(IC_STATUS_CODE) 		= PARAMETER("IC_STATUS_CONFIN")
		IC_ENGINE_VT(IC_NEW_LOT_SEQUENCE_REQD) 	= #NEW_LOT_SEQUENCE_REQD
		IC_ENGINE_VT(IC_AUTO_NUMBER_LOTS) 	= #TO_WH_AUTO_LOT_NUMBERING
		IC_ENGINE_VT(UNIT_COST) 		= #UNIT_COST

		IF (#CALL_MODE = #CALL_MODE_W)
			! Call the "S" controller directly so the lot number wont be displayed on screen
			PERFORM "GEMLB:LB_S_IC_ENGINE_CONTROLLER" &
				( #IC_E_UPDATE_ATC, &
				  #RETURN_STATUS, &
				  #RETURN_MESSAGE)

		ELSE
		    	PERFORM "GEMLB:LB_C_IC_ENGINE_CONTROLLER" &
				( #IC_E_UPDATE_ATC, &
				  #RETURN_STATUS, &
				  #RETURN_MESSAGE)
		END_IF

		IF (#RETURN_STATUS = #NO)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
					("FIN","",#RETURN_MESSAGE,1,#MSG_SEQ,"","")
			#TRAN_STATUS = PARAMETER("STATUS_FAIL")
			EXIT (%FAILURE)
		END_IF

	END_BLOCK

	BEGIN_BLOCK STORE_TO_LOT_ON_DN
		FIND IN IC_ENGINE_DETAILS_VT &
			/WITH=IC_RECORD_TYPE=#IC_RECORD_LOT

		IF (%STATUS = %FAILURE)
			GOTO RE_ASSIGN_SHIPPING_VARS
		END_IF

		! For the shipping functions these fields were previously only used by the
		! Create and Amend programs when assigning or modifying the Lot Number which
		! the goods are shipped from.
		! They will be used here only until new fields can be added to the
		! DESPATCH_NOTES table to store the Lot Number to which the goods will
		! be received in the Destination Warehouse.
		! This information is required to be stored on the Despatch Note (line)
		! in order to avoid searching a Movements table to find the Lot Number
		! when the goods are being received.
		DESPATCH_NOTES(IC_OLD_LOT_NUMBER) = IC_ENGINE_DETAILS_VT(IC_LOT_NUMBER)
		DESPATCH_NOTES(IC_OLD_LOT_SEQUENCE) = IC_ENGINE_DETAILS_VT(IC_LOT_SEQUENCE)
		#IC_LOT_NUMBER(2) = IC_ENGINE_DETAILS_VT(IC_LOT_NUMBER)

		IF (#COPY_LOT_CREATE_DATE = #YES)
			PERFORM COPY_LOT_CREATE_DATE
		END_IF

	END_BLOCK

	BEGIN_BLOCK RE_ASSIGN_SHIPPING_VARS

		#IC_OVERRIDE_AVAILABLE 			= #SHIP_OVERRIDE_AVAILABLE
		#DIVISION 				= #SHIP_DIVISION

		! Restore the modified field values in the IC_ENGINE_VT record
		FIND IN IC_ENGINE_VT

		IC_ENGINE_VT(DIVISION) 			= #DIVISION
		IC_ENGINE_VT(IC_OVERRIDE_AVAILABLE) 	= #IC_OVERRIDE_AVAILABLE
		IC_ENGINE_VT(IC_AUTO_NUMBER_LOTS) 	= #AUTO_BATCHES
		IC_ENGINE_VT(IC_UPDATE_PURPOSE) 	= #SHIP_UPDATE_PURPOSE
		IC_ENGINE_VT(WAREHOUSE) 		= #SHIP_WAREHOUSE
		IC_ENGINE_VT(BIN_SIZING) 		= #SHIP_BIN_SIZING
		IC_ENGINE_VT(IC_MHU_TYPE) 		= #SHIP_MHU_TYPE
		IC_ENGINE_VT(MOVEMENT_CODE) 		= #SHIP_MOVEMENT_CODE
		IC_ENGINE_VT(IC_QUANTITY_FIELD) 	= #SHIP_QUANTITY_FIELD
		IC_ENGINE_VT(IC_STATUS_CODE) 		= #SHIP_STATUS_CODE
		IC_ENGINE_VT(IC_AUTO_NUMBER_LOTS) 	= #SHIP_AUTO_LOT_NUMBERING
		IC_ENGINE_VT(UNIT_COST) 		= #SHIP_UNIT_COST

	END_BLOCK

	BEGIN_BLOCK END
		! GOTO point
	END_BLOCK

END_FORM


PROCEDURE_FORM RESET_ENGINE_DETAILS_INFO (#IN_PHASE) &
	/TABLE=IC_ENGINE_DETAILS_VT

	BEGIN_BLOCK PROCESS
		IC_ENGINE_DETAILS_VT(IC_RECORD_PHASE)	 = #IN_PHASE
		IC_ENGINE_DETAILS_VT(IC_LOT_NUMBER) 	 = #IC_LOT_NUMBER(2)
		IC_ENGINE_DETAILS_VT(IC_LOT_SEQUENCE) 	 = ""
		IC_ENGINE_DETAILS_VT(IC_MHU_ACTUAL_TYPE) = #IC_MHU_ACTUAL_TYPE(2)
		IC_ENGINE_DETAILS_VT(BIN_LOCATION) 	 = ""
		IC_ENGINE_DETAILS_VT(MH_NUMBER) 	 = 0
	END_BLOCK

END_FORM


PROCEDURE_FORM CHECK_RECEIVING_DIVISION (#IN_REC_DIV, #OUT_ERROR_MESS, #OUT_ERROR_PARAM)

	BEGIN_BLOCK DO_CHECK
		#OUT_ERROR_MESS = ""

		FIND IN AP_CONTROLS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=AP_DIVISION = #IN_REC_DIV

		IF (%STATUS <> %SUCCESS)
			#OUT_ERROR_MESS = "P_51114"
			#OUT_ERROR_PARAM = #IN_REC_DIV
			EXIT(%FAILURE)
		END_IF

		IF (AP_CONTROLS(POP_ACTIVE) <> #YES)
			#OUT_ERROR_MESS = "P_00243"
			#OUT_ERROR_PARAM = ""
			EXIT(%FAILURE)
		END_IF

		FIND IN POP_TRANSACTION_TYPES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=DIVISION = #IN_REC_DIV &
			/WITH=TRANSACTION_TYPE = (PARAMETER("TTYPE_GR"))

		IF (%STATUS <> %SUCCESS)
			#OUT_ERROR_MESS = "P_09368"
			#OUT_ERROR_PARAM = PARAMETER("TTYPE_GR")
			EXIT(%FAILURE)
		END_IF

		! #IN_REC_DIV is a valid receiving warehouse
		EXIT(%SUCCESS)
	END_BLOCK

END_FORM


FORM DISPLAY_XFER_ORDER_LINE /ROW=11 /COL=2 /WIDTH=78 /HEIGHT=13 &
	/ATTRIBUTES=NOBORDER &
	/REMAIN

	OUTPUT_BLOCK DESPATCH_NOTE_5 /ROW=1 /COL=2 &
			/SOURCE=(DESPATCH_NOTES(DESPATCH_NOTE))

	OUTPUT_BLOCK DESPATCH_LINE_6 /ROW=1 /COL=12 &
			/SOURCE=(DESPATCH_NOTES(DESPATCH_LINE))

	OUTPUT_BLOCK WAREHOUSE_7 /ROW=1 /COL=16 &
			/SOURCE=(DESPATCH_NOTES(WAREHOUSE))

	OUTPUT_BLOCK PART_CODE_8 /ROW=1 /COL=19 &
			/SOURCE=(DESPATCH_NOTES(PART_CODE))

	OUTPUT_BLOCK LOT_NUMBER_9 /ROW=1 /COL=35 &
			/SOURCE=DESPATCH_NOTES(IC_LOT_NUMBER)

	OUTPUT_BLOCK LOT_SEQUENCE_10 /ROW=1 /COL=51 &
			/SOURCE=DESPATCH_NOTES(IC_LOT_SEQUENCE)

	BEGIN_BLOCK SET_QTYS_UOMS_AND_MASKS
		#QUANTITY_2 = ""
		#UNIT_2 = ""

		FIND IN DESPATCH_NOTE_QTYS	&
			/LOCK=NONE	&
			/WITH=COMPANY_CODE = #COMPANY_CODE	&
			/WITH=DIVISION = DESPATCH_NOTES(DIVISION)	&
			/WITH=DESPATCH_NOTE = DESPATCH_NOTES(DESPATCH_NOTE)	&
			/WITH=DESPATCH_LINE = DESPATCH_NOTES(DESPATCH_LINE)	&
			/WITH=UNIT_OF_MEASURE = DESPATCH_NOTES(SOP_NOMINATED_UNIT)

		FIND IN PRODUCT_MASTER &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PART_CODE=DESPATCH_NOTES(PART_CODE)

		#IC_UNIT_CAPACITY = PRODUCT_MASTER(IC_UNIT_CAPACITY)
		#IC_PACKAGED_PRODUCT = PRODUCT_MASTER(IC_PACKAGED_PRODUCT)

		IF (#IC_UNIT_CAPACITY = DESPATCH_NOTES(SOP_NOMINATED_UNIT))
			#QUANTITY_1 = DESPATCH_NOTE_QTYS(IC_QTY_IN_DESPATCH)
			#UNIT_1 = DESPATCH_NOTES(SOP_NOMINATED_UNIT)
			IF (DESPATCH_NOTES(IC_OTHER_INVENTORY_UNIT) <> "")
				FIND IN DESPATCH_NOTE_QTYS	&
					/LOCK=NONE	&
					/WITH=COMPANY_CODE = #COMPANY_CODE	&
					/WITH=DIVISION = DESPATCH_NOTES(DIVISION)	&
					/WITH=DESPATCH_NOTE = DESPATCH_NOTES(DESPATCH_NOTE)	&
					/WITH=DESPATCH_LINE = DESPATCH_NOTES(DESPATCH_LINE)	&
					/WITH=UNIT_OF_MEASURE = DESPATCH_NOTES(IC_OTHER_INVENTORY_UNIT)

				#QUANTITY_2 = DESPATCH_NOTE_QTYS(IC_QTY_IN_DESPATCH)
				#UNIT_2 = DESPATCH_NOTES(IC_OTHER_INVENTORY_UNIT)
			END_IF
		ELSE
			#QUANTITY_2 = DESPATCH_NOTE_QTYS(IC_QTY_IN_DESPATCH)
			#UNIT_2 = DESPATCH_NOTES(SOP_NOMINATED_UNIT)
			IF (DESPATCH_NOTES(IC_OTHER_INVENTORY_UNIT) <> "")
				FIND IN DESPATCH_NOTE_QTYS	&
					/LOCK=NONE	&
					/WITH=COMPANY_CODE = #COMPANY_CODE	&
					/WITH=DIVISION = DESPATCH_NOTES(DIVISION)	&
					/WITH=DESPATCH_NOTE = DESPATCH_NOTES(DESPATCH_NOTE)	&
					/WITH=DESPATCH_LINE = DESPATCH_NOTES(DESPATCH_LINE)	&
					/WITH=UNIT_OF_MEASURE = DESPATCH_NOTES(IC_OTHER_INVENTORY_UNIT)

				#QUANTITY_1 = DESPATCH_NOTE_QTYS(IC_QTY_IN_DESPATCH)
				#UNIT_1 = DESPATCH_NOTES(IC_OTHER_INVENTORY_UNIT)
			END_IF
		END_IF

		IF (#IC_PACKAGED_PRODUCT = #YES)
			FIND IN DESPATCH_NOTE_QTYS	&
					/LOCK=NONE	&
					/WITH=COMPANY_CODE = #COMPANY_CODE	&
					/WITH=DIVISION = DESPATCH_NOTES(DIVISION)	&
					/WITH=DESPATCH_NOTE = DESPATCH_NOTES(DESPATCH_NOTE)	&
					/WITH=DESPATCH_LINE = DESPATCH_NOTES(DESPATCH_LINE)	&
					/WITH=UNIT_OF_MEASURE = DESPATCH_NOTES(IC_PACK_UNIT)

			#QUANTITY_1 = DESPATCH_NOTE_QTYS(IC_QTY_IN_DESPATCH)
			#UNIT_1 = DESPATCH_NOTES(IC_PACK_UNIT)
		END_IF

		FIND IN IC_PRODUCT_MASTER_UNITS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=PART_CODE=DESPATCH_NOTES(PART_CODE) &
				/WITH=UNIT_OF_MEASURE=#UNIT_1

		IF ((%STATUS = %FAILURE) &
		OR  (IC_PRODUCT_MASTER_UNITS(IC_QUANTITY_MASK) = ''))

			FIND IN UNITS_OF_MEASURE &
				/LOCK=NONE &
				/WITH=UNIT_OF_MEASURE=#UNIT_1

			IF (%STATUS <> %SUCCESS) EXIT (%FAILURE)

			#MASK_1 = UNITS_OF_MEASURE(IC_QUANTITY_MASK)
		ELSE
			#MASK_1 = IC_PRODUCT_MASTER_UNITS(IC_QUANTITY_MASK)
		END_IF

		IF (#UNIT_2 <> "")
			FIND IN IC_PRODUCT_MASTER_UNITS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=PART_CODE=DESPATCH_NOTES(PART_CODE) &
				/WITH=UNIT_OF_MEASURE=#UNIT_2

			IF ((%STATUS = %FAILURE) &
			OR  (IC_PRODUCT_MASTER_UNITS(IC_QUANTITY_MASK) = ''))

				FIND IN UNITS_OF_MEASURE &
					/LOCK=NONE &
					/WITH=UNIT_OF_MEASURE=#UNIT_2

				IF (%STATUS <> %SUCCESS) EXIT (%FAILURE)

				#MASK_2 = UNITS_OF_MEASURE(IC_QUANTITY_MASK)
			ELSE
				#MASK_2 = IC_PRODUCT_MASTER_UNITS(IC_QUANTITY_MASK)
			END_IF
		END_IF
	END_BLOCK

	OUTPUT_BLOCK QUANTITY_1 /ROW=1 /COL=58 /LEN=14 &
		/SOURCE=(#QUANTITY_1) &
		/OUTPUT_MASK=(#MASK_1)

	OUTPUT_BLOCK UNIT_1 /ROW=1 /COL=73 &
		/SOURCE=(#UNIT_1) &
		/USING=DESPATCH_NOTES(UNIT_SALES)

	OUTPUT_BLOCK TO_WAREHOUSE /ROW=2 /COL=27 &
			/SOURCE=(DESPATCH_NOTES(SOP_DESTINATION_WAREHOUSE)) &
			/PROMPT=(MESSAGE("P_48255"))

	OUTPUT_BLOCK BIN_LOCATION /ROW=2 /COL=37 &
			/SOURCE=DESPATCH_NOTES(BIN_LOCATION) &
			/PROMPT=FIELD_SHORT_PROMPT(BIN_LOCATION)

	OUTPUT_BLOCK DISP_QTY_2 /ROW=2 /COL=55 /LEN=14 &
		/SOURCE=(#QUANTITY_2) &
		/OUTPUT_MASK=(#MASK_2) &
		/USE_IF=(#UNIT_2 <> "" )

	OUTPUT_BLOCK UNIT_2 /ROW=2 /COL=73 &
		/SOURCE=(#UNIT_2) &
		/USING=DESPATCH_NOTES(UNIT_SALES) &
		/USE_IF=(#UNIT_2 <> "")

	OUTPUT_BLOCK MH_NUMBER /ROW=3 /COL=43 &
			/PROMPT=(FIELD_SHORT_PROMPT(MH_NUMBER)) &
			/SOURCE=DESPATCH_NOTES(MH_NUMBER)

END_FORM


PROCEDURE_FORM INPUT_AND_DISPLAY_LOT_INFO

	BEGIN_BLOCK CALL_CORRECT_FORMS

		PERFORM DETERMINE_LOT_INFO

		IF (%STATUS <> %SUCCESS)
			EXIT(%STATUS)
		END_IF

		PERFORM DISPLAY_LOT_INFO
		IF (%STATUS = %BACK)
			GOTO CALL_CORRECT_FORMS
		END_IF

	END_BLOCK

END_FORM


FORM DISPLAY_LOT_INFO /ROW=16 /COL=2 /WIDTH=78 /HEIGHT=8 &
	/TITLE=(MESSAGE("P_90733"))

	OUTPUT_BLOCK IC_LOT_NUM /ROW=2 /COL=40 &
		/PROMPT=(FIELD_PROMPT(IC_LOT_NUMBER)) &
		/SOURCE=#IC_LOT_NUMBER(2) &
		/USING=PART_BATCHES(IC_LOT_NUMBER)

	OUTPUT_BLOCK VENDOR_LOT_NUMBER /ROW=3 /COL=40 &
		/PROMPT=(FIELD_PROMPT(IC_VENDOR_LOT_NUMBER)) &
		/SOURCE=#IC_VENDOR_LOT_NUMBER &
		/USING=IC_ENGINE_DETAILS_VT(IC_VENDOR_LOT_NUMBER)

	OUTPUT_BLOCK BEST_BEFORE_DATE /ROW=4 /COL=40 &
		/PROMPT=(FIELD_PROMPT(BEST_BEFORE_DATE)) &
		/SOURCE=#BEST_BEFORE_DATE &
		/USING=IC_ENGINE_DETAILS_VT(BEST_BEFORE_DATE)

	OUTPUT_BLOCK RETEST_DATE /ROW=5 /COL=40 &
		/PROMPT=(FIELD_PROMPT(IC_RETEST_DATE)) &
		/SOURCE=#RETEST_DATE &
		/USING=IC_ENGINE_DETAILS_VT(IC_RETEST_DATE)

	OUTPUT_BLOCK DISP_COST /ROW=6 /COL=40 &
		/SOURCE=#DEFAULT_COST &
		/PROMPT=(FIELD_PROMPT(UNIT_COST)) &
		/USING=PART_BATCHES(UNIT_COST)

	YESNO_BLOCK CONFIRM_39 /ROW=8 /COL=38 &
			/PROMPT=(MESSAGE("P_90734")) &
			/FAILURE=(EXIT(%BACK)) &
			/SUCCESS=(EXIT(%SUCCESS)) &
			/USE_IF=(#ALLOW_BACK_FROM_DISPLAY = #YES)

	! IF user is not allowed to select a lot number, need a RETURN prompt here only
	PAUSE_BLOCK ALLOW_WAIT /ROW=8 /COL=38 &
			/USE_IF=(#ALLOW_BACK_FROM_DISPLAY <> #YES)

END_FORM


FORM DETERMINE_LOT_INFO /ROW=16 /COL=2 /WIDTH=78 /HEIGHT=8 &
	/TITLE=(MESSAGE("P_90733"))

	BEGIN_BLOCK CHECK_REPL
		#NEW = #NO
		#IC_LOT_NUMBER(2) = ""
        	#IC_LOT_NUMBER = ""
		#SAME_TARGET_LOT_NUMBER = ""

		IF (#BATCHES_EXIST <> #YES) EXIT(%SUCCESS)

		IF (#BATCH_TYPE = #NO)
			! If lots are not replenishable must always be a new lot at the
			! target warehouse.
			#NEW=#YES
			#NEW_LOT_SEQUENCE_REQD = #NO
		END_IF

		#ALLOW_BACK_FROM_DISPLAY = #NO
	END_BLOCK

	BEGIN_BLOCK MULTIPLE_LINES_FOR_SOURCE_LOT
		! May be multiple Despatch Note lines for same source lot (part and WH)
		! but if lots non-replenishable would be forced into separate Lots when
		! same lot should be possible.
		IF (#BATCH_TYPE = #NO)
			FIND IN DESPATCH_NOTES &
				/SECONDARY &
				/STREAM_NAME=SAME_LOT &
				/LOCK=WRITE &
				/WITH=COMPANY_CODE = #COMPANY_CODE	&
				/WITH=DIVISION = SOP_DESPATCH_NOTES_VT(DIVISION)	&
				/WITH=DESPATCH_NOTE = SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)	&
				/WITH=WAREHOUSE = SOP_DESPATCH_NOTES_VT(WAREHOUSE) &
				/WITH=PART_CODE = SOP_DESPATCH_NOTES_VT(PART_CODE) &
				/WITH=IC_LOT_NUMBER = #IC_LOT_NUMBER(1) &
				/WITH=SOP_DESTINATION_WAREHOUSE = #WAREHOUSE(2) &
				/WITH=CONFIRM_DESPATCH = #YES

			IF (%STATUS = %FAILURE)
				GOTO CHECKS
			END_IF

			FIND IN PART_BATCHES &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=WAREHOUSE=#WAREHOUSE(2) &
				/WITH=PART_CODE=#PART_CODE &
				/WITH=IC_LOT_NUMBER=SAME_LOT:DESPATCH_NOTES(IC_OLD_LOT_NUMBER)

			IF (%STATUS = %FAILURE)
				GOTO CHECKS
			END_IF

			! Check that source and target lot information matches
			#LOT_DETAILS_MATCH = #NO
			PERFORM COMPARE_DATES_CHARS (#WAREHOUSE(1), #IC_LOT_NUMBER(1), &
										#WAREHOUSE(2), (SAME_LOT:DESPATCH_NOTES(IC_OLD_LOT_NUMBER)), &
										#LOT_DETAILS_MATCH)

			IF (#LOT_DETAILS_MATCH <> #YES)
				GOTO CHECKS
			END_IF

			#NEW_LOT_SEQUENCE_REQD = #NO

			#IC_VENDOR_LOT_NUMBER = PART_BATCHES(IC_VENDOR_LOT_NUMBER)
			#BEST_BEFORE_DATE = PART_BATCHES(BEST_BEFORE_DATE)
			#RETEST_DATE = PART_BATCHES(IC_RETEST_DATE)
			#DEFAULT_COST = PART_BATCHES(UNIT_COST)

			#SAME_TARGET_LOT_NUMBER = SAME_LOT:DESPATCH_NOTES(IC_OLD_LOT_NUMBER)
			#NEW = #NO
		END_IF
	END_BLOCK

	BEGIN_BLOCK CHECKS
		IF (#AUTO_BATCHES(2) = #YES AND #NEW=#YES)
			#IC_LOT_NUMBER = #IC_AUTO_LOT_TEMP_PREFIX

			OUTPUT_BLOCK IC_AUTO_LOT_NUM_NEW /ROW=2 /COL=40 &
				/PROMPT=(FIELD_PROMPT(IC_LOT_NUMBER)) &
				/SOURCE=#IC_LOT_NUMBER &
				/USING=PART_BATCHES(IC_LOT_NUMBER) &
				/USE_IF=(#AUTO_BATCHES(2) = #YES AND #NEW = #YES)

			GOTO NEW_LOT_CHARS
		END_IF
	END_BLOCK

	BEGIN_BLOCK SAME_TARGET_LOT
		IF (#SAME_TARGET_LOT_NUMBER <> "")
			#IC_LOT_NUMBER = #SAME_TARGET_LOT_NUMBER

			OUTPUT_BLOCK DISP_SAME_TARGET_LOT /ROW=2 /COL=40 &
				/PROMPT=(FIELD_PROMPT(IC_LOT_NUMBER)) &
				/SOURCE=#IC_LOT_NUMBER &
				/USING=PART_BATCHES(IC_LOT_NUMBER) &
				/USE_IF=(#SAME_TARGET_LOT_NUMBER <> "")

			PERFORM EMPTY_IC_CHARS_XMIT_VT

			PERFORM LOAD_EXISTING_LOT_CHARS &
					(#WAREHOUSE(1),#WAREHOUSE(2),#IC_LOT_NUMBER,#IC_LOT_NUMBER)
			IF (%STATUS = %FAILURE) EXIT(%FAILURE)

			GOTO DISP_DEFAULTS
		END_IF
	END_BLOCK

	INPUT_BLOCK INPUT_IC_LOT_NUMBER /ROW=2 /COL=40 &
			/PROMPT=(FIELD_PROMPT(IC_LOT_NUMBER)) &
			/TARGET=#IC_LOT_NUMBER &
			/USING=PART_BATCHES(IC_LOT_NUMBER),REQUIRED &
			/LOV=PART_BATCHES(IC_LOT_NUMBER) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=WAREHOUSE=#WAREHOUSE(2) &
			/LOV_WITH=PART_CODE=#PART_CODE &
			/USE_IF=(#AUTO_BATCHES(2) = #NO OR #NEW = #NO &
						OR #SAME_TARGET_LOT_NUMBER = "")

	BEGIN_BLOCK VALIDATE_INPUT_BATCH
		#LOT_FIRST_CHAR = LEFT(#IC_LOT_NUMBER, 1)
		IF (#LOT_FIRST_CHAR = #IC_AUTO_LOT_TEMP_PREFIX)

			IF (#AUTO_BATCHES(2) = #NO)
				! Error, cannot assign auto number to manual numbered WH
				MESSAGE/IDENTIFIER/BELL P_00344, #IC_LOT_NUMBER
				GOTO INPUT_IC_LOT_NUMBER
			END_IF

			#IC_LOT_NUMBER = #IC_AUTO_LOT_TEMP_PREFIX
			#NEW = #YES
			#NEW_LOT_SEQUENCE_REQD = #YES
			GOTO NEW_LOT_CHARS
		END_IF

		FIND IN PART_BATCHES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=WAREHOUSE=#WAREHOUSE(2) &
			/WITH=PART_CODE=#PART_CODE &
			/WITH=IC_LOT_NUMBER=#IC_LOT_NUMBER

		IF (%STATUS = %FAILURE)
			! Lot does not already exist
			#NEW = #YES
			MESSAGE/IDENTIFIER/BELL P_59095
			GOTO NEW_LOT_CHARS
		END_IF
	END_BLOCK

	BEGIN_BLOCK VALIDATE_EXISTING_LOT
		! Lot already exists
		IF (#BATCH_TYPE = #NO)
			! Cannot update existing lot if lots not replenishable
			MESSAGE/IDENTIFIER/BELL P_62033
			GOTO INPUT_IC_LOT_NUMBER
		END_IF

		! Check that source and target lot information matches
		#LOT_DETAILS_MATCH = #NO
		PERFORM COMPARE_DATES_CHARS (#WAREHOUSE(1), #IC_LOT_NUMBER(1), &
										#WAREHOUSE(2), #IC_LOT_NUMBER, &
										#LOT_DETAILS_MATCH)

		IF (#LOT_DETAILS_MATCH <> #YES)
			! Cannot use this lot
			ERROR/TEXT_ONLY (#LOT_COMPARE_MSG & ", " & #LOT_COMPARE_MSG_TEXT)
			GOTO INPUT_IC_LOT_NUMBER
		END_IF

		IF (#BATCH_EXPIRY = #YES )
			IF (PART_BATCHES(BATCH_DATE) <> #EXPIRY_DATE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_42002
				GOTO INPUT_IC_LOT_NUMBER
			END_IF

			IF (DAYS(PART_BATCHES(BATCH_DATE)) < DAYS(%TODAY))
				MESSAGE/IDENTIFIER/BELL/WAIT P_82065
			END_IF
		END_IF

		#NEW = #NO
		MESSAGE/IDENTIFIER/BELL P_59094

		#NEW_LOT_SEQUENCE_REQD = #YES

		#IC_VENDOR_LOT_NUMBER = PART_BATCHES(IC_VENDOR_LOT_NUMBER)
		#BEST_BEFORE_DATE = PART_BATCHES(BEST_BEFORE_DATE)
		#RETEST_DATE = PART_BATCHES(IC_RETEST_DATE)
		#DEFAULT_COST = PART_BATCHES(UNIT_COST)

		PERFORM EMPTY_IC_CHARS_XMIT_VT

		PERFORM LOAD_EXISTING_LOT_CHARS &
					(#WAREHOUSE(1),#WAREHOUSE(2),#IC_LOT_NUMBER,#IC_LOT_NUMBER)
		IF (%STATUS = %FAILURE) EXIT(%FAILURE)

		GOTO DISP_DEFAULTS
	END_BLOCK

	BEGIN_BLOCK NEW_LOT_CHARS
		PERFORM EMPTY_IC_CHARS_XMIT_VT
		PERFORM LOAD_EXISTING_CHARS_FOR_UNIQUE (#WAREHOUSE(1), #IC_LOT_NUMBER)
		IF (%STATUS = %FAILURE) EXIT(%FAILURE)
	END_BLOCK

	BEGIN_BLOCK DISP_DEFAULTS
		DISPLAY DEFAULTS
		#IC_LOT_NUMBER(2) = #IC_LOT_NUMBER
	END_BLOCK

	BEGIN_BLOCK EXIT_OUT
	END_BLOCK

END_FORM

PROCEDURE_FORM EMPTY_IC_CHARS_XMIT_VT &
	/TABLE=IC_CHARS_XMIT_VT

	BEGIN_BLOCK DELETE_RECORD
		DELETE FROM IC_CHARS_XMIT_VT
	END_BLOCK

END_FORM

PROCEDURE_FORM CHECK_FOR_CHAR_DIFFS (#IN_WH_1, #IN_LOT_1, #IN_WH_2, #UPDATE_LOT) &
	/LOCK=READ &
	/SECONDARY &
	/TABLE=IC_LOT_CHARACTERISTICS &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=WAREHOUSE=#IN_WH_1 &
	/WITH=PART_CODE=#PART_CODE &
	/WITH=IC_LOT_NUMBER=#IN_LOT_1 &
	/STREAM_NAME=ALC


	BEGIN_BLOCK ADD_NEW_RECORD
		FIND IN IC_LOT_CHARACTERISTICS &
			/LOCK=READ &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=WAREHOUSE=#IN_WH_2 &
			/WITH=PART_CODE=#PART_CODE &
			/WITH=IC_LOT_NUMBER=#UPDATE_LOT &
			/WITH=CHARACTERISTIC_CODE=ALC:IC_LOT_CHARACTERISTICS(CHARACTERISTIC_CODE)

		IF (%STATUS <> %SUCCESS)
!	       		PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
!					("FIN","P_69141","",2,#MSG_SEQ,"","")
			!Need interactive message when not a web service
			#LOT_COMPARE_MSG = "P_69141"
			#LOT_COMPARE_MSG_TEXT = MESSAGE("P_69141")
			EXIT(%FAILURE)
		END_IF

		IF (IC_LOT_CHARACTERISTICS(CHARACTERISTIC_NUMERIC) &
			<> ALC:IC_LOT_CHARACTERISTICS(CHARACTERISTIC_NUMERIC) &
			OR IC_LOT_CHARACTERISTICS(CHARACTERISTIC_TEXT) <> &
			ALC:IC_LOT_CHARACTERISTICS(CHARACTERISTIC_TEXT) &
			OR IC_LOT_CHARACTERISTICS(IC_DATATYPE_INDICATOR) <> &
			ALC:IC_LOT_CHARACTERISTICS(IC_DATATYPE_INDICATOR))

!	       		PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
!					("FIN","P_69141","",2,#MSG_SEQ,"","")
			#LOT_COMPARE_MSG = "P_69141"
			#LOT_COMPARE_MSG_TEXT = MESSAGE("P_69141")
			EXIT(%FAILURE)
		END_IF
	END_BLOCK

END_FORM

PROCEDURE_FORM LOAD_EXISTING_LOT_CHARS (#IN_FROM_WAREHOUSE, #IN_UPDATE_WAREHOUSE, #IN_FROM_LOT, #IN_UPDATE_LOT) &
	/LOCK=WRITE &
	/TABLE=IC_LOT_CHARACTERISTICS  &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=PART_CODE=#PART_CODE &
	/WITH=WAREHOUSE=#IN_FROM_WAREHOUSE &
	/WITH=IC_LOT_NUMBER=#IN_FROM_LOT


	BEGIN_BLOCK GET_RELATED_RECS
		FIND IN CHARACTERISTIC_CODES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE = IC_LOT_CHARACTERISTICS(COMPANY_CODE) &
			/WITH=CHARACTERISTIC_CODE = IC_LOT_CHARACTERISTICS(CHARACTERISTIC_CODE)

		IF (%STATUS <> %SUCCESS)
			EXIT(%FAILURE)
		END_IF

		FIND IN IC_PRODUCT_CHARACTERISTICS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE = IC_LOT_CHARACTERISTICS(COMPANY_CODE) &
			/WITH=PART_CODE = IC_LOT_CHARACTERISTICS(PART_CODE) &
			/WITH=CHARACTERISTIC_CODE = IC_LOT_CHARACTERISTICS(CHARACTERISTIC_CODE)

		IF (%STATUS <> %SUCCESS)
			EXIT(%FAILURE)
		END_IF
	END_BLOCK

	BEGIN_BLOCK CREATE_RECORD
!
!	The lot_chars are copied to the IC_CHARS_XMIT_VT
!
		CLEAR_BUFFER IC_CHARS_XMIT_VT
		IC_CHARS_XMIT_VT(IC_RECORD_PHASE) 	= #SYS_PHASE_FIRM
		IC_CHARS_XMIT_VT(COMPANY_CODE) 		= IC_LOT_CHARACTERISTICS(COMPANY_CODE)
		IC_CHARS_XMIT_VT(WAREHOUSE) 		= #IN_UPDATE_WAREHOUSE
		IC_CHARS_XMIT_VT(DIVISION) 			= #DIVISION(2)
		IC_CHARS_XMIT_VT(PART_CODE) 		= IC_LOT_CHARACTERISTICS(PART_CODE)
		IC_CHARS_XMIT_VT(IC_LOT_NUMBER)		= #IN_UPDATE_LOT
		IC_CHARS_XMIT_VT(IC_LOT_SEQUENCE)	= ""
		IC_CHARS_XMIT_VT(DOCUMENT_NUMBER)	= ""
		IC_CHARS_XMIT_VT(DOCUMENT_LINE)		= ""
		IC_CHARS_XMIT_VT(CHARACTERISTIC_CODE)	= IC_LOT_CHARACTERISTICS(CHARACTERISTIC_CODE)
		IC_CHARS_XMIT_VT(IC_CHAR_NUMERIC_VALUE)	= IC_LOT_CHARACTERISTICS(CHARACTERISTIC_NUMERIC)
		IC_CHARS_XMIT_VT(DESCRIPTION)		= CHARACTERISTIC_CODES(DESCRIPTION)
		IC_CHARS_XMIT_VT(IC_CHAR_TEXT_VALUE)	= IC_LOT_CHARACTERISTICS(CHARACTERISTIC_TEXT)
		IC_CHARS_XMIT_VT(UNIT_CHAR) 		= IC_PRODUCT_CHARACTERISTICS(UNIT_CHAR)
	 	IC_CHARS_XMIT_VT(IC_ACTIVE_AT_SO_ENTRY) = IC_PRODUCT_CHARACTERISTICS(IC_ACTIVE_AT_SO_ENTRY)
		IC_CHARS_XMIT_VT(IC_ACTIVE_AT_PM_MAT_ISSUE) = IC_PRODUCT_CHARACTERISTICS(IC_ACTIVE_AT_PM_MAT_ISSUE)
		IC_CHARS_XMIT_VT(IC_DATATYPE_INDICATOR)	= IC_PRODUCT_CHARACTERISTICS(IC_DATATYPE_INDICATOR)

		ADD TO IC_CHARS_XMIT_VT
	END_BLOCK

END_FORM


PROCEDURE_FORM LOAD_EXISTING_CHARS_FOR_UNIQUE (#IN_SOURCE_WAREHOUSE, #IN_UPDATE_LOT) &
	/LOCK=WRITE &
	/TABLE=IC_LOT_CHARACTERISTICS &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=PART_CODE=#PART_CODE &
	/WITH=WAREHOUSE=#IN_SOURCE_WAREHOUSE &
	/WITH=IC_LOT_NUMBER=#IC_LOT_NUMBER(1)

	BEGIN_BLOCK GET_RELATED_RECS
		FIND IN CHARACTERISTIC_CODES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE = IC_LOT_CHARACTERISTICS(COMPANY_CODE) &
			/WITH=CHARACTERISTIC_CODE = IC_LOT_CHARACTERISTICS(CHARACTERISTIC_CODE)

		IF (%STATUS <> %SUCCESS)
			EXIT(%FAILURE)
		END_IF

		FIND IN IC_PRODUCT_CHARACTERISTICS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE = IC_LOT_CHARACTERISTICS(COMPANY_CODE) &
			/WITH=PART_CODE = IC_LOT_CHARACTERISTICS(PART_CODE) &
			/WITH=CHARACTERISTIC_CODE = IC_LOT_CHARACTERISTICS(CHARACTERISTIC_CODE)

		IF (%STATUS <> %SUCCESS)
			EXIT(%FAILURE)
		END_IF
	END_BLOCK

	BEGIN_BLOCK CREATE_RECORD
!
!	The lot_chars are copied to the IC_CHARS_XMIT_VT
!
		CLEAR_BUFFER IC_CHARS_XMIT_VT
		IC_CHARS_XMIT_VT(IC_RECORD_PHASE) 	= #SYS_PHASE_FIRM
		IC_CHARS_XMIT_VT(COMPANY_CODE) 		= IC_LOT_CHARACTERISTICS(COMPANY_CODE)
		IC_CHARS_XMIT_VT(WAREHOUSE) 		= #WAREHOUSE(2)
		IC_CHARS_XMIT_VT(DIVISION) 			= #DIVISION(2)
		IC_CHARS_XMIT_VT(PART_CODE) 		= IC_LOT_CHARACTERISTICS(PART_CODE)
		IC_CHARS_XMIT_VT(IC_LOT_NUMBER)		= #IN_UPDATE_LOT
		IC_CHARS_XMIT_VT(IC_LOT_SEQUENCE)	= ""
		IC_CHARS_XMIT_VT(DOCUMENT_NUMBER)	= ""
		IC_CHARS_XMIT_VT(DOCUMENT_LINE)		= ""
		IC_CHARS_XMIT_VT(CHARACTERISTIC_CODE)	= IC_LOT_CHARACTERISTICS(CHARACTERISTIC_CODE)
		IC_CHARS_XMIT_VT(IC_CHAR_NUMERIC_VALUE)	= IC_LOT_CHARACTERISTICS(CHARACTERISTIC_NUMERIC)
		IC_CHARS_XMIT_VT(DESCRIPTION)		= CHARACTERISTIC_CODES(DESCRIPTION)
		IC_CHARS_XMIT_VT(IC_CHAR_TEXT_VALUE)	= IC_LOT_CHARACTERISTICS(CHARACTERISTIC_TEXT)
		IC_CHARS_XMIT_VT(UNIT_CHAR) 		= IC_PRODUCT_CHARACTERISTICS(UNIT_CHAR)
	 	IC_CHARS_XMIT_VT(IC_ACTIVE_AT_SO_ENTRY) = IC_PRODUCT_CHARACTERISTICS(IC_ACTIVE_AT_SO_ENTRY)
		IC_CHARS_XMIT_VT(IC_ACTIVE_AT_PM_MAT_ISSUE) = IC_PRODUCT_CHARACTERISTICS(IC_ACTIVE_AT_PM_MAT_ISSUE)
		IC_CHARS_XMIT_VT(IC_DATATYPE_INDICATOR)	= IC_PRODUCT_CHARACTERISTICS(IC_DATATYPE_INDICATOR)

		ADD TO IC_CHARS_XMIT_VT
	END_BLOCK

END_FORM


PROCEDURE_FORM COPY_LOT_CREATE_DATE

	BEGIN_BLOCK DESCRIPTION
		! If a lot has been copied from the source WH to the
		! destination warehouse using the same lot number, then the
		! Best Before, Expiry and Retest Dates will have been copied
		! from the source lot to the target lot.  The lot creation
		! date, however, will not have been copied because it is
		! assigned from the transaction date as part of the inventory
		! engine - which must not be changed because it will change
		! the functionality for all lot increases into a new lot for
		! QOH stock.  This form instead assigns the creation date to
		! the target lot only when the copy has been done and the
		! flag #COPY_LOT_CREATE_DATE is set to Yes.
	END_BLOCK

	BEGIN_BLOCK UPDATE_LOT_CREATE_DATE
		FIND IN PART_BATCHES &
			/LOCK=WRITE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=WAREHOUSE = #WAREHOUSE(2) &
			/WITH=PART_CODE = #PART_CODE &
			/WITH=IC_LOT_NUMBER = #IC_LOT_NUMBER(2)

		IF (%STATUS = %SUCCESS)
			PART_BATCHES(CREATION_DATE) = #LOT_CREATION_DATE
		END_IF
	END_BLOCK

END_FORM


PROCEDURE_FORM COMPARE_DATES_CHARS &
	(#FROM_WH, #FROM_LOT, #TO_WH, #TO_LOT, #MATCHED_FLAG)

	BEGIN_BLOCK GET_PB_RECS
		#MATCHED_FLAG = #NO

		PERFORM COMPARE_DATES &
			(#FROM_WH, #FROM_LOT, #TO_WH, #TO_LOT, #MATCHED_FLAG)
		IF (%STATUS = %FAILURE)
			! No need for failure status since #MATCHED_FLAG is still set to 'N'
			EXIT
		END_IF

		IF (#IC_CHARACTERISTIC_COUNT > 0)
			PERFORM CHECK_FOR_CHAR_DIFFS (#FROM_WH, #FROM_LOT, #TO_WH, #TO_LOT)
			IF (%STATUS = %FAILURE)
				EXIT
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK END_COMPARISON
		! If this point reached, lot dates and characteristics match
		#MATCHED_FLAG = #YES
	END_BLOCK

END_FORM


PROCEDURE_FORM COMPARE_DATES (#FROM_WH, #FROM_LOT, #TO_WH, #TO_LOT, &
									#MATCHED_FLAG)


	BEGIN_BLOCK STORE_VARS
		FIND IN PART_BATCHES &
			/LOCK=NONE &
			/SECONDARY &
			/STREAM_NAME=SOURCE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=WAREHOUSE=#FROM_WH &
			/WITH=PART_CODE=#PART_CODE &
			/WITH=IC_LOT_NUMBER=#FROM_LOT

		IF (%STATUS = %FAILURE)
			EXIT(%FAILURE)
		END_IF

		#FROM_BATCH_DATE = SOURCE:PART_BATCHES(BATCH_DATE)
		#FROM_RETEST_DATE = SOURCE:PART_BATCHES(IC_RETEST_DATE)
		#FROM_BEST_BEFORE_DATE = SOURCE:PART_BATCHES(BEST_BEFORE_DATE)

		FIND IN PART_BATCHES &
			/LOCK=READ &
			/STREAM_NAME=TARGET &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=WAREHOUSE=#TO_WH &
			/WITH=PART_CODE=#PART_CODE &
			/WITH=IC_LOT_NUMBER=#TO_LOT

		IF (%STATUS = %FAILURE)
!	       		PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
!					("FIN","P_90235","",1,#MSG_SEQ,#TO_LOT,"")
			!Need interactive messages when not a web service
			#LOT_COMPARE_MSG = "P_90235"
			#LOT_COMPARE_MSG_TEXT = MESSAGE("P_90235")
			EXIT(%FAILURE)
		END_IF

		#TO_BATCH_DATE = TARGET:PART_BATCHES(BATCH_DATE)
		#TO_RETEST_DATE = TARGET:PART_BATCHES(IC_RETEST_DATE)
		#TO_BEST_BEFORE_DATE = TARGET:PART_BATCHES(BEST_BEFORE_DATE)

		#CURRENT_DAYS = DAYS(%TODAY)
	END_BLOCK

	BEGIN_BLOCK CHECK_EXPIRY_DATES
		! Messages are for warnings only, not error cases.
		IF (#FROM_BATCH_DATE <> "")
			#FROM_BATCH_DAYS = DAYS(#FROM_BATCH_DATE)
			IF (#FROM_BATCH_DAYS < #CURRENT_DAYS)
!				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
!					("FIN","P_44314","",2,#MSG_SEQ,#FROM_LOT,"")
				#LOT_COMPARE_MSG = "P_44314"
				#LOT_COMPARE_MSG_TEXT = MESSAGE("P_44314")
			END_IF
		END_IF
		IF (#TO_BATCH_DATE <> "")
			#TO_BATCH_DAYS = DAYS(#TO_BATCH_DATE)
			IF (#TO_BATCH_DAYS < #CURRENT_DAYS)
!				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
!					("FIN","P_44314","",2,#MSG_SEQ,#TO_LOT,"")
				#LOT_COMPARE_MSG = "P_44314"
				#LOT_COMPARE_MSG_TEXT = MESSAGE("P_44314")
			END_IF
		END_IF
	END_BLOCK

	BEGIN_BLOCK VALIDATE_FROM_TO_DATES
		! Stored on Engine Details as Expiry Date
		IF (#FROM_BATCH_DATE <> "")
			#FROM_BATCH_DAYS = DAYS(#FROM_BATCH_DATE)
			#TO_BATCH_DAYS = DAYS(#TO_BATCH_DATE)

			IF (#FROM_BATCH_DAYS <> #TO_BATCH_DAYS)
!				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
!					("FIN","P_42002","",2,#MSG_SEQ,"","")
				#LOT_COMPARE_MSG = "P_42002"
				#LOT_COMPARE_MSG_TEXT = MESSAGE("P_42002")
				EXIT(%FAILURE)
			END_IF
		ELSE
			! Date on Source Lot is blank, so date on Target Lot must be blank.
			IF (#TO_BATCH_DATE <> "")
!				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
!					("FIN","P_42002","",2,#MSG_SEQ,"","")
				#LOT_COMPARE_MSG = "P_42002"
				#LOT_COMPARE_MSG_TEXT = MESSAGE("P_42002")
				EXIT(%FAILURE)
			END_IF
		END_IF

		IF (#FROM_RETEST_DATE <> "")
			#FROM_RETEST_DAYS = DAYS(#FROM_RETEST_DATE)
			#TO_RETEST_DAYS = DAYS(#TO_RETEST_DATE)

			IF (#FROM_RETEST_DAYS <> #TO_RETEST_DAYS)
!				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
!					("FIN","P_13651","",2,#MSG_SEQ,"","")
				#LOT_COMPARE_MSG = "P_13651"
				#LOT_COMPARE_MSG_TEXT = MESSAGE("P_13651")
				EXIT(%FAILURE)
			END_IF
		ELSE
			IF (#TO_RETEST_DATE <> "")
!				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
!					("FIN","P_13651","",2,#MSG_SEQ,"","")
				#LOT_COMPARE_MSG = "P_13651"
				#LOT_COMPARE_MSG_TEXT = MESSAGE("P_13651")
				EXIT(%FAILURE)
			END_IF
		END_IF

		IF (#FROM_BEST_BEFORE_DATE <> "")
			#FROM_BEST_BEFORE_DAYS = DAYS(#FROM_BEST_BEFORE_DATE)
			#TO_BEST_BEFORE_DAYS = DAYS(#TO_BEST_BEFORE_DATE)

			IF (#FROM_BEST_BEFORE_DAYS <> #TO_BEST_BEFORE_DAYS)
!				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
!					("FIN","P_13652","",2,#MSG_SEQ,"","")
				#LOT_COMPARE_MSG = "P_13652"
				#LOT_COMPARE_MSG_TEXT = MESSAGE("P_13652")
				EXIT(%FAILURE)
			END_IF
		ELSE
			IF (#TO_BEST_BEFORE_DATE <> "")
!				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
!					("FIN","P_13652","",2,#MSG_SEQ,"","")
				#LOT_COMPARE_MSG = "P_13652"
				#LOT_COMPARE_MSG_TEXT = MESSAGE("P_13652")
				EXIT(%FAILURE)
			END_IF
		END_IF
	END_BLOCK

END_FORM


PROCEDURE_FORM CREATE_XFER_POSTINGS

	BEGIN_BLOCK SETUP
		IF (#DELTA_XFER_COST = 0) EXIT (%SUCCESS)
		IF (#DELTA_XFER_COST > 0)
			#DEBIT_XFER_ACC = #DEBIT_ACC
			#DEBIT_XFER_CODE = #DEBIT_CODE
			#CREDIT_XFER_ACC = #XFER_COST_ADJ_ACC
			#CREDIT_XFER_CODE = #XFER_COST_ADJ_CODE
		ELSE
			#DEBIT_XFER_ACC = #XFER_COST_ADJ_ACC
			#DEBIT_XFER_CODE = #XFER_COST_ADJ_CODE
			#CREDIT_XFER_ACC = #DEBIT_ACC
			#CREDIT_XFER_CODE = #DEBIT_CODE
			#DELTA_XFER_COST = ABS(#DELTA_XFER_COST)
		END_IF

		#XFER_VALUE = #DELTA_XFER_COST * #PRICE_QTY_DESPATCHED

		#XO_ADJ_POSTING_REFERENCE = DESPATCH_NOTES(DESPATCH_NOTE) & "-" & DESPATCH_NOTES(DESPATCH_LINE)&
			&"-0-" & #IC_STATUS_CODE

		#XO_ADJ_SOURCE_REFERENCE = DESPATCH_NOTES(PART_CODE)
		IF (DESPATCH_NOTES(IC_LOT_NUMBER) <> "")
			#XO_ADJ_SOURCE_REFERENCE =  DESPATCH_NOTES(PART_CODE) & "-" & DESPATCH_NOTES(IC_LOT_NUMBER)
		END_IF

		PERFORM INIT_POSTINGS_CONTROL
	END_BLOCK

	BEGIN_BLOCK DR_POSTING
		CLEAR_BUFFER SYS_POSTINGS_VT

		SYS_POSTINGS_VT(ACCOUNT_COMPANY_CODE) = #COMPANY_CODE
		SYS_POSTINGS_VT(ACCOUNT_DIVISION) = DESPATCH_NOTES(DIVISION)
		SYS_POSTINGS_VT(ACCOUNT_NUMBER) = #DEBIT_XFER_ACC
		SYS_POSTINGS_VT(GL_SHORT_CODE) = #DEBIT_XFER_CODE
		SYS_POSTINGS_VT(DOCUMENT_NUMBER) = SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)
		SYS_POSTINGS_VT(DOCUMENT_LINE) = SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)
		SYS_POSTINGS_VT(DOCUMENT_SEQUENCE) = 1
		SYS_POSTINGS_VT(JOURNAL_LINE) = 1
		SYS_POSTINGS_VT(ACCOUNT_IDENT) = PARAMETER("ACCOUNT_IDENT_ACTUAL")
		SYS_POSTINGS_VT(GL_POSTING_CURRENCY_DR) = #XFER_VALUE
		SYS_POSTINGS_VT(POSTING_REFERENCE) = #XO_ADJ_POSTING_REFERENCE
		SYS_POSTINGS_VT(POSTING_DESCRIPTION) = #TR_DESC
		SYS_POSTINGS_VT(MODULE_TRANSACTION_TYPE) = PARAMETER("TTYPE_DN")
		SYS_POSTINGS_VT(WAREHOUSE) = DESPATCH_NOTES(WAREHOUSE)
		SYS_POSTINGS_VT(YEAR) = WC_SRC:WAREHOUSE_CONTROLS(YEAR)
		SYS_POSTINGS_VT(PERIOD) = WC_SRC:WAREHOUSE_CONTROLS(PERIOD)

		ADD TO SYS_POSTINGS_VT
	END_BLOCK

	BEGIN_BLOCK CR_POSTING
		CLEAR_BUFFER SYS_POSTINGS_VT

		SYS_POSTINGS_VT(ACCOUNT_COMPANY_CODE) = #COMPANY_CODE
		SYS_POSTINGS_VT(ACCOUNT_DIVISION) = DESPATCH_NOTES(DIVISION)
		SYS_POSTINGS_VT(ACCOUNT_NUMBER) = #CREDIT_XFER_ACC
		SYS_POSTINGS_VT(GL_SHORT_CODE) = #CREDIT_XFER_CODE
		SYS_POSTINGS_VT(DOCUMENT_NUMBER) = SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)
		SYS_POSTINGS_VT(DOCUMENT_LINE) = SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)
		SYS_POSTINGS_VT(DOCUMENT_SEQUENCE) = 1
		SYS_POSTINGS_VT(JOURNAL_LINE) = 1
		SYS_POSTINGS_VT(ACCOUNT_IDENT) = PARAMETER("ACCOUNT_IDENT_ACTUAL")
		SYS_POSTINGS_VT(GL_POSTING_CURRENCY_CR) = #XFER_VALUE
		SYS_POSTINGS_VT(POSTING_REFERENCE) = #XO_ADJ_POSTING_REFERENCE
		SYS_POSTINGS_VT(POSTING_DESCRIPTION) = #TR_DESC
		SYS_POSTINGS_VT(MODULE_TRANSACTION_TYPE) = PARAMETER("TTYPE_DN")
		SYS_POSTINGS_VT(WAREHOUSE) = DESPATCH_NOTES(WAREHOUSE)
		SYS_POSTINGS_VT(YEAR) = WC_SRC:WAREHOUSE_CONTROLS(YEAR)
		SYS_POSTINGS_VT(PERIOD) = WC_SRC:WAREHOUSE_CONTROLS(PERIOD)

		ADD TO SYS_POSTINGS_VT
	END_BLOCK

	BEGIN_BLOCK CALL_GL_ENGINE

		PERFORM "GEMLB:LB_S_L_POSTING_CURRENCY_CONVERSIONS" &
			(#R_STATUS, &
			 #R_MESSAGE)

		IF (#R_STATUS = #NO OR %STATUS <> %SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","",#R_MESSAGE,2,#MSG_SEQ, "", "")
			EXIT(%FAILURE)
		END_IF

		PERFORM "GEMLB:LB_S_L_POSTING_ROUNDING" &
			(#R_STATUS, &
			 #R_MESSAGE)

		IF (#R_STATUS = #NO OR %STATUS <> %SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","",#R_MESSAGE,2,#MSG_SEQ, "", "")
			EXIT(%FAILURE)
		END_IF

		PERFORM "GEMLB:LB_S_L_POSTING_UPDATE" &
			(PARAMETER("GL_POSTINGS"), &
			 #R_STATUS, &
			 #R_MESSAGE)

		IF (#R_STATUS = #NO OR %STATUS <> %SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","",#R_MESSAGE,2,#MSG_SEQ, "", "")
			EXIT(%FAILURE)
		END_IF

	END_BLOCK
END_FORM

PROCEDURE_FORM INIT_POSTINGS_CONTROL

	BEGIN_BLOCK POPULATE_CONTROL_VT_REC
		PERFORM GET_CURRENCY_INFORMATION ((DESPATCH_NOTES(SYS_CURRENCY_CODE)))

		PERFORM CLEAR_POSTINGS_CONTROL_VT
		PERFORM CLEAR_POSTINGS_VT

		CLEAR_BUFFER SYS_POSTINGS_CONTROL_VT

		SYS_POSTINGS_CONTROL_VT(COMPANY_CODE) = #COMPANY_CODE
		SYS_POSTINGS_CONTROL_VT(DIVISION) = #DIVISION
		SYS_POSTINGS_CONTROL_VT(MODULE_TRANSACTION_TYPE) = PARAMETER("TTYPE_DN")
		SYS_POSTINGS_CONTROL_VT(POSTING_DATE) = %NOW
		SYS_POSTINGS_CONTROL_VT(DOCUMENT_NUMBER) = DESPATCH_NOTES(DESPATCH_NOTE)
		SYS_POSTINGS_CONTROL_VT(SOURCE_REFERENCE) = #XO_ADJ_SOURCE_REFERENCE
		SYS_POSTINGS_CONTROL_VT(BATCH_NUMBER) = ""
		SYS_POSTINGS_CONTROL_VT(GL_POSTINGS_IN_BATCH) = #NO
		SYS_POSTINGS_CONTROL_VT(FIFO_DOC) = ""
		SYS_POSTINGS_CONTROL_VT(ACTIVATION_STATUS) = PARAMETER("STATUS_ACTIVE")
		SYS_POSTINGS_CONTROL_VT(JOURNAL_NUMBER) = ""
		SYS_POSTINGS_CONTROL_VT(JOURNAL_BATCH_NUMBER) = ""
		SYS_POSTINGS_CONTROL_VT(GL_JOURNAL_CODE) = ""
		SYS_POSTINGS_CONTROL_VT(GL_EFFECTIVE_DATE) = ""
		SYS_POSTINGS_CONTROL_VT(SUMMARIZATION_FLAG) = #NO

		ADD TO SYS_POSTINGS_CONTROL_VT
	END_BLOCK

END_FORM

PROCEDURE_FORM GET_CURRENCY_INFORMATION (#TRANS_CURRENCY_CODE)

	BEGIN_BLOCK CURRENCY
		DELETE ALL FROM SYS_CURRENCY_CONTROL_VT

		CLEAR_BUFFER SYS_CURRENCY_CONTROL_VT
		SYS_CURRENCY_CONTROL_VT(COMPANY_CODE) = #COMPANY_CODE
		SYS_CURRENCY_CONTROL_VT(SOURCE_MODULE) = PARAMETER("MODULE_SO")
		SYS_CURRENCY_CONTROL_VT(DIVISION) = #DIVISION
		SYS_CURRENCY_CONTROL_VT(RATE_OVERRIDE) = #NO
		SYS_CURRENCY_CONTROL_VT(TRANSACTION_CURRENCY_CODE) = #TRANS_CURRENCY_CODE
		SYS_CURRENCY_CONTROL_VT(CURRENCY_DATE) = %TODAY
		ADD TO SYS_CURRENCY_CONTROL_VT

		FIND IN SYS_CURRENCY_CONTROL_VT

		IF (%STATUS <> %SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_91710","",2,#MSG_SEQ, "", "")
			EXIT(%FAILURE)
		END_IF

		PERFORM "GEMLB:LB_S_L_CURRENCY_RATES"(&
			#R_STATUS, &
			#R_MESSAGE)

		IF (#R_STATUS = #NO OR %STATUS <> %SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","",#R_MESSAGE,2,#MSG_SEQ, "", "")
			EXIT(%FAILURE)
		END_IF

		FIND IN SYS_CURRENCY_CONTROL_VT

		IF (%STATUS <> %SUCCESS)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_91710","",2,#MSG_SEQ, "", "")
			EXIT(%FAILURE)
		END_IF

	END_BLOCK

END_FORM

PROCEDURE_FORM CLEAR_POSTINGS_CONTROL_VT &
	/TABLE=SYS_POSTINGS_CONTROL_VT

	DELETE FROM SYS_POSTINGS_CONTROL_VT

END_FORM

PROCEDURE_FORM CLEAR_POSTINGS_VT &
	/TABLE=SYS_POSTINGS_VT

	DELETE FROM SYS_POSTINGS_VT

END_FORM

PROCEDURE_FORM LOG_REPORT

	BEGIN_BLOCK PRODUCE_REPORT
		! Create Ship Confirm log report
		PERFORM "GEMLB:LB_REPORT_PRINT_CONTROL" (#ID,#ID&"/1","","","",#R_NAME,#REPORT_AUTO,#QUEUE,#FORM_TYPE,#COPIES,"","","")
		PERFORM WRITE_LOG_REPORT

		IF (#REPORT_AUTO=#YES)

				FILES/NOQUERY/PRINT_ONLY/QUEUE=#QUEUE/FORM_TYPE=#FORM_TYPE/COPIES=#COPIES #R_NAME

				IF (%STATUS=%FAILURE)
					MESSAGE/IDENTIFIER P_57095
				END_IF
		END_IF
	END_BLOCK

END_FORM

PROCEDURE_FORM DISPLAY_LOG &
	/TABLE=RS_SYS_MESSAGES &
	/LOCK=NONE &
	/SORTED_BY=(RS_SORT_ORDER) &

	BEGIN_BLOCK DISPLAY_MESSAGE
		ERROR/NOWAIT/NOBELL/TEXT_ONLY &
			(RS_SYS_MESSAGES(RS_SEQUENCE) & "," &&
			RS_SYS_MESSAGES(RS_MESSAGE_NUMBER) & ", " & &
			RS_SYS_MESSAGES(RS_MESSAGE_TEXT))
	END_BLOCK

END_FORM

REPORT_FORM WRITE_LOG_REPORT &
	/READ_ONLY &
	/WIDTH=116 &
	/OUTPUT=(#R_NAME) &
	/TABLE=RS_SYS_MESSAGES &
	/SORTED_BY=(RS_SORT_ORDER) &
	/HEADING_FORM=HEADINGS &
	/FOOTING_FORM=FOOTINGS

	OUTPUT_BLOCK RS_SEQUENCE_1 /SOURCE=(RS_SYS_MESSAGES(RS_SEQUENCE))

	OUTPUT_BLOCK RS_MESSAGE_SEVERITY_2 /SOURCE=(RS_SYS_MESSAGES(RS_MESSAGE_SEVERITY))

	OUTPUT_BLOCK RS_MESSAGE_NUMBER_3 /SOURCE=(RS_SYS_MESSAGES(RS_MESSAGE_NUMBER)&", "&RS_SYS_MESSAGES(RS_MESSAGE_TEXT))

END_FORM

PROCEDURE_FORM HEADINGS

	OUTPUT_BLOCK BLOCK_1 /ROW=1 /COL=LEFT &
			/SOURCE=(#ID&" "&MASK("!DD-!3Lm-!LY !HH:!Mi", %NOW))

	OUTPUT_BLOCK BLOCK_2 /ROW=1 /COL=CENTER &
			/SOURCE=(#COMPANY_CODE & ": " & TRIM(#COMPANY_NAME))

	OUTPUT_BLOCK BLOCK_3 /ROW=1 /COL=RIGHT &
			/SOURCE=(MESSAGE("P_00486",MASK("!-@@@@@", %PAGE)))

	BEGIN_BLOCK GET_DIV_NAME
		FIND IN AR_CONTROLS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=#DIVISION

		IF (%STATUS <> %SUCCESS)
			! "Invalid division !AS"
			#ERR_MSG = "P_02791"
			#LIN_SEQ = 0
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN",#ERR_MSG,"",#ERR_MSG_FATAL,#LIN_SEQ,#DIVISION)
			EXIT (%FAILURE)
		END_IF

		IF (AR_CONTROLS(SOP_ACTIVE) <> #YES)
			! "Division is not activated"
			#ERR_MSG = "P_00243"
			#LIN_SEQ = 0
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN",#ERR_MSG,"",#ERR_MSG_FATAL,#LIN_SEQ)
			EXIT (%FAILURE)
		END_IF

		#DIV_NAME = AR_CONTROLS(DIVISION_NAME)
	END_BLOCK

	OUTPUT_BLOCK  DIV_DESC/ROW=2 /COL=CENTER  &
			/SOURCE=(#DIVISION &": "& TRIM(#DIV_NAME))

	OUTPUT_BLOCK BLOCK_4 /ROW=3 /COL=CENTER  &
			/SOURCE=(MESSAGE("P_13305"))

	OUTPUT_BLOCK SHIPPING_NOTES/ROW=5/COL=CENTER &
			/SOURCE=(MESSAGE("P_13315")&": "&#SHIP_NOTES)


END_FORM


PROCEDURE_FORM FOOTINGS

	OUTPUT_BLOCK BLOCK_1 /ROW=2 /COL=LEFT &
			/SOURCE=(#ID&" "&MASK("!DD-!3Lm-!LY !HH:!Mi", %NOW))

	OUTPUT_BLOCK NAME /ROW=2 /COL=CENTER /COL=CENTRE &
			/SOURCE=(MESSAGE("P_13305"))


	OUTPUT_BLOCK BLOCK_2 /ROW=2 /COL=RIGHT &
			/SOURCE=(MESSAGE("P_00486",MASK("!-@@@@@", %PAGE)))

END_FORM



!Change 001
PROCEDURE_FORM VOL_CYLINDERS &
        /TABLE=SOP_DESPATCH_NOTES_VT &
        /SECONDARY &
        /STREAM_NAME=CYLINDERS &
        /SORTED_BY=(ORDER_NUMBER,ORDER_LINE_NUMBER)

	BEGIN_BLOCK DESP_DATE

		FIND IN DESPATCH_NOTES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION = #DIVISION &
			/WITH=DESPATCH_NOTE = CYLINDERS:SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE) &
			/WITH=DESPATCH_LINE = CYLINDERS:SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)

		#DESPATCH_DATE = DESPATCH_NOTES(DESPATCH_DATE)
	END_BLOCK


	BEGIN_BLOCK LOT_TRACE
		#CYLINDER_DIRECT_FROM_INV = #NO

		!+++
		! Check Part if	part is a piece of hardware first...
		!---
		IF ( DESPATCH_NOTES(NONSTOCK) = #NO ) 
			FIND IN PRODUCT_MASTER &
				/LOCK=NONE &
				/WITH=COMPANY_CODE = #COMPANY_CODE &
				/WITH=PART_CODE = CYLINDERS:SOP_DESPATCH_NOTES_VT(PART_CODE)

			IF (%STATUS = %SUCCESS)		

				!+++
				! Check whether this is a "cylinder" or not
				!---
				#POS = POS(#TRACKED_HARDWARE_GROUPS,PRODUCT_MASTER(PRODUCT_GROUP),1)

				IF (#POS > 0) 

					#TRACKED_HARDWARE_PART = #YES

					#CYLINDER_PART_CODE = CYLINDERS:SOP_DESPATCH_NOTES_VT(PART_CODE)
					#CYLINDER_LOT_NUMBER = CYLINDERS:SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER)

					PERFORM CREATE_CYLMOVEMENT_RECORDS(#CYLINDER_PART_CODE,#CYLINDER_LOT_NUMBER)

					#TRACKED_HARDWARE_PART = #NO

				ELSE
					!+++
					! Must be a Product Part Code
					!---

					!+++
					! Check for being made in PM by a job first
					!---
					FIND IN IC_LOT_TRACE &
						/LOCK=NONE &
						/WITH=COMPANY_CODE = #COMPANY_CODE &
						/WITH=IC_LT_TO_INDICATOR = "I" &
						/WITH=IC_LT_TO_DIV_WH_FA = CYLINDERS:SOP_DESPATCH_NOTES_VT(WAREHOUSE) &
						/WITH=IC_LT_TO_DOC_PART_JOB = &
							CYLINDERS:SOP_DESPATCH_NOTES_VT(PART_CODE) &
						/WITH=IC_LT_TO_LINE_LOT_STAGE = &
							CYLINDERS:SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER) &
						/WITH=IC_LT_TO_DOCSEQ_LOTSEQ_LINE = &
							CYLINDERS:SOP_DESPATCH_NOTES_VT(IC_LOT_SEQUENCE) &
						/WITH=SOURCE_MODULE = #MODULE_PM &
						/WITH=MOVEMENT_CODE = #MOVE_PMMC

					IF (%STATUS = %SUCCESS)

						#FACTORY_CODE = IC_LOT_TRACE(IC_LT_FROM_DIV_WH_FA)
						#JOB_NUMBER = IC_LOT_TRACE(IC_LT_FROM_DOC_PART_JOB)
						#INCREMENT=0
						#INCREMENT_HARDWARE = 0

						!DBM - 11/2/2007
						!Added DRUMRQ (Drum required) characteristic for all pure diborane parts to prevent hard-coding part numbers
						!Lookup DRUMRQ
						FIND IN IC_PRODUCT_CHARACTERISTICS &
							/LOCK=NONE &
							/WITH=PART_CODE=CYLINDERS:SOP_DESPATCH_NOTES_VT(PART_CODE) &
							/WITH=CHARACTERISTIC_CODE="DRUMRQ"

						IF (IC_PRODUCT_CHARACTERISTICS(IC_DEF_CHAR_TEXT)="Y")
						!DBM - End
							PERFORM VOL_LOT_FROM_PM
						ELSE
							#CYLINDER_DIRECT_FROM_INV = #YES
					
							PERFORM VOL_LOT_FROM_INV
						END_IF
						!end DBM mods

						IF (%STATUS <> %SUCCESS)

							FIND IN IC_LOT_TRACE &
								/LOCK=NONE &
								/WITH=COMPANY_CODE = #COMPANY_CODE &
								/WITH=IC_LT_TO_INDICATOR = "I" &
								/WITH=IC_LT_TO_DIV_WH_FA = CYLINDERS:SOP_DESPATCH_NOTES_VT(WAREHOUSE) &
								/WITH=IC_LT_TO_DOC_PART_JOB = &
									CYLINDERS:SOP_DESPATCH_NOTES_VT(PART_CODE) &
								/WITH=IC_LT_TO_LINE_LOT_STAGE = &
									CYLINDERS:SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER) &
								/WITH=IC_LT_TO_DOCSEQ_LOTSEQ_LINE = &
									CYLINDERS:SOP_DESPATCH_NOTES_VT(IC_LOT_SEQUENCE) &
								/WITH=SOURCE_MODULE = #MODULE_PM &
								/WITH=MOVEMENT_CODE = #MOVE_PMJC

							IF (%STATUS = %SUCCESS)

								#FACTORY_CODE = IC_LOT_TRACE(IC_LT_FROM_DIV_WH_FA)
								#JOB_NUMBER = IC_LOT_TRACE(IC_LT_FROM_DOC_PART_JOB)
								#INCREMENT=0
								#INCREMENT_HARDWARE = 0

								!DBM - 11/2/2007
								!Added DRUMRQ (Drum required) characteristic for all pure diborane parts to prevent hard-coding part numbers
								FIND IN IC_PRODUCT_CHARACTERISTICS &
									/LOCK=NONE &
									/SECONDARY & 
									/WITH=PART_CODE=CYLINDERS:SOP_DESPATCH_NOTES_VT(PART_CODE) &
									/WITH=CHARACTERISTIC_CODE="DRUMRQ"

								IF (IC_PRODUCT_CHARACTERISTICS(IC_DEF_CHAR_TEXT)="Y")
								!DBM - End
									PERFORM VOL_LOT_FROM_PM
								ELSE
									#CYLINDER_DIRECT_FROM_INV = #YES
							
									PERFORM VOL_LOT_FROM_INV
								END_IF


							ELSE
								ERROR/TEXT_ONLY ("Error Processing Part/Lot" & CYLINDERS:SOP_DESPATCH_NOTES_VT(PART_CODE) &
									& "/" & CYLINDERS:SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER))
							END_IF

						END_IF

					ELSE
						!+++
						! Didn't come from a PM so check for a Stock Conversion
						!---
						FIND IN IC_LOT_TRACE &
							/LOCK=NONE &
							/WITH=COMPANY_CODE = #COMPANY_CODE &
							/WITH=IC_LT_TO_INDICATOR = "I" &
							/WITH=IC_LT_TO_DIV_WH_FA = CYLINDERS:SOP_DESPATCH_NOTES_VT(WAREHOUSE) &
							/WITH=IC_LT_TO_DOC_PART_JOB = &
								CYLINDERS:SOP_DESPATCH_NOTES_VT(PART_CODE) &
							/WITH=IC_LT_TO_LINE_LOT_STAGE = &
								CYLINDERS:SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER) &
							/WITH=IC_LT_TO_DOCSEQ_LOTSEQ_LINE = &
								CYLINDERS:SOP_DESPATCH_NOTES_VT(IC_LOT_SEQUENCE) &
							/WITH=SOURCE_MODULE = (PARAMETER("MODULE_IC")) &
							/WITH=MOVEMENT_CODE = (PARAMETER("INV_MOVE_STO"))

						IF (%STATUS = %SUCCESS)
							#FACTORY_CODE = IC_LOT_TRACE(IC_LT_FROM_DIV_WH_FA)
							#JOB_NUMBER = IC_LOT_TRACE(IC_LT_FROM_DOC_PART_JOB)
							#INCREMENT=0
							#INCREMENT_HARDWARE = 0
							PERFORM VOL_LOT_FROM_ICST
							IF (%STATUS <> %SUCCESS)
								ERROR/TEXT_ONLY ("Error Processing Part/Lot" & CYLINDERS:SOP_DESPATCH_NOTES_VT(PART_CODE) &
									& "/" & CYLINDERS:SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER))
							ELSE

								IF ( #INCREMENT = 0 ) 
									!+++
									! We never shipped anything so ship from Lot Details
									!---
									PERFORM VOL_LOT_FROM_INV 					
								END_IF 

							END_IF

						ELSE
							!+++
							! Didn't come from a Stock Conversion either so just assume it was
							! incremented somehow and the Cylinder Number is in the Lot Chars
							!---
							#INCREMENT=0
							#INCREMENT_HARDWARE = 0

							PERFORM VOL_LOT_FROM_INV 

						END_IF

					END_IF

				END_IF

			END_IF
		
		END_IF 

	END_BLOCK

END_FORM
!Change 001

!Change 001
PROCEDURE_FORM VOL_LOT_FROM_PM &
	/TABLE=IC_LOT_TRACE &
	/SECONDARY &
	/STREAM_NAME=CYLINDER &
	/LOCK=NONE &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=IC_LT_TO_INDICATOR = "PMPMPM" &
	/WITH=IC_LT_TO_DIV_WH_FA = #FACTORY_CODE &
	/WITH=IC_LT_TO_DOC_PART_JOB = #JOB_NUMBER &
	/WITH=SOURCE_MODULE = #MODULE_PM &
	/WITH=MOVEMENT_CODE = "PMMI"


	BEGIN_BLOCK GET_PRODUCT_AND_CHECK_GROUP
		FIND IN PRODUCT_MASTER &
			/LOCK=NONE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=PART_CODE = CYLINDER:IC_LOT_TRACE(IC_LT_FROM_DOC_PART_JOB)

		IF (%STATUS <> %SUCCESS)		
			EXIT (%FAILURE)
		END_IF

		!+++
		! Check whether this is a "cylinder" or not
		!---
		#POS=POS(#TRACKED_HARDWARE_GROUPS,PRODUCT_MASTER(PRODUCT_GROUP),1)

		IF (#POS<1) GOTO SKIP_1

		!+++
		! Check whether this cylinder has been processed already
		!---
		FIND IN CHECK_PROCESSED:VOL_CYLMOVEMENTS &
			/SECONDARY &
			/LOCK=WRITE &
			/WITH=DOCUMENT_NUMBER = CYLINDERS:SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE) &
			/WITH=PART_CODE = CYLINDER:IC_LOT_TRACE(IC_LT_FROM_DOC_PART_JOB) &
			/WITH=IC_LOT_NUMBER = CYLINDER:IC_LOT_TRACE(IC_LT_FROM_LINE_LOT_STAGE)
	
		IF (%STATUS = %SUCCESS ) GOTO SKIP_1
		
	END_BLOCK
	
	!DBM - 6-13-2008 - Bugfix
	!We need to check the sum of all the MI vs the sum of the returns to ensure that only the issued items are recorded, and returned items are not.
	BEGIN_BLOCK CHECK
		START_STREAM CHECK_ISSUED &
			/TABLE=IC_LOT_TRACE &
			/SECONDARY &
			/LOCK=READ &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=IC_LT_TO_INDICATOR = "PMPMPM" &
!************* EMM Bug fix	delete Hardcoded factory
!			/WITH=IC_LT_TO_DIV_WH_FA = "01" &
!  ****************************************************************************************************************
			/WITH=IC_LT_TO_DOC_PART_JOB = CYLINDER:IC_LOT_TRACE(IC_LT_TO_DOC_PART_JOB) &
			/WITH=SOURCE_MODULE = #MODULE_PM &
			/WITH=MOVEMENT_CODE = "PMMI" &
			/WITH=IC_LT_FROM_DOC_PART_JOB=CYLINDER:IC_LOT_TRACE(IC_LT_FROM_DOC_PART_JOB) &
			/WITH=IC_LT_FROM_LINE_LOT_STAGE = CYLINDER:IC_LOT_TRACE(IC_LT_FROM_LINE_LOT_STAGE)

		#ISSUED_SUM=0
		FETCH CHECK_ISSUED
		WHILE (%STATUS=%SUCCESS)
			#ISSUED_SUM=#ISSUED_SUM + CHECK_ISSUED:IC_LOT_TRACE(IC_MOVE_QUANTITY_1)
			FETCH CHECK_ISSUED
		END_WHILE

		START_STREAM CHECK_RETURNED & 
			/TABLE=IC_LOT_TRACE &
			/SECONDARY &
			/LOCK=READ &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=IC_LT_FROM_INDICATOR = "PMPMMR" &
			/WITH=SOURCE_MODULE = #MODULE_PM &
			/WITH=MOVEMENT_CODE = "PMMR" &
			/WITH=IC_LT_FROM_DOC_PART_JOB = CYLINDER:IC_LOT_TRACE(IC_LT_TO_DOC_PART_JOB) &
			/WITH=IC_LT_TO_DOC_PART_JOB = CYLINDER:IC_LOT_TRACE(IC_LT_FROM_DOC_PART_JOB) &
			/WITH=IC_LT_TO_LINE_LOT_STAGE = CYLINDER:IC_LOT_TRACE(IC_LT_FROM_LINE_LOT_STAGE)
		

		#RETURNED_SUM=0
		FETCH CHECK_RETURNED
		WHILE (%STATUS=%SUCCESS) 
			#RETURNED_SUM=#RETURNED_SUM+CHECK_RETURNED:IC_LOT_TRACE(IC_MOVE_QUANTITY_1)
			FETCH CHECK_RETURNED
		END_WHILE

		IF (#ISSUED_SUM > #RETURNED_SUM)
			!PRINT ("Lot: " & CYLINDER:IC_LOT_TRACE(IC_LT_FROM_LINE_LOT_STAGE) & " " & #ISSUED_SUM & " issued; " & #RETURNED_SUM & " returned. Record should be written.")
			PERFORM CREATE_CYLMOVEMENT_RECORDS(CYLINDER:IC_LOT_TRACE(IC_LT_FROM_DOC_PART_JOB),CYLINDER:IC_LOT_TRACE(IC_LT_FROM_LINE_LOT_STAGE))
		ELSE
			!PRINT ("Lot: " & CYLINDER:IC_LOT_TRACE(IC_LT_FROM_LINE_LOT_STAGE) & " " & #ISSUED_SUM & " issued; " & #RETURNED_SUM & " returned. Record should not be written.")			
			!Do nothing
		END_IF

	END_BLOCK
	!DBM End Bugfix

	BEGIN_BLOCK SKIP_1
	END_BLOCK
END_FORM
!Change 001

!Change 001
PROCEDURE_FORM VOL_LOT_FROM_ICST &
	/TABLE=IC_LOT_TRACE &
	/SECONDARY &
	/STREAM_NAME=CYLINDER &
	/LOCK=NONE &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=IC_LT_TO_INDICATOR = "ICSTI" &
	/WITH=IC_LT_TO_DIV_WH_FA = IC_LOT_TRACE(IC_LT_FROM_DIV_WH_FA) &
	/WITH=IC_LT_TO_DOC_PART_JOB = IC_LOT_TRACE(IC_LT_FROM_DOC_PART_JOB) &
	/WITH=SOURCE_MODULE = (PARAMETER("MODULE_IC")) &
	/WITH=MOVEMENT_CODE = (PARAMETER("INV_MOVE_STI"))


	BEGIN_BLOCK GET_PRODUCT_AND_CHECK_GROUP
		FIND IN PRODUCT_MASTER &
			/LOCK=NONE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=PART_CODE = CYLINDER:IC_LOT_TRACE(IC_LT_FROM_DOC_PART_JOB)

		IF (%STATUS <> %SUCCESS)		
			EXIT (%FAILURE)
		END_IF

		#POS=POS(#TRACKED_HARDWARE_GROUPS,PRODUCT_MASTER(PRODUCT_GROUP),1)

		IF (#POS<1) GOTO SKIP_1
	
		!PERFORM CREATE_DESPATCHED_HARDWARE_RECORDS

	END_BLOCK 

	BEGIN_BLOCK SKIP_1
	END_BLOCK

END_FORM 
!Change 001


!Change 001
PROCEDURE_FORM VOL_LOT_FROM_INV 

	BEGIN_BLOCK LOT_FROM_INV 
	
		#CYLINDER_DIRECT_FROM_INV = #YES
		#CYLINDER_PART_CODE = PARAMETER("VOL_DEFAULT_PACKAGE_PART_CODE")

		FIND IN IC_LOT_CHARACTERISTICS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE = #COMPANY_CODE &
			/WITH=WAREHOUSE = CYLINDERS:SOP_DESPATCH_NOTES_VT(WAREHOUSE) &
			/WITH=PART_CODE = CYLINDERS:SOP_DESPATCH_NOTES_VT(PART_CODE) &
			/WITH=IC_LOT_NUMBER = CYLINDERS:SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER) &
			/WITH=CHARACTERISTIC_CODE = "CYLNUM"

		IF ( %STATUS = %SUCCESS ) 
		
			#CYLINDER_LOT_NUMBER = IC_LOT_CHARACTERISTICS(CHARACTERISTIC_TEXT)
			!PERFORM CREATE_DESPATCHED_HARDWARE_RECORDS
			PERFORM CREATE_CYLMOVEMENT_RECORDS(#CYLINDER_PART_CODE,#CYLINDER_LOT_NUMBER )

		END_IF 

		#CYLINDER_DIRECT_FROM_INV = #NO

	END_BLOCK 

END_FORM 
!Change 001

!Change 001
PROCEDURE_FORM CREATE_CYLMOVEMENT_RECORDS(#PARTCODE,#CYLNUM)
	BEGIN_BLOCK CREATE 
	
		
		CLEAR_BUFFER VOL_CYLMOVEMENTS

		VOL_CYLMOVEMENTS(WAREHOUSE)=DESPATCH_NOTES(WAREHOUSE)
		VOL_CYLMOVEMENTS(DOCUMENT_NUMBER) = &
			CYLINDERS:SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)

		VOL_CYLMOVEMENTS(DOCUMENT_LINE) = CYLINDERS:SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)

		VOL_CYLMOVEMENTS(CUSTOMER_NUMBER) = &
			CYLINDERS:SOP_DESPATCH_NOTES_VT(CUSTOMER_NUMBER)

		VOL_CYLMOVEMENTS(MOVEMENT_CODE)="CYLSHP"
		VOL_CYLMOVEMENTS(PART_CODE) = #PARTCODE
		VOL_CYLMOVEMENTS(IC_LOT_NUMBER) = #CYLNUM
		VOL_CYLMOVEMENTS(MOVEMENT_DATE) = #DESPATCH_DATE
		VOL_CYLMOVEMENTS(ADDRESS_CODE)=CYLINDERS:SOP_DESPATCH_NOTES_VT(DELIVERY_ADDRESS_CODE)
		VOL_CYLMOVEMENTS(ORDER_NUMBER)=DESPATCH_NOTES(ORDER_NUMBER)
	

	ADD TO VOL_CYLMOVEMENTS

	END_BLOCK

END_FORM
!Change 001 End



PROCEDURE_FORM EXTERNAL_ENTRY_WMS (#P1,#P2)

	BEGIN_BLOCK SETUP_PARAMS

		SET/LOCAL DATABASE FIN

		PERFORM INITIALIZE_LITERALS

		#RUN_TYPE          = #RUN_TYPE_SOP
		#BATCH_PROCESS     = #NO
		#SHIPPING_DESPATCH = #NO
		#STATUS_ERROR      = PARAMETER("STATUS_ERROR")

		#CALL_MODE         = #P1
		! For future use
!		#CALLED_FROM       = #P2

	END_BLOCK

	BEGIN_BLOCK DESPATCH

		DELETE ALL FROM SOP_DESPATCH_NOTES_VT
		DELETE ALL FROM IC_DEMAND_SUPPLY_VT

		#PREVIOUS_COMPANY   = ""
		#PREVIOUS_DIVISION  = ""
		#PREVIOUS_SHIP_NOTE = ""

		PERFORM SHIPPING_DESPATCH_SELECTION_WMS

		IF (%STATUS <> %SUCCESS OR %STATUS = %EMPTY)
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" ("FIN","P_13318","",1,0)
            #DESPATCH_STATUS = %FAILURE
            GOTO RESET_HEADER_STATUS
		END_IF

		COMMIT

		PERFORM DESPATCH

		#DESPATCH_STATUS = %STATUS

		COMMIT

		START_TRANSACTION

		PERFORM "GEMLB:LB_S_L_UPDATE_DEMAND_SUPPLY"

		COMMIT

		DELETE ALL FROM IC_DEMAND_SUPPLY_VT

    END_BLOCK
    
    BEGIN_BLOCK RESET_HEADER_STATUS
        
		PERFORM RESET_HEADER_STATUS_BY_VT_WMS
        COMMIT

		IF (#DESPATCH_STATUS <> %SUCCESS)
			EXIT (%FAILURE)
		END_IF

	END_BLOCK

END_FORM


PROCEDURE_FORM SHIPPING_DESPATCH_SELECTION_WMS	&
	/TABLE=SOP_SHIP_CONFIRM_LINES_VT &
	/WITH=STATUS_FLAG <> #STATUS_ERROR &
	/SORTED_BY=(COMPANY_CODE,DIVISION,SHIP_NOTE,SHIP_NOTE_LINE)

	BEGIN_BLOCK SETUP

		#COMPANY_CODE = SOP_SHIP_CONFIRM_LINES_VT(COMPANY_CODE)
		#DIVISION     = SOP_SHIP_CONFIRM_LINES_VT(DIVISION)
		#SHIP_NOTE    = SOP_SHIP_CONFIRM_LINES_VT(SHIP_NOTE)

		FIND IN DESPATCH_NOTES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=SOP_SHIP_CONFIRM_LINES_VT(COMPANY_CODE) &
			/WITH=DIVISION=SOP_SHIP_CONFIRM_LINES_VT(DIVISION) &
			/WITH=DESPATCH_NOTE=SOP_SHIP_CONFIRM_LINES_VT(SHIP_NOTE) &
			/WITH=DESPATCH_LINE=SOP_SHIP_CONFIRM_LINES_VT(SHIP_NOTE_LINE)

		IF (%STATUS <> %SUCCESS)
			! "Shipping Note not found !AS"
			#ERROR_TXT = RS_WMS_SHIP_CONFIRM_LINES(COMPANY_CODE) & "/" & &
			             RS_WMS_SHIP_CONFIRM_LINES(DIVISION) & "/" & &
			             RS_WMS_SHIP_CONFIRM_LINES(SHIP_NOTE) & "/" & &
			             RS_WMS_SHIP_CONFIRM_LINES(SHIP_NOTE_LINE)

			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" &
				("FIN","P_52111","",#ERROR_FATAL,#MESSAGE_SEQ,#ERROR_TXT)
			GOTO NEXT_RECORD
		END_IF

		IF (DESPATCH_NOTES(CONFIRM_DESPATCH) = #YES)
			GOTO NEXT_RECORD
		END_IF

	END_BLOCK

	BEGIN_BLOCK LOAD_VT

		CLEAR_BUFFER SOP_DESPATCH_NOTES_VT

		SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)           = DESPATCH_NOTES(DESPATCH_NOTE)
		SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)           = DESPATCH_NOTES(DESPATCH_LINE)
		SOP_DESPATCH_NOTES_VT(DESPATCH_NUMBER)         = DESPATCH_NOTES(DESPATCH_NUMBER)
		SOP_DESPATCH_NOTES_VT(DESPATCH_SEQUENCE)       = DESPATCH_NOTES(DESPATCH_SEQUENCE)

		SOP_DESPATCH_NOTES_VT(COMPANY_CODE)            = DESPATCH_NOTES(COMPANY_CODE)
		SOP_DESPATCH_NOTES_VT(DIVISION)                = DESPATCH_NOTES(DIVISION)
		SOP_DESPATCH_NOTES_VT(ORDER_NUMBER)            = DESPATCH_NOTES(ORDER_NUMBER)
		SOP_DESPATCH_NOTES_VT(ORDER_LINE_NUMBER)       = DESPATCH_NOTES(ORDER_LINE_NUMBER)
		SOP_DESPATCH_NOTES_VT(SEQUENCE)                = DESPATCH_NOTES(SEQUENCE)
		SOP_DESPATCH_NOTES_VT(CUSTOMER_NUMBER)         = DESPATCH_NOTES(CUSTOMER_NUMBER)
		SOP_DESPATCH_NOTES_VT(MP_SHIPPING_CUSTOMER)    = DESPATCH_NOTES(MP_SHIPPING_CUSTOMER)
		SOP_DESPATCH_NOTES_VT(DELIVERY_ADDRESS_CODE)   = DESPATCH_NOTES(DELIVERY_ADDRESS_CODE)
		SOP_DESPATCH_NOTES_VT(WAREHOUSE)               = DESPATCH_NOTES(WAREHOUSE)
		SOP_DESPATCH_NOTES_VT(PART_CODE)               = DESPATCH_NOTES(PART_CODE)
		SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER)           = DESPATCH_NOTES(IC_LOT_NUMBER)
		SOP_DESPATCH_NOTES_VT(IC_LOT_SEQUENCE)         = DESPATCH_NOTES(IC_LOT_SEQUENCE)
		SOP_DESPATCH_NOTES_VT(BIN_LOCATION)            = DESPATCH_NOTES(BIN_LOCATION)
		SOP_DESPATCH_NOTES_VT(LOCATION)                = DESPATCH_NOTES(LOCATION)
		SOP_DESPATCH_NOTES_VT(PROMISED_DATE)           = DESPATCH_NOTES(PROMISED_DATE)
		SOP_DESPATCH_NOTES_VT(REQUIRED_DATE)           = DESPATCH_NOTES(REQUIRED_DATE)
		SOP_DESPATCH_NOTES_VT(SALESPERSON_CODE)        = DESPATCH_NOTES(SALESPERSON_CODE)
		SOP_DESPATCH_NOTES_VT(SALES_ANALYSIS_GROUP)    = DESPATCH_NOTES(SALES_ANALYSIS_GROUP)
		SOP_DESPATCH_NOTES_VT(UNIT_SALES)              = DESPATCH_NOTES(UNIT_SALES)
		SOP_DESPATCH_NOTES_VT(SOP_NOMINATED_UNIT)      = DESPATCH_NOTES(SOP_NOMINATED_UNIT)
		SOP_DESPATCH_NOTES_VT(IC_PACK_UNIT)            = DESPATCH_NOTES(IC_PACK_UNIT)
		SOP_DESPATCH_NOTES_VT(IC_OTHER_INVENTORY_UNIT) = DESPATCH_NOTES(IC_OTHER_INVENTORY_UNIT)
		SOP_DESPATCH_NOTES_VT(MH_NUMBER)               = DESPATCH_NOTES(MH_NUMBER)
		SOP_DESPATCH_NOTES_VT(NONSTOCK)                = DESPATCH_NOTES(NONSTOCK)
		SOP_DESPATCH_NOTES_VT(SHIPMENT_SPLIT_SEQUENCE) = DESPATCH_NOTES(SHIPMENT_SPLIT_SEQUENCE)
		SOP_DESPATCH_NOTES_VT(TM_LOAD_NUMBER)          = DESPATCH_NOTES(TM_LOAD_NUMBER)
		SOP_DESPATCH_NOTES_VT(SOP_SHIPPING_RUN_NUMBER) = DESPATCH_NOTES(SOP_SHIPPING_RUN_NUMBER)
		SOP_DESPATCH_NOTES_VT(SOP_SHIPPING_LIST_LINE)  = DESPATCH_NOTES(SOP_SHIPPING_LIST_LINE)
		SOP_DESPATCH_NOTES_VT(SHIPPING_LEG)            = DESPATCH_NOTES(SHIPPING_LEG)
		SOP_DESPATCH_NOTES_VT(SOP_LOAD_ID)             = DESPATCH_NOTES(SOP_LOAD_ID)

		ADD TO SOP_DESPATCH_NOTES_VT

	END_BLOCK

	BEGIN_BLOCK NEXT_RECORD

		IF (#COMPANY_CODE <> #PREVIOUS_COMPANY)
			#PREVIOUS_COMPANY   = #COMPANY_CODE
			#PREVIOUS_DIVISION  = ""
			#PREVIOUS_SHIP_NOTE = ""
		END_IF

		IF (#DIVISION <> #PREVIOUS_DIVISION)
			#PREVIOUS_DIVISION  = #DIVISION
			#PREVIOUS_SHIP_NOTE = ""
		END_IF

		IF (#SHIP_NOTE <> #PREVIOUS_SHIP_NOTE)
			#PREVIOUS_SHIP_NOTE = #SHIP_NOTE

			PERFORM CHECK_NON_STOCK_LINES_WMS
		END_IF

	END_BLOCK

END_FORM


PROCEDURE_FORM CHECK_NON_STOCK_LINES_WMS &
	/TABLE=DESPATCH_NOTES &
	/LOCK=NONE &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=DIVISION=#DIVISION &
	/WITH=DESPATCH_NOTE=#SHIP_NOTE &
	/WITH=NONSTOCK=#YES &
	/WITH=CONFIRM_DESPATCH <> #YES

	BEGIN_BLOCK LOAD_VT

		CLEAR_BUFFER SOP_DESPATCH_NOTES_VT

		SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)           = DESPATCH_NOTES(DESPATCH_NOTE)
		SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)           = DESPATCH_NOTES(DESPATCH_LINE)
		SOP_DESPATCH_NOTES_VT(DESPATCH_NUMBER)         = DESPATCH_NOTES(DESPATCH_NUMBER)
		SOP_DESPATCH_NOTES_VT(DESPATCH_SEQUENCE)       = DESPATCH_NOTES(DESPATCH_SEQUENCE)

		SOP_DESPATCH_NOTES_VT(COMPANY_CODE)            = DESPATCH_NOTES(COMPANY_CODE)
		SOP_DESPATCH_NOTES_VT(DIVISION)                = DESPATCH_NOTES(DIVISION)
		SOP_DESPATCH_NOTES_VT(ORDER_NUMBER)            = DESPATCH_NOTES(ORDER_NUMBER)
		SOP_DESPATCH_NOTES_VT(ORDER_LINE_NUMBER)       = DESPATCH_NOTES(ORDER_LINE_NUMBER)
		SOP_DESPATCH_NOTES_VT(SEQUENCE)                = DESPATCH_NOTES(SEQUENCE)
		SOP_DESPATCH_NOTES_VT(CUSTOMER_NUMBER)         = DESPATCH_NOTES(CUSTOMER_NUMBER)
		SOP_DESPATCH_NOTES_VT(MP_SHIPPING_CUSTOMER)    = DESPATCH_NOTES(MP_SHIPPING_CUSTOMER)
		SOP_DESPATCH_NOTES_VT(DELIVERY_ADDRESS_CODE)   = DESPATCH_NOTES(DELIVERY_ADDRESS_CODE)
		SOP_DESPATCH_NOTES_VT(WAREHOUSE)               = DESPATCH_NOTES(WAREHOUSE)
		SOP_DESPATCH_NOTES_VT(PART_CODE)               = DESPATCH_NOTES(PART_CODE)
		SOP_DESPATCH_NOTES_VT(IC_LOT_NUMBER)           = DESPATCH_NOTES(IC_LOT_NUMBER)
		SOP_DESPATCH_NOTES_VT(IC_LOT_SEQUENCE)         = DESPATCH_NOTES(IC_LOT_SEQUENCE)
		SOP_DESPATCH_NOTES_VT(BIN_LOCATION)            = DESPATCH_NOTES(BIN_LOCATION)
		SOP_DESPATCH_NOTES_VT(LOCATION)                = DESPATCH_NOTES(LOCATION)
		SOP_DESPATCH_NOTES_VT(PROMISED_DATE)           = DESPATCH_NOTES(PROMISED_DATE)
		SOP_DESPATCH_NOTES_VT(REQUIRED_DATE)           = DESPATCH_NOTES(REQUIRED_DATE)
		SOP_DESPATCH_NOTES_VT(SALESPERSON_CODE)        = DESPATCH_NOTES(SALESPERSON_CODE)
		SOP_DESPATCH_NOTES_VT(SALES_ANALYSIS_GROUP)    = DESPATCH_NOTES(SALES_ANALYSIS_GROUP)
		SOP_DESPATCH_NOTES_VT(UNIT_SALES)              = DESPATCH_NOTES(UNIT_SALES)
		SOP_DESPATCH_NOTES_VT(SOP_NOMINATED_UNIT)      = DESPATCH_NOTES(SOP_NOMINATED_UNIT)
		SOP_DESPATCH_NOTES_VT(IC_PACK_UNIT)            = DESPATCH_NOTES(IC_PACK_UNIT)
		SOP_DESPATCH_NOTES_VT(IC_OTHER_INVENTORY_UNIT) = DESPATCH_NOTES(IC_OTHER_INVENTORY_UNIT)
		SOP_DESPATCH_NOTES_VT(MH_NUMBER)               = DESPATCH_NOTES(MH_NUMBER)
		SOP_DESPATCH_NOTES_VT(NONSTOCK)                = DESPATCH_NOTES(NONSTOCK)
		SOP_DESPATCH_NOTES_VT(SHIPMENT_SPLIT_SEQUENCE) = DESPATCH_NOTES(SHIPMENT_SPLIT_SEQUENCE)
		SOP_DESPATCH_NOTES_VT(TM_LOAD_NUMBER)          = DESPATCH_NOTES(TM_LOAD_NUMBER)
		SOP_DESPATCH_NOTES_VT(SOP_SHIPPING_RUN_NUMBER) = DESPATCH_NOTES(SOP_SHIPPING_RUN_NUMBER)
		SOP_DESPATCH_NOTES_VT(SOP_SHIPPING_LIST_LINE)  = DESPATCH_NOTES(SOP_SHIPPING_LIST_LINE)
		SOP_DESPATCH_NOTES_VT(SHIPPING_LEG)            = DESPATCH_NOTES(SHIPPING_LEG)
		SOP_DESPATCH_NOTES_VT(SOP_LOAD_ID)             = DESPATCH_NOTES(SOP_LOAD_ID)

		ADD TO SOP_DESPATCH_NOTES_VT

	END_BLOCK

END_FORM


PROCEDURE_FORM RESET_HEADER_STATUS_BY_VT_WMS &
	/TABLE=SOP_SHIP_AMEND_LINES_VT &
	/SORTED_BY=(COMPANY_CODE,DIVISION,SHIP_NOTE) &
	/REDUCED_TO=(COMPANY_CODE,DIVISION,SHIP_NOTE)

	BEGIN_BLOCK RESET_STATUS

		FIND IN DESPATCH_HEADERS &
			/LOCK=WRITE &
			/WITH=COMPANY_CODE=SOP_SHIP_AMEND_LINES_VT(COMPANY_CODE) &
			/WITH=DIVISION=SOP_SHIP_AMEND_LINES_VT(DIVISION) &
			/WITH=DESPATCH_NOTE=SOP_SHIP_AMEND_LINES_VT(SHIP_NOTE) &
			/WITH=STATUS_FLAG=(PARAMETER("STATUS_ACTIVE"))

		IF (%STATUS = %SUCCESS)
			DESPATCH_HEADERS(STATUS_FLAG) = ""
		END_IF

	END_BLOCK

END_FORM


PROCEDURE_FORM CLOSE_ZERO_XFER_DESPATCH

	BEGIN_BLOCK CLOSE
		#CLOSE_DESPATCH = #NO

		FIND IN SO:SALES_ORDER_HEADERS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=SOP_DESPATCH_NOTES_VT(DIVISION) &
			/WITH=ORDER_NUMBER=SOP_DESPATCH_NOTES_VT(ORDER_NUMBER)
			
		IF(SO:SALES_ORDER_HEADERS(SALES_ORDER_TYPE) = PARAMETER("SYS_TRANSFER_ORDER_TYPE"))
			GOTO END
		END_IF
		
		FIND IN DESPATCH_NOTE_QTYS &
			/SECONDARY &
			/LOCK=NONE &
			/STREAM_NAME = DNQ &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DIVISION=SOP_DESPATCH_NOTES_VT(DIVISION) &
			/WITH=DESPATCH_NOTE = SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)	&
			/WITH=DESPATCH_LINE = SOP_DESPATCH_NOTES_VT(DESPATCH_LINE) &
			/WITH=UNIT_OF_MEASURE = SOP_DESPATCH_NOTES_VT(SOP_NOMINATED_UNIT) &
			/WITH=OUTSTANDING_QTY_TO_ACCEPT > 0.0

		IF (%STATUS <> %SUCCESS)
			IF (SOP_DESPATCH_NOTES_VT(IC_OTHER_INVENTORY_UNIT) <> "")
				FIND IN DESPATCH_NOTE_QTYS &
					/SECONDARY &
					/LOCK=NONE &
					/STREAM_NAME = DNQ_OTHER &
					/WITH=COMPANY_CODE=#COMPANY_CODE &
					/WITH=DIVISION=SOP_DESPATCH_NOTES_VT(DIVISION) &
					/WITH=DESPATCH_NOTE = SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE)	&
					/WITH=DESPATCH_LINE = SOP_DESPATCH_NOTES_VT(DESPATCH_LINE) &
					/WITH=UNIT_OF_MEASURE = SOP_DESPATCH_NOTES_VT(IC_OTHER_INVENTORY_UNIT) &
					/WITH=OUTSTANDING_QTY_TO_ACCEPT > 0.0

				IF (%STATUS <> %SUCCESS)
					#CLOSE_DESPATCH = #YES
				END_IF
			ELSE
				#CLOSE_DESPATCH = #YES
			END_IF
		END_IF

		IF (#CLOSE_DESPATCH)
			START_STREAM DN &
				/TABLE = DESPATCH_NOTES	&
				/LOCK=NONE	&
				/WITH=COMPANY_CODE = #COMPANY_CODE	&
				/WITH=DIVISION = SOP_DESPATCH_NOTES_VT(DIVISION)	&
				/WITH=DESPATCH_NOTE = SOP_DESPATCH_NOTES_VT(DESPATCH_NOTE) &
				/WITH=DESPATCH_LINE = SOP_DESPATCH_NOTES_VT(DESPATCH_LINE)

			WHILE (1)
				FETCH DN/FAILURE = (CONTINUE OUT)

				IF (DN:DESPATCH_NOTES(SOP_DESTINATION_WAREHOUSE) <> "")
					DN:DESPATCH_NOTES(STATUS_FLAG) = PARAMETER("STATUS_CLOSED")
				END_IF
			END_WHILE
		END_IF
	END_BLOCK
		
	BEGIN_BLOCK END
	END_BLOCK
END_FORM

PROCEDURE_FORM DEC_ATP_INPUTS &
	/TABLE=IC_PROMISE_DETAILS &
	/LOCK=NONE &
	/WITH=COMPANY_CODE = #COMPANY_CODE &
	/WITH=DIVISION = #CURRENT_DIV &
	/WITH=ORDER_NUMBER = #CURRENT_ORDER
	
	BEGIN_BLOCK SETUP 

		FIND IN IC_ATP_INPUTS &
			/LOCK=WRITE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PART_CODE=IC_PROMISE_DETAILS(PART_CODE) &
			/WITH=WAREHOUSE=IC_PROMISE_DETAILS(WAREHOUSE) &
			/WITH=IC_LOT_NUMBER=IC_PROMISE_DETAILS(IC_LOT_NUMBER) &
			/WITH=IC_ATP_SOURCE_TYPE_CODE=IC_PROMISE_DETAILS(IC_ATP_SOURCE_TYPE_CODE) &
			/WITH=IC_STATUS_CODE=IC_PROMISE_DETAILS(IC_STATUS_CODE) &
			/WITH=UNIT_OF_MEASURE=IC_PROMISE_DETAILS(UNIT_OF_MEASURE) &
			/WITH=IC_ATP_FACTORY_PO_DIVISION=IC_PROMISE_DETAILS(IC_ATP_FACTORY_PO_DIVISION) &
			/WITH=IC_ATP_JOB_PO_FORECAST=IC_PROMISE_DETAILS(IC_ATP_JOB_PO_FORECAST) &
			/WITH=IC_ATP_JOB_STAGE_PO_LINE=IC_PROMISE_DETAILS(IC_ATP_JOB_STAGE_PO_LINE) &
			/WITH=IC_ATP_JOB_LINE_PO_SEQ=IC_PROMISE_DETAILS(IC_ATP_JOB_LINE_PO_SEQ)
		
		IF (%STATUS = %FAILURE)
			IF (#CALL_MODE = #CALL_MODE_W)
				PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" ("FIN","P_91521","",1,0)
			ELSE
				MESSAGE/IDENTIFIER/BELL/WAIT P_91521
			END_IF
			EXIT (%FAILURE)
		END_IF

		IC_ATP_INPUTS(IC_ATP_QTY_INPUT) = IC_ATP_INPUTS(IC_ATP_QTY_INPUT) - DEC_ATP_INPUTS:IC_PROMISE_DETAILS(IC_ATP_QTY_PROMISED)
	
	END_BLOCK 

END_FORM

PROCEDURE_FORM DC_ENTRY(#P1,#P2,#P3,#P4,#P5,#P6,#R1,#R2,#R3,#R4,#R5,#R6,#R7,#R8,#R9,#R10,#R11,#R12,#R13,#R14)

   BEGIN_BLOCK SETUP
      
	    PERFORM INITIALIZE_LITERALS
		
		#RUN_TYPE      = #P1
		#CALL_MODE     = #P2
		#LPN           = #P3
		#MV_YEAR       = #P4
		#MV_PERIOD     = #P5
		#DESPATCH_DATE = #P6
		
		#R1 = ""
		#R2 = ""
		#R3 = ""
		#R4 = ""
		#R5 = 0
		#R6 = 0
		#R7 = ""
		#R8 = ""
		#R9 = 0
		#R10 = ""
		#R11 = 0
		#R12 = ""
		#R13 = ""
		#R14 = ""
		
		#DC_ENTRY = #YES
		
		#BATCH_PROCESS = #NO
		
		PERFORM GET_KEY_RECORDS
		IF (%STATUS <> %SUCCESS)
			EXIT (%FAILURE)
		END_IF
   
   END_BLOCK
   
   BEGIN_BLOCK VALIDATION_FOR_DC_CONFIRM
   
        #SHIPPING_DESPATCH = #NO
		
		PERFORM CHECK_HISTORY_CODE
		
		PERFORM RUN_VALIDATION
		
			IF (%STATUS=%FAILURE)
			
			   IF (#R_QTY_EXCEEDED = #YES AND #CALL_MODE = #CALL_MODE_I)
						! Return values for interactive display
						#R1 = #YES
						#R4 = #R_EXCEED_PART
						#R5 = #R_EXCEED_PACK_QTY
						#R6 = #R_EXCEED_QOH
						#R7 = #R_EXCEED_UNIT
						#R8 = #R_EXCEED_LOT
						#R9 = #R_EXCEED_LOT_SEQ
						#R10 = #R_EXCEED_BIN
						#R11 = #R_EXCEED_MH
						#R12 = #MASK
			   END_IF
			   EXIT(%FAILURE)
			   
			END_IF
			
		PERFORM COMPARE_PICKED_QTY
		
				IF (%STATUS=%FAILURE)
				
					IF (#R_PICK_EXCEEDED = #YES AND #CALL_MODE = #CALL_MODE_I)
						! Return values for interactive display
						#R2 = #YES
						#R4 = #R_PICK_EXCEED_PART
						#R5 = #R_PICK_EXCEED_DESP_QTY
						#R6 = #R_PICK_EXCEED_SOL_QTY
			   			#R7 = #R_PICK_EXCEED_UNIT
						#R12 = #MASK
					ELSE
						IF (#R_UNDERSHIP= #YES AND #CALL_MODE = #CALL_MODE_I)
							#R3 = #YES
							#R4 = #R_UNDERSHIP_PART
							#R5 = #R_UNDERSHIP_DESP_QTY
							#R6 = #R_UNDERSHIP_SOL_QTY
							#R7 = #R_UNDERSHIP_UNIT
							#R12 = #MASK
							#R13 = #UNDERSHIP_MSG
						END_IF
					END_IF

					EXIT(%FAILURE)
					
				END_IF
				
		PERFORM CHECK_FOR_XFER_ORDERS
		
				IF (%STATUS = %FAILURE)
					EXIT (%FAILURE)
				END_IF

				IF (#XFER_INTERACTION_REQUIRED = #YES)
					IF (#CALL_MODE = #CALL_MODE_I)
					! Return value to suppress Batch Run option
					! from the interactive run menu
						#R14 = #YES
						EXIT (%SUCCESS)
					ELSE
					! User interaction not allowed for Web mode
						EXIT (%FAILURE)
					END_IF
				END_IF
  
   END_BLOCK
   
   BEGIN_BLOCK SHIP_UPDATE_FOR_DC
   
        PERFORM DESPATCH
		
	    #DESPATCH_STATUS = %STATUS

		IF (#DESPATCH_STATUS <> %SUCCESS)
		    EXIT (%FAILURE)
		END_IF
     
   END_BLOCK  

END_FORM

PROCEDURE_FORM UPDATE_LPN &

	BEGIN_BLOCK UPDATE_LPN
	
		#DC_LPN_INACTIVE = PARAMETER("DC_LPN_INACTIVE")
		#FATAL = PARAMETER("MESSAGE_ERROR_FATAL")
	 
	    #CHANGE_LPN_STATUS = #YES
		
		FIND IN DC_LICENSE_PLATES &
			/LOCK=WRITE &
			/WITH=DC_LICENSE_PLATE_ID=#LPN
		IF (%STATUS <> %SUCCESS)
			! !AS not found
			#R_MSG = "P_00935"
			PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" ("FIN", #R_MSG,"" , #FATAL, 0,#LPN)
			EXIT(%FAILURE)
		END_IF
		
		START_STREAM DLL &
			/TABLE= DC_LICENSE_PLATE_LINES &
			/SECONDARY &
			/LOCK= NONE &
			/WITH= COMPANY_CODE = #COMPANY_CODE &
			/WITH= DC_LICENSE_PLATE_ID=#LPN
						
		WHILE (1) 
		    FETCH DLL /FAILURE=(CONTINUE OUT)
			
			   FIND IN DC:DESPATCH_NOTES &
			    /SECONDARY &
			   	/LOCK= NONE &
			   	/WITH= COMPANY_CODE = #COMPANY_CODE &
			   	/WITH= DIVISION = #DIVISION &
				/WITH= DESPATCH_NOTE = DLL:DC_LICENSE_PLATE_LINES(DESPATCH_NOTE) & 
				/WITH= DESPATCH_LINE = DLL:DC_LICENSE_PLATE_LINES(DESPATCH_LINE) &
				/WITH= CONFIRM_DESPATCH <> #YES
				
			  IF ( %STATUS = %SUCCESS ) 
			  	  #CHANGE_LPN_STATUS = #NO
				  CONTINUE OUT
			  END_IF 
	
		END_WHILE
		
		IF ( #CHANGE_LPN_STATUS = #YES ) 
		
		   PERFORM "GEMDC:DC_S_L_LICENSE_PLATE" DC_MODIFY_LPN (#COMPANY_CODE, &
			  (DC_LICENSE_PLATES(DC_LICENSE_PLATE_ID)), &
			  (DC_LICENSE_PLATES(WAREHOUSE)), &
			  (DC_LICENSE_PLATES(BIN_LOCATION)), &
			  #DC_LPN_INACTIVE, &
			  (DC_LICENSE_PLATES(DC_PARENT_LICENSE_PLATE_ID)), &
			  (DC_LICENSE_PLATES(DC_ASN_LOAD_CARRIER_TYPE)), &
			  (DC_LICENSE_PLATES(WH_XFER_DOC_REFERENCE)), &
			  #ERROR_OCCURRED, &
			  #ERROR_MESSAGE)
			
		   IF ( #ERROR_OCCURRED = #FATAL ) 
			  PERFORM "GEMLB:LB_S_L_LOAD_MESSAGE" ("FIN","",#ERROR_MESSAGE ,#FATAL,0)
			  EXIT(%FAILURE)
		   END_IF
		
		END_IF
		 
	END_BLOCK

END_FORM
 
