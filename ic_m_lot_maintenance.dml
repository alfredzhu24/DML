!Changelog
!Change 001 - Added characteristic Sort order field
!Change 002 - Checking for characteristic LOV values
!Change 003 - Added LEN qualifier to fix display of longer decimal values

TITLE IC_M_048,"Lot Maintenance"

PROCEDURE_FORM SETUP

	BEGIN_BLOCK DOCUMENTATION

		!	=====================================================
		!
		!	(c) Copyright 1988-2009 CDC Software
		!	All Rights Reserved
		!
		!	This program is the proprietary and confidential information
		!	of CDC Software and may be used and disclosed only
		!	as authorized in a license agreement authorizing and
		!	controlling such use and disclosure
		!
		!=====================================================

	END_BLOCK

	BEGIN_BLOCK SETUP_DATABASE

		SET/LOCAL DATAFILE FIN

		#COMPANY_CODE = PARAMETER("USER_COMPANY_CODE")
		#YES          = PARAMETER("LANGUAGE_YES")
		#NO           = PARAMETER("LANGUAGE_NO")
		#FAILURE      = #NO
		#IC_INCREASE  = PARAMETER("IC_INCREASE")
		#IC_DECREASE  = PARAMETER("IC_DECREASE")
		#JFL_JAPAN_LEGAL_POSTING = PARAMETER("JAPAN_LEGAL_POSTING")

		FIND IN COMPANY_CONTROLS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00139
			EXIT
		END_IF

		#LEGAL_POSTING_CODE = COMPANY_CONTROLS(SYS_LEGAL_POSTING_CODE)

		! Security. Get a string of all accessible Warehouses.
		!
		PERFORM "GEMLB:LB_SECURITY_CODE_ACCESS" ( &
			(PARAMETER("MODULE_IC")), &
			(PARAMETER("ACCESS_TYPE_WAREHOUSE")), &
			#ACCESSIBLE_WAREHOUSES)

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_10638
			EXIT (%FAILURE)
		END_IF

		IF (#ACCESSIBLE_WAREHOUSES = "##NONE##")
			MESSAGE/IDENTIFIER/BELL/WAIT P_10639,PARAMETER("MODULE_IC")
			EXIT (%FAILURE)
		END_IF

		PERFORM CREATE_VT

		COMMIT

		PERFORM IC_LOT_MAINTENANCE

		PERFORM DELETE_VT

	END_BLOCK

END_FORM


FORM IC_LOT_MAINTENANCE /ROW=3 /COL=2 /HEIGHT=21 /WIDTH=78 &
	/TITLE=(MESSAGE("P_40033"))

	BEGIN_BLOCK DML_1

		#DIVISION      = ""
		#WH            = ""
		#PART_CODE     = ""
		#IC_LOT_NUMBER = ""

	END_BLOCK

	BEGIN_BLOCK DIVISION_SET

		DISPLAY CLEAN

		IF (#LEGAL_POSTING_CODE = #JFL_JAPAN_LEGAL_POSTING)
			INPUT_BLOCK DIVISION_CODE /ROW=2 /COL=35 &
				/PROMPT=(FIELD_PROMPT(DIVISION)) &
				/TARGET=#DIVISION &
				/USING=WAREHOUSE_CONTROLS(DIVISION),REQUIRED &
				/LOV=SECURITY_PERIOD_ACCESS_VT(SYS_ACCESS_CODE,CODE_DESCRIPTION) &
				/LOV_WITH=SYS_ACCESS_TYPE = (PARAMETER("ACCESS_TYPE_DIVISION")) &
				/LOV_WITH=SOURCE_MODULE = (PARAMETER("MODULE_IC")) &
				/LOV_WITH=SYS_ALLOW_ACCESS = #YES &
				/USE_IF=(#LEGAL_POSTING_CODE = #JFL_JAPAN_LEGAL_POSTING)

!			#JFL_DIVISION = #DIVISION

			FIND IN SECURITY_PERIOD_ACCESS_VT &
				/LOCK=NONE &
				/WITH=SYS_ACCESS_TYPE = (PARAMETER("ACCESS_TYPE_DIVISION")) &
				/WITH=SYS_ACCESS_CODE = #DIVISION &
				/WITH=SOURCE_MODULE = (PARAMETER("MODULE_IC"))

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_00447
				GOTO DIVISION_CODE
			END_IF

			IF (SECURITY_PERIOD_ACCESS_VT(SYS_ALLOW_ACCESS) <> #YES)
				MESSAGE/IDENTIFIER/BELL/WAIT P_00756
				GOTO DIVISION_CODE
			END_IF

			!JFL tuikalogic
			FIND IN WAREHOUSE_CONTROLS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE = #COMPANY_CODE &
				/WITH=DIVISION = #DIVISION &
				/WITH=ACTIVATE_MODULE = #YES

			IF (%STATUS = % FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_06033
				GOTO DIVISION_CODE
			END_IF

			!Display Division Name
			FIND IN AP_CONTROLS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE = #COMPANY_CODE &
				/WITH=AP_DIVISION = #DIVISION

			IF (%STATUS = %SUCCESS)
				#DIVISION_NAME = AP_CONTROLS(DIVISION_NAME)
			ELSE
				FIND IN AR_CONTROLS &
					/LOCK=NONE &
					/WITH=COMPANY_CODE = #COMPANY_CODE &
					/WITH=DIVISION = #DIVISION

				IF (%STATUS = %SUCCESS)
					#DIVISION_NAME = AR_CONTROLS(DIVISION_NAME)
				ELSE
					#DIVISION_NAME = ""
				END_IF
			END_IF

			OUTPUT_BLOCK DIVISION_DESC /ROW=2 /COL=38 &
				/SOURCE=#DIVISION_NAME &
				/USING=AP_CONTROLS(DIVISION_NAME) &
				/USE_IF=(#LEGAL_POSTING_CODE = #JFL_JAPAN_LEGAL_POSTING)
		ELSE
			#DIVISION = "*"
		END_IF

	END_BLOCK

	INPUT_BLOCK WAREHOUSE /ROW=3 /COL=35 &
			/PROMPT=(FIELD_PROMPT(WAREHOUSE)) &
			/TARGET=#WH &
			/TITLE=(FIELD_PROMPT(WAREHOUSE)) &
			/USING=PART_BATCHES(WAREHOUSE),MULTIPLE &
			/LOV=WAREHOUSE_CONTROLS(WAREHOUSE,WAREHOUSE_DESCRIPTION) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=WAREHOUSE AMONG #ACCESSIBLE_WAREHOUSES &
			/LOV_WITH=WMS_IN_USE<>#YES

	BEGIN_BLOCK WAREHOUSE_CHECK

		IF (#LEGAL_POSTING_CODE = #JFL_JAPAN_LEGAL_POSTING)
			FIND IN WAREHOUSE_CONTROLS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE = #COMPANY_CODE &
				/WITH=DIVISION = #DIVISION &
				/WITH=WAREHOUSE AMONG #WH &
				/WITH=ACTIVATE_MODULE = #YES

			IF (%STATUS = %FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_06007
				GOTO WAREHOUSE
			END_IF
		END_IF

		BEGIN_BLOCK EXCLUDE_WMS_DC_WAREHOUSES

			#WH_NOT_WMS_DC = ""
			#WMS_COUNT = 0
			#NOT_WMS_DC_COUNT = 0
			#CHECK_WMS = (PARAMETER("WMS_IN_USE") = #YES )
			PERFORM EXCLUDE_WAREHOUSES

			IF (#WMS_COUNT > 0)
				! Selected warehouses with WMS have been excluded
				MESSAGE/IDENTIFIER/BELL/WAIT P_22573
			END_IF

			#WH = #WH_NOT_WMS_DC

        END_BLOCK

	INPUT_BLOCK PART_CODE /ROW=5 /COL=35 &
			/PROMPT=(FIELD_PROMPT(PART_CODE)) &
			/TARGET=#PART_CODE &
			/TITLE=(FIELD_PROMPT(PART_CODE)) &
			/USING=PART_BATCHES(PART_CODE),MULTIPLE &
			/LOV=PART_BATCHES(PART_CODE,IC_LOT_NUMBER) &
			/LOV_WITH=WAREHOUSE AMONG #WH &
			/LOV_WITH=WAREHOUSE AMONG #ACCESSIBLE_WAREHOUSES &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE

	INPUT_BLOCK IC_LOT_NUMBER /ROW=7 /COL=35 &
			/PROMPT=(FIELD_PROMPT(IC_LOT_NUMBER)) &
			/TARGET=#IC_LOT_NUMBER &
			/TITLE=(FIELD_PROMPT(IC_LOT_NUMBER)) &
			/USING=PART_BATCHES(IC_LOT_NUMBER),MULTIPLE &
			/LOV=PART_BATCHES(IC_LOT_NUMBER,PART_CODE) &
			/LOV_WITH=WAREHOUSE AMONG #WH &
			/LOV_WITH=WAREHOUSE AMONG #ACCESSIBLE_WAREHOUSES &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=PART_CODE AMONG #PART_CODE

	BEGIN_BLOCK DETAILS

		COMMIT

		PERFORM LOT_START

		IF (%STATUS = %EMPTY)
			GOTO DML_1
		ELSE
			PERFORM EMPTY_IC_LOT_MOVEMENT_DATE_VT
			GOTO DML_1
		END_IF

	END_BLOCK

END_FORM

PROCEDURE_FORM EXCLUDE_WAREHOUSES &
	/LOCK=NONE &
	/TABLE=WAREHOUSE_CONTROLS &
	/WITH=COMPANY_CODE = #COMPANY_CODE &
	/WITH=WAREHOUSE AMONG #WH &
	/WITH=WAREHOUSE AMONG #ACCESSIBLE_WAREHOUSES &
	/WITH=ACTIVATE_MODULE = #YES

	BEGIN_BLOCK SET_VAR
		
		IF (#CHECK_WMS AND (WAREHOUSE_CONTROLS(WMS_IN_USE) = #YES))
			#WMS_COUNT = #WMS_COUNT + 1
		ELSE
			#NOT_WMS_DC_COUNT = #NOT_WMS_DC_COUNT + 1
			IF (#NOT_WMS_DC_COUNT > 1)
				#WH_NOT_WMS_DC = #WH_NOT_WMS_DC & ","
			END_IF
			#WH_NOT_WMS_DC = #WH_NOT_WMS_DC & WAREHOUSE_CONTROLS(WAREHOUSE)
		END_IF
		
	END_BLOCK
	
END_FORM


PROCEDURE_FORM LOT_START /BASE

	BEGIN_BLOCK GET_LOTS 

		PERFORM LOTS
		EXIT (%STATUS)

	END_BLOCK 

END_FORM 


TABLE_FORM LOTS /ROW=3 /COL=2 /HEIGHT=21 /WIDTH=78 &
	/TITLE=(MESSAGE("P_44109")) &
	/OPTIONS=NOINSERT,NODELETE,EXIT_EMPTY &
	/LOCK=NONE &
	/TABLE=PART_BATCHES &
	/FIND_FORM=FIND_LOT &
	/WITH=COMPANY_CODE = #COMPANY_CODE &
	/WITH=WAREHOUSE AMONG #WH &
	/WITH=WAREHOUSE AMONG #ACCESSIBLE_WAREHOUSES &
	/WITH=PART_CODE AMONG #PART_CODE &
	/WITH=IC_LOT_NUMBER AMONG #IC_LOT_NUMBER &
	/INITIAL_RECORD=#TED_RECORD_NUM


	BEGIN_BLOCK /DISPLAY_ONLY SETUP

		FIND IN PRODUCT_MASTER &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=PART_BATCHES(COMPANY_CODE) &
			/WITH=PART_CODE=PART_BATCHES(PART_CODE)

		IF (%STATUS=%FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_82034,PART_BATCHES(PART_CODE)
			EXIT(%FAILURE)
		END_IF

		#NEW_NUMBER_OF_CHARS = ""

		IF (PRODUCT_MASTER(BATCH_REPLENISH_ALLOWED) = #YES)
			START_STREAM NUMBER_LOT_CHARS &
				/LOCK=NONE &
				/TABLE=IC_LOT_CHARACTERISTICS &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=WAREHOUSE=PART_BATCHES(WAREHOUSE) &
				/WITH=PART_CODE=PART_BATCHES(PART_CODE) &
				/WITH=IC_LOT_NUMBER=PART_BATCHES(IC_LOT_NUMBER) &
				/STATISTIC=#NUMBER_LOT_CHARS=COUNT

			FETCH NUMBER_LOT_CHARS

			IF (#NUMBER_LOT_CHARS <> PRODUCT_MASTER(IC_CHARACTERISTIC_COUNT))
				#NEW_NUMBER_OF_CHARS = #YES
			END_IF
		END_IF

	END_BLOCK

	OUTPUT_BLOCK WAREHOUSE /ROW=1 /COL=2 &
			/SOURCE=(PART_BATCHES(WAREHOUSE)) &
			/HEADING=FIELD_HEADING(WAREHOUSE)

	OUTPUT_BLOCK PART_CODE /ROW=1 /COL=5 &
			/SOURCE=(PART_BATCHES(PART_CODE)) &
			/HEADING=FIELD_HEADING(PART_CODE)

	OUTPUT_BLOCK IC_LOT_NUMBER /ROW=1 /COL=21 &
			/SOURCE=(PART_BATCHES(IC_LOT_NUMBER)) &
			/HEADING=FIELD_HEADING(IC_LOT_NUMBER)

	OUTPUT_BLOCK BATCH_TYPE /ROW=1 /COL=37 &
			/SOURCE=(PART_BATCHES(BATCH_TYPE)) &
			/HEADING=FIELD_HEADING(BATCH_TYPE)

	OUTPUT_BLOCK BATCH_DATE /ROW=1 /COL=39 &
			/SOURCE=(PART_BATCHES(BATCH_DATE)) &
			/RHEADING=FIELD_HEADING(BATCH_DATE)

	OUTPUT_BLOCK UNIT_COST /ROW=1 /COL=51 &
			/SOURCE=(PART_BATCHES(UNIT_COST)) &
			/RHEADING=FIELD_HEADING(UNIT_COST)

	OUTPUT_BLOCK COSTING_UNIT_OF_MEASURE /ROW=1 /COL=63 &
			/SOURCE=(PRODUCT_MASTER(IC_UNIT_COST)) &
			/HEADING=(MESSAGE("P_90867"))

	OUTPUT_BLOCK CHAR_DIFF /ROW=1 /COL=68 /LEN=5 &
			/SOURCE=(#NEW_NUMBER_OF_CHARS) &
			/HEADING=(MESSAGE("P_91680"))

	BEGIN_BLOCK SHOW_MODIFICATION
		#TED_RECORD_NUM = %TED_RECORD_NUMBER
		PERFORM MODIFY_LOT_SETUP
	END_BLOCK
END_FORM


FORM FIND_LOT /ROW=7 /COL=20 /HEIGHT=10 /WIDTH=40

	OUTPUT_BLOCK TITLE /ROW=2 /COL=11 &
			/SOURCE=(MESSAGE("P_00606"))

	INPUT_BLOCK WAREHOUSE /ROW=4 /COL=22 &
			/TARGET=PART_BATCHES(WAREHOUSE) &
			/PROMPT=FIELD_PROMPT(WAREHOUSE) &
			/LOV=PART_BATCHES(WAREHOUSE) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=WAREHOUSE AMONG #WH &
			/LOV_REDUCED_TO=(WAREHOUSE)

	INPUT_BLOCK PART_CODE /ROW=5 /COL=22 &
			/TARGET=PART_BATCHES(PART_CODE) &
			/PROMPT=FIELD_PROMPT(PART_CODE) &
			/LOV=PART_BATCHES(PART_CODE) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=WAREHOUSE AMONG #WH &
			/LOV_WITH=PART_CODE AMONG #PART_CODE &
			/LOV_REDUCED_TO=(PART_CODE)

	INPUT_BLOCK IC_LOT_NUMBER /ROW=6 /COL=22 &
			/TARGET=PART_BATCHES(IC_LOT_NUMBER) &
			/PROMPT=FIELD_PROMPT(IC_LOT_NUMBER) &
			/LOV=PART_BATCHES(IC_LOT_NUMBER) &
			/LOV_WITH=COMPANY_CODE=#COMPANY_CODE &
			/LOV_WITH=WAREHOUSE AMONG #WH &
			/LOV_WITH=PART_CODE AMONG #PART_CODE &
			/LOV_WITH=IC_LOT_NUMBER AMONG #IC_LOT_NUMBER &
			/LOV_REDUCED_TO=(IC_LOT_NUMBER)

	INPUT_BLOCK BATCH_TYPE /ROW=7 /COL=22 &
			/TARGET=PART_BATCHES(BATCH_TYPE) &
			/PROMPT=FIELD_PROMPT(BATCH_TYPE)

	INPUT_BLOCK BATCH_DATE /ROW=8 /COL=22 &
			/TARGET=PART_BATCHES(BATCH_DATE) &
			/PROMPT=FIELD_PROMPT(BATCH_DATE)

END_FORM


PROCEDURE_FORM MODIFY_LOT_SETUP

	BEGIN_BLOCK SETUP

		COMMIT

		#MOVEMENT_DATE = %TODAY

		PERFORM SETUP_LOT_MAINT_VTS

		IF (%STATUS=%FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_90897
			EXIT(%FAILURE)
		END_IF

		FIND IN PRODUCT_MASTER &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PART_CODE=PART_BATCHES(PART_CODE)

		PERFORM MODIFY_LOT

		IF (%STATUS=%FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_90898
			EXIT(%FAILURE)
		END_IF

		SWITCH_BASE LOTS 

	END_BLOCK

END_FORM


FORM MODIFY_LOT /ROW=3 /COL=2 /HEIGHT=21 /WIDTH=78 &
        /TITLE=(MESSAGE("P_40142"))

	BEGIN_BLOCK SETUP

		FIND IN WAREHOUSE_CONTROLS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=WAREHOUSE=PART_BATCHES(WAREHOUSE)

		IF (%STATUS = %FAILURE)
			MESSAGE/FACILITY P_00366
			EXIT
		END_IF

		#DIVISION   = WAREHOUSE_CONTROLS(DIVISION)
		#BIN_SIZING = WAREHOUSE_CONTROLS(BIN_SIZING)

		IF (#BIN_SIZING = #YES)
			FIND IN PRODUCT_WAREHOUSE &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=WAREHOUSE=PART_BATCHES(WAREHOUSE) &
				/WITH=PART_CODE=PART_BATCHES(PART_CODE)

			IF (%STATUS = %FAILURE)
				MESSAGE/FACILITY P_90899
				EXIT
			END_IF
			#IC_MHU_TYPE = PRODUCT_WAREHOUSE(IC_MHU_TYPE)
		END_IF

		#CATCHWEIGHT_PROD    = #NO
		#CHAR_EXIST          = #NO
		#IC_PACKAGED_PRODUCT = #NO

		FIND IN PRODUCT_MASTER &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PART_CODE=PART_BATCHES(PART_CODE)

		IF (%STATUS = %FAILURE)
			MESSAGE/FACILITY P_42014
			EXIT
		END_IF

		#IC_UNIT_CAPACITY = PRODUCT_MASTER(IC_UNIT_CAPACITY)

		IF (PRODUCT_MASTER(IC_PRODUCT_UOM_CONTROL) = PARAMETER("IC_CATCHWEIGHT_UOM_CONTROL"))
			#CATCHWEIGHT_PROD          = #YES
			#IC_CATCHWEIGHT_TOLERANCES = PRODUCT_MASTER(IC_CATCHWEIGHT_TOLERANCES)
			#IC_CATCHWEIGHT_MINIMUM    = PRODUCT_MASTER(IC_CATCHWEIGHT_MINIMUM)
			#IC_CATCHWEIGHT_MAXIMUM    = PRODUCT_MASTER(IC_CATCHWEIGHT_MAXIMUM)

			FIND IN IC_PRODUCT_MASTER_UNITS &
				/LOCK=NONE &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=PART_CODE=PART_BATCHES(PART_CODE) &
				/WITH=IC_PRODUCT_UOM_TYPE=PARAMETER("IC_INVENTORY_UOM") &
				/WITH=UNIT_OF_MEASURE<>#IC_UNIT_CAPACITY

			IF (%STATUS=%FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_90900
				EXIT
			END_IF

			#IC_UNIT_NOT_CAPACITY = IC_PRODUCT_MASTER_UNITS(UNIT_OF_MEASURE)
		END_IF

		IF (PRODUCT_MASTER(IC_CHARACTERISTIC_COUNT) > 0)
			#CHAR_EXIST = #YES
		END_IF

		IF (PRODUCT_MASTER(IC_PACKAGED_PRODUCT) = #YES)
			#IC_PACKAGED_PRODUCT = #YES
		END_IF

		FIND IN IC_LOT_MAINTENANCE_VT

		IF (%STATUS=%FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_90901
			EXIT
		END_IF

		FIND IN IC_LOT_MOVEMENT_DATE_VT &
			/LOCK=NONE &
			/WITH=COMPANY_CODE = IC_LOT_MAINTENANCE_VT(COMPANY_CODE) &
			/WITH=WAREHOUSE = IC_LOT_MAINTENANCE_VT(WAREHOUSE) &
			/WITH=PART_CODE = IC_LOT_MAINTENANCE_VT(PART_CODE) &
			/WITH=IC_LOT_NUMBER = IC_LOT_MAINTENANCE_VT(IC_LOT_NUMBER) &
			/WITH=IC_LOT_SEQUENCE = IC_LOT_MAINTENANCE_VT(IC_LOT_SEQUENCE)

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_90901
			EXIT(%FAILURE)
		END_IF

		DISPLAY DEFAULTS

		GOTO LOT_MENU

	END_BLOCK

	OUTPUT_BLOCK DOC_REFERENCE /ROW=2 /COL=58 &
			/PROMPT=(FIELD_PROMPT(DOC_REFERENCE)) &
			/SOURCE=(IC_LOT_MAINTENANCE_VT(DOC_REFERENCE))

	OUTPUT_BLOCK WAREHOUSE /ROW=4 /COL=27 &
			/PROMPT=(FIELD_PROMPT(WAREHOUSE)) &
			/SOURCE=(IC_LOT_MAINTENANCE_VT(WAREHOUSE))

	OUTPUT_BLOCK WH_DESC /ROW=4 /COL=43 &
			/SOURCE=(WAREHOUSE_CONTROLS(WAREHOUSE_DESCRIPTION))

	OUTPUT_BLOCK PART_CODE /ROW=5 /COL=27 &
			/PROMPT=(FIELD_PROMPT(PART_CODE)) &
			/SOURCE=(IC_LOT_MAINTENANCE_VT(PART_CODE))

	OUTPUT_BLOCK PART_DESC /ROW=5 /COL=43 &
			/SOURCE=(PRODUCT_MASTER(PART_DESC_1))

	OUTPUT_BLOCK PART_DESC_2 /ROW=6 /COL=43 &
			/SOURCE=(PRODUCT_MASTER(PART_DESC_2))

	OUTPUT_BLOCK IC_LOT_NUMBER /ROW=7 /COL=27 &
			/PROMPT=(FIELD_PROMPT(IC_LOT_NUMBER)) &
			/SOURCE=(IC_LOT_MAINTENANCE_VT(IC_LOT_NUMBER))

	INPUT_BLOCK IC_VENDOR_LOT_NUMBER /ROW=8 /COL=27 &
			/PROMPT=(FIELD_PROMPT(IC_VENDOR_LOT_NUMBER)) &
			/TARGET=IC_LOT_MAINTENANCE_VT(IC_VENDOR_LOT_NUMBER_NEW)

	BEGIN_BLOCK NO_EXPIRY

		IF (PRODUCT_MASTER(BATCH_EXPIRY) <> #YES)
			#BEST_BEFORE_DATE_NEW = ""
			#BATCH_DATE_NEW       = ""
		END_IF

	END_BLOCK

	OUTPUT_BLOCK CREATION_DATE /ROW=9 /COL=27 &
			/PROMPT=(FIELD_PROMPT(CREATION_DATE)) &
			/SOURCE=(PART_BATCHES(CREATION_DATE))

	BEGIN_BLOCK RELEASE_DATE

		#CREATION_DATE    = PART_BATCHES(CREATION_DATE)
		#RELEASE_DATE_NEW = IC_LOT_MAINTENANCE_VT(RELEASE_DATE_NEW)

		INPUT_BLOCK /ROW=10 /COL=27 &
			/PROMPT=(FIELD_PROMPT(RELEASE_DATE)) &
			/SOURCE=(IC_LOT_MAINTENANCE_VT(RELEASE_DATE_NEW)) &
			/TARGET=#RELEASE_DATE_NEW &
			/USING=PART_BATCHES(RELEASE_DATE)

	END_BLOCK

	BEGIN_BLOCK CHECK_RELEASE_DATE 
	
		IF (#RELEASE_DATE_NEW = "")
			MESSAGE/IDENTIFIER/BELL/WAIT P_82260
			GOTO RELEASE_DATE
		END_IF

		IF (DAYS(#RELEASE_DATE_NEW) < DAYS(#CREATION_DATE))
			MESSAGE/IDENTIFIER/BELL/WAIT P_22513
			GOTO RELEASE_DATE
		END_IF 

		IC_LOT_MAINTENANCE_VT(RELEASE_DATE_NEW) = #RELEASE_DATE_NEW

	END_BLOCK 

	INPUT_BLOCK IC_RETEST_DATE /ROW=11 /COL=27 &
			/PROMPT=(FIELD_PROMPT(IC_RETEST_DATE)) &
			/TARGET=IC_LOT_MAINTENANCE_VT(IC_RETEST_DATE_NEW)

	BEGIN_BLOCK CHECK_RETEST_DATE 
	
		#IC_RETEST_DATE_NEW = IC_LOT_MAINTENANCE_VT(IC_RETEST_DATE_NEW)

		IF ((#IC_RETEST_DATE_NEW <> "") AND (DAYS(#IC_RETEST_DATE_NEW) < DAYS(#CREATION_DATE))) 
			MESSAGE/IDENTIFIER/BELL/WAIT P_12804
			GOTO IC_RETEST_DATE
		END_IF 
		
	END_BLOCK 

	INPUT_BLOCK BEST_BEFORE_DATE /ROW=10 /COL=62 &
			/PROMPT=(FIELD_PROMPT(BEST_BEFORE_DATE)) &
			/SOURCE=(IC_LOT_MAINTENANCE_VT(BEST_BEFORE_DATE_NEW)) &
			/TARGET=#BEST_BEFORE_DATE_NEW &
			/USING=PART_BATCHES(BEST_BEFORE_DATE),REQUIRED &
			/USE_IF=(PRODUCT_MASTER(BATCH_EXPIRY)=#YES)

	BEGIN_BLOCK CHECK_BEST_BEFORE_DATE

		IF (PRODUCT_MASTER(BATCH_EXPIRY) = #YES)
			IF (#BEST_BEFORE_DATE_NEW <> "")
				IF (DAYS(#BEST_BEFORE_DATE_NEW) < DAYS(#CREATION_DATE))
					MESSAGE/IDENTIFIER/BELL/WAIT P_22512
					GOTO BEST_BEFORE_DATE
				END_IF
			END_IF

			IF ((#RELEASE_DATE_NEW <> "") AND (DAYS(#RELEASE_DATE_NEW) > DAYS(#BEST_BEFORE_DATE_NEW))) 
				MESSAGE/IDENTIFIER/BELL/WAIT P_01274
				GOTO BEST_BEFORE_DATE
			END_IF 
		END_IF

	END_BLOCK

	INPUT_BLOCK BATCH_DATE /ROW=11 /COL=62 &
			/PROMPT=(FIELD_PROMPT(BATCH_DATE)) &
			/SOURCE=(IC_LOT_MAINTENANCE_VT(BATCH_DATE_NEW)) &
			/TARGET=#BATCH_DATE_NEW &
			/USING=PART_BATCHES(BATCH_DATE),REQUIRED &
			/USE_IF=(PRODUCT_MASTER(BATCH_EXPIRY)=#YES)

	BEGIN_BLOCK CHECK_BATCH_DATE

		IF (PRODUCT_MASTER(BATCH_EXPIRY) = #YES)
			IF (#BATCH_DATE_NEW = "")
				MESSAGE/IDENTIFIER/BELL/WAIT P_82062
				GOTO BATCH_DATE
			END_IF

			IF (DAYS(#BATCH_DATE_NEW) < DAYS(#CREATION_DATE)) 
				MESSAGE/IDENTIFIER/BELL/WAIT P_12802
				GOTO BATCH_DATE
			END_IF 

			IF (#BATCH_DATE_NEW <> "" AND #BEST_BEFORE_DATE_NEW <> "")
				IF (DAYS(#BATCH_DATE_NEW) > DAYS(#BEST_BEFORE_DATE_NEW))
					MESSAGE/IDENTIFIER/BELL/WAIT P_01273
					GOTO BATCH_DATE
				END_IF
			END_IF

			IF (#IC_RETEST_DATE_NEW <> "" AND #BATCH_DATE_NEW <> "")
				IF (SECONDS(#IC_RETEST_DATE_NEW) > SECONDS(#BATCH_DATE_NEW))
					MESSAGE/IDENTIFIER/BELL/WAIT P_01415
					GOTO BATCH_DATE
				END_IF
			END_IF
		END_IF

	END_BLOCK

	BEGIN_BLOCK MOVEMENT_DATE 

		IF (#LEGAL_POSTING_CODE = #JFL_JAPAN_LEGAL_POSTING)
			INPUT_BLOCK /ROW=12 /COL=27 &
				/PROMPT=(MESSAGE("P_69060")) &
				/SOURCE=(#MOVEMENT_DATE) &
				/TARGET=#MOVEMENT_DATE &
				/USING=IC_MOVEMENTS(MOVEMENT_DATE) &
				/USE_IF=(#LEGAL_POSTING_CODE = #JFL_JAPAN_LEGAL_POSTING)

		ELSE		
			#MOVEMENT_DATE = %TODAY
		END_IF 
	
	END_BLOCK 

	BEGIN_BLOCK MOVEMENT_DATE_CHECK

		IF (#LEGAL_POSTING_CODE = #JFL_JAPAN_LEGAL_POSTING)
			#R_ERROR_FLAG    = ""
			#R_ERROR_MESSAGE = ""
			#R_YEAR          = ""
			#R_PERIOD        = ""
			#R_MOVEMENT_DATE = ""
			#MV_YEAR         = ""
			#MV_PERIOD       = ""

			PERFORM "GEMLB:LB_L_CHECK_MOVEMENT_DATE" ( &
					(#COMPANY_CODE), &
					(#DIVISION), &
					(#MOVEMENT_DATE), &
					#R_ERROR_MESSAGE, &
					#R_ERROR_FLAG, &
					#R_YEAR, &
					#R_PERIOD, &
					#R_MOVEMENT_DATE)

			IF (#R_ERROR_FLAG = "")
				#MV_YEAR   = #R_YEAR
				#MV_PERIOD = #R_PERIOD

				IF (#R_ERROR_MESSAGE <> "")
					MESSAGE/IDENTIFIER/BELL/WAIT #R_ERROR_MESSAGE
				END_IF
			ELSE
				MESSAGE/IDENTIFIER/BELL/WAIT #R_ERROR_MESSAGE
				GOTO MOVEMENT_DATE
			END_IF

			IC_LOT_MOVEMENT_DATE_VT(YEAR)          = #MV_YEAR
			IC_LOT_MOVEMENT_DATE_VT(PERIOD)        = #MV_PERIOD
			IC_LOT_MOVEMENT_DATE_VT(MOVEMENT_DATE) = #R_MOVEMENT_DATE

			COMMIT

			OUTPUT_BLOCK DISPLAY_MOVEMENT_DATE /ROW=12 /COL=27 &
				/SOURCE=(#R_MOVEMENT_DATE) &
				/USING=IC_MOVEMENTS(MOVEMENT_DATE) &
				/USE_IF=(#LEGAL_POSTING_CODE = #JFL_JAPAN_LEGAL_POSTING)
		END_IF

	END_BLOCK

	BEGIN_BLOCK CHECK_DATES

		IF ((#BATCH_DATE_NEW = IC_LOT_MAINTENANCE_VT(BATCH_DATE_EXISTING)) AND &
		    (#BEST_BEFORE_DATE_NEW = IC_LOT_MAINTENANCE_VT(BEST_BEFORE_DATE_EXISTING)) AND &
		    (IC_LOT_MAINTENANCE_VT(RELEASE_DATE_NEW) = IC_LOT_MAINTENANCE_VT(RELEASE_DATE_EXISTING)) AND &
		    (IC_LOT_MAINTENANCE_VT(IC_VENDOR_LOT_NUMBER_NEW) = IC_LOT_MAINTENANCE_VT(IC_VENDOR_LOT_NUMBER_EXISTING)) AND &
		    (IC_LOT_MAINTENANCE_VT(IC_RETEST_DATE_NEW) = IC_LOT_MAINTENANCE_VT(IC_RETEST_DATE_EXISTING)))

			IC_LOT_MAINTENANCE_VT(IC_UPDATE_LOT_DATES) = #NO
		ELSE
			IC_LOT_MAINTENANCE_VT(IC_UPDATE_LOT_DATES) = #YES
		END_IF

	END_BLOCK

	MENU_BLOCK LOT_MENU /END_ROW=BOTTOM /END_COL=RIGHT &
		/ITEM=(MESSAGE("P_00192")),(MESSAGE("P_01969")),(GOTO IC_VENDOR_LOT_NUMBER) &
		/ITEM_IF=(#CHAR_EXIST=#YES),(MESSAGE("P_59078")),(MESSAGE("P_90756")),(PERFORM DISPLAY_LOT_CHARS) &
		/ITEM_IF=(#CATCHWEIGHT_PROD = #YES AND WAREHOUSE_CONTROLS(DATA_CAPTURE_IN_USE)<>#YES),(MESSAGE("P_34152")),(MESSAGE("P_90757")),(PERFORM DISPLAY_LOT_QTYS) &
		/ITEM=(MESSAGE("P_00731")),(MESSAGE("P_14100")),(GOTO LOT_UPDATE) &
		/ITEM=(MESSAGE("P_00257")),(MESSAGE("P_00263")),(GOTO EXIT_REQUEST) &

	BEGIN_BLOCK LOT_UPDATE

		IF (#LEGAL_POSTING_CODE = #JFL_JAPAN_LEGAL_POSTING)
			#R_ERROR_FLAG    = ""
			#R_ERROR_MESSAGE = ""
			#R_YEAR          = ""
			#R_PERIOD        = ""
			#R_MOVEMENT_DATE = ""
!			#YEAR            = ""
!			#PERIOD          = ""

			PERFORM "GEMLB:LB_L_CHECK_MOVEMENT_DATE"( &
			            #COMPANY_CODE, &
			            #DIVISION, &
			            #MOVEMENT_DATE, &
			            #R_ERROR_MESSAGE, &
			            #R_ERROR_FLAG, &
			            #R_YEAR, &
			            #R_PERIOD, &
			            #R_MOVEMENT_DATE)

			IF (#R_ERROR_FLAG = "")
				IF (#R_ERROR_MESSAGE <> "")
				    MESSAGE/IDENTIFIER/BELL/WAIT #R_ERROR_MESSAGE
				END_IF
			ELSE
				MESSAGE/IDENTIFIER/BELL/WAIT #R_ERROR_MESSAGE
				GOTO LOT_MENU
			END_IF

			IC_LOT_MOVEMENT_DATE_VT(YEAR)          = #R_YEAR
			IC_LOT_MOVEMENT_DATE_VT(PERIOD)        = #R_PERIOD
			IC_LOT_MOVEMENT_DATE_VT(MOVEMENT_DATE) = #R_MOVEMENT_DATE

			COMMIT
		END_IF

		PERFORM "GEMLB:LB_L_SIGNATURE" USE_ESIG_BLOCK_WITH_NO_SAVE
		PERFORM "GEMLB:LB_L_SIGNATURE"

		FIND IN ES_SIGNATURE_VT &
			/LOCK=NONE

		IF ( ES_SIGNATURE_VT(ES_SIGNATURE_STATUS) = PARAMETER("STATUS_EXIT") )
			GOTO LOT_MENU
		ELSE_IF ( ES_SIGNATURE_VT(ES_SIGNATURE_STATUS) = PARAMETER("STATUS_BACK") ) 
			GOTO LOT_MENU
		END_IF

		PERFORM LOT_UPDATE
			IF (%STATUS=%FAILURE)
			EXIT(%FAILURE)
		END_IF

		IF (%STATUS = %BACK)
			GOTO LOT_MENU
		END_IF

		DISPLAY DEFAULTS

		MESSAGE/IDENTIFIER/BELL/WAIT P_90917

		PERFORM EMPTY_IC_LOT_MAINTENANCE_VT

		GOTO END

	END_BLOCK

	BEGIN_BLOCK EXIT_REQUEST

		PERFORM EXIT_REQUEST

		IF (%STATUS = %BACK)
			GOTO LOT_MENU
		END_IF

	END_BLOCK

	BEGIN_BLOCK END
	END_BLOCK

END_FORM


PROCEDURE_FORM DISPLAY_LOT_CHARS

	BEGIN_BLOCK CHECK_QUANTITIES

		START_STREAM LOT_IN_PROGRESS &
			/TABLE=IC_LOT_STATUS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=WAREHOUSE=IC_LOT_MAINTENANCE_VT(WAREHOUSE) &
			/WITH=PART_CODE=IC_LOT_MAINTENANCE_VT(PART_CODE) &
			/WITH=IC_LOT_NUMBER=IC_LOT_MAINTENANCE_VT(IC_LOT_NUMBER) &
			/WITH=IC_QTY_PICKED<>0.0 &
			/WITH=IC_QTY_IN_DESPATCH<>0.0 &
			/WITH=IC_QTY_RESERVED<>0.0  &
			/WITH=IC_QTY_AWAITING_CONFIRM_OUT<>0.0 &
			/SELECTION="A AND B AND C AND D AND (E OR F OR G OR H)"

		FETCH LOT_IN_PROGRESS

		IF (%STATUS = %SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_90866
			EXIT(%FAILURE)
		END_IF

		#NEW_NUMBER_OF_CHARS = ""

		IF (PRODUCT_MASTER(BATCH_REPLENISH_ALLOWED) = #YES)
			START_STREAM NUMBER_LOT_CHARS &
				/LOCK=NONE &
				/TABLE=IC_LOT_CHARACTERISTICS &
				/WITH=COMPANY_CODE=#COMPANY_CODE &
				/WITH=WAREHOUSE=PART_BATCHES(WAREHOUSE) &
				/WITH=PART_CODE=PART_BATCHES(PART_CODE) &
				/WITH=IC_LOT_NUMBER=PART_BATCHES(IC_LOT_NUMBER) &
				/STATISTIC=#NUMBER_LOT_CHARS=COUNT

			FETCH NUMBER_LOT_CHARS

			IF (#NUMBER_LOT_CHARS <> PRODUCT_MASTER(IC_CHARACTERISTIC_COUNT))
				#NEW_NUMBER_OF_CHARS = #YES
			END_IF
		END_IF

		FIND IN IC_LOT_STATUS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=WAREHOUSE=IC_LOT_MAINTENANCE_VT(WAREHOUSE) &
			/WITH=PART_CODE=IC_LOT_MAINTENANCE_VT(PART_CODE) &
			/WITH=IC_LOT_NUMBER=IC_LOT_MAINTENANCE_VT(IC_LOT_NUMBER) &
			/WITH=IC_QUANTITY>0.0 &

		IF (%STATUS = %SUCCESS AND #NEW_NUMBER_OF_CHARS = #YES)
			MESSAGE/IDENTIFIER/BELL/WAIT P_91679
			EXIT(%FAILURE)
		END_IF

		FIND IN IC_LOT_STATUS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=WAREHOUSE=IC_LOT_MAINTENANCE_VT(WAREHOUSE) &
			/WITH=PART_CODE=IC_LOT_MAINTENANCE_VT(PART_CODE) &
			/WITH=IC_LOT_NUMBER=IC_LOT_MAINTENANCE_VT(IC_LOT_NUMBER) &
			/WITH=IC_STATUS_CODE=PARAMETER("IC_STATUS_CONFIN") &
			/WITH=IC_QUANTITY > 0.0

		IF (%STATUS<>%FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_13716,PARAMETER("IC_STATUS_CONFIN")
			EXIT(%FAILURE)
		END_IF

		FIND IN IC_LOT_STATUS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=WAREHOUSE=IC_LOT_MAINTENANCE_VT(WAREHOUSE) &
			/WITH=PART_CODE=IC_LOT_MAINTENANCE_VT(PART_CODE) &
			/WITH=IC_LOT_NUMBER=IC_LOT_MAINTENANCE_VT(IC_LOT_NUMBER) &
			/WITH=IC_STATUS_CODE=PARAMETER("IC_STATUS_CONFINQ") &
			/WITH=IC_QUANTITY > 0.0

		IF (%STATUS<>%FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_13716,PARAMETER("IC_STATUS_CONFINQ")
			EXIT(%FAILURE)
		END_IF

	END_BLOCK

	BEGIN_BLOCK LOAD_CHARS_XMIT_VT

		FIND IN IC_CHARS_XMIT_VT

		IF (%STATUS=%FAILURE)
		PERFORM LOAD_CHARS_XMIT_VT

			IF (%STATUS=%FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_90902
				EXIT(%FAILURE)
			END_IF
		END_IF

	END_BLOCK

	BEGIN_BLOCK MODIFY_CHARS

		PERFORM MODIFY_LOT_CHARS

		IF (%STATUS=%FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_90903
			EXIT(%FAILURE)
		END_IF

	END_BLOCK

	BEGIN_BLOCK CHECK_FOR_CHANGES

		#IC_UPDATE_LOT_CHARS = #NO

		PERFORM CHECK_FOR_CHANGES_CHAR

		IF (%STATUS=%FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_90904
			EXIT(%FAILURE)
		END_IF

		IC_LOT_MAINTENANCE_VT(IC_UPDATE_LOT_CHARS) = #IC_UPDATE_LOT_CHARS

	END_BLOCK

END_FORM


PROCEDURE_FORM LOAD_CHARS_XMIT_VT &
	/LOCK=NONE &
	/TABLE=IC_PRODUCT_CHARACTERISTICS &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=PART_CODE=IC_LOT_MAINTENANCE_VT(PART_CODE)        &
	/WITH=IC_CHARACTERISTIC_TYPE = PARAMETER("MP_CHARACTERISTIC_TYPE_LOT")

	BEGIN_BLOCK SETUP

		FIND IN CHARACTERISTIC_CODES &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=CHARACTERISTIC_CODE=IC_PRODUCT_CHARACTERISTICS(CHARACTERISTIC_CODE)

		IF (%STATUS <> %SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_42021
			EXIT(%FAILURE)
		END_IF

		#NEW_CHARACTERISTIC = #NO

		FIND IN IC_LOT_CHARACTERISTICS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PART_CODE=IC_PRODUCT_CHARACTERISTICS(PART_CODE) &
			/WITH=WAREHOUSE=IC_LOT_MAINTENANCE_VT(WAREHOUSE) &
			/WITH=IC_LOT_NUMBER=(IC_LOT_MAINTENANCE_VT(IC_LOT_NUMBER)) &
			/WITH=CHARACTERISTIC_CODE=CHARACTERISTIC_CODES(CHARACTERISTIC_CODE)

		IF (%STATUS <> %SUCCESS)
			#NEW_CHARACTERISTIC = #YES
		END_IF

	END_BLOCK

	BEGIN_BLOCK LOAD_CHARS_THIS_RECORD

		CLEAR_BUFFER IC_CHARS_XMIT_VT

		IC_CHARS_XMIT_VT(IC_RECORD_PHASE) = PARAMETER("SYS_PHASE_THIS_RECORD")
		IC_CHARS_XMIT_VT(COMPANY_CODE)    = #COMPANY_CODE
		IC_CHARS_XMIT_VT(WAREHOUSE)       = IC_LOT_MAINTENANCE_VT(WAREHOUSE)
		IC_CHARS_XMIT_VT(DIVISION)        = #DIVISION
		IC_CHARS_XMIT_VT(PART_CODE)       = IC_LOT_MAINTENANCE_VT(PART_CODE)
		IC_CHARS_XMIT_VT(IC_LOT_NUMBER)   = IC_LOT_MAINTENANCE_VT(IC_LOT_NUMBER)
		IC_CHARS_XMIT_VT(IC_LOT_SEQUENCE) = ""
		!Change 001 - Sort order
                IC_CHARS_XMIT_VT(VOL_SORT_ORDER) = IC_PRODUCT_CHARACTERISTICS(VOL_SORT_ORDER)
		!Change 002 - Single-value LOV 
		IC_CHARS_XMIT_VT(VOL_SINGLE_VALUE_LOV_FLAG)=CHARACTERISTIC_CODES(VOL_SINGLE_VALUE_LOV_FLAG)


!		Document number field is unused for its standard purpose in this application, used here
!		to indicate if the record contains a "new" characteristic.
		IF (#NEW_CHARACTERISTIC = #NO)
			IC_CHARS_XMIT_VT(DOCUMENT_NUMBER)       = ""
			IC_CHARS_XMIT_VT(CHARACTERISTIC_CODE)   = IC_LOT_CHARACTERISTICS(CHARACTERISTIC_CODE)
			IC_CHARS_XMIT_VT(DESCRIPTION)           = CHARACTERISTIC_CODES(DESCRIPTION)
			IC_CHARS_XMIT_VT(IC_CHAR_NUMERIC_VALUE) = IC_LOT_CHARACTERISTICS(CHARACTERISTIC_NUMERIC)
			IC_CHARS_XMIT_VT(IC_CHAR_TEXT_VALUE)    = IC_LOT_CHARACTERISTICS(CHARACTERISTIC_TEXT)
			IC_CHARS_XMIT_VT(UNIT_CHAR)             = IC_PRODUCT_CHARACTERISTICS(UNIT_CHAR)
			IC_CHARS_XMIT_VT(IC_DATATYPE_INDICATOR) = IC_LOT_CHARACTERISTICS(IC_DATATYPE_INDICATOR)
		ELSE
			IC_CHARS_XMIT_VT(DOCUMENT_NUMBER)       = PARAMETER("STATUS_NEW")
			IC_CHARS_XMIT_VT(CHARACTERISTIC_CODE)   = IC_PRODUCT_CHARACTERISTICS(CHARACTERISTIC_CODE)
			IC_CHARS_XMIT_VT(DESCRIPTION)           = CHARACTERISTIC_CODES(DESCRIPTION)
			IC_CHARS_XMIT_VT(IC_CHAR_NUMERIC_VALUE) = IC_PRODUCT_CHARACTERISTICS(IC_DEF_CHAR_NUMERIC)
			IC_CHARS_XMIT_VT(IC_CHAR_TEXT_VALUE)    = IC_PRODUCT_CHARACTERISTICS(IC_DEF_CHAR_TEXT)
			IC_CHARS_XMIT_VT(UNIT_CHAR)             = IC_PRODUCT_CHARACTERISTICS(UNIT_CHAR)
			IC_CHARS_XMIT_VT(IC_DATATYPE_INDICATOR) = IC_PRODUCT_CHARACTERISTICS(IC_DATATYPE_INDICATOR)
		END_IF

		ADD TO IC_CHARS_XMIT_VT

	END_BLOCK

	BEGIN_BLOCK LOAD_CHARS_FIRM

		CLEAR_BUFFER IC_CHARS_XMIT_VT

		IC_CHARS_XMIT_VT(IC_RECORD_PHASE) = PARAMETER("SYS_PHASE_FIRM")
		IC_CHARS_XMIT_VT(COMPANY_CODE)    = #COMPANY_CODE
		IC_CHARS_XMIT_VT(WAREHOUSE)       = IC_LOT_MAINTENANCE_VT(WAREHOUSE)
		IC_CHARS_XMIT_VT(DIVISION)        = #DIVISION
		IC_CHARS_XMIT_VT(PART_CODE)       = IC_LOT_MAINTENANCE_VT(PART_CODE)
		IC_CHARS_XMIT_VT(DOCUMENT_NUMBER) = IC_LOT_MAINTENANCE_VT(DOC_REFERENCE)
		IC_CHARS_XMIT_VT(IC_LOT_NUMBER)   = IC_LOT_MAINTENANCE_VT(IC_LOT_NUMBER)
		IC_CHARS_XMIT_VT(IC_LOT_SEQUENCE) = ""

		IF (#NEW_CHARACTERISTIC = #NO)
			IC_CHARS_XMIT_VT(DOCUMENT_NUMBER)       = ""
			IC_CHARS_XMIT_VT(CHARACTERISTIC_CODE)   = IC_LOT_CHARACTERISTICS(CHARACTERISTIC_CODE)
			IC_CHARS_XMIT_VT(DESCRIPTION)           = CHARACTERISTIC_CODES(DESCRIPTION)
			IC_CHARS_XMIT_VT(IC_CHAR_NUMERIC_VALUE) = IC_LOT_CHARACTERISTICS(CHARACTERISTIC_NUMERIC)
			IC_CHARS_XMIT_VT(IC_CHAR_TEXT_VALUE)    = IC_LOT_CHARACTERISTICS(CHARACTERISTIC_TEXT)
			IC_CHARS_XMIT_VT(UNIT_CHAR)             = IC_PRODUCT_CHARACTERISTICS(UNIT_CHAR)
			IC_CHARS_XMIT_VT(IC_DATATYPE_INDICATOR) = IC_LOT_CHARACTERISTICS(IC_DATATYPE_INDICATOR)
		ELSE
			IC_CHARS_XMIT_VT(DOCUMENT_NUMBER)       = PARAMETER("STATUS_NEW")
			IC_CHARS_XMIT_VT(CHARACTERISTIC_CODE)   = IC_PRODUCT_CHARACTERISTICS(CHARACTERISTIC_CODE)
			IC_CHARS_XMIT_VT(DESCRIPTION)           = CHARACTERISTIC_CODES(DESCRIPTION)
			IC_CHARS_XMIT_VT(IC_CHAR_NUMERIC_VALUE) = IC_PRODUCT_CHARACTERISTICS(IC_DEF_CHAR_NUMERIC)
			IC_CHARS_XMIT_VT(IC_CHAR_TEXT_VALUE)    = IC_PRODUCT_CHARACTERISTICS(IC_DEF_CHAR_TEXT)
			IC_CHARS_XMIT_VT(UNIT_CHAR)             = IC_PRODUCT_CHARACTERISTICS(UNIT_CHAR)
			IC_CHARS_XMIT_VT(IC_DATATYPE_INDICATOR) = IC_PRODUCT_CHARACTERISTICS(IC_DATATYPE_INDICATOR)
		END_IF

		ADD TO IC_CHARS_XMIT_VT

	END_BLOCK

END_FORM


TABLE_FORM MODIFY_LOT_CHARS /ROW=16 /COL=2 /HEIGHT=8 /WIDTH=78 &
	/TITLE=(MESSAGE("P_80004")) &
	/OPTIONS=NOINSERT,NODELETE &
	/TABLE=IC_CHARS_XMIT_VT &
	/WITH=IC_RECORD_PHASE=PARAMETER("SYS_PHASE_THIS_RECORD") &
	!Change 001 - sort order
        !/SORTED_BY=(CHARACTERISTIC_CODE)
	/SORTED_BY=(VOL_SORT_ORDER,CHARACTERISTIC_CODE)

	BEGIN_BLOCK/DISPLAY_ONLY NEW_CHAR

		#NEW_CHARACTERISTIC = ""

		FIND IN IC_LOT_CHARACTERISTICS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PART_CODE=IC_CHARS_XMIT_VT(PART_CODE) &
			/WITH=WAREHOUSE=IC_CHARS_XMIT_VT(WAREHOUSE) &
			/WITH=IC_LOT_NUMBER=(IC_CHARS_XMIT_VT(IC_LOT_NUMBER)) &
			/WITH=CHARACTERISTIC_CODE=IC_CHARS_XMIT_VT(CHARACTERISTIC_CODE)

		IF (%STATUS <> %SUCCESS)
			#NEW_CHARACTERISTIC = #YES
		END_IF

	END_BLOCK

	OUTPUT_BLOCK CHARACTERISTIC_CODE /ROW=1 /COL=2 &
			/SOURCE=(IC_CHARS_XMIT_VT(CHARACTERISTIC_CODE)) &
			/LHEADING=FIELD_HEADING(CHARACTERISTIC_CODE)

	OUTPUT_BLOCK CHAR_DESCRIPTION /ROW=1 /COL=10 &
			/SOURCE=(IC_CHARS_XMIT_VT(DESCRIPTION)) &
			/LHEADING=FIELD_HEADING(DESCRIPTION)

	!Change 002 - DBM - 11/8/2007 
	!Added checking for SINGLE_VALUE_LOV_FLAG when displaying custom LOV values
	BEGIN_BLOCK CHECK_CHAR_TEXT
		IF (IC_CHARS_XMIT_VT(IC_DATATYPE_INDICATOR) = (PARAMETER("IC_CHARACTERISTIC_TEXT")))
	
		INPUT_BLOCK CHARACTERISTIC_TEXT /ROW=1 /COL=41 &
			/TARGET=IC_CHARS_XMIT_VT(IC_CHAR_TEXT_VALUE) &
			/LHEADING=FIELD_HEADING(CHARACTERISTIC_TEXT) &
			/LOV=VOL_CHARACTERISTIC_CODE_VALUES(VOL_CHARACTERISTIC_VALUE,VOL_CHARACTERISTIC_VALUE_DESC,STATUS_FLAG) &
			/LOV_WITH=COMPANY_CODE = #COMPANY_CODE &
			/LOV_WITH=CHARACTERISTIC_CODE = IC_CHARS_XMIT_VT(CHARACTERISTIC_CODE) &
			/LOV_WITH=STATUS_FLAG=(PARAMETER("STATUS_ACTIVE")) &
			/BACK=(GOTO CHARACTERISTIC_TEXT) &
			/EXIT=(EXIT(%EXIT)) &
                        /USE_IF=(IC_CHARS_XMIT_VT(IC_DATATYPE_INDICATOR) = (PARAMETER("IC_CHARACTERISTIC_TEXT")))

		        INPUT_BLOCK CHARACTERISTIC_TEXT_2 /ROW=1 /COL=41 &
				/TARGET=IC_CHARS_XMIT_VT(IC_CHAR_TEXT_VALUE) &
				/LHEADING=FIELD_HEADING(CHARACTERISTIC_TEXT) &
				/BACK=(GOTO CHARACTERISTIC_TEXT) &
				/EXIT=(EXIT(%EXIT)) &
				/USE_IF=(IC_CHARS_XMIT_VT(IC_DATATYPE_INDICATOR) = (PARAMETER("IC_CHARACTERISTIC_TEXT"))) &
				/USE_IF=(IC_CHARS_XMIT_VT(VOL_SINGLE_VALUE_LOV_FLAG) = #NO)

			FIND IN CHARACTERISTIC_CODES &
				/LOCK=NONE &
				/WITH=CHARACTERISTIC_CODE=IC_CHARS_XMIT_VT(CHARACTERISTIC_CODE)

			IF ( CHARACTERISTIC_CODES(VOL_SINGLE_VALUE_LOV_FLAG) = #YES AND &
				IC_CHARS_XMIT_VT(IC_CHAR_TEXT_VALUE) <> "" ) 
				FIND IN VOL_CHARACTERISTIC_CODE_VALUES &
					/LOCK=NONE &
					/WITH=COMPANY_CODE=#COMPANY_CODE & 
					/WITH=VOL_CHARACTERISTIC_VALUE=IC_CHARS_XMIT_VT(IC_CHAR_TEXT_VALUE)
			
				IF (%STATUS = %FAILURE) 
					MESSAGE/IDENTIFIER/BELL/WAIT VOL_1004
					GOTO CHECK_CHAR_TEXT
				END_IF
			END_IF

		END_IF

	END_BLOCK
	!Change 002 End

	!Change 003 - DBM - 6/19/2007 -
	!added /LEN=11 qualifier because numeric characteristics are a maximum of 5 before decimal, 5 after decimal
	INPUT_BLOCK CHARACTERISTIC_NUMERIC /ROW=1 /COL=52 /LEN=11 &
        !INPUT_BLOCK CHARACTERISTIC_NUMERIC /ROW=1 /COL=52 &
			/TARGET=IC_CHARS_XMIT_VT(IC_CHAR_NUMERIC_VALUE) &
			/RHEADING=(FIELD_HEADING(CHARACTERISTIC_NUMERIC)) &
			/BACK=(GOTO CHARACTERISTIC_NUMERIC) &
			/EXIT=(EXIT(%EXIT)) &
			/USE_IF=(IC_CHARS_XMIT_VT(IC_DATATYPE_INDICATOR) = (PARAMETER("IC_CHARACTERISTIC_NUMERIC")))

	OUTPUT_BLOCK UOM_1 /ROW=1 /COL=63 &
			/SOURCE=(IC_CHARS_XMIT_VT(UNIT_CHAR)) &
			/LHEADING=FIELD_HEADING(UNIT_CHAR)

	OUTPUT_BLOCK CHAR_DIFF /ROW=1 /COL=68 /LEN=5 &
			/SOURCE=(#NEW_CHARACTERISTIC) &
			/HEADING=(MESSAGE("P_91680"))

END_FORM


PROCEDURE_FORM CHECK_FOR_CHANGES_CHAR &
	/TABLE=IC_CHARS_XMIT_VT &
	/WITH=IC_RECORD_PHASE=PARAMETER("SYS_PHASE_THIS_RECORD") &
	/STREAM_NAME=THIS_RECORD

	BEGIN_BLOCK CHECK

		FIND IN FIRM:IC_CHARS_XMIT_VT &
			/WITH=IC_RECORD_PHASE=PARAMETER("SYS_PHASE_FIRM") &
			/WITH=CHARACTERISTIC_CODE=THIS_RECORD:IC_CHARS_XMIT_VT(CHARACTERISTIC_CODE)

		IF (%STATUS <> %SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_90906
			EXIT(%FAILURE)
		END_IF

		IF (FIRM:IC_CHARS_XMIT_VT(IC_CHAR_NUMERIC_VALUE) <> &
			THIS_RECORD:IC_CHARS_XMIT_VT(IC_CHAR_NUMERIC_VALUE))
			#IC_UPDATE_LOT_CHARS = #YES
		END_IF

		IF (FIRM:IC_CHARS_XMIT_VT(IC_CHAR_TEXT_VALUE) <> &
			THIS_RECORD:IC_CHARS_XMIT_VT(IC_CHAR_TEXT_VALUE))
			#IC_UPDATE_LOT_CHARS = #YES
		END_IF

		FIND IN IC_LOT_CHARACTERISTICS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=PART_CODE=THIS_RECORD:IC_CHARS_XMIT_VT(PART_CODE) &
			/WITH=WAREHOUSE=THIS_RECORD:IC_CHARS_XMIT_VT(WAREHOUSE) &
			/WITH=IC_LOT_NUMBER=THIS_RECORD:IC_CHARS_XMIT_VT(IC_LOT_NUMBER) &
			/WITH=CHARACTERISTIC_CODE=THIS_RECORD:IC_CHARS_XMIT_VT(CHARACTERISTIC_CODE)

		IF (%STATUS <> %SUCCESS)
			#IC_UPDATE_LOT_CHARS = #YES
		END_IF

	END_BLOCK

END_FORM


PROCEDURE_FORM DISPLAY_LOT_QTYS

	BEGIN_BLOCK CHECK_QUANTITIES

		START_STREAM LOT_IN_PROGRESS &
			/TABLE=IC_LOT_STATUS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=WAREHOUSE=IC_LOT_MAINTENANCE_VT(WAREHOUSE) &
			/WITH=PART_CODE=IC_LOT_MAINTENANCE_VT(PART_CODE) &
			/WITH=IC_LOT_NUMBER=IC_LOT_MAINTENANCE_VT(IC_LOT_NUMBER) &
			/WITH=IC_QTY_PICKED<>0.0 &
			/WITH=IC_QTY_IN_DESPATCH<>0.0 &
			/WITH=IC_QTY_RESERVED<>0.0  &
			/WITH=IC_QTY_AWAITING_CONFIRM_OUT<>0.0 &
			/SELECTION="A AND B AND C AND D AND (E OR F OR G OR H)"

		FETCH LOT_IN_PROGRESS

		IF (%STATUS = %SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_90866
			EXIT(%FAILURE)
		END_IF

		FIND IN IC_LOT_STATUS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=WAREHOUSE=IC_LOT_MAINTENANCE_VT(WAREHOUSE) &
			/WITH=PART_CODE=IC_LOT_MAINTENANCE_VT(PART_CODE) &
			/WITH=IC_LOT_NUMBER=IC_LOT_MAINTENANCE_VT(IC_LOT_NUMBER) &
			/WITH=IC_STATUS_CODE=PARAMETER("IC_STATUS_CONFIN") &
			/WITH=IC_QUANTITY > 0.0

		IF (%STATUS<>%FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_13716,PARAMETER("IC_STATUS_CONFIN")
			EXIT(%FAILURE)
		END_IF

		FIND IN IC_LOT_STATUS &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=WAREHOUSE=IC_LOT_MAINTENANCE_VT(WAREHOUSE) &
			/WITH=PART_CODE=IC_LOT_MAINTENANCE_VT(PART_CODE) &
			/WITH=IC_LOT_NUMBER=IC_LOT_MAINTENANCE_VT(IC_LOT_NUMBER) &
			/WITH=IC_STATUS_CODE=PARAMETER("IC_STATUS_CONFINQ") &
			/WITH=IC_QUANTITY > 0.0

		IF (%STATUS<>%FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_13716,PARAMETER("IC_STATUS_CONFINQ")
			EXIT (%FAILURE)
		END_IF

	END_BLOCK

	BEGIN_BLOCK GET_MASKS

		PERFORM "GEMLB:LB_GET_QUANTITY_MASK" ( &
			#COMPANY_CODE, &
			IC_LOT_MAINTENANCE_VT(PART_CODE), &
			#IC_UNIT_CAPACITY, &
			#RETURN_CAP_MASK, &
			#RETURN_CAP_DECIMALS)

		IF (%STATUS=%FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_90907
		END_IF

		#IC_CAP_MASK = #RETURN_CAP_MASK

		PERFORM "GEMLB:LB_GET_QUANTITY_MASK" ( &
			#COMPANY_CODE, &
			IC_LOT_MAINTENANCE_VT(PART_CODE), &
			#IC_UNIT_NOT_CAPACITY, &
			#RETURN_NOT_CAP_MASK, &
			#RETURN_NOT_CAP_DECIMALS)

		IF (%STATUS=%FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_90907
		END_IF

		#IC_NOT_CAP_MASK = #RETURN_NOT_CAP_MASK

	END_BLOCK

	BEGIN_BLOCK MODIFY_QTYS

		IF (#BIN_SIZING = #NO)
			PERFORM MODIFY_LOT_ONLY_QTYS

			IF (%STATUS=%FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_90908
				EXIT(%FAILURE)
			END_IF

			IF (%STATUS=%EXIT OR %STATUS=%BACK)
				PERFORM EMPTY_IC_LOT_MAINT_DETAILS_VT
			END_IF
		ELSE
			PERFORM MODIFY_LOT_BIN_QTYS

			IF (%STATUS=%FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_90908
				EXIT(%FAILURE)
			END_IF

			IF (%STATUS=%EXIT OR %STATUS=%BACK)
				PERFORM EMPTY_IC_LOT_MAINT_DETAILS_VT
			END_IF
		END_IF

	END_BLOCK

	BEGIN_BLOCK CHECK_FOR_CHANGES

		#IC_UPDATE_LOT_QTYS = #NO

		PERFORM CHECK_FOR_CHANGES_QTYS

		IF (%STATUS=%FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_90910
			EXIT(%FAILURE)
		END_IF

		IC_LOT_MAINTENANCE_VT(IC_UPDATE_LOT_QTYS) = #IC_UPDATE_LOT_QTYS

	END_BLOCK

END_FORM


TABLE_FORM MODIFY_LOT_ONLY_QTYS /ROW=16 /COL=2 /HEIGHT=8 /WIDTH=78 &
	/LOCK=NONE &
	/TITLE=MESSAGE("P_90923") &
	/OPTIONS=NOINSERT,NODELETE &
	/TABLE=IC_LOT_STATUS &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=WAREHOUSE=IC_LOT_MAINTENANCE_VT(WAREHOUSE) &
	/WITH=PART_CODE=IC_LOT_MAINTENANCE_VT(PART_CODE) &
	/WITH=IC_LOT_NUMBER=IC_LOT_MAINTENANCE_VT(IC_LOT_NUMBER) &
	/WITH=UNIT_OF_MEASURE=#IC_UNIT_CAPACITY &
	/WITH=IC_STATUS_CODE<>PARAMETER("IC_STATUS_CONFIN")  &
	/WITH=IC_STATUS_CODE<>PARAMETER("IC_STATUS_CONFINQ")  &
	/ROW_HEIGHT=2

	BEGIN_BLOCK/DISPLAY_ONLY SETUP

		FIND IN IC_LOT_STATUS &
			/LOCK=NONE &
			/SECONDARY &
			/STREAM_NAME=NOT_CAP &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=WAREHOUSE=IC_LOT_MAINTENANCE_VT(WAREHOUSE) &
			/WITH=PART_CODE=IC_LOT_MAINTENANCE_VT(PART_CODE) &
			/WITH=IC_LOT_NUMBER=IC_LOT_MAINTENANCE_VT(IC_LOT_NUMBER) &
			/WITH=UNIT_OF_MEASURE<>#IC_UNIT_CAPACITY &
			/WITH=IC_PRODUCT_UOM_TYPE=PARAMETER("IC_INVENTORY_UOM") &
			/WITH=IC_STATUS_CODE=IC_LOT_STATUS(IC_STATUS_CODE)

		IF (%STATUS=%FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_90909
			EXIT(%FAILURE)
		END_IF

	END_BLOCK

	BEGIN_BLOCK SELECT

		FIND IN IC_LOT_MAINTENANCE_DETAILS_VT &
			/WITH=IC_STATUS_CODE=IC_LOT_STATUS(IC_STATUS_CODE)

		IF (%STATUS=%FAILURE)
			#DETAIL_RECORD_EXISTS = #NO
			CLEAR_BUFFER IC_LOT_MAINTENANCE_DETAILS_VT
		ELSE
			#DETAIL_RECORD_EXISTS = #YES
		END_IF

	END_BLOCK

	OUTPUT_BLOCK STATUS_CODE /ROW=1 /COL=2 &
	        /SOURCE=IC_LOT_STATUS(IC_STATUS_CODE) &
	        /LHEADING=FIELD_HEADING(IC_STATUS_CODE)

	OUTPUT_BLOCK CAPACITY_UNIT /ROW=1 /COL=12 &
	        /SOURCE=(IC_LOT_STATUS(UNIT_OF_MEASURE)) &
	        /LHEADING=MESSAGE("P_90277")

	OUTPUT_BLOCK CAPACITY_QTY /ROW=1 /COL=17 /LEN=14 &
	        /SOURCE=(IC_LOT_STATUS(IC_QUANTITY)) &
	        /OUTPUT_MASK=#IC_CAP_MASK &
	        /RHEADING=MESSAGE("P_85071")

	OUTPUT_BLOCK NOT_CAPACITY_UNIT /ROW=1 /COL=32 &
	        /SOURCE=(NOT_CAP:IC_LOT_STATUS(UNIT_OF_MEASURE)) &
	        /LHEADING=MESSAGE("P_90277")

	OUTPUT_BLOCK NOT_CAPACITY_QTY /ROW=1 /COL=37 /LEN=14 &
	        /SOURCE=(NOT_CAP:IC_LOT_STATUS(IC_QUANTITY)) &
	        /OUTPUT_MASK=#IC_NOT_CAP_MASK &
	        /RHEADING=MESSAGE("P_85071")

	BEGIN_BLOCK INPUT_CHANGE_PACKED

		OUTPUT_BLOCK /ROW=2 /COL=32 &
			/SOURCE=(NOT_CAP:IC_LOT_STATUS(UNIT_OF_MEASURE)) &
			/PROMPT=MESSAGE("P_90925") &
			/USE_IF=(#IC_PACKAGED_PRODUCT=#YES)

		IF (#IC_PACKAGED_PRODUCT = #YES)
			IC_LOT_MAINTENANCE_DETAILS_VT(IC_STATUS_CODE) = NOT_CAP:IC_LOT_STATUS(IC_STATUS_CODE)
			IC_LOT_MAINTENANCE_DETAILS_VT(UNIT_OF_MEASURE) = NOT_CAP:IC_LOT_STATUS(UNIT_OF_MEASURE)
		END_IF

		INPUT_BLOCK /ROW=2 /COL=37 /LEN=14 &
			/TARGET=IC_LOT_MAINTENANCE_DETAILS_VT(IC_QUANTITY_NEW) &
			/INPUT_MASK=#IC_NOT_CAP_MASK &
			/USING=NONEGATIVE &
			/USE_IF=(#IC_PACKAGED_PRODUCT=#YES) &
			/BACK=(PERFORM DELETE_MAINT_VT_RECORD_LOT) &
			/EXIT=(PERFORM DELETE_MAINT_VT_RECORD_LOT)

		IF (#IC_CATCHWEIGHT_TOLERANCES = #YES AND #IC_PACKAGED_PRODUCT = #YES)
			#CHANGE_QTY  = IC_LOT_MAINTENANCE_DETAILS_VT(IC_QUANTITY_NEW)
			#MAXIMUM_QTY = (#IC_CATCHWEIGHT_MAXIMUM * IC_LOT_STATUS(IC_QUANTITY))
			#MINIMUM_QTY = (#IC_CATCHWEIGHT_MINIMUM * IC_LOT_STATUS(IC_QUANTITY))

			IF (#CHANGE_QTY > #MAXIMUM_QTY)
				MESSAGE/IDENTIFIER/BELL/WAIT P_90462
				GOTO INPUT_CHANGE_PACKED
			ELSE_IF (#CHANGE_QTY < #MINIMUM_QTY)
				MESSAGE/IDENTIFIER/BELL/WAIT P_90463
				GOTO INPUT_CHANGE_PACKED
			END_IF
		END_IF

		IF (#IC_PACKAGED_PRODUCT = #YES)
			IC_LOT_MAINTENANCE_DETAILS_VT(IC_QUANTITY_EXISTING) = NOT_CAP:IC_LOT_STATUS(IC_QUANTITY)

			ADD TO IC_LOT_MAINTENANCE_DETAILS_VT

			IF (%STATUS=%FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_90911
				EXIT(%FAILURE)
			END_IF
		END_IF

	END_BLOCK

	BEGIN_BLOCK INPUT_CHANGE_NOT_PACKED_UNIT

		INPUT_BLOCK /ROW=2 /COL=32 &
			/TARGET=IC_LOT_MAINTENANCE_DETAILS_VT(UNIT_OF_MEASURE) &
			/PROMPT=MESSAGE("P_90926") &
			/USE_IF=(#IC_PACKAGED_PRODUCT=#NO) &
			/BACK=(PERFORM DELETE_MAINT_VT_RECORD_LOT) &
			/EXIT=(PERFORM DELETE_MAINT_VT_RECORD_LOT)

		IF (#IC_PACKAGED_PRODUCT = #NO AND &
			IC_LOT_MAINTENANCE_DETAILS_VT(UNIT_OF_MEASURE) <> #IC_UNIT_CAPACITY AND &
			IC_LOT_MAINTENANCE_DETAILS_VT(UNIT_OF_MEASURE) <> #IC_UNIT_NOT_CAPACITY)

			MESSAGE/IDENTIFIER/BELL/WAIT P_90912,#IC_UNIT_CAPACITY,#IC_UNIT_NOT_CAPACITY
			GOTO INPUT_CHANGE_PACKED
		END_IF

	END_BLOCK

	BEGIN_BLOCK INPUT_CHANGE_NOT_PACKED_QTY

		INPUT_BLOCK /ROW=2 /COL=37 /LEN=14 &
			/TARGET=IC_LOT_MAINTENANCE_DETAILS_VT(IC_QUANTITY_NEW) &
			/INPUT_MASK=#IC_NOT_CAP_MASK &
			/USING=NONEGATIVE &
			/USE_IF=(#IC_PACKAGED_PRODUCT=#NO AND &
			IC_LOT_MAINTENANCE_DETAILS_VT(UNIT_OF_MEASURE)=#IC_UNIT_NOT_CAPACITY) &
			/BACK=(PERFORM DELETE_MAINT_VT_RECORD_LOT) &
			/EXIT=(PERFORM DELETE_MAINT_VT_RECORD_LOT)

		INPUT_BLOCK /ROW=2 /COL=37 /LEN=14 &
			/TARGET=IC_LOT_MAINTENANCE_DETAILS_VT(IC_QUANTITY_NEW) &
			/INPUT_MASK=#IC_CAP_MASK &
			/USING=NONEGATIVE &
			/USE_IF=(#IC_PACKAGED_PRODUCT=#NO AND &
			IC_LOT_MAINTENANCE_DETAILS_VT(UNIT_OF_MEASURE)=#IC_UNIT_CAPACITY) &
			/BACK=(PERFORM DELETE_MAINT_VT_RECORD_LOT) &
			/EXIT=(PERFORM DELETE_MAINT_VT_RECORD_LOT)

		IF (#IC_CATCHWEIGHT_TOLERANCES = #YES AND #IC_PACKAGED_PRODUCT=#NO)
			#CHANGE_QTY  = IC_LOT_MAINTENANCE_DETAILS_VT(IC_QUANTITY_NEW)
			#CHANGE_UNIT = IC_LOT_MAINTENANCE_DETAILS_VT(UNIT_OF_MEASURE)

			IF (#CHANGE_UNIT = #IC_UNIT_NOT_CAPACITY)
				#MAXIMUM_QTY = (#IC_CATCHWEIGHT_MAXIMUM * IC_LOT_STATUS(IC_QUANTITY))
				#MINIMUM_QTY = (#IC_CATCHWEIGHT_MINIMUM * IC_LOT_STATUS(IC_QUANTITY))
			ELSE
				#MAXIMUM_QTY = ((1 / #IC_CATCHWEIGHT_MINIMUM) * NOT_CAP:IC_LOT_STATUS(IC_QUANTITY))
				#MINIMUM_QTY = ((1 / #IC_CATCHWEIGHT_MAXIMUM) * NOT_CAP:IC_LOT_STATUS(IC_QUANTITY))
			END_IF

			IF (#CHANGE_QTY > #MAXIMUM_QTY)
				MESSAGE/IDENTIFIER/BELL/WAIT P_90462
				GOTO INPUT_CHANGE_NOT_PACKED_QTY
			ELSE_IF (#CHANGE_QTY < #MINIMUM_QTY)
				MESSAGE/IDENTIFIER/BELL/WAIT P_90463
				GOTO INPUT_CHANGE_NOT_PACKED_QTY
			END_IF
		END_IF

		IF (#IC_PACKAGED_PRODUCT = #NO)
			IC_LOT_MAINTENANCE_DETAILS_VT(IC_STATUS_CODE) = NOT_CAP:IC_LOT_STATUS(IC_STATUS_CODE)

			IF (IC_LOT_MAINTENANCE_DETAILS_VT(UNIT_OF_MEASURE) = #IC_UNIT_CAPACITY)
				IC_LOT_MAINTENANCE_DETAILS_VT(IC_QUANTITY_EXISTING) = IC_LOT_STATUS(IC_QUANTITY)
			ELSE
				IC_LOT_MAINTENANCE_DETAILS_VT(IC_QUANTITY_EXISTING) = NOT_CAP:IC_LOT_STATUS(IC_QUANTITY)
			END_IF

			IF (#DETAIL_RECORD_EXISTS = #NO)
				ADD TO IC_LOT_MAINTENANCE_DETAILS_VT

				IF (%STATUS=%FAILURE)
					MESSAGE/IDENTIFIER/BELL/WAIT P_90913
					EXIT(%FAILURE)
				END_IF
			END_IF
		END_IF

	END_BLOCK

	BEGIN_BLOCK INCREASE_OR_DECREASE

		IF (IC_LOT_MAINTENANCE_DETAILS_VT(IC_QUANTITY_NEW) > IC_LOT_MAINTENANCE_DETAILS_VT(IC_QUANTITY_EXISTING))
			IC_LOT_MAINTENANCE_DETAILS_VT(IC_UPDATE_PURPOSE) = #IC_INCREASE
		ELSE
			IC_LOT_MAINTENANCE_DETAILS_VT(IC_UPDATE_PURPOSE) = #IC_DECREASE
		END_IF

	END_BLOCK

END_FORM


PROCEDURE_FORM DELETE_MAINT_VT_RECORD_LOT

	BEGIN_BLOCK DELETE

		START_TRANSACTION

		FIND IN IC_LOT_MAINTENANCE_DETAILS_VT

		IF (%STATUS=%SUCCESS)
			DELETE FROM IC_LOT_MAINTENANCE_DETAILS_VT
		END_IF

		COMMIT

	END_BLOCK

END_FORM


TABLE_FORM MODIFY_LOT_BIN_QTYS /ROW=16 /COL=2 /HEIGHT=8 /WIDTH=78 &
	/LOCK=NONE &
	/TITLE=MESSAGE("P_90924") &
	/OPTIONS=NOINSERT,NODELETE &
	/TABLE=IC_BIN_DETAIL_STATUS &
	/WITH=COMPANY_CODE=#COMPANY_CODE &
	/WITH=WAREHOUSE=IC_LOT_MAINTENANCE_VT(WAREHOUSE) &
	/WITH=PART_CODE=IC_LOT_MAINTENANCE_VT(PART_CODE) &
	/WITH=IC_LOT_NUMBER=IC_LOT_MAINTENANCE_VT(IC_LOT_NUMBER) &
	/WITH=UNIT_OF_MEASURE=#IC_UNIT_CAPACITY &
	/ROW_HEIGHT=2

	BEGIN_BLOCK/DISPLAY_ONLY SETUP

		FIND IN IC_BIN_DETAIL_STATUS &
			/LOCK=NONE &
			/SECONDARY &
			/STREAM_NAME=NOT_CAP &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=WAREHOUSE=IC_LOT_MAINTENANCE_VT(WAREHOUSE) &
			/WITH=PART_CODE=IC_LOT_MAINTENANCE_VT(PART_CODE) &
			/WITH=IC_LOT_NUMBER=IC_LOT_MAINTENANCE_VT(IC_LOT_NUMBER) &
			/WITH=IC_LOT_SEQUENCE=IC_BIN_DETAIL_STATUS(IC_LOT_SEQUENCE) &
			/WITH=BIN_LOCATION=IC_BIN_DETAIL_STATUS(BIN_LOCATION) &
			/WITH=MH_NUMBER=IC_BIN_DETAIL_STATUS(MH_NUMBER) &
			/WITH=UNIT_OF_MEASURE<>#IC_UNIT_CAPACITY &
			/WITH=IC_PRODUCT_UOM_TYPE=PARAMETER("IC_INVENTORY_UOM") &
			/WITH=IC_STATUS_CODE=IC_BIN_DETAIL_STATUS(IC_STATUS_CODE)

		IF (%STATUS=%FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_90914
			EXIT(%FAILURE)
		END_IF

!		No Status check because it is expected a record will not exist in every case.
		FIND IN IC_LOT_MAINTENANCE_DETAILS_VT &
			/WITH=IC_STATUS_CODE=IC_BIN_DETAIL_STATUS(IC_STATUS_CODE) &
			/WITH=BIN_LOCATION=IC_BIN_DETAIL_STATUS(BIN_LOCATION) &
			/WITH=MH_NUMBER=IC_BIN_DETAIL_STATUS(MH_NUMBER)

	END_BLOCK

	BEGIN_BLOCK SELECT

		FIND IN IC_LOT_MAINTENANCE_DETAILS_VT &
			/WITH=IC_STATUS_CODE=IC_BIN_DETAIL_STATUS(IC_STATUS_CODE) &
			/WITH=BIN_LOCATION=IC_BIN_DETAIL_STATUS(BIN_LOCATION) &
			/WITH=MH_NUMBER=IC_BIN_DETAIL_STATUS(MH_NUMBER)

		IF (%STATUS=%FAILURE)
			#DETAIL_RECORD_EXISTS = #NO
			CLEAR_BUFFER IC_LOT_MAINTENANCE_DETAILS_VT
		ELSE
			#DETAIL_RECORD_EXISTS = #YES
		END_IF

	END_BLOCK

	OUTPUT_BLOCK BIN_LOCATION /ROW=1 /COL=2 &
			/SOURCE=IC_BIN_DETAIL_STATUS(BIN_LOCATION) &
			/LHEADING=FIELD_HEADING(BIN_LOCATION)

	OUTPUT_BLOCK MH_NUMBER /ROW=1 /COL=18 &
			/SOURCE=IC_BIN_DETAIL_STATUS(MH_NUMBER) &
			/RHEADING=FIELD_HEADING(MH_NUMBER) &
			/USE_IF=(#IC_MHU_TYPE<>PARAMETER("IC_MHU_NONE"))

	OUTPUT_BLOCK STATUS_CODE /ROW=1 /COL=27 &
			/SOURCE=IC_BIN_DETAIL_STATUS(IC_STATUS_CODE) &
			/LHEADING=FIELD_HEADING(IC_STATUS_CODE)

	OUTPUT_BLOCK CAPACITY_UNIT /ROW=1 /COL=36 &
			/SOURCE=(IC_BIN_DETAIL_STATUS(UNIT_OF_MEASURE)) &
			/LHEADING=MESSAGE("P_90277")

	OUTPUT_BLOCK CAPACITY_QTY /ROW=1 /COL=41 /LEN=14 &
			/SOURCE=(IC_BIN_DETAIL_STATUS(IC_QUANTITY)) &
			/OUTPUT_MASK=#IC_CAP_MASK &
			/RHEADING=MESSAGE("P_85071")

	OUTPUT_BLOCK NOT_CAPACITY_UNIT /ROW=1 /COL=56 &
			/SOURCE=(NOT_CAP:IC_BIN_DETAIL_STATUS(UNIT_OF_MEASURE)) &
			/LHEADING=MESSAGE("P_90277")

	OUTPUT_BLOCK NOT_CAPACITY_QTY /ROW=1 /COL=61 /LEN=14 &
			/SOURCE=(NOT_CAP:IC_BIN_DETAIL_STATUS(IC_QUANTITY)) &
			/OUTPUT_MASK=#IC_NOT_CAP_MASK &
			/RHEADING=MESSAGE("P_85071")

	BEGIN_BLOCK INPUT_CHANGE_PACKED

		OUTPUT_BLOCK /ROW=2 /COL=56 &
			/SOURCE=(NOT_CAP:IC_BIN_DETAIL_STATUS(UNIT_OF_MEASURE)) &
			/PROMPT=MESSAGE("P_90925") &
			/USE_IF=(#IC_PACKAGED_PRODUCT=#YES)

		IF (#IC_PACKAGED_PRODUCT = #YES)
			IC_LOT_MAINTENANCE_DETAILS_VT(IC_STATUS_CODE)  = NOT_CAP:IC_BIN_DETAIL_STATUS(IC_STATUS_CODE)
			IC_LOT_MAINTENANCE_DETAILS_VT(UNIT_OF_MEASURE) = NOT_CAP:IC_BIN_DETAIL_STATUS(UNIT_OF_MEASURE)
			IC_LOT_MAINTENANCE_DETAILS_VT(BIN_LOCATION)    = NOT_CAP:IC_BIN_DETAIL_STATUS(BIN_LOCATION)
			IC_LOT_MAINTENANCE_DETAILS_VT(MH_NUMBER)       = NOT_CAP:IC_BIN_DETAIL_STATUS(MH_NUMBER)
		END_IF

		INPUT_BLOCK /ROW=2 /COL=61 /LEN=14 &
			/TARGET=IC_LOT_MAINTENANCE_DETAILS_VT(IC_QUANTITY_NEW) &
			/INPUT_MASK=#IC_NOT_CAP_MASK &
			/USING=NONEGATIVE &
			/USE_IF=(#IC_PACKAGED_PRODUCT=#YES) &
			/BACK=(PERFORM DELETE_MAINT_VT_RECORD_BIN) &
			/EXIT=(PERFORM DELETE_MAINT_VT_RECORD_BIN)

		IF (#IC_CATCHWEIGHT_TOLERANCES = #YES AND #IC_PACKAGED_PRODUCT=#YES)
			#CHANGE_QTY  = IC_LOT_MAINTENANCE_DETAILS_VT(IC_QUANTITY_NEW)
			#MAXIMUM_QTY = (#IC_CATCHWEIGHT_MAXIMUM * IC_BIN_DETAIL_STATUS(IC_QUANTITY))
			#MINIMUM_QTY = (#IC_CATCHWEIGHT_MINIMUM * IC_BIN_DETAIL_STATUS(IC_QUANTITY))

			IF (#CHANGE_QTY > #MAXIMUM_QTY)
				MESSAGE/IDENTIFIER/BELL/WAIT P_90462
				GOTO INPUT_CHANGE_PACKED
			ELSE_IF (#CHANGE_QTY < #MINIMUM_QTY)
				MESSAGE/IDENTIFIER/BELL/WAIT P_90463
				GOTO INPUT_CHANGE_PACKED
			END_IF
		END_IF

		IF (#IC_PACKAGED_PRODUCT = #YES)
			IC_LOT_MAINTENANCE_DETAILS_VT(IC_QUANTITY_EXISTING) = NOT_CAP:IC_BIN_DETAIL_STATUS(IC_QUANTITY)

			ADD TO IC_LOT_MAINTENANCE_DETAILS_VT

			IF (%STATUS=%FAILURE)
				MESSAGE/IDENTIFIER/BELL/WAIT P_90913
				EXIT(%FAILURE)
			END_IF
		END_IF

	END_BLOCK

	BEGIN_BLOCK INPUT_CHANGE_NOT_PACKED_UNIT

		INPUT_BLOCK /ROW=2 /COL=56 &
			/TARGET=IC_LOT_MAINTENANCE_DETAILS_VT(UNIT_OF_MEASURE) &
			/PROMPT=MESSAGE("P_90926") &
			/USE_IF=(#IC_PACKAGED_PRODUCT=#NO) &
			/BACK=(PERFORM DELETE_MAINT_VT_RECORD_BIN) &
			/EXIT=(PERFORM DELETE_MAINT_VT_RECORD_BIN)

		IF (#IC_PACKAGED_PRODUCT = #NO AND &
			IC_LOT_MAINTENANCE_DETAILS_VT(UNIT_OF_MEASURE) <> #IC_UNIT_CAPACITY AND &
			IC_LOT_MAINTENANCE_DETAILS_VT(UNIT_OF_MEASURE) <> #IC_UNIT_NOT_CAPACITY)

			MESSAGE/IDENTIFIER/BELL/WAIT P_90912,#IC_UNIT_CAPACITY,#IC_UNIT_NOT_CAPACITY

			GOTO INPUT_CHANGE_PACKED

		END_IF

	END_BLOCK

	BEGIN_BLOCK INPUT_CHANGE_NOT_PACKED_QTY

		INPUT_BLOCK /ROW=2 /COL=61 /LEN=14 &
			/TARGET=IC_LOT_MAINTENANCE_DETAILS_VT(IC_QUANTITY_NEW) &
			/INPUT_MASK=#IC_NOT_CAP_MASK &
			/USING=NONEGATIVE &
			/USE_IF=(#IC_PACKAGED_PRODUCT=#NO AND &
			IC_LOT_MAINTENANCE_DETAILS_VT(UNIT_OF_MEASURE)=#IC_UNIT_NOT_CAPACITY) &
			/BACK=(PERFORM DELETE_MAINT_VT_RECORD_BIN) &
			/EXIT=(PERFORM DELETE_MAINT_VT_RECORD_BIN)

		INPUT_BLOCK /ROW=2 /COL=61 /LEN=14 &
			/TARGET=IC_LOT_MAINTENANCE_DETAILS_VT(IC_QUANTITY_NEW) &
			/INPUT_MASK=#IC_CAP_MASK &
			/USING=NONEGATIVE &
			/USE_IF=(#IC_PACKAGED_PRODUCT=#NO AND &
			IC_LOT_MAINTENANCE_DETAILS_VT(UNIT_OF_MEASURE)=#IC_UNIT_CAPACITY) &
			/BACK=(PERFORM DELETE_MAINT_VT_RECORD_BIN) &
			/EXIT=(PERFORM DELETE_MAINT_VT_RECORD_BIN)

		IF (#IC_CATCHWEIGHT_TOLERANCES = #YES AND #IC_PACKAGED_PRODUCT=#NO)
			#CHANGE_QTY  = IC_LOT_MAINTENANCE_DETAILS_VT(IC_QUANTITY_NEW)
			#CHANGE_UNIT = IC_LOT_MAINTENANCE_DETAILS_VT(UNIT_OF_MEASURE)

			IF (#CHANGE_UNIT=#IC_UNIT_NOT_CAPACITY)
				#MAXIMUM_QTY = (#IC_CATCHWEIGHT_MAXIMUM * IC_BIN_DETAIL_STATUS(IC_QUANTITY))
				#MINIMUM_QTY = (#IC_CATCHWEIGHT_MINIMUM * IC_BIN_DETAIL_STATUS(IC_QUANTITY))
			ELSE
				#MAXIMUM_QTY = ((1 / #IC_CATCHWEIGHT_MINIMUM) * NOT_CAP:IC_BIN_DETAIL_STATUS(IC_QUANTITY))
				#MINIMUM_QTY = ((1 / #IC_CATCHWEIGHT_MAXIMUM) * NOT_CAP:IC_BIN_DETAIL_STATUS(IC_QUANTITY))
			END_IF

			IF (#CHANGE_QTY > #MAXIMUM_QTY)
				MESSAGE/IDENTIFIER/BELL/WAIT P_90462
				GOTO INPUT_CHANGE_NOT_PACKED_QTY
			ELSE_IF (#CHANGE_QTY < #MINIMUM_QTY)
				MESSAGE/IDENTIFIER/BELL/WAIT P_90463
				GOTO INPUT_CHANGE_NOT_PACKED_QTY
			END_IF
		END_IF

		IF (#IC_PACKAGED_PRODUCT = #NO)
			IC_LOT_MAINTENANCE_DETAILS_VT(IC_STATUS_CODE) = NOT_CAP:IC_BIN_DETAIL_STATUS(IC_STATUS_CODE)
			IC_LOT_MAINTENANCE_DETAILS_VT(BIN_LOCATION) = NOT_CAP:IC_BIN_DETAIL_STATUS(BIN_LOCATION)
			IC_LOT_MAINTENANCE_DETAILS_VT(MH_NUMBER) = NOT_CAP:IC_BIN_DETAIL_STATUS(MH_NUMBER)

			IF (IC_LOT_MAINTENANCE_DETAILS_VT(UNIT_OF_MEASURE) = #IC_UNIT_CAPACITY)
				IC_LOT_MAINTENANCE_DETAILS_VT(IC_QUANTITY_EXISTING) = IC_BIN_DETAIL_STATUS(IC_QUANTITY)
			ELSE
				IC_LOT_MAINTENANCE_DETAILS_VT(IC_QUANTITY_EXISTING) = NOT_CAP:IC_BIN_DETAIL_STATUS(IC_QUANTITY)
			END_IF

			IF (#DETAIL_RECORD_EXISTS = #NO)
				ADD TO IC_LOT_MAINTENANCE_DETAILS_VT

				IF (%STATUS=%FAILURE)
					MESSAGE/IDENTIFIER/BELL/WAIT P_90913
					EXIT(%FAILURE)
				END_IF
			END_IF
		END_IF

	END_BLOCK

	BEGIN_BLOCK INCREASE_OR_DECREASE

		IF (IC_LOT_MAINTENANCE_DETAILS_VT(IC_QUANTITY_NEW) > IC_LOT_MAINTENANCE_DETAILS_VT(IC_QUANTITY_EXISTING))
			IC_LOT_MAINTENANCE_DETAILS_VT(IC_UPDATE_PURPOSE) = #IC_INCREASE
		ELSE
			IC_LOT_MAINTENANCE_DETAILS_VT(IC_UPDATE_PURPOSE) = #IC_DECREASE
		END_IF

	END_BLOCK

END_FORM

PROCEDURE_FORM DELETE_MAINT_VT_RECORD_BIN

	BEGIN_BLOCK DELETE

		START_TRANSACTION

		FIND IN IC_LOT_MAINTENANCE_DETAILS_VT &
			/WITH=IC_STATUS_CODE=IC_BIN_DETAIL_STATUS(IC_STATUS_CODE)  &
			/WITH=BIN_LOCATION=IC_BIN_DETAIL_STATUS(BIN_LOCATION)  &
			/WITH=MH_NUMBER=IC_BIN_DETAIL_STATUS(MH_NUMBER)

		IF (%STATUS=%SUCCESS)
			DELETE FROM IC_LOT_MAINTENANCE_DETAILS_VT
		END_IF

		COMMIT

	END_BLOCK

END_FORM


PROCEDURE_FORM CHECK_FOR_CHANGES_QTYS &
	/TABLE=IC_LOT_MAINTENANCE_DETAILS_VT &

	BEGIN_BLOCK CHECK

		IF (IC_LOT_MAINTENANCE_DETAILS_VT(IC_QUANTITY_EXISTING) <> &
			IC_LOT_MAINTENANCE_DETAILS_VT(IC_QUANTITY_NEW))

			#IC_UPDATE_LOT_QTYS = #YES
		ELSE
			DELETE FROM IC_LOT_MAINTENANCE_DETAILS_VT
		END_IF

	END_BLOCK

END_FORM


PROCEDURE_FORM LOT_UPDATE

	BEGIN_BLOCK CHECK_IF_UPDATE_REQUIRED

		IC_LOT_MAINTENANCE_VT(BEST_BEFORE_DATE_NEW) = #BEST_BEFORE_DATE_NEW
		IC_LOT_MAINTENANCE_VT(BATCH_DATE_NEW)       = #BATCH_DATE_NEW

		IF (IC_LOT_MAINTENANCE_VT(IC_UPDATE_LOT_DATES) <> #YES AND &
		    IC_LOT_MAINTENANCE_VT(IC_UPDATE_LOT_CHARS) <> #YES AND &
		    IC_LOT_MAINTENANCE_VT(IC_UPDATE_LOT_QTYS) <> #YES)

			MESSAGE/IDENTIFIER/BELL/WAIT P_90915
			GOTO END
		END_IF

	END_BLOCK

	BEGIN_BLOCK GET_TRANSACTION_NUMBER

		PERFORM GET_NEW_NBR

		IF (%STATUS=%FAILURE)
			EXIT(%FAILURE)
		END_IF

		IF (%STATUS = %BACK)
			EXIT (%BACK)
		END_IF

		PERFORM PRINT_TRANSACTION_NUMBER

	END_BLOCK

	BEGIN_BLOCK PERFORM_UPDATE

		! Updating, Please Wait...
		MESSAGE/IDENTIFIER/BELL P_00743

		#SERVICE_REQUEST = PARAMETER("IC_E_LOT_MAINTENANCE")

		PERFORM "GEMLB:LB_C_IC_ENGINE_CONTROLLER" ( &
					#SERVICE_REQUEST, &
					#R_SUCCESS_STATUS, &
					#R_MESSAGE)

		IF (%STATUS=%FAILURE)
			IF (#R_SUCCESS_STATUS=#FAILURE)
				ERROR/BELL/WAIT/TEXT_ONLY #R_MESSAGE
			ELSE
				MESSAGE/IDENTIFIER/BELL/WAIT P_90916
			END_IF
			EXIT(%FAILURE)
		END_IF

	END_BLOCK

	BEGIN_BLOCK END

		PERFORM EMPTY_CHARS_XMIT_VT
		PERFORM EMPTY_IC_LOT_MAINT_DETAILS_VT

	END_BLOCK

END_FORM


PROCEDURE_FORM SETUP_LOT_MAINT_VTS

	BEGIN_BLOCK DELETE_EXISTING

		START_TRANSACTION

		PERFORM EMPTY_CHARS_XMIT_VT

		IF (%STATUS=%FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_90918
			ROLLBACK
			EXIT(%FAILURE)
		END_IF

		PERFORM EMPTY_IC_LOT_MAINTENANCE_VT

		IF (%STATUS=%FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_90919
			ROLLBACK
			EXIT(%FAILURE)
		END_IF

		PERFORM EMPTY_IC_LOT_MAINT_DETAILS_VT

		IF (%STATUS=%FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_90920
			ROLLBACK
			EXIT(%FAILURE)
		END_IF

		PERFORM EMPTY_IC_LOT_MOVEMENT_DATE_VT

		IF (%STATUS=%FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_90920
			ROLLBACK
			EXIT(%FAILURE)
		END_IF

	END_BLOCK

	BEGIN_BLOCK INIT_LOT_MAINT_VT

		FIND IN IC_LOT_MAINTENANCE_VT
	
		IF (%STATUS = %SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_90901
			ROLLBACK
			EXIT(%FAILURE)
		END_IF

		CLEAR_BUFFER IC_LOT_MAINTENANCE_VT

		IC_LOT_MAINTENANCE_VT(COMPANY_CODE)                  = #COMPANY_CODE
		IC_LOT_MAINTENANCE_VT(WAREHOUSE)                     = PART_BATCHES(WAREHOUSE)
		IC_LOT_MAINTENANCE_VT(PART_CODE)                     = PART_BATCHES(PART_CODE)
		IC_LOT_MAINTENANCE_VT(IC_LOT_NUMBER)                 = PART_BATCHES(IC_LOT_NUMBER)
		IC_LOT_MAINTENANCE_VT(IC_LOT_SEQUENCE)               = ""
		IC_LOT_MAINTENANCE_VT(BATCH_DATE_EXISTING)           = PART_BATCHES(BATCH_DATE)
		IC_LOT_MAINTENANCE_VT(BEST_BEFORE_DATE_EXISTING)     = PART_BATCHES(BEST_BEFORE_DATE)
		IC_LOT_MAINTENANCE_VT(RELEASE_DATE_EXISTING)         = PART_BATCHES(RELEASE_DATE)
		IC_LOT_MAINTENANCE_VT(IC_VENDOR_LOT_NUMBER_EXISTING) = PART_BATCHES(IC_VENDOR_LOT_NUMBER)
		IC_LOT_MAINTENANCE_VT(IC_RETEST_DATE_EXISTING)       = PART_BATCHES(IC_RETEST_DATE)
		IC_LOT_MAINTENANCE_VT(BATCH_DATE_NEW)                = PART_BATCHES(BATCH_DATE)
		IC_LOT_MAINTENANCE_VT(BEST_BEFORE_DATE_NEW)          = PART_BATCHES(BEST_BEFORE_DATE)
		IC_LOT_MAINTENANCE_VT(RELEASE_DATE_NEW)              = PART_BATCHES(RELEASE_DATE)
		IC_LOT_MAINTENANCE_VT(IC_VENDOR_LOT_NUMBER_NEW)      = PART_BATCHES(IC_VENDOR_LOT_NUMBER)
		IC_LOT_MAINTENANCE_VT(IC_RETEST_DATE_NEW)            = PART_BATCHES(IC_RETEST_DATE)
		IC_LOT_MAINTENANCE_VT(IC_UPDATE_LOT_DATES)           = #NO
		IC_LOT_MAINTENANCE_VT(IC_UPDATE_LOT_CHARS)           = #NO
		IC_LOT_MAINTENANCE_VT(IC_UPDATE_LOT_QTYS)            = #NO
		IC_LOT_MAINTENANCE_VT(DOC_REFERENCE)                 = ""

		ADD TO IC_LOT_MAINTENANCE_VT

		IF (%STATUS=%FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_90911
			ROLLBACK
			EXIT(%FAILURE)
		END_IF

		CLEAR_BUFFER IC_LOT_MOVEMENT_DATE_VT

		IC_LOT_MOVEMENT_DATE_VT(COMPANY_CODE)    = #COMPANY_CODE
		IC_LOT_MOVEMENT_DATE_VT(WAREHOUSE)       = PART_BATCHES(WAREHOUSE)
		IC_LOT_MOVEMENT_DATE_VT(PART_CODE)       = PART_BATCHES(PART_CODE)
		IC_LOT_MOVEMENT_DATE_VT(IC_LOT_NUMBER)   = PART_BATCHES(IC_LOT_NUMBER)
		IC_LOT_MOVEMENT_DATE_VT(IC_LOT_SEQUENCE) = ""

		IF (#LEGAL_POSTING_CODE <> #JFL_JAPAN_LEGAL_POSTING)
			IC_LOT_MOVEMENT_DATE_VT(MOVEMENT_DATE) = #MOVEMENT_DATE
		END_IF

		ADD TO IC_LOT_MOVEMENT_DATE_VT

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_90911
			ROLLBACK
			EXIT(%FAILURE)
		END_IF

		COMMIT

	END_BLOCK

END_FORM


PROCEDURE_FORM EMPTY_CHARS_XMIT_VT &
	/TABLE=IC_CHARS_XMIT_VT

	BEGIN_BLOCK DELETE_RECORD

		DELETE FROM IC_CHARS_XMIT_VT

	END_BLOCK

END_FORM


PROCEDURE_FORM EMPTY_IC_LOT_MAINTENANCE_VT &
	/TABLE=IC_LOT_MAINTENANCE_VT

	BEGIN_BLOCK DELETE_RECORD

		DELETE FROM IC_LOT_MAINTENANCE_VT

	END_BLOCK

END_FORM


PROCEDURE_FORM EMPTY_IC_LOT_MAINT_DETAILS_VT &
	/TABLE=IC_LOT_MAINTENANCE_DETAILS_VT

	BEGIN_BLOCK DELETE_RECORD

		DELETE FROM IC_LOT_MAINTENANCE_DETAILS_VT

	END_BLOCK

END_FORM


PROCEDURE_FORM GET_NEW_NBR

	BEGIN_BLOCK AUTO_NUMBER
		START_TRANSACTION

		FIND IN IC_TRANSACTION_TYPES &
			/LOCK=WRITE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=WAREHOUSE=PARAMETER("ALL_WAREHOUSES") &
			/WITH=TRANSACTION_TYPE=PARAMETER("TTYPE_LM")

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_90921
			EXIT(%FAILURE)
		END_IF

		IF (IC_TRANSACTION_TYPES(MANUAL_NUMBER) = #NO)
			IC_TRANSACTION_TYPES(MANUAL_NUMBER) = #NO

			#DOC_REFERENCE = IC_TRANSACTION_TYPES(TRANSACTION_NUMBER)

			IC_TRANSACTION_TYPES(TRANSACTION_NUMBER) = IC_TRANSACTION_TYPES(TRANSACTION_NUMBER) + 1

			PERFORM VALIDATE_NBR
				IF (%STATUS=%FAILURE)
				EXIT(%FAILURE)
			END_IF

	END_BLOCK

	BEGIN_BLOCK MANUAL_NUMBER

		ELSE
			PERFORM MANUAL_NUMBER

			IF (%STATUS = %BACK OR %STATUS = %EXIT)
				EXIT(%STATUS)
			END_IF

			PERFORM VALIDATE_NBR

			IF (%STATUS = %FAILURE)
				GOTO MANUAL_NUMBER
			END_IF
		END_IF
		
		COMMIT
	END_BLOCK

	BEGIN_BLOCK END

		FIND IN IC_LOT_MAINTENANCE_VT

		IF (%STATUS = %FAILURE)
			MESSAGE/IDENTIFIER/BELL/WAIT P_90901
			EXIT(%FAILURE)
		END_IF

		IC_LOT_MAINTENANCE_VT(DOC_REFERENCE) = #DOC_REFERENCE

	END_BLOCK

END_FORM


FORM MANUAL_NUMBER /ROW=14 /COL=22 /HEIGHT=5 /WIDTH=50 &
	/TITLE=(MESSAGE("P_91070"))

	BEGIN_BLOCK DOC_REFERENCE

		#DOC_REFERENCE = 0

		INPUT_BLOCK  /ROW=3 /COL=38 &
			/PROMPT=(MESSAGE("P_91070")) &
			/TARGET=#DOC_REFERENCE &
			/USING=IC_MOVEMENTS(DOCUMENT_NUMBER),REQUIRED &
			/LOV=IC_LOT_AUDIT(COMPANY_CODE,DOC_REFERENCE,WAREHOUSE) &
			/BACK=(EXIT (%BACK)) &
			/EXIT=(EXIT (%BACK))

		FIND IN IC_LOT_AUDIT &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DOC_REFERENCE=#DOC_REFERENCE

		IF (%STATUS=%SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_00703,#DOC_REFERENCE
			GOTO DOC_REFERENCE
		END_IF

	END_BLOCK

END_FORM


PROCEDURE_FORM VALIDATE_NBR

	BEGIN_BLOCK CHECK_NUMBER

		FIND IN IC_LOT_AUDIT &
			/LOCK=NONE &
			/WITH=COMPANY_CODE=#COMPANY_CODE &
			/WITH=DOC_REFERENCE=#DOC_REFERENCE

		IF (%STATUS = %SUCCESS)
			MESSAGE/IDENTIFIER/BELL/WAIT P_90922,#DOC_REFERENCE
			EXIT(%FAILURE)
		END_IF

	END_BLOCK

END_FORM


FORM PRINT_TRANSACTION_NUMBER /ROW=3 /COL=2 /HEIGHT=4 /WIDTH=78 &
	/ATTRIBUTES=NOBORDER &
	/REMAIN

	OUTPUT_BLOCK DOC_REFERENCE /ROW=2 /COL=52 &
			/PROMPT=(FIELD_PROMPT(DOC_REFERENCE)) &
			/SOURCE=(#DOC_REFERENCE)

END_FORM


FORM EXIT_REQUEST /ROW=18 /COL=33 /HEIGHT=3 /WIDTH=39 &
                /ATTRIBUTES=NOBORDER

	BEGIN_BLOCK EXIT

		IF (IC_LOT_MAINTENANCE_VT(IC_UPDATE_LOT_DATES) = #YES OR &
			IC_LOT_MAINTENANCE_VT(IC_UPDATE_LOT_CHARS) = #YES OR &
			IC_LOT_MAINTENANCE_VT(IC_UPDATE_LOT_QTYS) = #YES)

			YESNO_BLOCK /ROW=2 /COL=36 &
				/PROMPT=MESSAGE("P_90950") &
				/BACK=(EXIT(%BACK)) &
				/EXIT=(EXIT(%BACK)) &
				/FAILURE=(EXIT(%BACK))
		END_IF

		PERFORM EMPTY_CHARS_XMIT_VT
		PERFORM EMPTY_IC_LOT_MAINTENANCE_VT
		PERFORM EMPTY_IC_LOT_MAINT_DETAILS_VT

	END_BLOCK

END_FORM


PROCEDURE_FORM CREATE_VT

	BEGIN_BLOCK CREATE

		SET/LOCAL DATAFILE FIN

		#A = TABLE_CHECK("IC_LOT_MOVEMENT_DATE_VT","")

		IF(#A = %NORMAL)
			DELETE TABLE IC_LOT_MOVEMENT_DATE_VT
		END_IF

		ADD TABLE IC_LOT_MOVEMENT_DATE_VT &
			/VIRTUAL &
			/DESCRIPTION = "IC Lot Movement Date" &
			/ADD_FIELD = COMPANY_CODE &
			/ADD_FIELD = WAREHOUSE &
			/ADD_FIELD = PART_CODE &
			/ADD_FIELD = IC_LOT_NUMBER &
			/ADD_FIELD = IC_LOT_SEQUENCE &
			/ADD_FIELD = YEAR &
			/ADD_FIELD = PERIOD &
			/ADD_FIELD = MOVEMENT_DATE

	END_BLOCK

END_FORM


PROCEDURE_FORM EMPTY_IC_LOT_MOVEMENT_DATE_VT &
	/TABLE=IC_LOT_MOVEMENT_DATE_VT

	BEGIN_BLOCK DELETE_RECORD

		DELETE FROM IC_LOT_MOVEMENT_DATE_VT

	END_BLOCK

END_FORM


PROCEDURE_FORM DELETE_VT

	BEGIN_BLOCK DELETE_TABLE_VT

		#A = TABLE_CHECK("IC_LOT_MOVEMENT_DATE_VT","")

		IF(#A = %NORMAL)
			DELETE TABLE IC_LOT_MOVEMENT_DATE_VT
		END_IF

	END_BLOCK

END_FORM
